"""HTMX patterns and helpers for daisyUI components in FastHTML"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/htmx.ipynb.

# %% auto 0
__all__ = ['HTMXAttrs', 'HTMXComponent', 'htmx_attrs', 'loading_indicator', 'oob_alert']

# %% ../../nbs/core/htmx.ipynb 2
from typing import Dict, Any, Optional, List, Union, Literal, Callable
from dataclasses import dataclass, field
from enum import Enum
from fasthtml.common import *
from cjm_fasthtml_daisyui.core.types import (
    # Enums
    HTMXTrigger,
    HTMXSwap,
    SemanticColor,
    DaisyComponentType,
    # Utility functions
    ensure_dict
)
from .base import ValidatedDaisyComponent, DaisyComponent

# %% ../../nbs/core/htmx.ipynb 4
@dataclass
class HTMXAttrs:
    """Container for HTMX attributes with type-safe values."""
    hx_get: Optional[str] = None
    hx_post: Optional[str] = None
    hx_put: Optional[str] = None
    hx_patch: Optional[str] = None
    hx_delete: Optional[str] = None
    hx_trigger: Optional[str] = None
    hx_target: Optional[str] = None
    hx_swap: Optional[str] = None
    hx_indicator: Optional[str] = None
    hx_push_url: Optional[Union[bool, str]] = None
    hx_select: Optional[str] = None
    hx_select_oob: Optional[str] = None
    hx_vals: Optional[Union[str, bool, Dict[str, Any]]] = None
    hx_confirm: Optional[str] = None
    hx_disable: Optional[bool] = None
    hx_disabled_elt: Optional[str] = None
    hx_include: Optional[str] = None
    hx_ext: Optional[str] = None
    
    def to_dict(
        self
    ) -> Dict[str, Any]:  # Dictionary of HTML attributes with HTMX prefixes
        """Convert to dictionary of HTML attributes."""
        attrs: Dict[str, Any] = {}
        for key, value in self.__dict__.items():
            if value is not None:
                # Convert Python snake_case to HTMX hyphenated attributes
                attr_name = key.replace('_', '-')
                
                # Handle boolean attributes
                if isinstance(value, bool):
                    attrs[attr_name] = str(value).lower()
                # Handle dictionary values (for hx-vals)
                elif isinstance(value, dict):
                    import json
                    attrs[attr_name] = json.dumps(value)
                else:
                    attrs[attr_name] = value
        
        return attrs

# %% ../../nbs/core/htmx.ipynb 6
class HTMXComponent(ValidatedDaisyComponent):
    """Base class for HTMX-aware daisyUI components.
    
    Extends ValidatedDaisyComponent with HTMX attributes and helper methods
    for building interactive components following FastHTML patterns.
    """
    
    def __init__(self, *args, htmx: Optional[HTMXAttrs] = None, **kwargs):
        """Initialize with optional HTMX attributes."""
        super().__init__(*args, **kwargs)
        self.htmx = htmx or HTMXAttrs()
    
    def with_htmx(
        self,
        get: Optional[str] = None,  # URL endpoint for GET request
        post: Optional[str] = None,  # URL endpoint for POST request
        put: Optional[str] = None,  # URL endpoint for PUT request
        patch: Optional[str] = None,  # URL endpoint for PATCH request
        delete: Optional[str] = None,  # URL endpoint for DELETE request
        trigger: Optional[Union[HTMXTrigger, str]] = None,
        target: Optional[str] = None,  # CSS selector for element to update
        swap: Optional[Union[HTMXSwap, str]] = None,
        **kwargs
    ) -> 'HTMXComponent':  # Self for method chaining
        """Configure HTMX attributes fluently."""
        if get:
            self.htmx.hx_get = get
        if post:
            self.htmx.hx_post = post
        if put:
            self.htmx.hx_put = put
        if patch:
            self.htmx.hx_patch = patch
        if delete:
            self.htmx.hx_delete = delete
        
        if trigger:
            self.htmx.hx_trigger = trigger.value if isinstance(trigger, HTMXTrigger) else trigger
        if target:
            self.htmx.hx_target = target
        if swap:
            self.htmx.hx_swap = swap.value if isinstance(swap, HTMXSwap) else swap
        
        # Handle additional kwargs
        for key, value in kwargs.items():
            if hasattr(self.htmx, f"hx_{key}"):
                setattr(self.htmx, f"hx_{key}", value)
        
        return self
    
    def with_loading(
        self,
        indicator_id: str,  # ID of the loading indicator element to show during request
        disable_during: Optional[str] = None  # CSS selector of elements to disable during request
    ) -> 'HTMXComponent':  # Self for method chaining
        """Configure loading indicators."""
        self.htmx.hx_indicator = f"#{indicator_id}"
        if disable_during:
            self.htmx.hx_disabled_elt = disable_during
        return self
    
    def with_confirmation(
        self,
        message: str  # Confirmation message to display before request
    ) -> 'HTMXComponent':  # Self for method chaining
        """Add confirmation dialog."""
        self.htmx.hx_confirm = message
        return self
    
    def render_attrs(
        self
    ) -> Dict[str, Any]:  # Combined dictionary of all HTML and HTMX attributes
        """Build all HTML attributes including HTMX."""
        attrs = super().render_attrs()
        
        # Add HTMX attributes
        htmx_attrs = self.htmx.to_dict()
        attrs.update(htmx_attrs)
        
        return attrs

# %% ../../nbs/core/htmx.ipynb 8
def htmx_attrs(
    **kwargs
) -> Dict[str, Any]:  # Dictionary with proper HTMX attribute names
    """Convert keyword arguments to HTMX attributes."""
    attrs: Dict[str, Any] = {}
    for key, value in kwargs.items():
        # Convert to hx- prefix
        if not key.startswith('hx_'):
            key = f'hx_{key}'
        
        # Convert underscores to hyphens
        attr_name = key.replace('_', '-')
        
        # Handle special conversions
        if isinstance(value, HTMXTrigger):
            value = value.value
        elif isinstance(value, HTMXSwap):
            value = value.value
        elif isinstance(value, bool):
            value = str(value).lower()
        elif isinstance(value, dict):
            import json
            value = json.dumps(value)
        
        attrs[attr_name] = value
    
    return attrs

# %% ../../nbs/core/htmx.ipynb 9
def loading_indicator(
    indicator_id: str,  # ID for the indicator element
    text: str = "Loading...",  # Text to display next to spinner
    size: str = "md"  # Size of spinner (xs, sm, md, lg, xl)
) -> FT:  # Loading indicator element
    """Create a loading indicator element.
    
    Creates a daisyUI loading spinner with text, initially hidden.
    Use with HTMXComponent.with_loading() to show during requests.
    """
    return Div(
        Span(cls=f"loading loading-spinner loading-{size}"),
        " ",
        text,
        id=indicator_id,
        cls="htmx-indicator"
    )

# %% ../../nbs/core/htmx.ipynb 10
def oob_alert(
    message: str,  # Alert message to display
    alert_type: str = "info",  # Type of alert (info, success, warning, error)
    target_id: str = "alerts",  # ID of container element to append alert to
    auto_dismiss: Optional[int] = 5000  # Auto dismiss after milliseconds (None to disable)
) -> FT:  # Alert element with out-of-band swap attribute
    """Create out-of-band alert message.
    
    Creates a daisyUI alert that can be swapped out-of-band into any page.
    Useful for showing feedback messages after HTMX requests.
    """
    alert_id = f"alert-{id(message)}"
    
    alert = Div(
        message,
        id=alert_id,
        cls=f"alert alert-{alert_type}",
        hx_swap_oob=f"beforeend:#{target_id}"
    )
    
    if auto_dismiss:
        alert.attrs[f"hx-trigger"] = f"load delay:{auto_dismiss}ms"
        alert.attrs["hx-swap"] = "outerHTML"
        alert.attrs["hx-target"] = f"#{alert_id}"
        alert.attrs["hx-get"] = "/empty"  # Endpoint that returns empty response
    
    return alert
