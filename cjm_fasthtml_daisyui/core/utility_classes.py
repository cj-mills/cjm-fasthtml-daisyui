"""daisyUI semantic color utility classes, border radius, and glass utility classes"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/utility_classes.ipynb.

# %% auto 0
__all__ = ['bg_dui', 'text_dui', 'border_dui', 'ring_dui', 'fill_dui', 'stroke_dui', 'caret_dui', 'accent_dui', 'shadow_dui',
           'outline_dui', 'decoration_dui', 'placeholder_dui', 'divide_dui', 'ring_offset_dui', 'from_dui', 'via_dui',
           'to_dui', 'BORDER_RADIUS_VALUES', 'border_radius', 'glass', 'test_utility_classes_semantic_colors_examples',
           'GradientStopFactoryDaisyUI', 'test_utility_classes_gradient_examples',
           'test_utility_classes_opacity_examples', 'test_utility_classes_border_radius_examples',
           'test_utility_classes_glass_examples', 'test_utility_classes_modifiers_examples',
           'test_utility_classes_fasthtml_examples', 'test_utility_classes_factory_documentation']

# %% ../../nbs/core/utility_classes.ipynb 3
from typing import Optional, Union, Dict, Any
from cjm_fasthtml_tailwind.core.base import SingleValueFactory
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory
# from cjm_fasthtml_tailwind.builders.colors import ColoredUtility
from cjm_fasthtml_tailwind.utilities.backgrounds import GradientStopUtility
from ..builders.colors import ColoredFactoryDaisyUI, SemanticColorValue, ColoredUtilityDaisyUI

# %% ../../nbs/core/utility_classes.ipynb 5
# Background color with semantic colors
bg_dui = ColoredFactoryDaisyUI("bg", "Background color utilities for controlling an element's semantic background color") # The semantic background color factory

# Text color with semantic colors  
text_dui = ColoredFactoryDaisyUI("text", "Text color utilities for controlling an element's semantic text color") # The semantic text color factory

# Border color with semantic colors
border_dui = ColoredFactoryDaisyUI("border", "Border color utilities for controlling an element's semantic border color") # The semantic border color factory

# Ring color with semantic colors
ring_dui = ColoredFactoryDaisyUI("ring", "Ring color utilities for controlling an element's semantic ring color") # The semantic ring color factory

# Fill color with semantic colors (for SVG)
fill_dui = ColoredFactoryDaisyUI("fill", "Fill color utilities for controlling SVG element's semantic fill color") # The semantic fill color factory

# Stroke color with semantic colors (for SVG)  
stroke_dui = ColoredFactoryDaisyUI("stroke", "Stroke color utilities for controlling SVG element's semantic stroke color") # The semantic stroke color factory

# Caret color with semantic colors
caret_dui = ColoredFactoryDaisyUI("caret", "Caret color utilities for controlling the caret's semantic color") # The semantic caret color factory

# Accent color with semantic colors
accent_dui = ColoredFactoryDaisyUI("accent", "Accent color utilities for controlling form accent semantic color") # The semantic accent color factory

# Shadow color with semantic colors
shadow_dui = ColoredFactoryDaisyUI("shadow", "Shadow color utilities for controlling shadow's semantic color") # The semantic shadow color factory

# Outline color with semantic colors
outline_dui = ColoredFactoryDaisyUI("outline", "Outline color utilities for controlling outline's semantic color") # The semantic outline color factory

# Text decoration color with semantic colors
decoration_dui = ColoredFactoryDaisyUI("decoration", "Text decoration color utilities for controlling decoration's semantic color") # The semantic decoration color factory

# Placeholder color with semantic colors
placeholder_dui = ColoredFactoryDaisyUI("placeholder", "Placeholder color utilities for controlling placeholder text's semantic color") # The semantic placeholder color factory

# Divide color with semantic colors
divide_dui = ColoredFactoryDaisyUI("divide", "Divide color utilities for controlling divider's semantic color") # The semantic divide color factory

# Ring offset color with semantic colors
ring_offset_dui = ColoredFactoryDaisyUI("ring-offset", "Ring offset color utilities for controlling ring offset's semantic color") # The semantic ring offset color factory

# %% ../../nbs/core/utility_classes.ipynb 7
def test_utility_classes_semantic_colors_examples():
    """Test semantic color utility classes for various CSS properties."""
    # Test background colors
    assert str(bg_dui.primary) == "bg-primary"
    assert str(bg_dui.secondary) == "bg-secondary"
    assert str(bg_dui.accent) == "bg-accent"
    assert str(bg_dui.neutral) == "bg-neutral"
    assert str(bg_dui.base_100) == "bg-base-100"
    assert str(bg_dui.base_200) == "bg-base-200"
    assert str(bg_dui.base_300) == "bg-base-300"
    assert str(bg_dui.base_content) == "bg-base-content"
    assert str(bg_dui.info) == "bg-info"
    assert str(bg_dui.success) == "bg-success"
    assert str(bg_dui.warning) == "bg-warning"
    assert str(bg_dui.error) == "bg-error"
    
    # Test text colors
    assert str(text_dui.primary) == "text-primary"
    assert str(text_dui.primary_content) == "text-primary-content"
    assert str(text_dui.secondary_content) == "text-secondary-content"
    assert str(text_dui.base_content) == "text-base-content"
    
    # Test border colors
    assert str(border_dui.primary) == "border-primary"
    assert str(border_dui.base_300) == "border-base-300"
    assert str(border_dui.error) == "border-error"
    
    # Test ring colors
    assert str(ring_dui.primary) == "ring-primary"
    assert str(ring_dui.accent) == "ring-accent"
    
    # Test fill and stroke colors (for SVG)
    assert str(fill_dui.primary) == "fill-primary"
    assert str(stroke_dui.secondary) == "stroke-secondary"
    
    # Test other color utilities
    assert str(caret_dui.primary) == "caret-primary"
    assert str(accent_dui.secondary) == "accent-secondary"
    assert str(shadow_dui.neutral) == "shadow-neutral"
    assert str(outline_dui.error) == "outline-error"
    assert str(decoration_dui.primary) == "decoration-primary"
    assert str(placeholder_dui.base_content) == "placeholder-base-content"
    assert str(divide_dui.base_300) == "divide-base-300"
    assert str(ring_offset_dui.base_100) == "ring-offset-base-100"

# Run the test
test_utility_classes_semantic_colors_examples()

# %% ../../nbs/core/utility_classes.ipynb 9
class GradientStopFactoryDaisyUI(ColoredFactoryDaisyUI):
    """Enhanced factory for gradient color stops with semantic color support."""
    
    def __init__(
        self,
        stop_type: str,  # Type of stop (from, via, to)
        doc: Optional[str] = None  # Documentation
    ):
        """Initialize gradient stop factory."""
        doc = doc or f"Gradient {stop_type} color utilities for defining the {stop_type} color of a gradient with semantic colors"
        super().__init__(stop_type, doc)
        self.stop_type = stop_type

    def __call__(
        self,
        value: Union[SemanticColorValue, str, int],  # Color, percentage, or custom value
        opacity: Optional[Union[int, str]] = None  # Optional opacity for colors
    ) -> Union[ColoredUtilityDaisyUI, GradientStopUtility]:  # Appropriate utility instance
        """Create gradient stop with color or percentage."""
        value_str = str(value)
        
        # Check if it's a percentage
        if value_str.endswith('%') or (isinstance(value, int) and 0 <= value <= 100):
            return GradientStopUtility(self.stop_type, value)
        
        # Check if it's a custom property or arbitrary value (non-color)
        if is_custom_property(value_str) or (is_arbitrary_value(value_str) and not any(c in value_str for c in ['#', 'rgb', 'hsl'])):
            return GradientStopUtility(self.stop_type, value)
        
        # Otherwise, treat as color
        return super().__call__(value, opacity)
    
    def __getattr__(
        self,
        name: str  # Attribute name
    ) -> Union[ColoredUtilityDaisyUI, GradientStopUtility]:  # Appropriate utility
        """Handle attribute access for percentages and colors."""
        # Handle percentage values (e.g., from._0, from._50, from._100)
        if name.startswith("_") and name[1:].isdigit():
            percentage = name[1:]
            return GradientStopUtility(self.stop_type, f"{percentage}%")
        
        # Otherwise, use parent's color handling
        return super().__getattr__(name)

# Create gradient stop factories with semantic color support
from_dui = GradientStopFactoryDaisyUI("from", "Gradient from color utilities for defining the starting color of a gradient with semantic colors") # Semantic gradient from color factory
via_dui = GradientStopFactoryDaisyUI("via", "Gradient via color utilities for defining the middle color of a gradient with semantic colors") # Semantic gradient via color factory
to_dui = GradientStopFactoryDaisyUI("to", "Gradient to color utilities for defining the ending color of a gradient with semantic colors") # Semantic gradient to color factory

# %% ../../nbs/core/utility_classes.ipynb 10
def test_utility_classes_gradient_examples():
    """Test gradient utilities with semantic colors."""
    # Test gradient from colors
    assert str(from_dui.primary) == "from-primary"
    assert str(from_dui.secondary) == "from-secondary"
    assert str(from_dui.base_100) == "from-base-100"
    assert str(from_dui.error) == "from-error"
    
    # Test gradient via colors
    assert str(via_dui.accent) == "via-accent"
    assert str(via_dui.neutral) == "via-neutral"
    assert str(via_dui.info) == "via-info"
    
    # Test gradient to colors
    assert str(to_dui.success) == "to-success"
    assert str(to_dui.warning) == "to-warning"
    assert str(to_dui.base_content) == "to-base-content"
    
    # Test with opacity
    assert str(from_dui.primary.opacity(50)) == "from-primary/50"
    assert str(via_dui.secondary.opacity(75)) == "via-secondary/75"
    assert str(to_dui.base_content.opacity(30)) == "to-base-content/30"

     # Test with percentages
    assert str(from_dui._0) == "from-0%"
    assert str(from_dui._50) == "from-50%"
    assert str(from_dui._100) == "from-100%"
    assert str(from_dui(25)) == "from-25%"
    assert str(from_dui("33%")) == "from-33%"
    assert str(via_dui._50) == "via-50%"
    assert str(via_dui(75)) == "via-75%"
    assert str(to_dui._100) == "to-100%"
    assert str(to_dui(90)) == "to-90%"
    
    # Test with modifiers
    assert str(from_dui.primary.hover) == "hover:from-primary"
    assert str(to_dui.error.dark) == "dark:to-error"

# Run the test
test_utility_classes_gradient_examples()

# %% ../../nbs/core/utility_classes.ipynb 11
def test_utility_classes_opacity_examples():
    """Test semantic color utilities with opacity modifiers."""
    # Test various utilities with opacity
    assert str(bg_dui.primary.opacity(50)) == "bg-primary/50"
    assert str(text_dui.base_content.opacity(70)) == "text-base-content/70"
    assert str(border_dui.error.opacity(25)) == "border-error/25"
    assert str(ring_dui.accent.opacity(90)) == "ring-accent/90"
    
    # Test gradient colors with opacity
    assert str(from_dui.primary.opacity(50)) == "from-primary/50"
    assert str(via_dui.secondary.opacity(75)) == "via-secondary/75"
    assert str(to_dui.base_content.opacity(30)) == "to-base-content/30"
    
    # Test arbitrary opacity values
    assert str(bg_dui.primary.opacity("[0.87]")) == "bg-primary/[0.87]"
    assert str(text_dui.error.opacity("(--my-opacity)")) == "text-error/(--my-opacity)"

# Run the test
test_utility_classes_opacity_examples()

# %% ../../nbs/core/utility_classes.ipynb 13
# Border radius utilities
BORDER_RADIUS_VALUES = {
    "box": "rounded-box",          # For large sized components like card, modal, alert, etc.
    "field": "rounded-field",      # For medium sized components like button, input, select, tab, etc.
    "selector": "rounded-selector" # For small sized components like checkbox, toggle, badge, etc.
}

border_radius = SimpleFactory(BORDER_RADIUS_VALUES, "Tokenized border radius values that can be customized based on theme.") # The daisyUI border radius factory

# %% ../../nbs/core/utility_classes.ipynb 14
def test_utility_classes_border_radius_examples():
    """Test daisyUI's tokenized border radius utilities."""
    # Test basic usage
    assert str(border_radius.box) == "rounded-box"
    assert str(border_radius.field) == "rounded-field"
    assert str(border_radius.selector) == "rounded-selector"
    
    # Test with modifiers
    assert str(border_radius.box.hover) == "hover:rounded-box"
    assert str(border_radius.field.md) == "md:rounded-field"
    assert str(border_radius.selector.dark) == "dark:rounded-selector"
    
    # Test chained modifiers
    assert str(border_radius.box.hover.lg) == "lg:hover:rounded-box"
    assert str(border_radius.field.dark.md) == "md:dark:rounded-field"

# Run the test
test_utility_classes_border_radius_examples()

# %% ../../nbs/core/utility_classes.ipynb 16
# Glass effect utility
glass = SingleValueFactory("glass", "Creates a glass morphism effect on the element with backdrop blur and semi-transparent background")  # Glass morphism effect

# %% ../../nbs/core/utility_classes.ipynb 17
def test_utility_classes_glass_examples():
    """Test glass morphism effect utility."""
    # Test basic usage
    assert str(glass) == "glass"
    
    # Test calling syntax
    assert str(glass()) == "glass"
    
    # Test with modifiers
    assert str(glass.hover) == "hover:glass"
    assert str(glass.lg) == "lg:glass"
    assert str(glass.dark) == "dark:glass"
    
    # Test chained modifiers
    assert str(glass.hover.md) == "md:hover:glass"
    assert str(glass.dark.hover.lg) == "lg:hover:dark:glass"
    
    # Test group and peer modifiers
    assert str(glass.group("hover")) == "group-hover:glass"
    assert str(glass.peer("checked")) == "peer-checked:glass"

# Run the test
test_utility_classes_glass_examples()

# %% ../../nbs/core/utility_classes.ipynb 18
def test_utility_classes_modifiers_examples():
    """Test semantic color utilities with Tailwind modifiers."""
    # Test hover states
    assert str(bg_dui.primary.hover) == "hover:bg-primary"
    assert str(text_dui.error.hover) == "hover:text-error"
    assert str(border_dui.base_300.hover) == "hover:border-base-300"
    
    # Test responsive modifiers
    assert str(bg_dui.secondary.md) == "md:bg-secondary"
    assert str(text_dui.primary_content.lg) == "lg:text-primary-content"
    assert str(from_dui.accent.sm) == "sm:from-accent"
    
    # Test dark mode
    assert str(bg_dui.base_100.dark) == "dark:bg-base-100"
    assert str(text_dui.base_content.dark) == "dark:text-base-content"
    
    # Test chained modifiers
    assert str(bg_dui.primary.hover.dark) == "dark:hover:bg-primary"
    assert str(text_dui.error.md.hover.dark) == "dark:hover:md:text-error"
    
    # Test border radius with modifiers
    assert str(border_radius.box.hover) == "hover:rounded-box"
    assert str(border_radius.field.md) == "md:rounded-field"
    
    # Test glass with modifiers
    assert str(glass.hover) == "hover:glass"
    assert str(glass.dark.lg) == "lg:dark:glass"

# Run the test
test_utility_classes_modifiers_examples()

# %% ../../nbs/core/utility_classes.ipynb 20
def test_utility_classes_fasthtml_examples():
    """Test practical usage patterns with FastHTML components."""
    from fasthtml.common import Div, Button, H1, P, Span
    from cjm_fasthtml_tailwind.core.base import combine_classes
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear
    
    # Create a card with semantic colors and tokenized border radius
    card = Div(
        H1("Welcome to daisyUI", cls=str(text_dui.primary)),
        P("This card uses semantic colors", cls=str(text_dui.base_content)),
        cls=combine_classes(
            bg_dui.base_100,
            border_dui.base_300,
            border_radius.box,
            "p-6 border shadow-lg"
        )
    )
    
    # Verify classes
    assert "bg-base-100" in card.attrs['class']
    assert "border-base-300" in card.attrs['class']
    assert "rounded-box" in card.attrs['class']
    assert card.children[0].attrs['class'] == "text-primary"
    
    # Create a button with semantic colors
    button = Button(
        "Click me",
        cls=combine_classes(
            bg_dui.primary,
            text_dui.primary_content,
            border_radius.field,
            "px-4 py-2"
        )
    )
    assert "bg-primary" in button.attrs['class']
    assert "text-primary-content" in button.attrs['class']
    assert "rounded-field" in button.attrs['class']
    
    # Create a glass card with dark mode support
    glass_card = Div(
        P("Glass morphism effect"),
        cls=combine_classes(
            glass,
            bg_dui.base_100.opacity(30),
            text_dui.base_content,
            border_radius.box,
            "p-6"
        )
    )
    assert "glass" in glass_card.attrs['class']
    assert "bg-base-100/30" in glass_card.attrs['class']
    
    # Create a gradient header with semantic colors
    gradient_header = Div(
        H1("Gradient Header", cls=str(text_dui.primary_content)),
        cls=combine_classes(
            bg_linear.to_r,
            from_dui.primary,
            to_dui.secondary,
            "p-8"
        )
    )
    assert "from-primary" in gradient_header.attrs['class']
    assert "to-secondary" in gradient_header.attrs['class']

# Run the test
test_utility_classes_fasthtml_examples()

# %% ../../nbs/core/utility_classes.ipynb 22
def test_utility_classes_factory_documentation():
    """Test that utility factories have proper documentation."""
    # Test semantic color factories
    assert bg_dui.describe() == "Background color utilities for controlling an element's semantic background color"
    assert text_dui.describe() == "Text color utilities for controlling an element's semantic text color"
    assert border_dui.describe() == "Border color utilities for controlling an element's semantic border color"
    assert ring_dui.describe() == "Ring color utilities for controlling an element's semantic ring color"
    assert fill_dui.describe() == "Fill color utilities for controlling SVG element's semantic fill color"
    assert stroke_dui.describe() == "Stroke color utilities for controlling SVG element's semantic stroke color"
    
    # Test gradient factories
    assert from_dui.describe() == "Gradient from color utilities for defining the starting color of a gradient with semantic colors"
    assert via_dui.describe() == "Gradient via color utilities for defining the middle color of a gradient with semantic colors"
    assert to_dui.describe() == "Gradient to color utilities for defining the ending color of a gradient with semantic colors"
    
    # Test border radius utilities
    assert border_radius.describe() == "Tokenized border radius values that can be customized based on theme."
    
    # Test glass utility
    assert glass.describe() == "Creates a glass morphism effect on the element with backdrop blur and semi-transparent background"
    
    # Test get_info method for semantic color factory
    info = bg_dui.get_info()
    assert 'semantic_colors' in info['valid_inputs']
    assert len(info['valid_inputs']['semantic_colors']) == 20
    assert info['options']['prefix'] == 'bg'
    assert info['options']['supports_opacity'] == True

# Run the test
test_utility_classes_factory_documentation()
