"""Type-safe semantic color management for daisyUI"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/colors.ipynb.

# %% auto 0
__all__ = ['DaisyUIColor', 'semantic_color', 'is_content_color', 'bg_semantic', 'text_semantic', 'border_semantic',
           'enable_semantic_gradients']

# %% ../../nbs/core/colors.ipynb 3
from enum import Enum
from typing import Union, Optional, Literal, overload
from fasthtml.common import Div
from cjm_tailwind_utils.all import TailwindBuilder

# %% ../../nbs/core/colors.ipynb 5
class DaisyUIColor(str, Enum):
    """All daisyUI semantic color names.
    
    These colors automatically adapt based on the active theme and provide
    consistent semantic meaning across your application.
    """
    # Brand colors
    PRIMARY = "primary"
    PRIMARY_CONTENT = "primary-content"
    SECONDARY = "secondary"
    SECONDARY_CONTENT = "secondary-content"
    ACCENT = "accent"
    ACCENT_CONTENT = "accent-content"
    NEUTRAL = "neutral"
    NEUTRAL_CONTENT = "neutral-content"
    
    # Base colors
    BASE_100 = "base-100"
    BASE_200 = "base-200"
    BASE_300 = "base-300"
    BASE_CONTENT = "base-content"
    
    # Semantic colors
    INFO = "info"
    INFO_CONTENT = "info-content"
    SUCCESS = "success"
    SUCCESS_CONTENT = "success-content"
    WARNING = "warning"
    WARNING_CONTENT = "warning-content"
    ERROR = "error"
    ERROR_CONTENT = "error-content"

# %% ../../nbs/core/colors.ipynb 7
def semantic_color(
    color: Union[DaisyUIColor, str],  # Color enum or string
    opacity: Optional[int] = None     # Optional opacity value (0-100)
) -> str:  # Color string with optional opacity modifier
    """Build semantic color string with optional opacity modifier.
    
    This function handles both DaisyUIColor enums and string values,
    allowing flexibility while maintaining type safety.
    
    Examples:
        semantic_color(DaisyUIColor.PRIMARY) -> "primary"
        semantic_color(DaisyUIColor.BASE_100, 50) -> "base-100/50"
        semantic_color("primary", 75) -> "primary/75"
    """
    color_str = color.value if isinstance(color, DaisyUIColor) else color
    return f"{color_str}/{opacity}" if opacity is not None else color_str

# %% ../../nbs/core/colors.ipynb 8
def is_content_color(
    color: Union[DaisyUIColor, str]  # Color to check
) -> bool:  # True if color is a content variant
    """Check if a color is a content variant (ends with -content).
    
    Content colors are designed to be used as foreground colors
    on their corresponding background colors.
    """
    color_str = color.value if isinstance(color, DaisyUIColor) else color
    return color_str.endswith("-content")

# %% ../../nbs/core/colors.ipynb 10
# Extend TailwindBuilder with semantic color methods
def bg_semantic(
    self: TailwindBuilder, 
    color: Union[DaisyUIColor, str], 
    opacity: Optional[int] = None
) -> TailwindBuilder:
    """Add semantic background color with optional opacity.
    
    Examples:
        TailwindBuilder().bg_semantic(DaisyUIColor.PRIMARY)
        TailwindBuilder().bg_semantic(DaisyUIColor.BASE_100, 50)
    """
    return self.bg(semantic_color(color, opacity), validate=False)

def text_semantic(
    self: TailwindBuilder, 
    color: Union[DaisyUIColor, str], 
    opacity: Optional[int] = None
) -> TailwindBuilder:
    """Add semantic text color with optional opacity.
    
    Examples:
        TailwindBuilder().text_semantic(DaisyUIColor.PRIMARY_CONTENT)
        TailwindBuilder().text_semantic(DaisyUIColor.BASE_CONTENT, 70)
    """
    return self.text(color=semantic_color(color, opacity))

def border_semantic(
    self: TailwindBuilder, 
    color: Union[DaisyUIColor, str], 
    opacity: Optional[int] = None
) -> TailwindBuilder:
    """Add semantic border color with optional opacity.
    
    Examples:
        TailwindBuilder().border_semantic(DaisyUIColor.PRIMARY)
        TailwindBuilder().border_semantic(DaisyUIColor.BASE_300, 50)
    """
    return self.border(style=semantic_color(color, opacity))

# Monkey-patch the methods onto TailwindBuilder
TailwindBuilder.bg_semantic = bg_semantic
TailwindBuilder.text_semantic = text_semantic
TailwindBuilder.border_semantic = border_semantic

# %% ../../nbs/core/colors.ipynb 22
def enable_semantic_gradients() -> Div:
    """Include hidden element to enable Tailwind JIT compilation of semantic color gradients.
    
    Tailwind CSS v4 browser version needs to "see" gradient patterns in the HTML
    to include them in its JIT compilation.
    
    Usage:
        Add this to your page/app to enable gradients with semantic colors:
        
        app, rt = create_test_app()
        
        @rt
        def index():
            return Div(
                enable_semantic_gradients(),  # Add this line
                # Your actual content here...
            )
    
    Note: This is only needed when using gradient utilities (bg-gradient-to-*, from-*, to-*)
    with daisyUI semantic colors. Regular color usage doesn't require this.
    """
    
    return Div(cls="hidden from-[--p] to-[--s]")
