"""Support for component animations and transitions"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/animation.ipynb.

# %% auto 0
__all__ = ['AnimationType', 'TransitionProperty', 'HasAnimation', 'LoadingAnimation', 'SwapAnimation']

# %% ../../nbs/core/animation.ipynb 3
from typing import Optional, List, Dict, Any
from enum import Enum
from cjm_tailwind_utils.all import TailwindBuilder

# %% ../../nbs/core/animation.ipynb 5
class AnimationType(str, Enum):
    """Common animation types."""
    SPIN = "spin"
    PING = "ping"
    PULSE = "pulse"
    BOUNCE = "bounce"

# %% ../../nbs/core/animation.ipynb 6
class TransitionProperty(str, Enum):
    """Transition properties."""
    ALL = "all"
    COLORS = "colors"
    OPACITY = "opacity"
    SHADOW = "shadow"
    TRANSFORM = "transform"

# %% ../../nbs/core/animation.ipynb 8
class HasAnimation:
    """Mixin for components with animation support.
    
    This provides animation and transition utilities for components.
    """
    
    # Animation properties
    animate: Optional[AnimationType] = None
    transition: Optional[TransitionProperty] = None
    duration: Optional[int] = None  # Duration in ms
    delay: Optional[int] = None  # Delay in ms
    
    def animation_classes(
        self
    ) -> List[str]:  # TODO: Add return description
        """Get animation-related classes."""
        tb = TailwindBuilder()
        
        # Add animation
        if self.animate:
            tb.animate(self.animate.value)
            
        # Add transition
        if self.transition:
            if self.transition == TransitionProperty.ALL:
                tb.add_class("transition-all")
            else:
                tb.add_class(f"transition-{self.transition.value}")
                
        # Add duration
        if self.duration is not None:
            tb.add_class(f"duration-{self.duration}")
            
        # Add delay
        if self.delay is not None:
            tb.add_class(f"delay-{self.delay}")
            
        # Build and return as list
        result = tb.build()
        return result.split() if result else []
    
    def with_animation(self, 
                      animate: Optional[AnimationType] = None,  # TODO: Add description
                      transition: Optional[TransitionProperty] = None,  # TODO: Add description
                      duration: Optional[int] = None,  # TODO: Add description
                      delay: Optional[int] = None) -> 'HasAnimation':
        """Configure animation and return self for chaining."""
        if animate is not None:
            self.animate = animate
        if transition is not None:
            self.transition = transition
        if duration is not None:
            self.duration = duration
        if delay is not None:
            self.delay = delay
        return self

# %% ../../nbs/core/animation.ipynb 10
class LoadingAnimation:
    """Animation patterns for loading states."""
    
    @staticmethod
    def spinner(
    ) -> List[str]:  # TODO: Add return description
        """Spinning loader animation."""
        return ["animate-spin"]
    
    @staticmethod
    def dots(
    ) -> List[str]:  # TODO: Add return description
        """Pulsing dots animation."""
        return ["animate-pulse"]
    
    @staticmethod
    def skeleton(
    ) -> List[str]:  # TODO: Add return description
        """Skeleton loading animation."""
        return ["animate-pulse", "bg-base-200"]

# %% ../../nbs/core/animation.ipynb 11
class SwapAnimation:
    """Animation patterns for swap components."""
    
    @staticmethod
    def rotate(
    ) -> Dict[str, Any]:  # TODO: Add return description
        """Rotation swap animation."""
        return {
            "on_classes": ["swap-rotate"],
            "off_classes": []
        }
    
    @staticmethod
    def flip(
    ) -> Dict[str, Any]:  # TODO: Add return description
        """Flip swap animation."""
        return {
            "on_classes": ["swap-flip"],
            "off_classes": []
        }
