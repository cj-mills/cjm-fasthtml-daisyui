"""Common types and type aliases for daisyUI components"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/types.ipynb.

# %% auto 0
__all__ = ['CSSClasses', 'CSSClass', 'HTMLAttrs', 'Children', 'ComponentProps', 'ResponsiveDict', 'ColorValue', 'SizeValue',
           'EventHandler', 'ComponentFactory', 'HTMXValue', 'DirectionType', 'PlacementType', 'HTTPMethod',
           'ColorSchemeType', 'BrandType', 'StateType', 'CommonSizeType', 'CSSContributor', 'FeatureSupport',
           'ComponentProtocol', 'ensure_list', 'ensure_dict']

# %% ../../nbs/core/types.ipynb 3
from typing import (
    Dict, List, Optional, Union, Any, Tuple, Set,
    Literal, Callable, Type, Protocol,
    TYPE_CHECKING
)
from dataclasses import dataclass, field
from enum import Enum
from fasthtml.common import FT

# Note: These imports are for use within this module.
# Other modules should import typing utilities directly from typing,
# and only import our custom types, protocols, and utilities from here.

# %% ../../nbs/core/types.ipynb 5
# CSS-related types
CSSClasses = List[str]
CSSClass = str
HTMLAttrs = Dict[str, Any]

# Component-related types
Children = List[FT]
ComponentProps = Dict[str, Any]
ResponsiveDict = Dict[str, str]

# Color types
ColorValue = Union[str, 'SemanticColor']  # Forward reference
SizeValue = Union[str, 'DaisySize']  # Forward reference

# Callback types
EventHandler = Callable[..., Any]
ComponentFactory = Callable[..., FT]

# HTMX types
HTMXValue = Union[str, bool, Dict[str, Any]]

# %% ../../nbs/core/types.ipynb 7
class CSSContributor(Protocol):
    """Protocol for mixins that contribute CSS classes.
    
    This standardizes the interface for all mixins that add CSS classes
    to components, replacing the various `*_classes()` methods.
    """
    
    def get_css_classes(self) -> CSSClasses:
        """Return CSS classes from this contributor.
        
        Returns:
            List of CSS class strings
        """
        ...

# %% ../../nbs/core/types.ipynb 8
class FeatureSupport(Protocol):
    """Protocol for components with feature support.
    
    This standardizes the pattern of checking what features
    a component supports (color, size, glass, etc.).
    """
    
    def get_supported_features(self) -> Dict[str, bool]:
        """Return dictionary of supported features.
        
        Returns:
            Dictionary mapping feature names to support status
            
        Example:
            {
                'color': True,
                'size': True,
                'glass': False,
                'active': True,
                'disabled': True,
                'loading': False
            }
        """
        ...

# %% ../../nbs/core/types.ipynb 9
class ComponentProtocol(Protocol):
    """Base protocol for all daisyUI components.
    
    Defines the minimum interface that all components must implement.
    """
    
    def component_class(self) -> str:
        """Return the base component class name."""
        ...
    
    def build_classes(self) -> str:
        """Build complete class string."""
        ...
    
    def render_attrs(self) -> HTMLAttrs:
        """Build all HTML attributes for rendering."""
        ...

# %% ../../nbs/core/types.ipynb 11
# Direction literals
DirectionType = Literal["horizontal", "vertical"]

# Placement literals
PlacementType = Literal["start", "center", "end", "top", "middle", "bottom", "left", "right"]

# HTTP method literals
HTTPMethod = Literal["get", "post", "put", "patch", "delete"]

# Theme color scheme
ColorSchemeType = Literal["light", "dark"]

# Brand types
BrandType = Literal["primary", "secondary", "accent", "neutral"]

# State types  
StateType = Literal["info", "success", "warning", "error"]

# Size types (commonly used)
CommonSizeType = Literal["xs", "sm", "md", "lg", "xl"]

# %% ../../nbs/core/types.ipynb 13
def ensure_list(value: Union[str, List[str]]) -> List[str]:
    """Ensure a value is a list of strings.
    
    Args:
        value: String or list of strings
        
    Returns:
        List of strings
    """
    if isinstance(value, str):
        return value.split() if ' ' in value else [value]
    return value if value else []


def ensure_dict(value: Union[str, Dict[str, Any]]) -> Dict[str, Any]:
    """Ensure a value is a dictionary.
    
    Args:
        value: String (JSON) or dictionary
        
    Returns:
        Dictionary
    """
    if isinstance(value, str):
        import json
        try:
            return json.loads(value)
        except json.JSONDecodeError:
            return {}
    return value if value else {}
