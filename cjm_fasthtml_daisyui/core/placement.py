"""Mixins for component placement and direction options"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/placement.ipynb.

# %% auto 0
__all__ = ['HasPlacement', 'HasDirection', 'HasPlacementAndDirection']

# %% ../../nbs/core/placement.ipynb 3
from typing import Optional, List, Literal, Union
from .types import CSSContributor, CSSClasses

# %% ../../nbs/core/placement.ipynb 5
class HasPlacement(CSSContributor):
    """Mixin for components with placement options.
    
    This mixin provides functionality for components that can be
    positioned in different locations (start, center, end, top, bottom, etc.).
    """
    
    placement: Optional[str] = None
    
    def get_css_classes(self) -> CSSClasses:
        """Get placement classes.
        
        Returns:
            List of CSS class strings for placement
        """
        if not self.placement:
            return []
            
        base = self.component_class()
        
        # Check if component uses standard placement pattern
        if self.uses_standard_placement():
            return [f"{base}-{self.placement}"]
        else:
            # Some components might have custom placement patterns
            return self.custom_placement_classes()
    
    def uses_standard_placement(
        self
    ) -> bool:  # TODO: Add return description
        """Whether component uses standard '{component}-{placement}' pattern."""
        return True
    
    def custom_placement_classes(
        self
    ) -> List[str]:  # TODO: Add return description
        """Override for custom placement class patterns."""
        return []
    
    def valid_placements(
        self
    ) -> List[str]:  # TODO: Add return description
        """Return list of valid placement values for this component."""
        # Subclasses should override to specify valid placements
        return ["start", "center", "end", "top", "middle", "bottom"]

# %% ../../nbs/core/placement.ipynb 7
class HasDirection(CSSContributor):
    """Mixin for components with direction options.
    
    This mixin provides functionality for components that can have
    different directional layouts (horizontal, vertical).
    """
    
    direction: Optional[Literal["horizontal", "vertical"]] = None
    
    def get_css_classes(self) -> CSSClasses:
        """Get direction classes.
        
        Returns:
            List of CSS class strings for direction
        """
        if not self.direction:
            return []
            
        base = self.component_class()
        return [f"{base}-{self.direction}"]
    
    def is_horizontal(
        self
    ) -> bool:  # TODO: Add return description
        """Check if component is horizontal."""
        return self.direction == "horizontal"
    
    def is_vertical(
        self
    ) -> bool:  # TODO: Add return description
        """Check if component is vertical."""
        return self.direction == "vertical"

# %% ../../nbs/core/placement.ipynb 9
class HasPlacementAndDirection(HasPlacement, HasDirection):
    """Combined mixin for components with both placement and direction.
    
    This is useful for components like toast, divider, etc. that
    support both placement and direction options.
    """
    
    def get_css_classes(self) -> CSSClasses:
        """Get combined placement and direction classes.
        
        Returns:
            List of CSS class strings for placement and direction
        """
        classes = []
        # Call parent classes' get_css_classes methods
        placement_classes = HasPlacement.get_css_classes(self)
        direction_classes = HasDirection.get_css_classes(self)
        classes.extend(placement_classes)
        classes.extend(direction_classes)
        return classes
