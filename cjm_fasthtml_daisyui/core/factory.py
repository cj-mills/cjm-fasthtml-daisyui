"""Factory functions for creating daisyUI components"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/factory.ipynb.

# %% auto 0
__all__ = ['create_simple_component']

# %% ../../nbs/core/factory.ipynb 3
from typing import Type, Dict, Any, Optional, Callable
from fasthtml.common import *
from cjm_tailwind_utils.core import tw
from .base import DaisyComponent

# %% ../../nbs/core/factory.ipynb 5
def create_simple_component(
    component_name: str,    # The daisyUI class name (e.g., 'badge', 'kbd')
    tag: str = "div",    # HTML tag to use (default: 'div')
    supports_color: bool = False,    # Whether component supports color modifiers
    supports_size: bool = False,    # Whether component supports size modifiers
    default_attrs: Optional[Dict[str, Any]] = None,
    class_name: Optional[str] = None    # Optional class name (defaults to PascalCase of component_name)
) -> Type[DaisyComponent]:  # A DaisyComponent subclass
    "Factory for creating simple daisyUI components. This factory creates a component class for simple daisyUI components that don't require complex logic."
    
    # Generate class name if not provided
    if not class_name:
        # Convert component-name to ComponentName
        parts = component_name.split('-')
        class_name = ''.join(part.capitalize() for part in parts)
    
    class SimpleComponent(DaisyComponent):
        "TODO: Add class description"
        def component_class(
            self
        ) -> str:  # TODO: Add return description
            "TODO: Add function description"
            return component_name
            
        def supports_color(
            self
        ) -> bool:  # TODO: Add return description
            "TODO: Add function description"
            return supports_color
            
        def supports_size(
            self
        ) -> bool:  # TODO: Add return description
            "TODO: Add function description"
            return supports_size
            
        def render(
            self,
            *children,
            **kwargs
        ): # TODO: Add type hint
            """Render the component."""
            attrs = self.render_attrs()
            attrs.update(kwargs)
            
            # Apply default attributes
            if default_attrs:
                for k, v in default_attrs.items():
                    attrs.setdefault(k, v)
            
            # Create the appropriate element
            if tag.lower() == "div":
                return Div(*children, **attrs)
            elif tag.lower() == "span":
                return Span(*children, **attrs)
            elif tag.lower() == "button":
                return Button(*children, **attrs)
            elif tag.lower() == "a":
                return A(*children, **attrs)
            elif tag.lower() == "label":
                return Label(*children, **attrs)
            elif tag.lower() == "ul":
                return Ul(*children, **attrs)
            elif tag.lower() == "li":
                return Li(*children, **attrs)
            elif tag.lower() == "section":
                return Section(*children, **attrs)
            elif tag.lower() == "article":
                return Article(*children, **attrs)
            elif tag.lower() == "nav":
                return Nav(*children, **attrs)
            elif tag.lower() == "header":
                return Header(*children, **attrs)
            elif tag.lower() == "footer":
                return Footer(*children, **attrs)
            else:
                # For other tags, use eval
                return eval(tag.title())(*children, **attrs)
    
    # Set the class name
    SimpleComponent.__name__ = class_name
    SimpleComponent.__qualname__ = class_name
    
    return SimpleComponent
