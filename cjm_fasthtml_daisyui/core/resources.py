"""Managing daisyUI and Tailwind CSS resources for FastHTML projects"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/resources.ipynb.

# %% auto 0
__all__ = ['ResourceVersions', 'DaisyUIResources', 'ResourcePresets', 'ResourceOptimization', 'ResourceManager']

# %% ../../nbs/core/resources.ipynb 2
from typing import List, Optional, Dict, Union
from enum import Enum
from dataclasses import dataclass, field
from fasthtml.common import Script, Link, Style, FT
from .types import CDNProvider

# %% ../../nbs/core/resources.ipynb 5
@dataclass
class ResourceVersions:
    """Version management for daisyUI and Tailwind CSS"""
    daisyui: str = "5"
    tailwind: str = "4"
    
    def get_daisyui_url(
        self,
        provider: CDNProvider = CDNProvider.JSDELIVR  # TODO: Add description
    ) -> str:  # TODO: Add return description
        """Get the full CDN URL for daisyUI"""
        base = provider.get_base_url()
        if provider == CDNProvider.JSDELIVR:
            return f"{base}/daisyui@{self.daisyui}"
        elif provider == CDNProvider.UNPKG:
            return f"{base}/daisyui@{self.daisyui}/dist/daisyui.css"
        else:
            # CDNJS doesn't host daisyUI, fallback to jsdelivr
            return CDNProvider.JSDELIVR.get_base_url() + f"/daisyui@{self.daisyui}"

    def get_daisyui_themes_url(
        self,
        provider: CDNProvider = CDNProvider.JSDELIVR  # TODO: Add description
    ) -> str:  # TODO: Add return description
        """Get the full CDN URL for daisyUI themes"""
        base = provider.get_base_url()
        if provider == CDNProvider.JSDELIVR:
            return f"{base}/daisyui@{self.daisyui}/themes.css"
        elif provider == CDNProvider.UNPKG:
            return f"{base}/daisyui@{self.daisyui}/dist/themes.css"
        else:
            # CDNJS doesn't host daisyUI, fallback to jsdelivr
            return CDNProvider.JSDELIVR.get_base_url() + f"/daisyui@{self.daisyui}/themes.css"
    
    def get_tailwind_url(
        self,
        provider: CDNProvider = CDNProvider.JSDELIVR  # TODO: Add description
    ) -> str:  # TODO: Add return description
        """Get the full CDN URL for Tailwind CSS browser version"""
        base = provider.get_base_url()
        if provider == CDNProvider.JSDELIVR:
            return f"{base}/@tailwindcss/browser@{self.tailwind}"
        elif provider == CDNProvider.UNPKG:
            return f"{base}/@tailwindcss/browser@{self.tailwind}/browser.js"
        else:
            # CDNJS doesn't host Tailwind v4 browser version, fallback to jsdelivr
            return CDNProvider.JSDELIVR.get_base_url() + f"/@tailwindcss/browser@{self.tailwind}"

# %% ../../nbs/core/resources.ipynb 6
class DaisyUIResources:
    """Manages daisyUI and Tailwind CSS resources for FastHTML projects"""
    
    @staticmethod
    def cdn_headers(
        versions: Optional[ResourceVersions] = None,  # TODO: Add description
        provider: CDNProvider = CDNProvider.JSDELIVR,  # TODO: Add description
        include_tailwind: bool = True,  # TODO: Add description
        additional_css: Optional[List[str]] = None,  # TODO: Add description
        additional_js: Optional[List[str]] = None  # TODO: Add description
    ) -> List[FT]:  # TODO: Add return description
        """
        CDN-based resources for quick testing and development
        
        Args:
            versions: Version configuration (defaults to latest stable)
            provider: CDN provider to use
            include_tailwind: Whether to include Tailwind CSS browser version
            additional_css: Extra CSS files to include
            additional_js: Extra JS files to include
            
        Returns:
            List of FastHTML header elements
        """
        versions = versions or ResourceVersions()
        headers = []
        
        # Add daisyUI CSS
        headers.append(
            Link(rel="stylesheet", href=versions.get_daisyui_url(provider))
        )
        headers.append(
            Link(rel="stylesheet", href=versions.get_daisyui_themes_url(provider))
        )
        
        # Add Tailwind CSS browser version
        if include_tailwind:
            headers.append(
                Script(src=versions.get_tailwind_url(provider))
            )
        
        # Add any additional CSS files
        if additional_css:
            for css_url in additional_css:
                headers.append(Link(rel="stylesheet", href=css_url))
        
        # Add any additional JS files
        if additional_js:
            for js_url in additional_js:
                headers.append(Script(src=js_url))
        
        return headers

    @staticmethod
    def local_headers(
        css_path: str = "/static/styles.css",  # TODO: Add description
        js_paths: Optional[List[str]] = None,  # TODO: Add description
        additional_css: Optional[List[str]] = None,  # TODO: Add description
        additional_js: Optional[List[str]] = None  # TODO: Add description
    ) -> List[FT]:  # TODO: Add return description
        """
        Local file-based resources for production use
        
        Args:
            css_path: Path to compiled CSS file containing Tailwind + daisyUI
            js_paths: Paths to any JavaScript files
            additional_css: Extra CSS files to include
            additional_js: Extra JS files to include
            
        Returns:
            List of FastHTML header elements
        """
        headers = []
        
        # Add main compiled CSS
        headers.append(Link(rel="stylesheet", href=css_path))
        
        # Add any JavaScript files
        if js_paths:
            for js_path in js_paths:
                headers.append(Script(src=js_path))
        
        # Add any additional CSS files
        if additional_css:
            for css_url in additional_css:
                headers.append(Link(rel="stylesheet", href=css_url))
        
        # Add any additional JS files
        if additional_js:
            for js_url in additional_js:
                headers.append(Script(src=js_url))
        
        return headers

    @staticmethod
    def inline_css(
        content: str,  # TODO: Add description
        id: Optional[str] = None  # TODO: Add description
    ) -> Style:  # TODO: Add return description
        """
        Create an inline CSS style element
        
        Args:
            content: CSS content to inline
            id: Optional ID for the style element
            
        Returns:
            FastHTML Style element
        """
        attrs = {"id": id} if id else {}
        return Style(content, **attrs)

    @staticmethod
    def minimal_css(
    ) -> str:  # TODO: Add return description
        """
        Get minimal CSS for Tailwind v4 with daisyUI plugin
        
        Returns:
            CSS string with Tailwind and daisyUI imports
        """
        return '''@import "tailwindcss";
@plugin "daisyui";'''

# %% ../../nbs/core/resources.ipynb 8
class ResourcePresets:
    """Common resource configurations"""
    
    @staticmethod
    def development(
    ) -> List[FT]:  # TODO: Add return description
        """Quick development setup with CDN resources"""
        return DaisyUIResources.cdn_headers()
    
    @staticmethod
    def production(
        css_path: str = "/static/styles.css"  # TODO: Add description
    ) -> List[FT]:  # TODO: Add return description
        """Production setup with compiled CSS"""
        return DaisyUIResources.local_headers(css_path=css_path)
    
    @staticmethod
    def testing(
    ) -> List[FT]:  # TODO: Add return description
        """Testing setup with fast CDN and no caching"""
        headers = DaisyUIResources.cdn_headers()
        # Add cache-busting meta tag
        headers.append(
            Link(rel="preload", href="https://cdn.jsdelivr.net/npm/daisyui@5", as_="style")
        )
        return headers
    
    @staticmethod
    def offline(
        css_path: str = "/static/daisyui.css",  # TODO: Add description
        tailwind_path: str = "/static/tailwind.js"  # TODO: Add description
    ) -> List[FT]:  # TODO: Add return description
        """Completely offline setup with local files"""
        return [
            Link(rel="stylesheet", href=css_path),
            Script(src=tailwind_path)
        ]

# %% ../../nbs/core/resources.ipynb 19
@dataclass
class ResourceOptimization:
    """Advanced resource optimization options"""
    preload: bool = True
    prefetch: bool = False
    async_load: bool = False
    defer: bool = False
    integrity: Optional[str] = None
    crossorigin: Optional[str] = "anonymous"
    
    def apply_to_link(
        self,
        link_attrs: Dict[str, str]  # TODO: Add description
    ) -> Dict[str, str]:  # TODO: Add return description
        """Apply optimization attributes to a link element"""
        if self.preload:
            link_attrs["rel"] = "preload"
            link_attrs["as"] = "style"
        elif self.prefetch:
            link_attrs["rel"] = "prefetch"
        
        if self.integrity:
            link_attrs["integrity"] = self.integrity
        
        if self.crossorigin:
            link_attrs["crossorigin"] = self.crossorigin
            
        return link_attrs
    
    def apply_to_script(
        self,
        script_attrs: Dict[str, str]  # TODO: Add description
    ) -> Dict[str, str]:  # TODO: Add return description
        """Apply optimization attributes to a script element"""
        if self.async_load:
            script_attrs["async"] = "true"
        elif self.defer:
            script_attrs["defer"] = "true"
        
        if self.integrity:
            script_attrs["integrity"] = self.integrity
        
        if self.crossorigin:
            script_attrs["crossorigin"] = self.crossorigin
            
        return script_attrs

# %% ../../nbs/core/resources.ipynb 20
class ResourceManager:
    """
    Advanced resource manager with caching and optimization
    """
    def __init__(self):
        "TODO: Add function description"
        self._cache: Dict[str, List[FT]] = {}
        self._optimization = ResourceOptimization()
    
    def get_optimized_headers(
        self,
        key: str = "default",  # TODO: Add description
        force_refresh: bool = False  # TODO: Add description
    ) -> List[FT]:  # TODO: Add return description
        """Get cached headers with optimization"""
        if key not in self._cache or force_refresh:
            self._cache[key] = self._build_optimized_headers()
        return self._cache[key]
    
    def _build_optimized_headers(
        self
    ) -> List[FT]:  # TODO: Add return description
        """Build optimized headers"""
        # This would be implemented based on specific needs
        return DaisyUIResources.cdn_headers()
    
    def clear_cache(
        self
    ): # TODO: Add type hint
        """Clear the resource cache"""
        self._cache.clear()
