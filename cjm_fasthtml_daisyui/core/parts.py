"""System for handling component parts (e.g., card-body, modal-box)"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/parts.ipynb.

# %% auto 0
__all__ = ['ComponentPart', 'HasParts']

# %% ../../nbs/core/parts.ipynb 3
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, field
from fasthtml.common import *
from cjm_tailwind_utils.all import TailwindBuilder

# %% ../../nbs/core/parts.ipynb 5
@dataclass
class ComponentPart:
    """Represents a part of a component (e.g., card-body, modal-box).
    
    Component parts are child elements that have specific styling
    within their parent component context.
    """
    name: str  # Part name (e.g., 'body', 'title', 'actions')
    parent_component: str  # Parent component name (e.g., 'card', 'modal')
    required: bool = False  # Whether this part is required
    tag: str = "div"  # Default HTML tag for this part
    
    def class_name(
        self
    ) -> str:  # TODO: Add return description
        """Return the full class name for this part."""
        return f"{self.parent_component}-{self.name}"

# %% ../../nbs/core/parts.ipynb 7
class HasParts:
    """Mixin for components that have child parts.
    
    This mixin provides functionality for components like cards, modals,
    and other complex components that have defined child elements.
    """
    
    @classmethod
    def parts(
        cls  # TODO: Add type hint and description
    ) -> Dict[str, ComponentPart]:  # TODO: Add return description
        """Return all available parts for this component.
        
        Subclasses should override this to define their parts.
        """
        return {}
    
    def part(
        self,
        name: str,  # TODO: Add description
        *children,
        **attrs
    ) -> Any:  # TODO: Add return description
        """Create a component part element.
        
        Args:
            name: The part name (must be defined in parts())
            *children: Child elements for this part
            **attrs: HTML attributes for the part
            
        Returns:
            FastHTML element with the appropriate part classes
        """
        parts = self.parts()
        if name not in parts:
            raise ValueError(f"Unknown part '{name}' for {self.__class__.__name__}")
            
        part = parts[name]
        
        # Extract and merge classes
        cls = attrs.pop("cls", "")
        if cls:
            # Use TailwindBuilder to merge classes
            tb = TailwindBuilder()
            tb.merge(part.class_name(), cls)
            attrs["class"] = tb.build()
        else:
            attrs["class"] = part.class_name()
        
        # Get the tag to use
        tag = attrs.pop("tag", part.tag)
        
        # Create the appropriate FastHTML element
        if tag.lower() == "div":
            return Div(*children, **attrs)
        elif tag.lower() == "span":
            return Span(*children, **attrs)
        elif tag.lower() == "section":
            return Section(*children, **attrs)
        elif tag.lower() == "figure":
            return Figure(*children, **attrs)
        elif tag.lower() == "h1":
            return H1(*children, **attrs)
        elif tag.lower() == "h2":
            return H2(*children, **attrs)
        elif tag.lower() == "h3":
            return H3(*children, **attrs)
        elif tag.lower() == "h4":
            return H4(*children, **attrs)
        elif tag.lower() == "h5":
            return H5(*children, **attrs)
        elif tag.lower() == "h6":
            return H6(*children, **attrs)
        elif tag.lower() == "p":
            return P(*children, **attrs)
        elif tag.lower() == "ul":
            return Ul(*children, **attrs)
        elif tag.lower() == "li":
            return Li(*children, **attrs)
        else:
            # For any other tag, use eval (be careful with this)
            return eval(tag.title())(*children, **attrs)
