"""Standardized test page creation for Jupyter notebooks with FastHTML"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/testing.ipynb.

# %% auto 0
__all__ = ['create_test_app', 'create_theme_selector', 'create_test_page', 'start_test_server']

# %% ../../nbs/core/testing.ipynb 3
from fasthtml.common import *
from fasthtml.jupyter import JupyUvi, HTMX
from typing import Optional, Union, List, Callable
from pathlib import Path

# Import our modules
from .resources import build_headers, get_daisyui_headers
from .themes import DaisyUITheme, get_theme_value
from .colors import DaisyUIColor, enable_semantic_gradients

# Import TailwindBuilder with recommended pattern
from cjm_tailwind_utils.all import TailwindBuilder

# %% ../../nbs/core/testing.ipynb 6
def create_test_app(
    theme: Union[DaisyUITheme, str] = DaisyUITheme.LIGHT,  # Default theme
    include_theme_selector: bool = True,  # Include theme selector in app
    custom_css: Optional[List[Union[str, Link]]] = None,  # Additional CSS
    custom_js: Optional[List[Union[str, Script]]] = None,  # Additional JS
    custom_theme_css: Optional[str] = None,  # Custom theme CSS as string
    custom_theme_paths: Optional[List[Union[str, Path]]] = None,  # List of paths to custom theme CSS files
    custom_theme_names: Optional[List[str]] = None,  # Names of custom themes to include in selector
    debug: bool = True  # Enable debug mode
) -> tuple: # Tuple containing (app, rt) - FastHTML app instance and route decorator
    """
    Create a standardized test app for Jupyter notebooks with daisyUI and Tailwind.
    """
    # Get theme value - allow custom themes when custom CSS, paths or names are provided
    theme_value = get_theme_value(theme, allow_custom=bool(custom_theme_paths or custom_theme_css or custom_theme_names))
    
    # Build headers
    headers = build_headers(
        include_themes=True,
        custom_css=custom_css,
        custom_js=custom_js,
        custom_theme_css=custom_theme_css,
        custom_theme_paths=custom_theme_paths
    )
    
    # Create app with daisyUI configuration
    app, rt = fast_app(
        pico=False,  # Disable pico since we're using daisyUI
        hdrs=headers,
        htmlkw={'data-theme': theme_value},
        debug=debug
    )
    
    # Add theme selector route if requested
    if include_theme_selector:
        @rt('/theme-selector')
        def theme_selector(
        ) -> Div: # Theme selector dropdown component
            "Route handler that returns the theme selector dropdown component"
            return create_theme_selector(custom_themes=custom_theme_names)
    
    return app, rt

# %% ../../nbs/core/testing.ipynb 8
def create_theme_selector(
    custom_themes: Optional[List[str]] = None  # Optional list of custom theme names to include
) -> Div:  # Div containing theme selector dropdown with theme-change script
    "Create a daisyUI theme selector dropdown component. Uses theme-change library to persist theme selection in localStorage."
    # Build classes using TailwindBuilder for better readability and type safety
    dropdown_classes = "dropdown dropdown-end"
    button_classes = "btn btn-ghost btn-circle"
    
    # Use TailwindBuilder for layout/spacing utilities with method chaining
    # Note: rounded-box is a daisyUI utility, kept as raw string
    dropdown_content_classes = (
        TailwindBuilder()
        .z(10)
        .p(2)
        .shadow("2xl")
        .w(52)
        .bg_semantic(DaisyUIColor.BASE_100)
        .util("dropdown-content", "rounded-box")
        .build()
    )
    
    menu_classes = "menu menu-xs menu-dropdown-toggle"
    
    # Build theme options
    theme_options = []
    
    # Add custom themes first if provided
    if custom_themes:
        for theme_name in custom_themes:
            theme_options.append(Li(
                Input(
                    type="radio",
                    name="theme-dropdown",
                    cls="theme-controller btn btn-sm btn-block btn-ghost justify-start",
                    aria_label=f"{theme_name.title()}",
                    value=theme_name
                )
            ))
            
        # Add a divider between custom and built-in themes
        if custom_themes:
            theme_options.append(Li(Div(cls="divider my-0")))
    
    # Add built-in themes
    for theme in DaisyUITheme:
        theme_options.append(Li(
            Input(
                type="radio",
                name="theme-dropdown",
                cls="theme-controller btn btn-sm btn-block btn-ghost justify-start",
                aria_label=theme.value.title(),
                value=theme.value
            )
        ))
    
    return Div(
        # Theme selector dropdown
        Div(
            Label(
                "ðŸŽ¨",
                tabindex="0",
                cls=button_classes
            ),
            Ul(
                *theme_options,
                tabindex="0",
                cls=dropdown_content_classes + " " + menu_classes
            ),
            cls=dropdown_classes
        ),
        # Theme change script
        Script(src="https://cdn.jsdelivr.net/npm/theme-change@2.0.2/index.min.js"),
        Script("document.addEventListener('DOMContentLoaded', () => themeChange());")
    )

# %% ../../nbs/core/testing.ipynb 10
def create_test_page(
    title: str,  # Page title
    *content,  # Page content elements
    include_theme_selector: bool = True,  # Include theme selector
    container: bool = True,  # Wrap in container
    custom_theme_names: Optional[List[str]] = None  # Custom themes for selector
) -> Div:  # Div containing complete page layout with navbar and content
    """
    Create a standardized test page layout with optional theme selector.
    """
    # Build navbar with proper structure using TailwindBuilder
    navbar = Div(
        # Container for navbar content with flex layout
        Div(
            # Left section (empty for now)
            Div(cls=TailwindBuilder().flex(1).build()),
            
            # Center section with title
            Div(
                H1(title, cls=TailwindBuilder().text("2xl").font("bold").build()),
                cls=TailwindBuilder().flex(None).build()
            ),
            
            # Right section with theme selector
            Div(
                create_theme_selector(custom_themes=custom_theme_names) if include_theme_selector else "",
                cls=TailwindBuilder().flex().justify("end").flex(1).build()
            ),
            cls=(
                TailwindBuilder()
                .container()
                .m("auto", "x")
                .flex()
                .items("center")
                .build()
            )
        ),
        cls=TailwindBuilder().util("navbar").bg_semantic(DaisyUIColor.BASE_100).shadow("lg").build()
    )
    
    # Build main content classes with TailwindBuilder
    main_builder = TailwindBuilder()
    if container:
        main_builder = main_builder.container().m("auto", "x")
    main_classes = main_builder.p(4, "x").p(8, "y").build()
    
    return Div(
        navbar,
        Main(
            *content,
            cls=main_classes
        )
    )

# %% ../../nbs/core/testing.ipynb 12
def start_test_server(
    app: FastHTML,    # FastHTML app instance created by create_test_app or fast_app
    port: int = 8000,  # Port
) -> JupyUvi:  # JupyUvi server instance for Jupyter notebook testing
    """
    Start a test server and return the JupyUvi instance.
    
    Usage:
        server = start_test_server(app)
        HTMX()  # Display the app
        
        # Later, in another cell:
        server.stop()
    """
    return JupyUvi(app, port=port)
