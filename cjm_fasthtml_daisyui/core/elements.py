"""HTML element creation utilities"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/elements.ipynb.

# %% auto 0
__all__ = ['create_element']

# %% ../../nbs/core/elements.ipynb 3
from typing import Any
from fasthtml.common import *

# %% ../../nbs/core/elements.ipynb 5
def create_element(
    tag: str,  # HTML tag name (e.g., 'div', 'span', 'button')
    *children,  # Child elements
    **attrs  # HTML attributes
) -> FT:  # FastHTML element
    """Create a FastHTML element from a tag name.
    
    This function provides a centralized way to create HTML elements,
    avoiding duplication across modules.
    
    Args:
        tag: The HTML tag name (case-insensitive)
        *children: Child elements to include
        **attrs: HTML attributes for the element
        
    Returns:
        A FastHTML element of the specified type
        
    Examples:
        >>> create_element('div', 'Hello', cls='container')
        >>> create_element('button', 'Click me', type='submit')
    """
    tag_lower = tag.lower()
    
    # Common HTML elements mapping
    element_map = {
        # Container elements
        'div': Div,
        'span': Span,
        'section': Section,
        'article': Article,
        'nav': Nav,
        'header': Header,
        'footer': Footer,
        'main': Main,
        'aside': Aside,
        'figure': Figure,
        'figcaption': Figcaption,
        
        # Text elements
        'p': P,
        'h1': H1,
        'h2': H2,
        'h3': H3,
        'h4': H4,
        'h5': H5,
        'h6': H6,
        'strong': Strong,
        'em': Em,
        'small': Small,
        'mark': Mark,
        'del': Del,
        'ins': Ins,
        'sub': Sub,
        'sup': Sup,
        'code': Code,
        'pre': Pre,
        'blockquote': Blockquote,
        
        # List elements
        'ul': Ul,
        'ol': Ol,
        'li': Li,
        'dl': Dl,
        'dt': Dt,
        'dd': Dd,
        
        # Form elements
        'form': Form,
        'input': Input,
        'button': Button,
        'select': Select,
        'option': Option,
        'textarea': Textarea,
        'label': Label,
        'fieldset': Fieldset,
        'legend': Legend,
        'datalist': Datalist,
        'output': Output,
        'progress': Progress,
        'meter': Meter,
        
        # Table elements
        'table': Table,
        'thead': Thead,
        'tbody': Tbody,
        'tfoot': Tfoot,
        'tr': Tr,
        'th': Th,
        'td': Td,
        'caption': Caption,
        'colgroup': Colgroup,
        'col': Col,
        
        # Media elements
        'img': Img,
        'video': Video,
        'audio': Audio,
        'source': Source,
        'track': Track,
        'embed': Embed,
        'object': Object,
        'param': Param,
        'picture': Picture,
        
        # Interactive elements
        'a': A,
        'details': Details,
        'summary': Summary,
        'dialog': Dialog,
        'menu': Menu,
        
        # Other elements
        'hr': Hr,
        'br': Br,
        'wbr': Wbr,
        'canvas': Canvas,
        'iframe': Iframe,
        'script': Script,
        'noscript': Noscript,
        'style': Style,
        'link': Link,
        'meta': Meta,
        'base': Base,
        'title': Title,
    }
    
    # Get the element constructor
    element_constructor = element_map.get(tag_lower)
    
    if element_constructor:
        return element_constructor(*children, **attrs)
    else:
        # For any tag not in the map, try to use eval as a fallback
        # This maintains backward compatibility but should be used cautiously
        try:
            element_constructor = eval(tag.title())
            return element_constructor(*children, **attrs)
        except (NameError, AttributeError):
            # If the tag doesn't exist in FastHTML, create a generic element
            # This could be useful for custom elements or future HTML tags
            raise ValueError(f"Unknown HTML tag: {tag}")
