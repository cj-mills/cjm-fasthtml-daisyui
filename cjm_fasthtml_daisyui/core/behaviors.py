"""Mixin for components with behavior states (active, disabled, loading)"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/behaviors.ipynb.

# %% auto 0
__all__ = ['HasBehaviors', 'InteractiveMixin', 'FormControlMixin']

# %% ../../nbs/core/behaviors.ipynb 3
from typing import List, Dict, Any, Optional

# %% ../../nbs/core/behaviors.ipynb 5
class HasBehaviors:
    """Mixin for components with behavior states.
    
    This mixin provides functionality for interactive components
    that can be active, disabled, loading, etc.
    """
    
    # Behavior states
    active: bool = False
    disabled: bool = False
    loading: bool = False
    open: bool = False  # For modals, dropdowns, etc.
    checked: bool = False  # For checkboxes, toggles, etc.
    
    def behavior_classes(
        self
    ) -> List[str]:  # TODO: Add return description
        """Return behavior state classes."""
        classes = []
        base = self.component_class()
        
        if self.active and self.supports_active():
            classes.append(f"{base}-active")
            
        if self.disabled and self.supports_disabled():
            classes.append(f"{base}-disabled")
            
        if self.loading and self.supports_loading():
            # Some components use a general 'loading' class
            if self.loading_uses_base_class():
                classes.append("loading")
            else:
                classes.append(f"{base}-loading")
                
        if self.open and hasattr(self, 'supports_open') and self.supports_open():
            classes.append(f"{base}-open")
            
        if self.checked and hasattr(self, 'supports_checked') and self.supports_checked():
            # Some components need the checked state as a class
            classes.append(f"{base}-checked")
            
        return classes
    
    def supports_active(
        self
    ) -> bool:  # TODO: Add return description
        """Whether this component supports active state."""
        return False
        
    def supports_disabled(
        self
    ) -> bool:  # TODO: Add return description
        """Whether this component supports disabled state."""
        return False
        
    def supports_loading(
        self
    ) -> bool:  # TODO: Add return description
        """Whether this component supports loading state."""
        return False
        
    def loading_uses_base_class(
        self
    ) -> bool:  # TODO: Add return description
        """Whether loading state uses 'loading' instead of '{component}-loading'."""
        return True
    
    def behavior_attrs(
        self
    ) -> Dict[str, Any]:  # TODO: Add return description
        """Return HTML attributes for behavior states."""
        attrs = {}
        
        if self.disabled and self.supports_disabled():
            # Add appropriate attributes based on element type
            attrs["disabled"] = True
            attrs["aria-disabled"] = "true"
            
        if self.open and hasattr(self, 'supports_open') and self.supports_open():
            # For dialog elements
            if hasattr(self, 'uses_dialog') and self.uses_dialog():
                attrs["open"] = True
                
        if self.checked and hasattr(self, 'supports_checked') and self.supports_checked():
            attrs["checked"] = True
            
        return attrs

# %% ../../nbs/core/behaviors.ipynb 7
class InteractiveMixin(HasBehaviors):
    """Extended mixin for interactive components.
    
    This combines HasBehaviors with additional interactive properties
    commonly needed for buttons, inputs, and other interactive elements.
    """
    
    # Additional interactive properties
    focus: bool = False
    hover: bool = False
    
    def interactive_classes(
        self
    ) -> List[str]:  # TODO: Add return description
        """Return all interactive state classes."""
        classes = self.behavior_classes()
        base = self.component_class()
        
        if self.focus and hasattr(self, 'supports_focus') and self.supports_focus():
            classes.append(f"{base}-focus")
            
        if self.hover and hasattr(self, 'supports_hover') and self.supports_hover():
            classes.append(f"{base}-hover")
            
        return classes

# %% ../../nbs/core/behaviors.ipynb 9
class FormControlMixin:
    """Mixin for form control components.
    
    This mixin provides common properties and methods for
    form elements like inputs, selects, textareas, etc.
    """
    
    # Form control properties
    name: Optional[str] = None
    value: Optional[str] = None
    placeholder: Optional[str] = None
    required: bool = False
    readonly: bool = False
    autofocus: bool = False
    
    def form_attrs(
        self
    ) -> Dict[str, Any]:  # TODO: Add return description
        """Return form-related HTML attributes."""
        attrs = {}
        
        if self.name:
            attrs["name"] = self.name
            
        if self.value is not None:
            attrs["value"] = self.value
            
        if self.placeholder:
            attrs["placeholder"] = self.placeholder
            
        if self.required:
            attrs["required"] = True
            
        if self.readonly:
            attrs["readonly"] = True
            
        if self.autofocus:
            attrs["autofocus"] = True
            
        return attrs
