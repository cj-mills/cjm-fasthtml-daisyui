"""CLI tool for exploring cjm-fasthtml-daisyui components and builders"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/cli/explorer.ipynb.

# %% auto 0
__all__ = ['initialize_daisyui_cli', 'main']

# %% ../../nbs/cli/explorer.ipynb 3
# Import all the CLI functionality from the installed cjm-fasthtml-tailwind package
from cjm_fasthtml_tailwind.cli.explorer import (
    display_modules, display_module_factories, display_all_factories,
    display_module_examples, display_all_examples, display_example_source,
    display_module_helpers, display_helper_source, display_all_helpers,
    display_factory_info, display_search_results, display_core_utility_source,
    display_core_utilities, display_imports, display_test_code_result,
    dispatch_command, handle_search_command, handle_test_code_command,
    handle_scan_command, setup_argument_parser
)

# Import configuration management from tailwind
from cjm_fasthtml_tailwind.cli.cli_config import set_active_config

# Import our local DaisyUI configuration
from .cli_config import get_daisyui_config

import argparse

# %% ../../nbs/cli/explorer.ipynb 5
def initialize_daisyui_cli():
    """Initialize the CLI with DaisyUI configuration."""
    config = get_daisyui_config()
    set_active_config(config)
    return config

# %% ../../nbs/cli/explorer.ipynb 7
def main():
    """CLI entry point for exploring cjm-fasthtml-daisyui components."""
    # Initialize with DaisyUI configuration
    initialize_daisyui_cli();
    
    # Set up the argument parser (will use DaisyUI config)
    parser = setup_argument_parser()

    
    
    # Update the program name and description for DaisyUI
    # parser.prog = "cjm-daisyui-explore"
    # parser.description = parser.description.replace(
    #     "cjm-fasthtml-tailwind", "cjm-fasthtml-daisyui"
    # ).replace(
    #     "Tailwind CSS v4 utility class builders",
    #     "DaisyUI component builders and utilities"
    # )
    
    # Parse arguments
    args = parser.parse_args()
    
    # If no command specified, show help
    if args.command is None:
        parser.print_help()
        return
    
    # Dispatch to the appropriate command handler
    dispatch_command(args)
