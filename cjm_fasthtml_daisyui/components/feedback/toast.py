"""Toast is a wrapper to stack elements, positioned on the corner of page."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/feedback/toast.ipynb.

# %% auto 0
__all__ = ['toast', 'toast_placement', 'ToastPlacement', 'test_toast_basic_examples', 'test_toast_placement_examples']

# %% ../../../nbs/components/feedback/toast.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/feedback/toast.ipynb 5
toast = SingleValueFactory("toast", "Container element that sticks to the corner of page") # Base toast component

# %% ../../../nbs/components/feedback/toast.ipynb 7
class ToastPlacement(str, Enum):
    START = "start"
    CENTER = "center"
    END = "end"
    TOP = "top"
    MIDDLE = "middle"
    BOTTOM = "bottom"

toast_placement = enums_to_simple_factory(toast, [ToastPlacement], "Toast placement options") # toast placement options

# %% ../../../nbs/components/feedback/toast.ipynb 9
def test_toast_basic_examples():
    """Test basic toast utilities."""
    # Basic toast
    assert str(toast) == "toast"
    
    # Test with modifiers
    assert str(toast.hover) == "hover:toast"
    assert str(toast.md) == "md:toast"
    assert str(toast.dark) == "dark:toast"

# Run the tests
test_toast_basic_examples()

# %% ../../../nbs/components/feedback/toast.ipynb 10
def test_toast_placement_examples():
    """Test toast placement options."""
    # Horizontal alignment
    assert str(toast_placement.start) == "toast-start"
    assert str(toast_placement.center) == "toast-center"
    assert str(toast_placement.end) == "toast-end"
    
    # Vertical position
    assert str(toast_placement.top) == "toast-top"
    assert str(toast_placement.middle) == "toast-middle"
    assert str(toast_placement.bottom) == "toast-bottom"

# Run the tests
test_toast_placement_examples()
