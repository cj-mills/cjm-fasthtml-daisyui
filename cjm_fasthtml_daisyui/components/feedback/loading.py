"""Loading shows an animation to indicate that something is loading."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/feedback/loading.ipynb.

# %% auto 0
__all__ = ['loading', 'loading_styles', 'loading_sizes', 'LoadingStyle', 'test_loading_basic_examples',
           'test_loading_styles_examples', 'test_loading_sizes_examples']

# %% ../../../nbs/components/feedback/loading.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.sizes import DaisyUINamedSize

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/feedback/loading.ipynb 5
loading = SingleValueFactory("loading", "Base loading component") # Base loading component

# %% ../../../nbs/components/feedback/loading.ipynb 7
class LoadingStyle(str, Enum):
    SPINNER = "spinner"
    DOTS = "dots"
    RING = "ring"
    BALL = "ball"
    BARS = "bars"
    INFINITY = "infinity"

loading_styles = enums_to_simple_factory(loading, [LoadingStyle], "Loading styles") # Loading styles

# %% ../../../nbs/components/feedback/loading.ipynb 9
loading_sizes = enums_to_simple_factory(loading, [DaisyUINamedSize], "Loading size variants from extra small to extra large") # Loading size variants

# %% ../../../nbs/components/feedback/loading.ipynb 11
def test_loading_basic_examples():
    """Test basic loading utilities."""
    # Basic loading
    assert str(loading) == "loading"
    
    # Loading with modifiers
    assert str(loading.hover) == "hover:loading"
    assert str(loading.md) == "md:loading"
    assert str(loading.dark) == "dark:loading"

# Run the tests
test_loading_basic_examples()

# %% ../../../nbs/components/feedback/loading.ipynb 12
def test_loading_styles_examples():
    """Test loading style variants."""
    assert str(loading_styles.spinner) == "loading-spinner"
    assert str(loading_styles.dots) == "loading-dots"
    assert str(loading_styles.ring) == "loading-ring"
    assert str(loading_styles.ball) == "loading-ball"
    assert str(loading_styles.bars) == "loading-bars"
    assert str(loading_styles.infinity) == "loading-infinity"

# Run the tests
test_loading_styles_examples()

# %% ../../../nbs/components/feedback/loading.ipynb 13
def test_loading_sizes_examples():
    """Test loading size variants."""
    assert str(loading_sizes.xs) == "loading-xs"
    assert str(loading_sizes.sm) == "loading-sm"
    assert str(loading_sizes.md) == "loading-md"
    assert str(loading_sizes.lg) == "loading-lg"
    assert str(loading_sizes.xl) == "loading-xl"
    
    # With responsive modifiers
    assert str(loading_sizes.xs.sm) == "sm:loading-xs"
    assert str(loading_sizes.lg.md) == "md:loading-lg"

# Run the tests
test_loading_sizes_examples()
