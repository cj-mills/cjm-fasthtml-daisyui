"""Tooltip can be used to show a message when hovering over an element."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/feedback/tooltip.ipynb.

# %% auto 0
__all__ = ['tooltip', 'tooltip_content', 'tooltip_placement', 'tooltip_modifiers', 'tooltip_colors', 'TooltipPlacement',
           'TooltipModifier', 'test_tooltip_basic_examples', 'test_tooltip_placement_examples',
           'test_tooltip_modifiers_examples', 'test_tooltip_colors_examples']

# %% ../../../nbs/components/feedback/tooltip.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/feedback/tooltip.ipynb 5
tooltip = SingleValueFactory("tooltip", "Base tooltip component") # Base tooltip component
tooltip_content = SingleValueFactory("tooltip-content", "Optional. Setting a div as the content of the tooltip instead of the `data-tip` text") # Base tooltip content part

# %% ../../../nbs/components/feedback/tooltip.ipynb 7
class TooltipPlacement(str, Enum):
    TOP = "top"
    BOTTOM = "bottom"
    LEFT = "left"
    RIGHT = "right"

tooltip_placement = enums_to_simple_factory(tooltip, [TooltipPlacement], "Tooltip placement options") # tooltip placement options

# %% ../../../nbs/components/feedback/tooltip.ipynb 9
class TooltipModifier(str, Enum):
    OPEN = "open"

tooltip_modifiers = enums_to_simple_factory(tooltip, [TooltipModifier], "Tooltip modifiers") # tooltip modifiers

# %% ../../../nbs/components/feedback/tooltip.ipynb 11
tooltip_colors = enums_to_simple_factory(tooltip, [SemanticColorBrand, SemanticColorStatus], "Tooltip color variants using daisyUI semantic colors") # Tooltip color variants

# %% ../../../nbs/components/feedback/tooltip.ipynb 13
def test_tooltip_basic_examples():
    """Test basic tooltip utilities."""
    # Basic tooltip
    assert str(tooltip) == "tooltip"
    assert str(tooltip_content) == "tooltip-content"
    
    # Test with modifiers
    assert str(tooltip.hover) == "hover:tooltip"
    assert str(tooltip.md) == "md:tooltip"
    assert str(tooltip.dark) == "dark:tooltip"

# Run the tests
test_tooltip_basic_examples()

# %% ../../../nbs/components/feedback/tooltip.ipynb 14
def test_tooltip_placement_examples():
    """Test tooltip placement options."""
    assert str(tooltip_placement.top) == "tooltip-top"
    assert str(tooltip_placement.bottom) == "tooltip-bottom"
    assert str(tooltip_placement.left) == "tooltip-left"
    assert str(tooltip_placement.right) == "tooltip-right"

# Run the tests
test_tooltip_placement_examples()

# %% ../../../nbs/components/feedback/tooltip.ipynb 15
def test_tooltip_modifiers_examples():
    """Test tooltip modifier utilities."""
    assert str(tooltip_modifiers.open) == "tooltip-open"

# Run the tests
test_tooltip_modifiers_examples()

# %% ../../../nbs/components/feedback/tooltip.ipynb 16
def test_tooltip_colors_examples():
    """Test tooltip color variants."""
    # All color variants
    assert str(tooltip_colors.neutral) == "tooltip-neutral"
    assert str(tooltip_colors.primary) == "tooltip-primary"
    assert str(tooltip_colors.secondary) == "tooltip-secondary"
    assert str(tooltip_colors.accent) == "tooltip-accent"
    assert str(tooltip_colors.info) == "tooltip-info"
    assert str(tooltip_colors.success) == "tooltip-success"
    assert str(tooltip_colors.warning) == "tooltip-warning"
    assert str(tooltip_colors.error) == "tooltip-error"
    
    # With modifiers
    assert str(tooltip_colors.primary.hover) == "hover:tooltip-primary"
    assert str(tooltip_colors.success.focus) == "focus:tooltip-success"

# Run the tests
test_tooltip_colors_examples()
