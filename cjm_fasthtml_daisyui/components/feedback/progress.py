"""Progress bar can be used to show the progress of a task or to show the passing of time."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/feedback/progress.ipynb.

# %% auto 0
__all__ = ['progress', 'progress_colors', 'test_progress_basic_examples', 'test_progress_colors_examples']

# %% ../../../nbs/components/feedback/progress.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory
from ...builders.colors import SemanticColorBrand, SemanticColorStatus

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/feedback/progress.ipynb 5
progress = SingleValueFactory("progress", "Base progress component for <progress> tag") # Base progress component

# %% ../../../nbs/components/feedback/progress.ipynb 7
progress_colors = enums_to_simple_factory(progress, [SemanticColorBrand, SemanticColorStatus], "Progress color variants using daisyUI semantic colors") # Progress color variants

# %% ../../../nbs/components/feedback/progress.ipynb 9
def test_progress_basic_examples():
    """Test basic progress utilities."""
    # Basic progress
    assert str(progress) == "progress"
    
    # Progress with modifiers
    assert str(progress.hover) == "hover:progress"
    assert str(progress.md) == "md:progress"
    assert str(progress.dark) == "dark:progress"

# Run the tests
test_progress_basic_examples()

# %% ../../../nbs/components/feedback/progress.ipynb 10
def test_progress_colors_examples():
    """Test progress color variants."""
    # All color variants
    assert str(progress_colors.neutral) == "progress-neutral"
    assert str(progress_colors.primary) == "progress-primary"
    assert str(progress_colors.secondary) == "progress-secondary"
    assert str(progress_colors.accent) == "progress-accent"
    assert str(progress_colors.info) == "progress-info"
    assert str(progress_colors.success) == "progress-success"
    assert str(progress_colors.warning) == "progress-warning"
    assert str(progress_colors.error) == "progress-error"
    
    # With modifiers
    assert str(progress_colors.primary.hover) == "hover:progress-primary"
    assert str(progress_colors.success.focus) == "focus:progress-success"

# Run the tests
test_progress_colors_examples()
