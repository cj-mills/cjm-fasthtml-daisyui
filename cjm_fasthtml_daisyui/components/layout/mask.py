"""Mask crops the content of the element to common shapes."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/layout/mask.ipynb.

# %% auto 0
__all__ = ['mask', 'mask_styles', 'mask_modifiers', 'MaskStyle', 'MaskModifier', 'test_mask_basic_examples',
           'test_mask_styles_examples', 'test_mask_modifiers_examples']

# %% ../../../nbs/components/layout/mask.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/layout/mask.ipynb 5
mask = SingleValueFactory("mask", "Base mask component that masks the content with shape") # Base mask component

# %% ../../../nbs/components/layout/mask.ipynb 7
class MaskStyle(str, Enum):
    SQUIRCLE= "squircle"
    HEART= "heart"
    HEXAGON = "hexagon"
    HEXAGON_2 = "hexagon-2"
    DECAGON = "decagon"
    PENTAGON = "pentagon"
    DIAMOND = "diamond"
    SQUARE = "square"
    CIRCLE = "circle"
    STAR = "star"
    STAR_2 = "star-2"
    TRIANGLE = "triangle"
    TRIANGLE_2 = "triangle-2"
    TRIANGLE_3 = "triangle-3"
    TRIANGLE_4 = "triangle-4"
    

mask_styles = enums_to_simple_factory(mask, [MaskStyle]) # mask style variants

# %% ../../../nbs/components/layout/mask.ipynb 9
class MaskModifier(str, Enum):
    HALF_1 = "half-1"
    HALF_2 = "half-2"
    

mask_modifiers = enums_to_simple_factory(mask, [MaskModifier]) # mask modifiers

# %% ../../../nbs/components/layout/mask.ipynb 11
def test_mask_basic_examples():
    """Test basic mask utilities."""
    # Basic mask
    assert str(mask) == "mask"
    
    # Test with modifiers
    assert str(mask.hover) == "hover:mask"
    assert str(mask.md) == "md:mask"
    assert str(mask.dark) == "dark:mask"

# Run the tests
test_mask_basic_examples()

# %% ../../../nbs/components/layout/mask.ipynb 12
def test_mask_styles_examples():
    """Test mask style variants."""
    assert str(mask_styles.squircle) == "mask-squircle"
    assert str(mask_styles.heart) == "mask-heart"
    assert str(mask_styles.hexagon) == "mask-hexagon"
    assert str(mask_styles.hexagon_2) == "mask-hexagon-2"
    assert str(mask_styles.decagon) == "mask-decagon"
    assert str(mask_styles.pentagon) == "mask-pentagon"
    assert str(mask_styles.diamond) == "mask-diamond"
    assert str(mask_styles.square) == "mask-square"
    assert str(mask_styles.circle) == "mask-circle"
    assert str(mask_styles.star) == "mask-star"
    assert str(mask_styles.star_2) == "mask-star-2"
    assert str(mask_styles.triangle) == "mask-triangle"
    assert str(mask_styles.triangle_2) == "mask-triangle-2"
    assert str(mask_styles.triangle_3) == "mask-triangle-3"
    assert str(mask_styles.triangle_4) == "mask-triangle-4"

# Run the tests
test_mask_styles_examples()

# %% ../../../nbs/components/layout/mask.ipynb 13
def test_mask_modifiers_examples():
    """Test mask modifier utilities."""
    assert str(mask_modifiers.half_1) == "mask-half-1"
    assert str(mask_modifiers.half_2) == "mask-half-2"

# Run the tests
test_mask_modifiers_examples()
