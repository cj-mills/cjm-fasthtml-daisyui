"""Stack visually puts elements on top of each other."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/layout/stack.ipynb.

# %% auto 0
__all__ = ['stack', 'stack_modifiers', 'StackModifier', 'test_stack_basic_examples', 'test_stack_modifiers_examples']

# %% ../../../nbs/components/layout/stack.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/layout/stack.ipynb 5
stack = SingleValueFactory("stack", "Base stack component that puts the children elements on top of each other") # Base stack component

# %% ../../../nbs/components/layout/stack.ipynb 7
class StackModifier(str, Enum):
    TOP = "top"
    BOTTOM = "bottom"
    START = "start"
    END = "end"

stack_modifiers = enums_to_simple_factory(stack, [StackModifier]) # stack modifiers

# %% ../../../nbs/components/layout/stack.ipynb 9
def test_stack_basic_examples():
    """Test basic stack utilities."""
    # Basic stack
    assert str(stack) == "stack"
    
    # Test with modifiers
    assert str(stack.hover) == "hover:stack"
    assert str(stack.md) == "md:stack"
    assert str(stack.dark) == "dark:stack"

# Run the tests
test_stack_basic_examples()

# %% ../../../nbs/components/layout/stack.ipynb 10
def test_stack_modifiers_examples():
    """Test stack modifier utilities."""
    assert str(stack_modifiers.top) == "stack-top"
    assert str(stack_modifiers.bottom) == "stack-bottom"
    assert str(stack_modifiers.start) == "stack-start"
    assert str(stack_modifiers.end) == "stack-end"

# Run the tests
test_stack_modifiers_examples()
