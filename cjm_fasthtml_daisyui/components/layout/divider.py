"""Divider will be used to separate content vertically or horizontally."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/layout/divider.ipynb.

# %% auto 0
__all__ = ['divider', 'divider_colors', 'divider_directions', 'divider_placement', 'DividerDirection', 'DividerPlacement',
           'test_divider_basic_examples', 'test_divider_colors_examples', 'test_divider_directions_examples',
           'test_divider_placement_examples']

# %% ../../../nbs/components/layout/divider.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/layout/divider.ipynb 5
divider = SingleValueFactory("divider", "Base divider component for creating a line between two elements") # Base divider component

# %% ../../../nbs/components/layout/divider.ipynb 7
divider_colors = enums_to_simple_factory(divider, [SemanticColorBrand, SemanticColorStatus], "divider color variants using daisyUI semantic colors") # divider color variants

# %% ../../../nbs/components/layout/divider.ipynb 9
class DividerDirection(str, Enum):
    VERTICAL = "vertical"
    HORIZONTAL = "horizontal"

divider_directions = enums_to_simple_factory(divider, [DividerDirection], "divider directions (vertical, horizontal)") # divider directions

# %% ../../../nbs/components/layout/divider.ipynb 11
class DividerPlacement(str, Enum):
    START = "start"
    END = "end"

divider_placement = enums_to_simple_factory(divider, [DividerPlacement], "divider placement (start, end)") # divider directions

# %% ../../../nbs/components/layout/divider.ipynb 13
def test_divider_basic_examples():
    """Test basic divider utilities."""
    # Basic divider
    assert str(divider) == "divider"
    
    # Test with modifiers
    assert str(divider.hover) == "hover:divider"
    assert str(divider.md) == "md:divider"
    assert str(divider.dark) == "dark:divider"

# Run the tests
test_divider_basic_examples()

# %% ../../../nbs/components/layout/divider.ipynb 14
def test_divider_colors_examples():
    """Test divider color variants."""
    # All color variants
    assert str(divider_colors.neutral) == "divider-neutral"
    assert str(divider_colors.primary) == "divider-primary"
    assert str(divider_colors.secondary) == "divider-secondary"
    assert str(divider_colors.accent) == "divider-accent"
    assert str(divider_colors.info) == "divider-info"
    assert str(divider_colors.success) == "divider-success"
    assert str(divider_colors.warning) == "divider-warning"
    assert str(divider_colors.error) == "divider-error"
    
    # With modifiers
    assert str(divider_colors.primary.hover) == "hover:divider-primary"
    assert str(divider_colors.success.focus) == "focus:divider-success"

# Run the tests
test_divider_colors_examples()

# %% ../../../nbs/components/layout/divider.ipynb 15
def test_divider_directions_examples():
    """Test divider directions variants."""
    assert str(divider_directions.vertical) == "divider-vertical"
    assert str(divider_directions.horizontal) == "divider-horizontal"

# Run the tests
test_divider_directions_examples()

# %% ../../../nbs/components/layout/divider.ipynb 16
def test_divider_placement_examples():
    """Test divider placement variants."""
    assert str(divider_placement.start) == "divider-start"
    assert str(divider_placement.end) == "divider-end"

# Run the tests
test_divider_placement_examples()
