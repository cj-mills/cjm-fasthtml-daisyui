"""Indicators are used to place an element on the corner of another element."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/layout/indicator.ipynb.

# %% auto 0
__all__ = ['indicator', 'indicator_item', 'indicator_placement', 'IndicatorPlacement', 'test_indicator_basic_examples',
           'test_indicator_placement_examples']

# %% ../../../nbs/components/layout/indicator.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/layout/indicator.ipynb 5
indicator = SingleValueFactory("indicator", "Base indicator container element") # Base indicator component
indicator_item = SingleValueFactory("indicator-item", "Indicator item part that will be placed on the corner of sibling") # Indicator item part

# %% ../../../nbs/components/layout/indicator.ipynb 7
class IndicatorPlacement(str, Enum):
    START = "start"
    CENTER = "center"
    END = "end"
    TOP = "top"
    MIDDLE = "middle"
    BOTTOM = "bottom"
 
indicator_placement = enums_to_simple_factory(indicator, [IndicatorPlacement], "indicator placement (start, end)") # indicator directions

# %% ../../../nbs/components/layout/indicator.ipynb 9
def test_indicator_basic_examples():
    """Test basic indicator utilities."""
    assert str(indicator) == "indicator"
    assert str(indicator_item) == "indicator-item"
    
    # With modifiers
    assert str(indicator.hover) == "hover:indicator"
    assert str(indicator_item.md) == "md:indicator-item"

# Run the tests
test_indicator_basic_examples()

# %% ../../../nbs/components/layout/indicator.ipynb 10
def test_indicator_placement_examples():
    """Test indicator placement options."""
    # Horizontal alignment
    assert str(indicator_placement.start) == "indicator-start"
    assert str(indicator_placement.center) == "indicator-center"
    assert str(indicator_placement.end) == "indicator-end"
    
    # Vertical position
    assert str(indicator_placement.top) == "indicator-top"
    assert str(indicator_placement.middle) == "indicator-middle"
    assert str(indicator_placement.bottom) == "indicator-bottom"

# Run the tests
test_indicator_placement_examples()
