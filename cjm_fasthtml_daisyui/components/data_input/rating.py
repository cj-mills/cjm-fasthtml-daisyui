"""Rating is a set of radio ratings that allow the user to rate something."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/rating.ipynb.

# %% auto 0
__all__ = ['rating', 'rating_modifiers', 'rating_sizes', 'RatingModifier', 'test_rating_basic_examples',
           'test_rating_modifiers_examples', 'test_rating_sizes_examples']

# %% ../../../nbs/components/data_input/rating.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.sizes import DaisyUINamedSize

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/rating.ipynb 5
rating = SingleValueFactory("rating", "Base rating component for a div containing radio inputs") # Base rating component

# %% ../../../nbs/components/data_input/rating.ipynb 7
class RatingModifier(str, Enum):
    HALF = "half"
    HIDDEN = "hidden"

rating_modifiers = enums_to_simple_factory(rating, [RatingModifier], "rating modifiers") # rating modifiers

# %% ../../../nbs/components/data_input/rating.ipynb 9
rating_sizes = enums_to_simple_factory(rating, [DaisyUINamedSize], "rating size variants from extra small to extra large") # rating size variants

# %% ../../../nbs/components/data_input/rating.ipynb 11
def test_rating_basic_examples():
    """Test basic rating utilities."""
    # Basic rating
    assert str(rating) == "rating"
    
    # Test with modifiers
    assert str(rating.hover) == "hover:rating"
    assert str(rating.md) == "md:rating"
    assert str(rating.dark) == "dark:rating"

# Run the tests
test_rating_basic_examples()

# %% ../../../nbs/components/data_input/rating.ipynb 12
def test_rating_modifiers_examples():
    """Test rating modifier utilities."""
    assert str(rating_modifiers.half) == "rating-half"
    assert str(rating_modifiers.hidden) == "rating-hidden"

# Run the tests
test_rating_modifiers_examples()

# %% ../../../nbs/components/data_input/rating.ipynb 13
def test_rating_sizes_examples():
    """Test rating size variants."""
    assert str(rating_sizes.xs) == "rating-xs"
    assert str(rating_sizes.sm) == "rating-sm"
    assert str(rating_sizes.md) == "rating-md"
    assert str(rating_sizes.lg) == "rating-lg"
    assert str(rating_sizes.xl) == "rating-xl"
    
    # With responsive modifiers
    assert str(rating_sizes.xs.sm) == "sm:rating-xs"
    assert str(rating_sizes.lg.md) == "md:rating-lg"

# Run the tests
test_rating_sizes_examples()
