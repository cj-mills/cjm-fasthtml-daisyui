"""Toggle is a checkbox that is styled to look like a switch button."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/toggle.ipynb.

# %% auto 0
__all__ = ['toggle', 'toggle_colors', 'toggle_sizes', 'test_toggle_basic_examples', 'test_toggle_colors_examples',
           'test_toggle_sizes_examples']

# %% ../../../nbs/components/data_input/toggle.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/toggle.ipynb 5
toggle = SingleValueFactory("toggle", "Base toggle component for <input type=\"checkbox\"> element") # Base toggle component

# %% ../../../nbs/components/data_input/toggle.ipynb 7
toggle_colors = enums_to_simple_factory(toggle, [SemanticColorBrand, SemanticColorStatus], "toggle color variants using daisyUI semantic colors") # toggle color variants

# %% ../../../nbs/components/data_input/toggle.ipynb 9
toggle_sizes = enums_to_simple_factory(toggle, [DaisyUINamedSize], "toggle size variants from extra small to extra large") # toggle size variants

# %% ../../../nbs/components/data_input/toggle.ipynb 11
def test_toggle_basic_examples():
    """Test basic toggle utilities."""
    # Basic toggle
    assert str(toggle) == "toggle"
    
    # Test with modifiers
    assert str(toggle.hover) == "hover:toggle"
    assert str(toggle.md) == "md:toggle"
    assert str(toggle.dark) == "dark:toggle"

# Run the tests
test_toggle_basic_examples()

# %% ../../../nbs/components/data_input/toggle.ipynb 12
def test_toggle_colors_examples():
    """Test toggle color variants."""
    # All color variants
    assert str(toggle_colors.neutral) == "toggle-neutral"
    assert str(toggle_colors.primary) == "toggle-primary"
    assert str(toggle_colors.secondary) == "toggle-secondary"
    assert str(toggle_colors.accent) == "toggle-accent"
    assert str(toggle_colors.info) == "toggle-info"
    assert str(toggle_colors.success) == "toggle-success"
    assert str(toggle_colors.warning) == "toggle-warning"
    assert str(toggle_colors.error) == "toggle-error"
    
    # With modifiers
    assert str(toggle_colors.primary.hover) == "hover:toggle-primary"
    assert str(toggle_colors.success.focus) == "focus:toggle-success"

# Run the tests
test_toggle_colors_examples()

# %% ../../../nbs/components/data_input/toggle.ipynb 13
def test_toggle_sizes_examples():
    """Test toggle size variants."""
    assert str(toggle_sizes.xs) == "toggle-xs"
    assert str(toggle_sizes.sm) == "toggle-sm"
    assert str(toggle_sizes.md) == "toggle-md"
    assert str(toggle_sizes.lg) == "toggle-lg"
    assert str(toggle_sizes.xl) == "toggle-xl"
    
    # With responsive modifiers
    assert str(toggle_sizes.xs.sm) == "sm:toggle-xs"
    assert str(toggle_sizes.lg.md) == "md:toggle-lg"

# Run the tests
test_toggle_sizes_examples()
