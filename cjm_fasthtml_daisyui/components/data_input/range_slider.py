"""Range slider is used to select a value by sliding a handle."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/range.ipynb.

# %% auto 0
__all__ = ['range_dui', 'range_colors', 'range_sizes', 'test_range_basic_examples', 'test_range_colors_examples',
           'test_range_sizes_examples']

# %% ../../../nbs/components/data_input/range.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/range.ipynb 5
range_dui = SingleValueFactory("range", "Base range slider component for <input type=\"range\"> tag") # Base range component

# %% ../../../nbs/components/data_input/range.ipynb 7
range_colors = enums_to_simple_factory(range_dui, [SemanticColorBrand, SemanticColorStatus], "range color variants using daisyUI semantic colors") # range color variants

# %% ../../../nbs/components/data_input/range.ipynb 9
range_sizes = enums_to_simple_factory(range_dui, [DaisyUINamedSize], "range size variants from extra small to extra large") # range size variants

# %% ../../../nbs/components/data_input/range.ipynb 11
def test_range_basic_examples():
    """Test basic range utilities."""
    # Basic range
    assert str(range_dui) == "range"
    
    # Test with modifiers
    assert str(range_dui.hover) == "hover:range"
    assert str(range_dui.md) == "md:range"
    assert str(range_dui.dark) == "dark:range"

# Run the tests
test_range_basic_examples()

# %% ../../../nbs/components/data_input/range.ipynb 12
def test_range_colors_examples():
    """Test range color variants."""
    # All color variants
    assert str(range_colors.neutral) == "range-neutral"
    assert str(range_colors.primary) == "range-primary"
    assert str(range_colors.secondary) == "range-secondary"
    assert str(range_colors.accent) == "range-accent"
    assert str(range_colors.info) == "range-info"
    assert str(range_colors.success) == "range-success"
    assert str(range_colors.warning) == "range-warning"
    assert str(range_colors.error) == "range-error"
    
    # With modifiers
    assert str(range_colors.primary.hover) == "hover:range-primary"
    assert str(range_colors.success.focus) == "focus:range-success"

# Run the tests
test_range_colors_examples()

# %% ../../../nbs/components/data_input/range.ipynb 13
def test_range_sizes_examples():
    """Test range size variants."""
    assert str(range_sizes.xs) == "range-xs"
    assert str(range_sizes.sm) == "range-sm"
    assert str(range_sizes.md) == "range-md"
    assert str(range_sizes.lg) == "range-lg"
    assert str(range_sizes.xl) == "range-xl"
    
    # With responsive modifiers
    assert str(range_sizes.xs.sm) == "sm:range-xs"
    assert str(range_sizes.lg.md) == "md:range-lg"

# Run the tests
test_range_sizes_examples()
