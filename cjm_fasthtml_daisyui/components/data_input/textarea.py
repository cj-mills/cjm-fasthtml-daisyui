"""Textarea allows users to enter text in multiple lines."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/textarea.ipynb.

# %% auto 0
__all__ = ['textarea', 'textarea_styles', 'textarea_colors', 'textarea_sizes', 'test_textarea_basic_examples',
           'test_textarea_styles_examples', 'test_textarea_colors_examples', 'test_textarea_sizes_examples']

# %% ../../../nbs/components/data_input/textarea.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize
from ...builders.styles import GhostStyle

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/textarea.ipynb 5
textarea = SingleValueFactory("textarea", "Base textarea component for <textarea> element") # Base textarea component

# %% ../../../nbs/components/data_input/textarea.ipynb 7
textarea_styles = enums_to_simple_factory(textarea, [GhostStyle]) # textarea style variants

# %% ../../../nbs/components/data_input/textarea.ipynb 9
textarea_colors = enums_to_simple_factory(textarea, [SemanticColorBrand, SemanticColorStatus], "textarea color variants using daisyUI semantic colors") # textarea color variants

# %% ../../../nbs/components/data_input/textarea.ipynb 11
textarea_sizes = enums_to_simple_factory(textarea, [DaisyUINamedSize], "textarea size variants from extra small to extra large") # textarea size variants

# %% ../../../nbs/components/data_input/textarea.ipynb 13
def test_textarea_basic_examples():
    """Test basic textarea utilities."""
    # Basic textarea
    assert str(textarea) == "textarea"
    
    # Test with modifiers
    assert str(textarea.hover) == "hover:textarea"
    assert str(textarea.md) == "md:textarea"
    assert str(textarea.dark) == "dark:textarea"

# Run the tests
test_textarea_basic_examples()

# %% ../../../nbs/components/data_input/textarea.ipynb 14
def test_textarea_styles_examples():
    """Test textarea style variants."""
    assert str(textarea_styles.ghost) == "textarea-ghost"

# Run the tests
test_textarea_styles_examples()

# %% ../../../nbs/components/data_input/textarea.ipynb 15
def test_textarea_colors_examples():
    """Test textarea color variants."""
    # All color variants
    assert str(textarea_colors.neutral) == "textarea-neutral"
    assert str(textarea_colors.primary) == "textarea-primary"
    assert str(textarea_colors.secondary) == "textarea-secondary"
    assert str(textarea_colors.accent) == "textarea-accent"
    assert str(textarea_colors.info) == "textarea-info"
    assert str(textarea_colors.success) == "textarea-success"
    assert str(textarea_colors.warning) == "textarea-warning"
    assert str(textarea_colors.error) == "textarea-error"
    
    # With modifiers
    assert str(textarea_colors.primary.hover) == "hover:textarea-primary"
    assert str(textarea_colors.success.focus) == "focus:textarea-success"

# Run the tests
test_textarea_colors_examples()

# %% ../../../nbs/components/data_input/textarea.ipynb 16
def test_textarea_sizes_examples():
    """Test textarea size variants."""
    assert str(textarea_sizes.xs) == "textarea-xs"
    assert str(textarea_sizes.sm) == "textarea-sm"
    assert str(textarea_sizes.md) == "textarea-md"
    assert str(textarea_sizes.lg) == "textarea-lg"
    assert str(textarea_sizes.xl) == "textarea-xl"
    
    # With responsive modifiers
    assert str(textarea_sizes.xs.sm) == "sm:textarea-xs"
    assert str(textarea_sizes.lg.md) == "md:textarea-lg"

# Run the tests
test_textarea_sizes_examples()
