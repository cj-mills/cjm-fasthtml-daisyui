"""Checkboxes are used to select or deselect a value."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/checkbox.ipynb.

# %% auto 0
__all__ = ['checkbox', 'checkbox_colors', 'checkbox_sizes', 'test_checkbox_basic_examples', 'test_checkbox_colors_examples',
           'test_checkbox_sizes_examples']

# %% ../../../nbs/components/data_input/checkbox.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/checkbox.ipynb 5
checkbox = SingleValueFactory("checkbox", "Base checkbox component") # Base checkbox component

# %% ../../../nbs/components/data_input/checkbox.ipynb 7
checkbox_colors = enums_to_simple_factory(checkbox, [SemanticColorBrand, SemanticColorStatus], "Checkbox color variants using daisyUI semantic colors") # Checkbox color variants

# %% ../../../nbs/components/data_input/checkbox.ipynb 9
checkbox_sizes = enums_to_simple_factory(checkbox, [DaisyUINamedSize], "Checkbox size variants from extra small to extra large") # Checkbox size variants

# %% ../../../nbs/components/data_input/checkbox.ipynb 11
def test_checkbox_basic_examples():
    """Test basic checkbox utilities."""
    # Basic checkbox
    assert str(checkbox) == "checkbox"
    
    # Test with modifiers
    assert str(checkbox.hover) == "hover:checkbox"
    assert str(checkbox.md) == "md:checkbox"
    assert str(checkbox.dark) == "dark:checkbox"

# Run the tests
test_checkbox_basic_examples()

# %% ../../../nbs/components/data_input/checkbox.ipynb 12
def test_checkbox_colors_examples():
    """Test checkbox color variants."""
    # All color variants
    assert str(checkbox_colors.neutral) == "checkbox-neutral"
    assert str(checkbox_colors.primary) == "checkbox-primary"
    assert str(checkbox_colors.secondary) == "checkbox-secondary"
    assert str(checkbox_colors.accent) == "checkbox-accent"
    assert str(checkbox_colors.info) == "checkbox-info"
    assert str(checkbox_colors.success) == "checkbox-success"
    assert str(checkbox_colors.warning) == "checkbox-warning"
    assert str(checkbox_colors.error) == "checkbox-error"
    
    # With modifiers
    assert str(checkbox_colors.primary.hover) == "hover:checkbox-primary"
    assert str(checkbox_colors.success.focus) == "focus:checkbox-success"

# Run the tests
test_checkbox_colors_examples()

# %% ../../../nbs/components/data_input/checkbox.ipynb 13
def test_checkbox_sizes_examples():
    """Test checkbox size variants."""
    assert str(checkbox_sizes.xs) == "checkbox-xs"
    assert str(checkbox_sizes.sm) == "checkbox-sm"
    assert str(checkbox_sizes.md) == "checkbox-md"
    assert str(checkbox_sizes.lg) == "checkbox-lg"
    assert str(checkbox_sizes.xl) == "checkbox-xl"
    
    # With responsive modifiers
    assert str(checkbox_sizes.xs.sm) == "sm:checkbox-xs"
    assert str(checkbox_sizes.lg.md) == "md:checkbox-lg"

# Run the tests
test_checkbox_sizes_examples()
