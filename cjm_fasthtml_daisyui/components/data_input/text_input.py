"""Text Input is a simple input field."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/text_input.ipynb.

# %% auto 0
__all__ = ['text_input', 'text_input_styles', 'text_input_colors', 'text_input_sizes', 'test_text_input_basic_examples',
           'test_text_input_styles_examples', 'test_text_input_colors_examples', 'test_text_input_sizes_examples']

# %% ../../../nbs/components/data_input/text_input.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize
from ...builders.styles import GhostStyle

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/text_input.ipynb 5
text_input = SingleValueFactory("input", "Base text_input component for <input type=\"text\"> tag or a wrapper of <input type=\"text\"> tag") # Base text_input component

# %% ../../../nbs/components/data_input/text_input.ipynb 7
text_input_styles = enums_to_simple_factory(text_input, [GhostStyle]) # text_input style variants

# %% ../../../nbs/components/data_input/text_input.ipynb 9
text_input_colors = enums_to_simple_factory(text_input, [SemanticColorBrand, SemanticColorStatus], "text_input color variants using daisyUI semantic colors") # text_input color variants

# %% ../../../nbs/components/data_input/text_input.ipynb 11
text_input_sizes = enums_to_simple_factory(text_input, [DaisyUINamedSize], "text_input size variants from extra small to extra large") # text_input size variants

# %% ../../../nbs/components/data_input/text_input.ipynb 13
def test_text_input_basic_examples():
    """Test basic text_input utilities."""
    # Basic text_input
    assert str(text_input) == "input"
    
    # Test with modifiers
    assert str(text_input.hover) == "hover:input"
    assert str(text_input.md) == "md:input"
    assert str(text_input.dark) == "dark:input"

# Run the tests
test_text_input_basic_examples()

# %% ../../../nbs/components/data_input/text_input.ipynb 14
def test_text_input_styles_examples():
    """Test text_input style variants."""
    assert str(text_input_styles.ghost) == "input-ghost"

# Run the tests
test_text_input_styles_examples()

# %% ../../../nbs/components/data_input/text_input.ipynb 15
def test_text_input_colors_examples():
    """Test text_input color variants."""
    # All color variants
    assert str(text_input_colors.neutral) == "input-neutral"
    assert str(text_input_colors.primary) == "input-primary"
    assert str(text_input_colors.secondary) == "input-secondary"
    assert str(text_input_colors.accent) == "input-accent"
    assert str(text_input_colors.info) == "input-info"
    assert str(text_input_colors.success) == "input-success"
    assert str(text_input_colors.warning) == "input-warning"
    assert str(text_input_colors.error) == "input-error"
    
    # With modifiers
    assert str(text_input_colors.primary.hover) == "hover:input-primary"
    assert str(text_input_colors.success.focus) == "focus:input-success"

# Run the tests
test_text_input_colors_examples()

# %% ../../../nbs/components/data_input/text_input.ipynb 16
def test_text_input_sizes_examples():
    """Test text_input size variants."""
    assert str(text_input_sizes.xs) == "input-xs"
    assert str(text_input_sizes.sm) == "input-sm"
    assert str(text_input_sizes.md) == "input-md"
    assert str(text_input_sizes.lg) == "input-lg"
    assert str(text_input_sizes.xl) == "input-xl"
    
    # With responsive modifiers
    assert str(text_input_sizes.xs.sm) == "sm:input-xs"
    assert str(text_input_sizes.lg.md) == "md:input-lg"

# Run the tests
test_text_input_sizes_examples()
