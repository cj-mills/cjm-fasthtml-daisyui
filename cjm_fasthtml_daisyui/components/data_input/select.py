"""Select is used to pick a value from a list of options."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/select.ipynb.

# %% auto 0
__all__ = ['select', 'select_styles', 'select_colors', 'select_sizes', 'test_select_basic_examples',
           'test_select_styles_examples', 'test_select_colors_examples', 'test_select_sizes_examples']

# %% ../../../nbs/components/data_input/select.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize
from ...builders.styles import GhostStyle

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/select.ipynb 5
select = SingleValueFactory("select", "Base select component for <select> element") # Base select component

# %% ../../../nbs/components/data_input/select.ipynb 7
select_styles = enums_to_simple_factory(select, [GhostStyle]) # select style variants

# %% ../../../nbs/components/data_input/select.ipynb 9
select_colors = enums_to_simple_factory(select, [SemanticColorBrand, SemanticColorStatus], "select color variants using daisyUI semantic colors") # select color variants

# %% ../../../nbs/components/data_input/select.ipynb 11
select_sizes = enums_to_simple_factory(select, [DaisyUINamedSize], "select size variants from extra small to extra large") # select size variants

# %% ../../../nbs/components/data_input/select.ipynb 13
def test_select_basic_examples():
    """Test basic select utilities."""
    # Basic select
    assert str(select) == "select"
    
    # Test with modifiers
    assert str(select.hover) == "hover:select"
    assert str(select.md) == "md:select"
    assert str(select.dark) == "dark:select"

# Run the tests
test_select_basic_examples()

# %% ../../../nbs/components/data_input/select.ipynb 14
def test_select_styles_examples():
    """Test select style variants."""
    assert str(select_styles.ghost) == "select-ghost"

# Run the tests
test_select_styles_examples()

# %% ../../../nbs/components/data_input/select.ipynb 15
def test_select_colors_examples():
    """Test select color variants."""
    # All color variants
    assert str(select_colors.neutral) == "select-neutral"
    assert str(select_colors.primary) == "select-primary"
    assert str(select_colors.secondary) == "select-secondary"
    assert str(select_colors.accent) == "select-accent"
    assert str(select_colors.info) == "select-info"
    assert str(select_colors.success) == "select-success"
    assert str(select_colors.warning) == "select-warning"
    assert str(select_colors.error) == "select-error"
    
    # With modifiers
    assert str(select_colors.primary.hover) == "hover:select-primary"
    assert str(select_colors.success.focus) == "focus:select-success"

# Run the tests
test_select_colors_examples()

# %% ../../../nbs/components/data_input/select.ipynb 16
def test_select_sizes_examples():
    """Test select size variants."""
    assert str(select_sizes.xs) == "select-xs"
    assert str(select_sizes.sm) == "select-sm"
    assert str(select_sizes.md) == "select-md"
    assert str(select_sizes.lg) == "select-lg"
    assert str(select_sizes.xl) == "select-xl"
    
    # With responsive modifiers
    assert str(select_sizes.xs.sm) == "sm:select-xs"
    assert str(select_sizes.lg.md) == "md:select-lg"

# Run the tests
test_select_sizes_examples()
