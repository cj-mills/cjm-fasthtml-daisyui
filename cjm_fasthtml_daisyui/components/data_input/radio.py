"""Radio buttons allow the user to select one option from a set."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/data_input/radio.ipynb.

# %% auto 0
__all__ = ['radio', 'radio_colors', 'radio_sizes', 'test_radio_basic_examples', 'test_radio_colors_examples',
           'test_radio_sizes_examples']

# %% ../../../nbs/components/data_input/radio.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/data_input/radio.ipynb 5
radio = SingleValueFactory("radio", "Base radio button component for radio input") # Base radio component

# %% ../../../nbs/components/data_input/radio.ipynb 7
radio_colors = enums_to_simple_factory(radio, [SemanticColorBrand, SemanticColorStatus], "Radio color variants using daisyUI semantic colors") # Radio color variants

# %% ../../../nbs/components/data_input/radio.ipynb 9
radio_sizes = enums_to_simple_factory(radio, [DaisyUINamedSize], "Radio size variants from extra small to extra large") # Radio size variants

# %% ../../../nbs/components/data_input/radio.ipynb 11
def test_radio_basic_examples():
    """Test basic radio utilities."""
    # Basic radio
    assert str(radio) == "radio"
    
    # Test with modifiers
    assert str(radio.hover) == "hover:radio"
    assert str(radio.md) == "md:radio"
    assert str(radio.dark) == "dark:radio"

# Run the tests
test_radio_basic_examples()

# %% ../../../nbs/components/data_input/radio.ipynb 12
def test_radio_colors_examples():
    """Test radio color variants."""
    # All color variants
    assert str(radio_colors.neutral) == "radio-neutral"
    assert str(radio_colors.primary) == "radio-primary"
    assert str(radio_colors.secondary) == "radio-secondary"
    assert str(radio_colors.accent) == "radio-accent"
    assert str(radio_colors.info) == "radio-info"
    assert str(radio_colors.success) == "radio-success"
    assert str(radio_colors.warning) == "radio-warning"
    assert str(radio_colors.error) == "radio-error"
    
    # With modifiers
    assert str(radio_colors.primary.hover) == "hover:radio-primary"
    assert str(radio_colors.success.focus) == "focus:radio-success"

# Run the tests
test_radio_colors_examples()

# %% ../../../nbs/components/data_input/radio.ipynb 13
def test_radio_sizes_examples():
    """Test radio size variants."""
    assert str(radio_sizes.xs) == "radio-xs"
    assert str(radio_sizes.sm) == "radio-sm"
    assert str(radio_sizes.md) == "radio-md"
    assert str(radio_sizes.lg) == "radio-lg"
    assert str(radio_sizes.xl) == "radio-xl"
    
    # With responsive modifiers
    assert str(radio_sizes.xs.sm) == "sm:radio-xs"
    assert str(radio_sizes.lg.md) == "md:radio-lg"

# Run the tests
test_radio_sizes_examples()
