"""Link adds the missing underline style to links."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/navigation/link.ipynb.

# %% auto 0
__all__ = ['link', 'link_colors', 'test_link_basic_examples', 'test_link_colors_examples']

# %% ../../../nbs/components/navigation/link.ipynb 3
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.colors import SemanticColorBrand, SemanticColorStatus
from ...builders.sizes import DaisyUINamedSize

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/navigation/link.ipynb 5
link = SingleValueFactory("link", "Link component for adding underline style to links") # Link component

# %% ../../../nbs/components/navigation/link.ipynb 7
link_colors = enums_to_simple_factory(link, [SemanticColorBrand, SemanticColorStatus], "Link color variants using daisyUI semantic colors") # Link color variants

# %% ../../../nbs/components/navigation/link.ipynb 9
def test_link_basic_examples():
    """Test basic link utilities."""
    # Basic link
    assert str(link) == "link"
    
    # Button with modifiers
    assert str(link.hover) == "hover:link"
    assert str(link.md) == "md:link"
    assert str(link.dark) == "dark:link"

# Run the tests
test_link_basic_examples()

# %% ../../../nbs/components/navigation/link.ipynb 10
def test_link_colors_examples():
    """Test link color variants."""
    # All color variants
    assert str(link_colors.neutral) == "link-neutral"
    assert str(link_colors.primary) == "link-primary"
    assert str(link_colors.secondary) == "link-secondary"
    assert str(link_colors.accent) == "link-accent"
    assert str(link_colors.info) == "link-info"
    assert str(link_colors.success) == "link-success"
    assert str(link_colors.warning) == "link-warning"
    assert str(link_colors.error) == "link-error"
    
    # With modifiers
    assert str(link_colors.primary.hover) == "hover:link-primary"
    assert str(link_colors.success.focus) == "focus:link-success"

# Run the tests
test_link_colors_examples()
