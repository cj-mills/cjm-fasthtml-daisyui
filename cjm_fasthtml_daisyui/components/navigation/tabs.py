"""Tabs can be used to show a list of links in a tabbed format."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/components/navigation/tabs.ipynb.

# %% auto 0
__all__ = ['tabs', 'tab', 'tab_content', 'tabs_styles', 'tab_modifiers', 'tabs_placement', 'tabs_sizes', 'BoxStyle', 'LiftStyle',
           'test_tabs_basic_examples', 'test_tab_modifiers_examples', 'test_tab_placement_examples',
           'test_tabs_sizes_examples']

# %% ../../../nbs/components/navigation/tabs.ipynb 3
from enum import Enum
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, combine_classes
)
from cjm_fasthtml_tailwind.builders.scales import SimpleFactory, enums_to_simple_factory

from ...builders.sizes import DaisyUINamedSize
from ...builders.styles import BorderStyle

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ...core.testing import create_test_app, create_test_page, start_test_server
from ...core.themes import DaisyUITheme
from IPython.display import display

# %% ../../../nbs/components/navigation/tabs.ipynb 5
tabs = SingleValueFactory("tabs", "Container of multiple tab items") # Base tabs component
tab = SingleValueFactory("tab", "A single tab button (can be button, link, div, radio input, etc)") # tab part
tab_content = SingleValueFactory("tab-content", "Tab content that comes immediately after a tab") # tab content part

# %% ../../../nbs/components/navigation/tabs.ipynb 7
class BoxStyle(str, Enum):
    BOX = "box"
class LiftStyle(str, Enum):
    LIFT = "lift"

tabs_styles = enums_to_simple_factory(tabs, [BoxStyle, BorderStyle, LiftStyle]) # Tabs style variants

# %% ../../../nbs/components/navigation/tabs.ipynb 9
tab_modifiers = SimpleFactory(
    {
        "disabled": "tab-disabled",
        "active": "tab-active",
    },
    "Tab modifiers"
) # Tab modifiers

# %% ../../../nbs/components/navigation/tabs.ipynb 11
tabs_placement = SimpleFactory(
    {
        "top": "tabs-top",
        "bottom": "tabs-bottom",
    },
    "tabs placement options"
) # tabs placement options

# %% ../../../nbs/components/navigation/tabs.ipynb 13
tabs_sizes = enums_to_simple_factory(tabs, [DaisyUINamedSize], "Tabs size variants from extra small to extra large") # Tabs size variants

# %% ../../../nbs/components/navigation/tabs.ipynb 15
def test_tabs_basic_examples():
    """Test basic tabs utilities."""
    # Basic tabs
    assert str(tabs) == "tabs"
    assert str(tab) == "tab"
    assert str(tab_content) == "tab-content"
    
    # tabs with modifiers
    assert str(tabs.hover) == "hover:tabs"
    assert str(tabs.md) == "md:tabs"
    assert str(tabs.dark) == "dark:tabs"

# Run the tests
test_tabs_basic_examples()

# %% ../../../nbs/components/navigation/tabs.ipynb 16
def test_tab_modifiers_examples():
    """Test tab modifier utilities."""
    assert str(tab_modifiers.disabled) == "tab-disabled"
    assert str(tab_modifiers.active) == "tab-active"

# Run the tests
test_tab_modifiers_examples()

# %% ../../../nbs/components/navigation/tabs.ipynb 17
def test_tab_placement_examples():
    """Test tab modifier utilities."""
    assert str(tabs_placement.top) == "tabs-top"
    assert str(tabs_placement.bottom) == "tabs-bottom"

# Run the tests
test_tab_placement_examples()

# %% ../../../nbs/components/navigation/tabs.ipynb 18
def test_tabs_sizes_examples():
    """Test tabs size variants."""
    assert str(tabs_sizes.xs) == "tabs-xs"
    assert str(tabs_sizes.sm) == "tabs-sm"
    assert str(tabs_sizes.md) == "tabs-md"
    assert str(tabs_sizes.lg) == "tabs-lg"
    assert str(tabs_sizes.xl) == "tabs-xl"
    
    # With responsive modifiers
    assert str(tabs_sizes.xs.sm) == "sm:tabs-xs"
    assert str(tabs_sizes.lg.md) == "md:tabs-lg"

# Run the tests
test_tabs_sizes_examples()
