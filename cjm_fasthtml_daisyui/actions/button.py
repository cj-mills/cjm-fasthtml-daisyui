"""[Buttons](https://daisyui.com/components/button/) allow the user to take actions or make choices."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/actions/button.ipynb.

# %% auto 0
__all__ = ['ButtonShape', 'Btn']

# %% ../../nbs/actions/button.ipynb 3
from typing import Optional, Union, List, Any, Literal
from enum import Enum
from dataclasses import dataclass, field
from fasthtml.common import *
from fastcore.basics import patch
from cjm_tailwind_utils.all import TailwindBuilder
from cjm_fasthtml_daisyui.core.types import (
    # Enums
    DaisySize,
    StyleType,
    SemanticColor,
    ColorUtility,
    DaisyComponentType,
    # Utility functions
    ensure_list
) 
from ..core.base import HasSize
from cjm_fasthtml_daisyui.core.colors import (
    ColorBuilder, apply_semantic_colors
)
from ..core.behaviors import InteractiveMixin, FormControlMixin
from ..core.variants import HasVariants, HasGlass, create_style_variant
from ..core.htmx import HTMXComponent, HTMXAttrs

# %% ../../nbs/actions/button.ipynb 5
class ButtonShape(str, Enum):
    """Button shape modifiers"""
    DEFAULT = ""
    WIDE = "wide"      # Extra horizontal padding
    BLOCK = "block"    # Full width button
    SQUARE = "square"  # Square button (equal width/height)
    CIRCLE = "circle"  # Circular button

# %% ../../nbs/actions/button.ipynb 6
@dataclass
class Btn(HTMXComponent, HasVariants, HasSize, HasGlass, InteractiveMixin, FormControlMixin):
    """daisyUI Button component with full feature support.
    
    Supports all button variants, styles, sizes, shapes, and states.
    Can be used as a regular button, submit button, or link button.
    """
    
    # Content
    children: List[FT] = field(default_factory=list)
    
    # Component-specific color modifier
    color: Optional[Union[SemanticColor, str]] = None
    
    # Button specific
    shape: Optional[ButtonShape] = None
    no_animation: bool = False  # Disable click animation
    
    # Icon support
    icon_start: Optional[FT] = None
    icon_end: Optional[FT] = None
    
    # Link button support
    href: Optional[str] = None
    target: Optional[str] = None
    
    # Form button properties
    type: Optional[str] = None
    form: Optional[str] = None
    
    # Style property for convenient access
    style: Optional[Union[StyleType, str]] = None
    
    def __init__(self, *children, **kwargs):
        """Initialize button with children and properties."""
        # Extract children from args
        self.children = list(children)
        
        # Extract component-specific color
        self.color = kwargs.pop('color', None)
        
        # Extract button-specific attributes before parent init
        self.icon_start = kwargs.pop('icon_start', None)
        self.icon_end = kwargs.pop('icon_end', None)
        self.shape = kwargs.pop('shape', None)
        self.no_animation = kwargs.pop('no_animation', False)
        self.href = kwargs.pop('href', None)
        self.target = kwargs.pop('target', None)
        
        # Extract style and handle variant
        self.style = kwargs.pop('style', None)
        
        # Initialize variant values for HasVariants
        self.variant_values = kwargs.pop('variant_values', {})
        
        # Extract HasSize properties
        self.size = kwargs.pop('size', None)
        self.responsive_size = kwargs.pop('responsive_size', None)
        
        # Extract HasGlass property
        self.glass = kwargs.pop('glass', False)
        
        # Extract InteractiveMixin properties
        self.active = kwargs.pop('active', False)
        self.disabled = kwargs.pop('disabled', False)
        self.loading = kwargs.pop('loading', False)
        self.open = kwargs.pop('open', False)
        self.checked = kwargs.pop('checked', False)
        self.focus = kwargs.pop('focus', False)
        self.hover = kwargs.pop('hover', False)
        
        # Extract FormControlMixin properties
        self.name = kwargs.pop('name', None)
        self.value = kwargs.pop('value', None)
        self.placeholder = kwargs.pop('placeholder', None)
        self.required = kwargs.pop('required', False)
        self.readonly = kwargs.pop('readonly', False)
        self.autofocus = kwargs.pop('autofocus', False)
        self.type = kwargs.pop('type', None)
        self.form = kwargs.pop('form', None)
        
        # Initialize parent classes
        super().__init__(**kwargs)
        
        # Set the component type for validation
        self.component_type = DaisyComponentType.BUTTON
        
        # Set the style variant if provided
        if self.style:
            style_value = self.style.value if isinstance(self.style, StyleType) else self.style
            self.set_variant("style", style_value)
    
    @classmethod
    def variants(
        cls  # The class itself (Btn)
    ) -> Dict[str, Any]:  # Dictionary mapping variant names to their definitions
        """Define available variants for buttons."""
        return {
            "style": create_style_variant("btn")
        }
    
    def component_class(
        self
    ) -> str:  # The base CSS class name for the button component
        """Return the base component class name."""
        return DaisyComponentType.BUTTON.value
    
    def modifier_classes(
        self
    ) -> List[str]:  # List of additional CSS modifier classes
        """Build all modifier classes."""
        classes = super().modifier_classes()
        
        # Add component-specific color modifier
        if self.color:
            color_val = self.color.value if isinstance(self.color, SemanticColor) else self.color
            classes.append(f"btn-{color_val}")
        
        # Add shape modifier
        if self.shape and self.shape != ButtonShape.DEFAULT:
            classes.append(f"btn-{self.shape.value}")
        
        # Add no-animation
        if self.no_animation:
            classes.append("no-animation")
        
        return classes
    
    def render_content(
        self
    ) -> List[FT]:  # List of FastHTML elements representing button content
        """Render button content with icons."""
        content: List[FT] = []
        
        # Add start icon
        if self.icon_start:
            content.append(self.icon_start)
        
        # Add main content
        content.extend(self.children)
        
        # Add loading spinner if needed
        if self.loading:
            content.append(Span(cls="loading loading-spinner"))
        
        # Add end icon
        if self.icon_end:
            content.append(self.icon_end)
        
        return content
    
    def render_attrs(
        self
    ) -> Dict[str, Any]:  # Dictionary of HTML attributes for the button element
        """Build all HTML attributes including form and behavior attrs."""
        attrs = super().render_attrs()
        
        # Add behavior attributes
        attrs.update(self.behavior_attrs())
        
        # Add form attributes
        if hasattr(self, 'form_attrs'):
            attrs.update(self.form_attrs())
        
        return attrs
    
    def render(
        self
    ) -> FT:  # FastHTML element (Button or A element)
        """Render the button element."""
        attrs = self.render_attrs()
        content = self.render_content()
        
        # Determine element type
        if self.href:
            # Link button
            attrs['href'] = self.href
            if self.target:
                attrs['target'] = self.target
            if self.disabled:
                attrs['tabindex'] = '-1'
                attrs['role'] = 'button'
                attrs['aria-disabled'] = 'true'
            return A(*content, **attrs)
        else:
            # Regular or form button
            if self.type:
                attrs['type'] = self.type
            else:
                attrs['type'] = 'button'  # Default to prevent form submission
                
            if self.name:
                attrs['name'] = self.name
            if self.value:
                attrs['value'] = self.value
            if self.form:
                attrs['form'] = self.form
                
            # Use FastHTML's Button element
            return Button(*content, **attrs)
