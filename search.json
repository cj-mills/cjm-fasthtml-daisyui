[
  {
    "objectID": "core/themes.html",
    "href": "core/themes.html",
    "title": "themes",
    "section": "",
    "text": "daisyUI provides 35 built-in themes:\n\nsource\n\n\n\n DaisyUITheme (value, names=None, module=None, qualname=None, type=None,\n               start=1, boundary=None)\n\nAll built-in daisyUI themes.\n\n# List all available themes\nprint(f\"Total themes: {len(DaisyUITheme)}\")\nprint(\"Themes:\", [theme.value for theme in DaisyUITheme])\n\nTotal themes: 35\nThemes: ['light', 'dark', 'cupcake', 'bumblebee', 'emerald', 'corporate', 'synthwave', 'retro', 'cyberpunk', 'valentine', 'halloween', 'garden', 'forest', 'aqua', 'lofi', 'pastel', 'fantasy', 'wireframe', 'black', 'luxury', 'dracula', 'cmyk', 'autumn', 'business', 'acid', 'lemonade', 'night', 'coffee', 'winter', 'dim', 'nord', 'sunset', 'caramellatte', 'abyss', 'silk']\n\n\n\n# Theme access\nprint(f\"Light theme: {DaisyUITheme.LIGHT.value}\")\nprint(f\"Dark theme: {DaisyUITheme.DARK.value}\")\nprint(f\"Cupcake theme: {DaisyUITheme.CUPCAKE.value}\")\n\nLight theme: light\nDark theme: dark\nCupcake theme: cupcake",
    "crumbs": [
      "core",
      "themes"
    ]
  },
  {
    "objectID": "core/themes.html#built-in-themes",
    "href": "core/themes.html#built-in-themes",
    "title": "themes",
    "section": "",
    "text": "daisyUI provides 35 built-in themes:\n\nsource\n\n\n\n DaisyUITheme (value, names=None, module=None, qualname=None, type=None,\n               start=1, boundary=None)\n\nAll built-in daisyUI themes.\n\n# List all available themes\nprint(f\"Total themes: {len(DaisyUITheme)}\")\nprint(\"Themes:\", [theme.value for theme in DaisyUITheme])\n\nTotal themes: 35\nThemes: ['light', 'dark', 'cupcake', 'bumblebee', 'emerald', 'corporate', 'synthwave', 'retro', 'cyberpunk', 'valentine', 'halloween', 'garden', 'forest', 'aqua', 'lofi', 'pastel', 'fantasy', 'wireframe', 'black', 'luxury', 'dracula', 'cmyk', 'autumn', 'business', 'acid', 'lemonade', 'night', 'coffee', 'winter', 'dim', 'nord', 'sunset', 'caramellatte', 'abyss', 'silk']\n\n\n\n# Theme access\nprint(f\"Light theme: {DaisyUITheme.LIGHT.value}\")\nprint(f\"Dark theme: {DaisyUITheme.DARK.value}\")\nprint(f\"Cupcake theme: {DaisyUITheme.CUPCAKE.value}\")\n\nLight theme: light\nDark theme: dark\nCupcake theme: cupcake",
    "crumbs": [
      "core",
      "themes"
    ]
  },
  {
    "objectID": "core/themes.html#theme-selection",
    "href": "core/themes.html#theme-selection",
    "title": "themes",
    "section": "Theme Selection",
    "text": "Theme Selection\nHelper functions for working with themes:\n\nsource\n\nget_theme_value\n\n get_theme_value (theme:Union[__main__.DaisyUITheme,str],\n                  allow_custom:bool=False)\n\nGet the string value of a theme, supporting both enum and string inputs. This allows flexibility in how themes are specified while maintaining type safety.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntheme\nUnion\n\nThe theme to validate (DaisyUITheme enum or string)\n\n\nallow_custom\nbool\nFalse\nIf True, allows any string value for custom themes\n\n\nReturns\nstr\n\nThe validated theme name as a string\n\n\n\n\n# Test theme value getter\nprint(get_theme_value(DaisyUITheme.LIGHT))\nprint(get_theme_value(\"dark\"))\n\n# Test invalid theme\ntry:\n    get_theme_value(\"invalid-theme\")\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n\nlight\ndark\nError: 'invalid-theme' is not a valid daisyUI theme. Valid themes are: abyss, acid, aqua, autumn, black, bumblebee, business, caramellatte, cmyk, coffee, corporate, cupcake, cyberpunk, dark, dim, dracula, emerald, fantasy, forest, garden, halloween, lemonade, light, lofi, luxury, night, nord, pastel, retro, silk, sunset, synthwave, valentine, winter, wireframe\n\n\n\n# Test with custom theme names (allow_custom=True)\nprint(\"Testing custom theme names:\")\nprint(f\"Custom theme 'my-custom-theme': {get_theme_value('my-custom-theme', allow_custom=True)}\")\nprint(f\"Custom theme 'neon_nights': {get_theme_value('neon_nights', allow_custom=True)}\")\n\n# Verify that custom themes are rejected when allow_custom=False\ntry:\n    get_theme_value(\"my-custom-theme\", allow_custom=False)\nexcept ValueError as e:\n    print(f\"\\nCustom theme rejected (expected): {e}\")\n\nTesting custom theme names:\nCustom theme 'my-custom-theme': my-custom-theme\nCustom theme 'neon_nights': neon_nights\n\nCustom theme rejected (expected): 'my-custom-theme' is not a valid daisyUI theme. Valid themes are: abyss, acid, aqua, autumn, black, bumblebee, business, caramellatte, cmyk, coffee, corporate, cupcake, cyberpunk, dark, dim, dracula, emerald, fantasy, forest, garden, halloween, lemonade, light, lofi, luxury, night, nord, pastel, retro, silk, sunset, synthwave, valentine, winter, wireframe",
    "crumbs": [
      "core",
      "themes"
    ]
  },
  {
    "objectID": "core/themes.html#custom-theme-creation",
    "href": "core/themes.html#custom-theme-creation",
    "title": "themes",
    "section": "Custom Theme Creation",
    "text": "Custom Theme Creation\nFor creating custom themes with full Python abstraction:\n\nsource\n\nThemeColors\nColor definitions for a daisyUI theme using OKLCH color space.\n\nsource\n\n\nThemeConfig\nComplete configuration for a custom daisyUI theme.\n\nsource\n\n\ncreate_theme_css\n\n create_theme_css (theme:__main__.ThemeConfig)\n\n*Generate CSS for a custom daisyUI theme.\nThis creates the CSS variables needed for a custom theme when using the CDN approach.*\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntheme\nThemeConfig\nTheme configuration with colors, sizes, and effects\n\n\nReturns\nstr\nCSS string with theme variables\n\n\n\nExample custom theme:\n\n# Create a custom theme configuration\ncustom_light_theme: ThemeConfig = {\n    \"name\": \"custom_light_theme\",\n    \"default\": False,\n    \"prefersdark\": False,\n    \"color_scheme\": \"light\",\n    \"colors\": {\n        \"base_100\": \"oklch(98% 0.005 220)\",\n        \"base_200\": \"oklch(96% 0.008 215)\",\n        \"base_300\": \"oklch(92% 0.012 210)\",\n        \"base_content\": \"oklch(18% 0.015 230)\",\n        \"primary\": \"oklch(55% 0.18 260)\",\n        \"primary_content\": \"oklch(98% 0.005 260)\",\n        \"secondary\": \"oklch(45% 0.12 340)\",\n        \"secondary_content\": \"oklch(98% 0.005 340)\",\n        \"accent\": \"oklch(65% 0.15 180)\",\n        \"accent_content\": \"oklch(15% 0.01 180)\",\n        \"neutral\": \"oklch(25% 0.01 240)\",\n        \"neutral_content\": \"oklch(95% 0.005 240)\",\n        \"info\": \"oklch(60% 0.16 230)\",\n        \"info_content\": \"oklch(98% 0.005 230)\",\n        \"success\": \"oklch(58% 0.14 150)\",\n        \"success_content\": \"oklch(98% 0.005 150)\",\n        \"warning\": \"oklch(72% 0.16 85)\",\n        \"warning_content\": \"oklch(18% 0.01 85)\",\n        \"error\": \"oklch(55% 0.20 15)\",\n        \"error_content\": \"oklch(98% 0.005 15)\"\n    },\n    \"radius_selector\": \"0.5rem\",\n    \"radius_field\": \"0.75rem\",\n    \"radius_box\": \"1.25rem\",\n    \"size_selector\": \"0.375rem\",\n    \"size_field\": \"0.375rem\",\n    \"border\": \"1.5px\",\n    \"depth\": 2,\n    \"noise\": 1\n}\n\n# Generate the CSS\ncss = create_theme_css(custom_light_theme)\nprint(css)\n\n:root:has(input.theme-controller[value=custom_light_theme]:checked),[data-theme=\"custom_light_theme\"] {\n  color-scheme: light;\n  --color-base-100: oklch(98% 0.005 220);\n  --color-base-200: oklch(96% 0.008 215);\n  --color-base-300: oklch(92% 0.012 210);\n  --color-base-content: oklch(18% 0.015 230);\n  --color-primary: oklch(55% 0.18 260);\n  --color-primary-content: oklch(98% 0.005 260);\n  --color-secondary: oklch(45% 0.12 340);\n  --color-secondary-content: oklch(98% 0.005 340);\n  --color-accent: oklch(65% 0.15 180);\n  --color-accent-content: oklch(15% 0.01 180);\n  --color-neutral: oklch(25% 0.01 240);\n  --color-neutral-content: oklch(95% 0.005 240);\n  --color-info: oklch(60% 0.16 230);\n  --color-info-content: oklch(98% 0.005 230);\n  --color-success: oklch(58% 0.14 150);\n  --color-success-content: oklch(98% 0.005 150);\n  --color-warning: oklch(72% 0.16 85);\n  --color-warning-content: oklch(18% 0.01 85);\n  --color-error: oklch(55% 0.20 15);\n  --color-error-content: oklch(98% 0.005 15);\n  --radius-selector: 0.5rem;\n  --radius-field: 0.75rem;\n  --radius-box: 1.25rem;\n  --size-selector: 0.375rem;\n  --size-field: 0.375rem;\n  --border: 1.5px;\n  --depth: 2;\n  --noise: 1;\n}",
    "crumbs": [
      "core",
      "themes"
    ]
  },
  {
    "objectID": "core/themes.html#theme-file-management",
    "href": "core/themes.html#theme-file-management",
    "title": "themes",
    "section": "Theme File Management",
    "text": "Theme File Management\nFunctions for saving and loading theme configurations:\n\nsource\n\nsave_theme_css\n\n save_theme_css (theme:__main__.ThemeConfig, path:Union[str,pathlib.Path])\n\nSave a theme configuration as a CSS file.\n\n\n\n\nType\nDetails\n\n\n\n\ntheme\nThemeConfig\nTheme configuration to convert to CSS\n\n\npath\nUnion\nFile path where CSS will be saved\n\n\nReturns\nNone\nNone\n\n\n\n\nsource\n\n\nsave_theme_json\n\n save_theme_json (theme:__main__.ThemeConfig,\n                  path:Union[str,pathlib.Path])\n\nSave a theme configuration as a JSON file for reuse.\n\n\n\n\nType\nDetails\n\n\n\n\ntheme\nThemeConfig\nTheme configuration to save\n\n\npath\nUnion\nFile path where JSON will be saved\n\n\nReturns\nNone\nNone\n\n\n\n\nsource\n\n\nload_theme_json\n\n load_theme_json (path:Union[str,pathlib.Path])\n\nLoad a theme configuration from a JSON file.\n\n\n\n\nType\nDetails\n\n\n\n\npath\nUnion\nPath to JSON file containing theme configuration\n\n\nReturns\nThemeConfig\nTheme configuration dictionary\n\n\n\n\nsource\n\n\nload_style_css\n\n load_style_css (path:Union[str,pathlib.Path])\n\nLoad a theme configuration from a CSS file to a FasthHTML Style element.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\npath\nUnion\nPath to CSS file containing theme configuration\n\n\nReturns\nfunctools.partial(&lt;function ft at 0x7f16ddbdaca0&gt;, ‘style’, void_=False)\nFasthHTML Style element\n\n\n\n\nfrom nbdev.config import get_config\ncfg = get_config()\n\n\nproject_dir = cfg.config_path\ncss_dir = project_dir/\"css\"\ncss_dir.mkdir(exist_ok=True, parents=True)\n\n\nsave_path = css_dir/f\"{custom_light_theme['name']}.css\"\nsave_theme_css(custom_light_theme, save_path)\n\n\nload_style_css(save_path)\n\n&lt;style&gt;:root:has(input.theme-controller[value=custom_light_theme]:checked),[data-theme=&quot;custom_light_theme&quot;] {\n  color-scheme: light;\n  --color-base-100: oklch(98% 0.005 220);\n  --color-base-200: oklch(96% 0.008 215);\n  --color-base-300: oklch(92% 0.012 210);\n  --color-base-content: oklch(18% 0.015 230);\n  --color-primary: oklch(55% 0.18 260);\n  --color-primary-content: oklch(98% 0.005 260);\n  --color-secondary: oklch(45% 0.12 340);\n  --color-secondary-content: oklch(98% 0.005 340);\n  --color-accent: oklch(65% 0.15 180);\n  --color-accent-content: oklch(15% 0.01 180);\n  --color-neutral: oklch(25% 0.01 240);\n  --color-neutral-content: oklch(95% 0.005 240);\n  --color-info: oklch(60% 0.16 230);\n  --color-info-content: oklch(98% 0.005 230);\n  --color-success: oklch(58% 0.14 150);\n  --color-success-content: oklch(98% 0.005 150);\n  --color-warning: oklch(72% 0.16 85);\n  --color-warning-content: oklch(18% 0.01 85);\n  --color-error: oklch(55% 0.20 15);\n  --color-error-content: oklch(98% 0.005 15);\n  --radius-selector: 0.5rem;\n  --radius-field: 0.75rem;\n  --radius-box: 1.25rem;\n  --size-selector: 0.375rem;\n  --size-field: 0.375rem;\n  --border: 1.5px;\n  --depth: 2;\n  --noise: 1;\n}&lt;/style&gt;",
    "crumbs": [
      "core",
      "themes"
    ]
  },
  {
    "objectID": "core/themes.html#theme-json-persistence",
    "href": "core/themes.html#theme-json-persistence",
    "title": "themes",
    "section": "Theme JSON Persistence",
    "text": "Theme JSON Persistence\nSave and load theme configurations as JSON files for easy reuse and sharing:\n\n# Create a new custom theme for JSON save/load demonstration\nneon_theme: ThemeConfig = {\n    \"name\": \"neon_nights\",\n    \"default\": False,\n    \"prefersdark\": True,\n    \"color_scheme\": \"dark\",\n    \"colors\": {\n        \"base_100\": \"oklch(10% 0.02 260)\",\n        \"base_200\": \"oklch(8% 0.02 260)\",\n        \"base_300\": \"oklch(6% 0.02 260)\",\n        \"base_content\": \"oklch(85% 0.15 320)\",\n        \"primary\": \"oklch(70% 0.25 320)\",\n        \"primary_content\": \"oklch(10% 0.02 320)\",\n        \"secondary\": \"oklch(60% 0.22 180)\",\n        \"secondary_content\": \"oklch(10% 0.02 180)\",\n        \"accent\": \"oklch(75% 0.28 90)\",\n        \"accent_content\": \"oklch(10% 0.02 90)\",\n        \"neutral\": \"oklch(20% 0.03 260)\",\n        \"neutral_content\": \"oklch(80% 0.10 320)\",\n        \"info\": \"oklch(65% 0.20 220)\",\n        \"info_content\": \"oklch(10% 0.02 220)\",\n        \"success\": \"oklch(65% 0.22 150)\",\n        \"success_content\": \"oklch(10% 0.02 150)\",\n        \"warning\": \"oklch(72% 0.25 60)\",\n        \"warning_content\": \"oklch(10% 0.02 60)\",\n        \"error\": \"oklch(68% 0.25 15)\",\n        \"error_content\": \"oklch(10% 0.02 15)\"\n    },\n    \"radius_selector\": \"0.25rem\",\n    \"radius_field\": \"0.125rem\",\n    \"radius_box\": \"0.5rem\",\n    \"size_selector\": \"0.25rem\",\n    \"size_field\": \"0.25rem\",\n    \"border\": \"2px\",\n    \"depth\": 0.5,\n    \"noise\": 0.2\n}\n\n# Save the theme as JSON\njson_path = css_dir / f\"{neon_theme['name']}.json\"\nsave_theme_json(neon_theme, json_path)\nprint(f\"Saved theme to: {json_path}\")\n\n# Verify the JSON file was created\nprint(f\"\\nJSON file contents:\")\nwith open(json_path, 'r') as f:\n    print(f.read()[:500] + \"...\")  # Show first 500 chars\n\nSaved theme to: /mnt/SN850X_8TB_EXT4/Projects/GitHub/cj-mills/cjm-fasthtml-daisyui/css/neon_nights.json\n\nJSON file contents:\n{\n  \"name\": \"neon_nights\",\n  \"default\": false,\n  \"prefersdark\": true,\n  \"color_scheme\": \"dark\",\n  \"colors\": {\n    \"base_100\": \"oklch(10% 0.02 260)\",\n    \"base_200\": \"oklch(8% 0.02 260)\",\n    \"base_300\": \"oklch(6% 0.02 260)\",\n    \"base_content\": \"oklch(85% 0.15 320)\",\n    \"primary\": \"oklch(70% 0.25 320)\",\n    \"primary_content\": \"oklch(10% 0.02 320)\",\n    \"secondary\": \"oklch(60% 0.22 180)\",\n    \"secondary_content\": \"oklch(10% 0.02 180)\",\n    \"accent\": \"oklch(75% 0.28 90)\",\n    \"accent_content\": \"o...\n\n\n\n# Load the theme back from JSON\nloaded_theme = load_theme_json(json_path)\n\n# Verify it loaded correctly\nprint(f\"Loaded theme name: {loaded_theme['name']}\")\nprint(f\"Color scheme: {loaded_theme['color_scheme']}\")\nprint(f\"Primary color: {loaded_theme['colors']['primary']}\")\nprint(f\"Border radius (box): {loaded_theme['radius_box']}\")\n\n# Convert the loaded theme to CSS\nloaded_css = create_theme_css(loaded_theme)\nprint(f\"\\nGenerated CSS from loaded theme (first 500 chars):\")\nprint(loaded_css[:500] + \"...\")\n\nLoaded theme name: neon_nights\nColor scheme: dark\nPrimary color: oklch(70% 0.25 320)\nBorder radius (box): 0.5rem\n\nGenerated CSS from loaded theme (first 500 chars):\n:root:has(input.theme-controller[value=neon_nights]:checked),[data-theme=\"neon_nights\"] {\n  color-scheme: dark;\n  --color-base-100: oklch(10% 0.02 260);\n  --color-base-200: oklch(8% 0.02 260);\n  --color-base-300: oklch(6% 0.02 260);\n  --color-base-content: oklch(85% 0.15 320);\n  --color-primary: oklch(70% 0.25 320);\n  --color-primary-content: oklch(10% 0.02 320);\n  --color-secondary: oklch(60% 0.22 180);\n  --color-secondary-content: oklch(10% 0.02 180);\n  --color-accent: oklch(75% 0.28 90);\n  --...\n\n\n\n# Save the loaded theme as CSS to demonstrate the full workflow\ncss_from_json_path = css_dir / f\"{loaded_theme['name']}_from_json.css\"\nsave_theme_css(loaded_theme, css_from_json_path)\n\n# Verify both CSS files have the same content\noriginal_css = create_theme_css(neon_theme)\nloaded_and_saved_css = Path(css_from_json_path).read_text()\n\nprint(f\"CSS files match: {original_css == loaded_and_saved_css}\")\nprint(f\"\\nWorkflow complete:\")\nprint(f\"1. Created theme configuration in Python\")\nprint(f\"2. Saved to JSON: {json_path}\")\nprint(f\"3. Loaded from JSON\")\nprint(f\"4. Generated CSS from loaded theme\")\nprint(f\"5. Saved CSS: {css_from_json_path}\")\n\nCSS files match: True\n\nWorkflow complete:\n1. Created theme configuration in Python\n2. Saved to JSON: /mnt/SN850X_8TB_EXT4/Projects/GitHub/cj-mills/cjm-fasthtml-daisyui/css/neon_nights.json\n3. Loaded from JSON\n4. Generated CSS from loaded theme\n5. Saved CSS: /mnt/SN850X_8TB_EXT4/Projects/GitHub/cj-mills/cjm-fasthtml-daisyui/css/neon_nights_from_json.css",
    "crumbs": [
      "core",
      "themes"
    ]
  },
  {
    "objectID": "core/themes.html#export",
    "href": "core/themes.html#export",
    "title": "themes",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "core",
      "themes"
    ]
  },
  {
    "objectID": "core/resources.html",
    "href": "core/resources.html",
    "title": "resources",
    "section": "",
    "text": "The library provides pre-configured CDN headers for daisyUI v5 and Tailwind CSS v4:\n\nsource\n\n\n\n get_daisyui_headers (include_themes:bool=True)\n\nGet the standard daisyUI and Tailwind CSS CDN headers.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninclude_themes\nbool\nTrue\nInclude the daisyUI themes CSS file\n\n\nReturns\nList\n\nList of Link and Script elements for daisyUI and Tailwind CSS\n\n\n\n\nget_daisyui_headers()\n\n[link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5', 'type': 'text/css'}),\n link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5/themes.css', 'type': 'text/css'}),\n link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties.css', 'type': 'text/css'}),\n link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css', 'type': 'text/css'}),\n [script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]]\n\n\nExample usage:\n\n# Get all headers including themes\nheaders = get_daisyui_headers()\nprint(f\"Number of headers: {len(headers)}\")\nfor h in headers:\n    print(h)\n\nNumber of headers: 5\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/themes.css\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties.css\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css\" type=\"text/css\"&gt;\n[script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]\n\n\n\n# Get headers without themes (for custom theme usage)\nheaders_no_themes = get_daisyui_headers(include_themes=False)\nprint(f\"Number of headers without themes: {len(headers_no_themes)}\")\nfor h in headers_no_themes:\n    print(h)\n\nNumber of headers without themes: 4\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties.css\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css\" type=\"text/css\"&gt;\n[script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]",
    "crumbs": [
      "core",
      "resources"
    ]
  },
  {
    "objectID": "core/resources.html#core-cdn-resources",
    "href": "core/resources.html#core-cdn-resources",
    "title": "resources",
    "section": "",
    "text": "The library provides pre-configured CDN headers for daisyUI v5 and Tailwind CSS v4:\n\nsource\n\n\n\n get_daisyui_headers (include_themes:bool=True)\n\nGet the standard daisyUI and Tailwind CSS CDN headers.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninclude_themes\nbool\nTrue\nInclude the daisyUI themes CSS file\n\n\nReturns\nList\n\nList of Link and Script elements for daisyUI and Tailwind CSS\n\n\n\n\nget_daisyui_headers()\n\n[link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5', 'type': 'text/css'}),\n link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5/themes.css', 'type': 'text/css'}),\n link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties.css', 'type': 'text/css'}),\n link((),{'rel': 'stylesheet', 'href': 'https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css', 'type': 'text/css'}),\n [script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]]\n\n\nExample usage:\n\n# Get all headers including themes\nheaders = get_daisyui_headers()\nprint(f\"Number of headers: {len(headers)}\")\nfor h in headers:\n    print(h)\n\nNumber of headers: 5\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/themes.css\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties.css\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css\" type=\"text/css\"&gt;\n[script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]\n\n\n\n# Get headers without themes (for custom theme usage)\nheaders_no_themes = get_daisyui_headers(include_themes=False)\nprint(f\"Number of headers without themes: {len(headers_no_themes)}\")\nfor h in headers_no_themes:\n    print(h)\n\nNumber of headers without themes: 4\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties.css\" type=\"text/css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css\" type=\"text/css\"&gt;\n[script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]",
    "crumbs": [
      "core",
      "resources"
    ]
  },
  {
    "objectID": "core/resources.html#custom-resources",
    "href": "core/resources.html#custom-resources",
    "title": "resources",
    "section": "Custom Resources",
    "text": "Custom Resources\nFor adding custom CSS files, JavaScript libraries, or local theme files:\n\nsource\n\ncreate_css_link\n\n create_css_link (href:str, media:Optional[str]=None,\n                  crossorigin:Optional[Literal['anonymous','use-\n                  credentials']]=None)\n\nCreate a CSS link element with optional attributes.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nhref\nstr\n\nURL or path to CSS file\n\n\nmedia\nOptional\nNone\nMedia query (e.g., “screen”, “print”)\n\n\ncrossorigin\nOptional\nNone\n\n\n\nReturns\nfunctools.partial(&lt;function ft_hx at 0x7f99fd89c2c0&gt;, ‘link’)\n\nLink element for CSS stylesheet\n\n\n\n\nsource\n\n\ncreate_js_script\n\n create_js_script (src:str, async_:bool=False, defer:bool=False,\n                   module:bool=False,\n                   crossorigin:Optional[Literal['anonymous','use-\n                   credentials']]=None)\n\nCreate a JavaScript script element with optional attributes.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsrc\nstr\n\nURL or path to JavaScript file\n\n\nasync_\nbool\nFalse\nLoad script asynchronously\n\n\ndefer\nbool\nFalse\nDefer script execution\n\n\nmodule\nbool\nFalse\nES6 module\n\n\ncrossorigin\nOptional\nNone\n\n\n\nReturns\nScript\n\nScript element for JavaScript file",
    "crumbs": [
      "core",
      "resources"
    ]
  },
  {
    "objectID": "core/resources.html#combined-header-builder",
    "href": "core/resources.html#combined-header-builder",
    "title": "resources",
    "section": "Combined Header Builder",
    "text": "Combined Header Builder\nA comprehensive function to build all headers with custom resources:\n\nsource\n\nbuild_headers\n\n build_headers (include_themes:bool=True, custom_css:Optional[List[Union[s\n                tr,functools.partial(&lt;functionft_hxat0x7f99fd89c2c0&gt;,'link\n                ')]]]=None,\n                custom_js:Optional[List[Union[str,Script]]]=None,\n                custom_theme_css:Optional[str]=None, custom_theme_paths:Op\n                tional[List[Union[str,pathlib.Path]]]=None)\n\n*Build a complete set of headers for a FastHTML app with daisyUI and Tailwind.\nThe order of headers is: 1. daisyUI CSS 2. daisyUI themes CSS (if included) 3. Custom theme CSS (if provided as string) 4. Custom theme CSS files (if provided as Path objects) 5. Custom CSS files 6. Tailwind CSS JavaScript 7. Custom JavaScript files*\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninclude_themes\nbool\nTrue\nInclude daisyUI themes\n\n\ncustom_css\nOptional\nNone\nAdditional CSS files\n\n\ncustom_js\nOptional\nNone\nAdditional JS files\n\n\ncustom_theme_css\nOptional\nNone\nCustom theme CSS as a string\n\n\ncustom_theme_paths\nOptional\nNone\nList of paths to custom theme CSS files\n\n\nReturns\nList\n\nList of Link, Script, and Style elements for complete app headers\n\n\n\nExample with custom resources:\n\n# Build headers with custom resources\nfrom nbdev.config import get_config\ncfg = get_config()\nproject_dir = cfg.config_path\n\ncustom_headers = build_headers(\n    include_themes=True,\n    custom_css=[\n        \"/static/custom.css\",\n        \"https://cdn.example.com/fonts.css\"\n    ],\n    custom_js=[\n        create_js_script(\"/static/app.js\", defer=True),\n        \"https://cdn.example.com/analytics.js\"\n    ],\n    custom_theme_paths=[project_dir / \"css\" / \"custom_light_theme.css\"]\n)\n\nprint(f\"Total headers: {len(custom_headers)}\")\nfor i, h in enumerate(custom_headers):\n    print(f\"{i+1}. {h}\")\n\nTotal headers: 9\n1. &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5\" type=\"text/css\"&gt;\n2. &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css\" type=\"text/css\"&gt;\n3. &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/themes.css\" type=\"text/css\"&gt;\n4. &lt;style&gt;:root:has(input.theme-controller[value=custom_light_theme]:checked),[data-theme=\"custom_light_theme\"] {\n  color-scheme: light;\n  --color-base-100: oklch(98% 0.005 220);\n  --color-base-200: oklch(96% 0.008 215);\n  --color-base-300: oklch(92% 0.012 210);\n  --color-base-content: oklch(18% 0.015 230);\n  --color-primary: oklch(55% 0.18 260);\n  --color-primary-content: oklch(98% 0.005 260);\n  --color-secondary: oklch(45% 0.12 340);\n  --color-secondary-content: oklch(98% 0.005 340);\n  --color-accent: oklch(65% 0.15 180);\n  --color-accent-content: oklch(15% 0.01 180);\n  --color-neutral: oklch(25% 0.01 240);\n  --color-neutral-content: oklch(95% 0.005 240);\n  --color-info: oklch(60% 0.16 230);\n  --color-info-content: oklch(98% 0.005 230);\n  --color-success: oklch(58% 0.14 150);\n  --color-success-content: oklch(98% 0.005 150);\n  --color-warning: oklch(72% 0.16 85);\n  --color-warning-content: oklch(18% 0.01 85);\n  --color-error: oklch(55% 0.20 15);\n  --color-error-content: oklch(98% 0.005 15);\n  --radius-selector: 0.5rem;\n  --radius-field: 0.75rem;\n  --radius-box: 1.25rem;\n  --size-selector: 0.375rem;\n  --size-field: 0.375rem;\n  --border: 1.5px;\n  --depth: 2;\n  --noise: 1;\n}&lt;/style&gt;\n5. &lt;link rel=\"stylesheet\" href=\"/static/custom.css\" type=\"text/css\"&gt;\n6. &lt;link rel=\"stylesheet\" href=\"https://cdn.example.com/fonts.css\" type=\"text/css\"&gt;\n7. [script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]\n8. &lt;script src=\"/static/app.js\"&gt;&lt;/script&gt;\n9. &lt;script src=\"https://cdn.example.com/analytics.js\"&gt;&lt;/script&gt;\n\n\n\n\nCreating CSS Links with Media and CORS\nThe create_css_link() function supports media queries and CORS settings:\n\n# Basic CSS link\nbasic_css = create_css_link(\"/static/styles.css\")\nprint(\"Basic CSS link:\")\nprint(basic_css)\n\n# CSS link with media query for print styles\nprint_css = create_css_link(\n    href=\"/static/print.css\",\n    media=\"print\"\n)\nprint(\"\\nPrint-only CSS link:\")\nprint(print_css)\n\n# CSS link for dark mode with media query\ndark_mode_css = create_css_link(\n    href=\"/static/dark-theme.css\",\n    media=\"(prefers-color-scheme: dark)\"\n)\nprint(\"\\nDark mode CSS link:\")\nprint(dark_mode_css)\n\n# External CSS with CORS enabled (for fonts from CDN)\nfont_css = create_css_link(\n    href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap\",\n    crossorigin=\"anonymous\"\n)\nprint(\"\\nExternal font CSS with CORS:\")\nprint(font_css)\n\n# CSS for large screens only\ndesktop_css = create_css_link(\n    href=\"/static/desktop.css\",\n    media=\"screen and (min-width: 1024px)\"\n)\nprint(\"\\nDesktop-only CSS link:\")\nprint(desktop_css)\n\nBasic CSS link:\n&lt;link rel=\"stylesheet\" href=\"/static/styles.css\" type=\"text/css\"&gt;\n\nPrint-only CSS link:\n&lt;link rel=\"stylesheet\" href=\"/static/print.css\" type=\"text/css\" media=\"print\"&gt;\n\nDark mode CSS link:\n&lt;link rel=\"stylesheet\" href=\"/static/dark-theme.css\" type=\"text/css\" media=\"(prefers-color-scheme: dark)\"&gt;\n\nExternal font CSS with CORS:\n&lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&amp;display=swap\" type=\"text/css\" crossorigin=\"anonymous\"&gt;\n\nDesktop-only CSS link:\n&lt;link rel=\"stylesheet\" href=\"/static/desktop.css\" type=\"text/css\" media=\"screen and (min-width: 1024px)\"&gt;\n\n\n\n\nCreating JavaScript Scripts with Attributes\nSimilarly, create_js_script() supports various loading strategies:\n\n# Example: Building a complete set of headers with media queries and CORS\ncomplete_headers = build_headers(\n    include_themes=True,\n    custom_css=[\n        create_css_link(\"/static/base.css\"),\n        create_css_link(\"/static/print.css\", media=\"print\"),\n        create_css_link(\n            \"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700\",\n            crossorigin=\"anonymous\"\n        ),\n        create_css_link(\n            \"/static/mobile.css\", \n            media=\"screen and (max-width: 768px)\"\n        )\n    ],\n    custom_js=[\n        create_js_script(\"/static/app.js\", defer=True),\n        create_js_script(\"/static/analytics.js\", async_=True),\n        create_js_script(\n            \"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\",\n            defer=True,\n            crossorigin=\"anonymous\"\n        )\n    ]\n)\n\nprint(f\"Complete headers with media queries and CORS ({len(complete_headers)} total):\\n\")\nfor i, header in enumerate(complete_headers, 1):\n    print(f\"{i}. {header}\")\n\nComplete headers with media queries and CORS (11 total):\n\n1. &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5\" type=\"text/css\"&gt;\n2. &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css\" type=\"text/css\"&gt;\n3. &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/daisyui@5/themes.css\" type=\"text/css\"&gt;\n4. &lt;link rel=\"stylesheet\" href=\"/static/base.css\" type=\"text/css\"&gt;\n5. &lt;link rel=\"stylesheet\" href=\"/static/print.css\" type=\"text/css\" media=\"print\"&gt;\n6. &lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700\" type=\"text/css\" crossorigin=\"anonymous\"&gt;\n7. &lt;link rel=\"stylesheet\" href=\"/static/mobile.css\" type=\"text/css\" media=\"screen and (max-width: 768px)\"&gt;\n8. [script(('',),{'src': 'https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4'})]\n9. &lt;script src=\"/static/app.js\"&gt;&lt;/script&gt;\n10. &lt;script src=\"/static/analytics.js\"&gt;&lt;/script&gt;\n11. &lt;script src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;",
    "crumbs": [
      "core",
      "resources"
    ]
  },
  {
    "objectID": "core/resources.html#export",
    "href": "core/resources.html#export",
    "title": "resources",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "core",
      "resources"
    ]
  },
  {
    "objectID": "utilities/semantic_gradients.html",
    "href": "utilities/semantic_gradients.html",
    "title": "Gradient Stop Utilities",
    "section": "",
    "text": "source",
    "crumbs": [
      "utilities",
      "Gradient Stop Utilities"
    ]
  },
  {
    "objectID": "utilities/semantic_gradients.html#practical-examples",
    "href": "utilities/semantic_gradients.html#practical-examples",
    "title": "Gradient Stop Utilities",
    "section": "Practical Examples",
    "text": "Practical Examples\nTest with FastHTML components to show practical usage:\n\nsource\n\ntest_semantic_gradients_fasthtml_examples\n\n test_semantic_gradients_fasthtml_examples ()\n\nTest practical usage patterns with FastHTML components.\n\n\nExported source\ndef test_semantic_gradients_fasthtml_examples():\n    \"\"\"Test practical usage patterns with FastHTML components.\"\"\"\n    from fasthtml.common import Div, Button, H1, P, Span\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_display.card import card\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    \n    # Create a gradient header with semantic colors\n    gradient_header = Div(\n        H1(\"Gradient Header\", cls=str(text_dui.primary_content)),\n        cls=combine_classes(\n            bg_linear.to_r,\n            from_dui.primary,\n            to_dui.secondary,\n            p(8)\n        )\n    )\n    assert \"from-primary\" in gradient_header.attrs['class']\n    assert \"to-secondary\" in gradient_header.attrs['class']\n\n    return Div(\n        gradient_header\n    )\n\n# Run the test\ntest_semantic_gradients_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"bg-linear-to-r from-primary to-secondary p-8\"&gt;\n    &lt;h1 class=\"text-primary-content\"&gt;Gradient Header&lt;/h1&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_semantic_gradients_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "Gradient Stop Utilities"
    ]
  },
  {
    "objectID": "utilities/glass.html",
    "href": "utilities/glass.html",
    "title": "Glass Effect Utility",
    "section": "",
    "text": "source",
    "crumbs": [
      "utilities",
      "Glass Effect Utility"
    ]
  },
  {
    "objectID": "utilities/glass.html#practical-examples",
    "href": "utilities/glass.html#practical-examples",
    "title": "Glass Effect Utility",
    "section": "Practical Examples",
    "text": "Practical Examples\nTest with FastHTML components to show practical usage:\n\nsource\n\ntest_glass_fasthtml_examples\n\n test_glass_fasthtml_examples ()\n\nTest practical usage patterns with FastHTML components.\n\n\nExported source\ndef test_glass_fasthtml_examples():\n    \"\"\"Test practical usage patterns with FastHTML components.\"\"\"\n    from fasthtml.common import Div, Button, H1, P, Span\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.effects import shadow, opacity\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_display.card import card\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Create a glass card with dark mode support\n    glass_card = Div(\n        P(\"Glass morphism effect\"),\n        cls=combine_classes(\n            glass,\n            bg_dui.base_100.opacity(30),\n            text_dui.base_content,\n            p(6)\n        )\n    )\n    assert \"glass\" in glass_card.attrs['class']\n\n    # Create a glass card with opacity\n    glass_card_opacity = Div(\n        P(\"Glass morphism effect with opacity\"),\n        cls=combine_classes(\n            glass,\n            bg_dui.base_100.opacity(30),\n            text_dui.base_content,\n            p(6),\n            opacity(95)\n        )\n    )\n    assert \"glass\" in glass_card_opacity.attrs['class']\n    assert \"opacity-95\" in glass_card_opacity.attrs['class']\n\n    return Div(\n        glass_card,\n        glass_card_opacity,\n        style=\"background-image: url(https://img.daisyui.com/images/stock/photo-1507358522600-9f71e620c44e.webp\"\n    )\n\n# Run the test\ntest_glass_fasthtml_examples()\n\n\n&lt;div style=\"background-image: url(https://img.daisyui.com/images/stock/photo-1507358522600-9f71e620c44e.webp\"&gt;\n  &lt;div class=\"glass bg-base-100/30 text-base-content p-6\"&gt;\n    &lt;p&gt;Glass morphism effect&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"glass bg-base-100/30 text-base-content p-6 opacity-95\"&gt;\n    &lt;p&gt;Glass morphism effect with opacity&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_glass_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "Glass Effect Utility"
    ]
  },
  {
    "objectID": "cli/explorer.html",
    "href": "cli/explorer.html",
    "title": "DaisyUI Explorer",
    "section": "",
    "text": "Set up the DaisyUI configuration for the CLI:\n\nsource\n\n\n\n initialize_daisyui_cli ()\n\nInitialize the CLI with DaisyUI configuration.\n\nsource\n\n\n\n\n setup_argument_parser (config:Optional[cjm_fasthtml_tailwind.cli.cli_conf\n                        ig.LibraryConfig]=None)\n\nSet up the main argument parser with all subcommands.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nMain argument parser with all subcommands",
    "crumbs": [
      "cli",
      "DaisyUI Explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#daisyui-specific-configuration",
    "href": "cli/explorer.html#daisyui-specific-configuration",
    "title": "DaisyUI Explorer",
    "section": "",
    "text": "Set up the DaisyUI configuration for the CLI:\n\nsource\n\n\n\n initialize_daisyui_cli ()\n\nInitialize the CLI with DaisyUI configuration.\n\nsource\n\n\n\n\n setup_argument_parser (config:Optional[cjm_fasthtml_tailwind.cli.cli_conf\n                        ig.LibraryConfig]=None)\n\nSet up the main argument parser with all subcommands.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconfig\nOptional\nNone\nOptional configuration to use\n\n\nReturns\nArgumentParser\n\nMain argument parser with all subcommands",
    "crumbs": [
      "cli",
      "DaisyUI Explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#cli-entry-point",
    "href": "cli/explorer.html#cli-entry-point",
    "title": "DaisyUI Explorer",
    "section": "CLI Entry Point",
    "text": "CLI Entry Point\nMain function for the DaisyUI console script:\n\nsource\n\nmain\n\n main ()\n\nCLI entry point for exploring cjm-fasthtml-daisyui components.",
    "crumbs": [
      "cli",
      "DaisyUI Explorer"
    ]
  },
  {
    "objectID": "cli/explorer.html#export",
    "href": "cli/explorer.html#export",
    "title": "DaisyUI Explorer",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "DaisyUI Explorer"
    ]
  },
  {
    "objectID": "components/actions/button.html",
    "href": "components/actions/button.html",
    "title": "button",
    "section": "",
    "text": "Base Button\nThe base button component:\n\n\nExported source\nbtn = SingleValueFactory(\"btn\", \"Base button component\") # Base button component\n\n\n\n\nButton Colors\nButton color variants using daisyUI semantic colors:\n\n\nExported source\nbtn_colors = enums_to_simple_factory(btn, [SemanticColorBrand, SemanticColorStatus], \"Button color variants using daisyUI semantic colors\") # Button color variants\n\n\n\n\nButton Styles\nDifferent button style variants:\n\nsource\n\n\nLinkStyle\n\n LinkStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass LinkStyle(str, Enum):\n    LINK = \"link\"\n\nbtn_styles = enums_to_simple_factory(btn, [OutlineStyle, DashStyle, SoftStyle, GhostStyle, LinkStyle], \"Button style variants\") # Button style variants\n\n\n\n\nButton Sizes\nButton size variants:\n\n\nExported source\nbtn_sizes = enums_to_simple_factory(btn, [DaisyUINamedSize], \"Button size variants from extra small to extra large\") # Button size variants\n\n\n\n\nButton Modifiers\nButton modifier utilities:\n\n\nExported source\nbtn_modifiers = SimpleFactory(\n    {\n        \"wide\": \"btn-wide\",\n        \"block\": \"btn-block\",\n        \"square\": \"btn-square\",\n        \"circle\": \"btn-circle\"\n    },\n    \"Button shape and layout modifiers\"\n) # Button modifiers\n\n\n\n\nButton Behaviors\nButton behavior utilities:\n\n\nExported source\nbtn_behaviors = SimpleFactory(\n    {\n        \"active\": \"btn-active\",\n        \"disabled\": \"btn-disabled\"\n    },\n    \"Button behavior states (active, disabled)\"\n) # Button behavior states\n\n\n\n\nButton Test Examples\n\nsource\n\n\ntest_button_basic_examples\n\n test_button_basic_examples ()\n\nTest basic button utilities.\n\n\nExported source\ndef test_button_basic_examples():\n    \"\"\"Test basic button utilities.\"\"\"\n    # Basic button\n    assert str(btn) == \"btn\"\n    \n    # Test with modifiers\n    assert str(btn.hover) == \"hover:btn\"\n    assert str(btn.md) == \"md:btn\"\n    assert str(btn.dark) == \"dark:btn\"\n\n# Run the tests\ntest_button_basic_examples()\n\n\n\nsource\n\n\ntest_button_colors_examples\n\n test_button_colors_examples ()\n\nTest button color variants.\n\n\nExported source\ndef test_button_colors_examples():\n    \"\"\"Test button color variants.\"\"\"\n    # All color variants\n    assert str(btn_colors.neutral) == \"btn-neutral\"\n    assert str(btn_colors.primary) == \"btn-primary\"\n    assert str(btn_colors.secondary) == \"btn-secondary\"\n    assert str(btn_colors.accent) == \"btn-accent\"\n    assert str(btn_colors.info) == \"btn-info\"\n    assert str(btn_colors.success) == \"btn-success\"\n    assert str(btn_colors.warning) == \"btn-warning\"\n    assert str(btn_colors.error) == \"btn-error\"\n    \n    # With modifiers\n    assert str(btn_colors.primary.hover) == \"hover:btn-primary\"\n    assert str(btn_colors.success.focus) == \"focus:btn-success\"\n\n# Run the tests\ntest_button_colors_examples()\n\n\n\nsource\n\n\ntest_button_styles_examples\n\n test_button_styles_examples ()\n\nTest button style variants.\n\n\nExported source\ndef test_button_styles_examples():\n    \"\"\"Test button style variants.\"\"\"\n    assert str(btn_styles.outline) == \"btn-outline\"\n    assert str(btn_styles.dash) == \"btn-dash\"\n    assert str(btn_styles.soft) == \"btn-soft\"\n    assert str(btn_styles.ghost) == \"btn-ghost\"\n    assert str(btn_styles.link) == \"btn-link\"\n\n# Run the tests\ntest_button_styles_examples()\n\n\n\nsource\n\n\ntest_button_sizes_examples\n\n test_button_sizes_examples ()\n\nTest button size variants.\n\n\nExported source\ndef test_button_sizes_examples():\n    \"\"\"Test button size variants.\"\"\"\n    assert str(btn_sizes.xs) == \"btn-xs\"\n    assert str(btn_sizes.sm) == \"btn-sm\"\n    assert str(btn_sizes.md) == \"btn-md\"\n    assert str(btn_sizes.lg) == \"btn-lg\"\n    assert str(btn_sizes.xl) == \"btn-xl\"\n    \n    # With responsive modifiers\n    assert str(btn_sizes.xs.sm) == \"sm:btn-xs\"\n    assert str(btn_sizes.lg.md) == \"md:btn-lg\"\n\n# Run the tests\ntest_button_sizes_examples()\n\n\n\nsource\n\n\ntest_button_modifiers_examples\n\n test_button_modifiers_examples ()\n\nTest button modifier utilities.\n\n\nExported source\ndef test_button_modifiers_examples():\n    \"\"\"Test button modifier utilities.\"\"\"\n    assert str(btn_modifiers.wide) == \"btn-wide\"\n    assert str(btn_modifiers.block) == \"btn-block\"\n    assert str(btn_modifiers.square) == \"btn-square\"\n    assert str(btn_modifiers.circle) == \"btn-circle\"\n\n# Run the tests\ntest_button_modifiers_examples()\n\n\n\nsource\n\n\ntest_button_behaviors_examples\n\n test_button_behaviors_examples ()\n\nTest button behavior states.\n\n\nExported source\ndef test_button_behaviors_examples():\n    \"\"\"Test button behavior states.\"\"\"\n    assert str(btn_behaviors.active) == \"btn-active\"\n    assert str(btn_behaviors.disabled) == \"btn-disabled\"\n\n# Run the tests\ntest_button_behaviors_examples()\n\n\n\nsource\n\n\ntest_button_basic_fasthtml_examples\n\n test_button_basic_fasthtml_examples ()\n\nTest basic button examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_button_basic_fasthtml_examples():\n    \"\"\"Test basic button examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    \n    # Basic button\n    basic_btn = Button(\"Default\", cls=str(btn))\n    assert basic_btn.attrs['class'] == \"btn\"\n    \n    # Button wide\n    wide_btn = Button(\"Wide\", cls=combine_classes(btn, btn_modifiers.wide))\n    assert \"btn\" in wide_btn.attrs['class']\n    assert \"btn-wide\" in wide_btn.attrs['class']\n    \n    # Button block\n    block_btn = Button(\"block\", cls=combine_classes(btn, btn_modifiers.block))\n    assert \"btn\" in block_btn.attrs['class']\n    assert \"btn-block\" in block_btn.attrs['class']\n    \n    # Buttons with any HTML tags\n    link_btn = A(\"Link\", role=\"button\", cls=str(btn))\n    assert link_btn.attrs['class'] == \"btn\"\n    assert link_btn.attrs['role'] == \"button\"\n    \n    submit_btn = Button(\"Button\", type=\"submit\", cls=str(btn))\n    assert submit_btn.attrs['type'] == \"submit\"\n    \n    input_btn = Input(type=\"button\", value=\"Input\", cls=str(btn))\n    assert input_btn.attrs['type'] == \"button\"\n    assert input_btn.attrs['value'] == \"Input\"\n    \n    input_submit = Input(type=\"submit\", value=\"Submit\", cls=str(btn))\n    assert input_submit.attrs['type'] == \"submit\"\n    \n    input_radio = Input(type=\"radio\", aria_label=\"Radio\", cls=str(btn))\n    assert input_radio.attrs['type'] == \"radio\"\n    assert input_radio.attrs['aria-label'] == \"Radio\"\n    \n    input_checkbox = Input(type=\"checkbox\", aria_label=\"Checkbox\", cls=str(btn))\n    assert input_checkbox.attrs['type'] == \"checkbox\"\n    \n    input_reset = Input(type=\"reset\", value=\"Reset\", cls=str(btn))\n    assert input_reset.attrs['type'] == \"reset\"\n    \n    # Return all elements in a Div\n    return Div(\n        basic_btn,\n        wide_btn,\n        block_btn,\n        link_btn,\n        submit_btn,\n        input_btn,\n        input_submit,\n        input_radio,\n        input_checkbox,\n        input_reset\n    )\n\n# Run the tests\ntest_button_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button class=\"btn\"&gt;Default&lt;/button&gt;&lt;button class=\"btn btn-wide\"&gt;Wide&lt;/button&gt;&lt;button class=\"btn btn-block\"&gt;block&lt;/button&gt;&lt;a href=\"#\" role=\"button\" class=\"btn\"&gt;Link&lt;/a&gt;&lt;button type=\"submit\" class=\"btn\"&gt;Button&lt;/button&gt;  &lt;input type=\"button\" value=\"Input\" class=\"btn\"&gt;\n  &lt;input type=\"submit\" value=\"Submit\" class=\"btn\"&gt;\n  &lt;input type=\"radio\" aria-label=\"Radio\" class=\"btn\"&gt;\n  &lt;input type=\"checkbox\" aria-label=\"Checkbox\" class=\"btn\"&gt;\n  &lt;input type=\"reset\" value=\"Reset\" class=\"btn\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_button_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_button_sizes_fasthtml_examples\n\n test_button_sizes_fasthtml_examples ()\n\nTest button size variations and responsive buttons.\n\n\nExported source\ndef test_button_sizes_fasthtml_examples():\n    \"\"\"Test button size variations and responsive buttons.\"\"\"\n    from fasthtml.common import Button, Div\n    \n    # Button sizes\n    xs_btn = Button(\"Xsmall\", cls=combine_classes(btn, btn_sizes.xs))\n    assert \"btn-xs\" in xs_btn.attrs['class']\n    \n    sm_btn = Button(\"Small\", cls=combine_classes(btn, btn_sizes.sm))\n    assert \"btn-sm\" in sm_btn.attrs['class']\n    \n    md_btn = Button(\"Medium\", cls=str(btn))\n    assert md_btn.attrs['class'] == \"btn\"\n    \n    lg_btn = Button(\"Large\", cls=combine_classes(btn, btn_sizes.lg))\n    assert \"btn-lg\" in lg_btn.attrs['class']\n    \n    xl_btn = Button(\"Xlarge\", cls=combine_classes(btn, btn_sizes.xl))\n    assert \"btn-xl\" in xl_btn.attrs['class']\n    \n    # Responsive button\n    responsive_btn = Button(\n        \"Responsive\",\n        cls=combine_classes(\n            btn,\n            btn_sizes.xs,\n            btn_sizes.sm.sm,\n            btn_sizes.md.md,\n            btn_sizes.lg.lg,\n            btn_sizes.xl.xl\n        )\n    )\n    assert \"btn\" in responsive_btn.attrs['class']\n    assert \"btn-xs\" in responsive_btn.attrs['class']\n    assert \"sm:btn-sm\" in responsive_btn.attrs['class']\n    assert \"md:btn-md\" in responsive_btn.attrs['class']\n    assert \"lg:btn-lg\" in responsive_btn.attrs['class']\n    assert \"xl:btn-xl\" in responsive_btn.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        xs_btn,\n        sm_btn,\n        md_btn,\n        lg_btn,\n        xl_btn,\n        responsive_btn\n    )\n\n# Run the tests\ntest_button_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button class=\"btn btn-xs\"&gt;Xsmall&lt;/button&gt;&lt;button class=\"btn btn-sm\"&gt;Small&lt;/button&gt;&lt;button class=\"btn\"&gt;Medium&lt;/button&gt;&lt;button class=\"btn btn-lg\"&gt;Large&lt;/button&gt;&lt;button class=\"btn btn-xl\"&gt;Xlarge&lt;/button&gt;&lt;button class=\"btn btn-xs sm:btn-sm md:btn-md lg:btn-lg xl:btn-xl\"&gt;Responsive&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_button_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_button_colors_variants_fasthtml_examples\n\n test_button_colors_variants_fasthtml_examples ()\n\nTest button color variants including soft, outline, and dash styles.\n\n\nExported source\ndef test_button_colors_variants_fasthtml_examples():\n    \"\"\"Test button color variants including soft, outline, and dash styles.\"\"\"\n    from fasthtml.common import Button, Div\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    \n    # Button colors\n    neutral_btn = Button(\"Neutral\", cls=combine_classes(btn, btn_colors.neutral))\n    assert \"btn-neutral\" in neutral_btn.attrs['class']\n    \n    primary_btn = Button(\"Primary\", cls=combine_classes(btn, btn_colors.primary))\n    assert \"btn-primary\" in primary_btn.attrs['class']\n    \n    secondary_btn = Button(\"Secondary\", cls=combine_classes(btn, btn_colors.secondary))\n    assert \"btn-secondary\" in secondary_btn.attrs['class']\n    \n    accent_btn = Button(\"Accent\", cls=combine_classes(btn, btn_colors.accent))\n    assert \"btn-accent\" in accent_btn.attrs['class']\n    \n    info_btn = Button(\"Info\", cls=combine_classes(btn, btn_colors.info))\n    assert \"btn-info\" in info_btn.attrs['class']\n    \n    success_btn = Button(\"Success\", cls=combine_classes(btn, btn_colors.success))\n    assert \"btn-success\" in success_btn.attrs['class']\n    \n    warning_btn = Button(\"Warning\", cls=combine_classes(btn, btn_colors.warning))\n    assert \"btn-warning\" in warning_btn.attrs['class']\n    \n    error_btn = Button(\"Error\", cls=combine_classes(btn, btn_colors.error))\n    assert \"btn-error\" in error_btn.attrs['class']\n    \n    # Soft buttons\n    soft_default = Button(\"Default\", cls=combine_classes(btn, btn_styles.soft))\n    assert \"btn-soft\" in soft_default.attrs['class']\n    \n    soft_primary = Button(\"Primary\", cls=combine_classes(btn, btn_styles.soft, btn_colors.primary))\n    assert \"btn-soft\" in soft_primary.attrs['class']\n    assert \"btn-primary\" in soft_primary.attrs['class']\n    \n    # Outline buttons\n    outline_default = Button(\"Default\", cls=combine_classes(btn, btn_styles.outline))\n    assert \"btn-outline\" in outline_default.attrs['class']\n    \n    outline_primary = Button(\"Primary\", cls=combine_classes(btn, btn_styles.outline, btn_colors.primary))\n    assert \"btn-outline\" in outline_primary.attrs['class']\n    assert \"btn-primary\" in outline_primary.attrs['class']\n    \n    # Dash buttons\n    dash_default = Button(\"Default\", cls=combine_classes(btn, btn_styles.dash))\n    assert \"btn-dash\" in dash_default.attrs['class']\n    \n    dash_primary = Button(\"Primary\", cls=combine_classes(btn, btn_styles.dash, btn_colors.primary))\n    assert \"btn-dash\" in dash_primary.attrs['class']\n    assert \"btn-primary\" in dash_primary.attrs['class']\n    \n    # Neutral button with outline or dash style on white background\n    white_bg_container = Div(\n        Button(\"Outline\", cls=combine_classes(btn, btn_colors.neutral, btn_styles.outline)),\n        Button(\"Dash\", cls=combine_classes(btn, btn_colors.neutral, btn_styles.dash)),\n        cls=combine_classes(bg.white, p._6)\n    )\n    assert \"bg-white\" in white_bg_container.attrs['class']\n    assert \"p-6\" in white_bg_container.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        neutral_btn,\n        primary_btn,\n        secondary_btn,\n        accent_btn,\n        info_btn,\n        success_btn,\n        warning_btn,\n        error_btn,\n        soft_default,\n        soft_primary,\n        outline_default,\n        outline_primary,\n        dash_default,\n        dash_primary,\n        white_bg_container\n    )\n\n# Run the tests\ntest_button_colors_variants_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button class=\"btn btn-neutral\"&gt;Neutral&lt;/button&gt;&lt;button class=\"btn btn-primary\"&gt;Primary&lt;/button&gt;&lt;button class=\"btn btn-secondary\"&gt;Secondary&lt;/button&gt;&lt;button class=\"btn btn-accent\"&gt;Accent&lt;/button&gt;&lt;button class=\"btn btn-info\"&gt;Info&lt;/button&gt;&lt;button class=\"btn btn-success\"&gt;Success&lt;/button&gt;&lt;button class=\"btn btn-warning\"&gt;Warning&lt;/button&gt;&lt;button class=\"btn btn-error\"&gt;Error&lt;/button&gt;&lt;button class=\"btn btn-soft\"&gt;Default&lt;/button&gt;&lt;button class=\"btn btn-soft btn-primary\"&gt;Primary&lt;/button&gt;&lt;button class=\"btn btn-outline\"&gt;Default&lt;/button&gt;&lt;button class=\"btn btn-outline btn-primary\"&gt;Primary&lt;/button&gt;&lt;button class=\"btn btn-dash\"&gt;Default&lt;/button&gt;&lt;button class=\"btn btn-dash btn-primary\"&gt;Primary&lt;/button&gt;  &lt;div class=\"bg-white p-6\"&gt;\n&lt;button class=\"btn btn-neutral btn-outline\"&gt;Outline&lt;/button&gt;&lt;button class=\"btn btn-neutral btn-dash\"&gt;Dash&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_button_colors_variants_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_button_states_fasthtml_examples\n\n test_button_states_fasthtml_examples ()\n\nTest button states including active, disabled, ghost, and link.\n\n\nExported source\ndef test_button_states_fasthtml_examples():\n    \"\"\"Test button states including active, disabled, ghost, and link.\"\"\"\n    from fasthtml.common import Button, Div\n    \n    # Active buttons\n    active_default = Button(\"Default\", cls=combine_classes(btn, btn_behaviors.active))\n    assert \"btn-active\" in active_default.attrs['class']\n    \n    active_primary = Button(\"Primary\", cls=combine_classes(btn, btn_behaviors.active, btn_colors.primary))\n    assert \"btn-active\" in active_primary.attrs['class']\n    assert \"btn-primary\" in active_primary.attrs['class']\n    \n    # Ghost and link buttons\n    ghost_btn = Button(\"Ghost\", cls=combine_classes(btn, btn_styles.ghost))\n    assert \"btn-ghost\" in ghost_btn.attrs['class']\n    \n    link_btn = Button(\"Link\", cls=combine_classes(btn, btn_styles.link))\n    assert \"btn-link\" in link_btn.attrs['class']\n    \n    # Disabled buttons\n    disabled_attr = Button(\"Disabled using attribute\", cls=str(btn), disabled=\"disabled\")\n    assert disabled_attr.attrs['disabled'] == \"disabled\"\n    \n    disabled_class = Button(\n        \"Disabled using class name\",\n        cls=combine_classes(btn, btn_behaviors.disabled),\n        tabindex=\"-1\",\n        role=\"button\",\n        aria_disabled=\"true\"\n    )\n    assert \"btn-disabled\" in disabled_class.attrs['class']\n    assert disabled_class.attrs['tabindex'] == \"-1\"\n    assert disabled_class.attrs['aria-disabled'] == \"true\"\n    \n    # Return all elements in a Div\n    return Div(\n        active_default,\n        active_primary,\n        ghost_btn,\n        link_btn,\n        disabled_attr,\n        disabled_class\n    )\n\n# Run the tests\ntest_button_states_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button class=\"btn btn-active\"&gt;Default&lt;/button&gt;&lt;button class=\"btn btn-active btn-primary\"&gt;Primary&lt;/button&gt;&lt;button class=\"btn btn-ghost\"&gt;Ghost&lt;/button&gt;&lt;button class=\"btn btn-link\"&gt;Link&lt;/button&gt;&lt;button disabled=\"disabled\" class=\"btn\"&gt;Disabled using attribute&lt;/button&gt;&lt;button tabindex=\"-1\" role=\"button\" aria-disabled=\"true\" class=\"btn btn-disabled\"&gt;Disabled using class name&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_button_states_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_button_shapes_fasthtml_examples\n\n test_button_shapes_fasthtml_examples ()\n\nTest square and circle button shapes with SVG icons.\n\n\nExported source\ndef test_button_shapes_fasthtml_examples():\n    \"\"\"Test square and circle button shapes with SVG icons.\"\"\"\n    from fasthtml.common import Button, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    \n    # Create reusable heart icon SVG\n    heart_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"2.5\",\n        stroke=\"currentColor\",\n        cls=str(size_util(\"1.2em\"))\n    )\n    \n    # Square button\n    square_btn = Button(\n        heart_icon,\n        cls=combine_classes(btn, btn_modifiers.square)\n    )\n    assert \"btn-square\" in square_btn.attrs['class']\n    \n    # Circle button\n    circle_btn = Button(\n        heart_icon,\n        cls=combine_classes(btn, btn_modifiers.circle)\n    )\n    assert \"btn-circle\" in circle_btn.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        square_btn,\n        circle_btn\n    )\n\n# Run the tests\ntest_button_shapes_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button class=\"btn btn-square\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2.5\" stroke=\"currentColor\" class=\"size-[1.2em]\"&gt;&lt;path d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2.5\" stroke=\"currentColor\" class=\"size-[1.2em]\"&gt;&lt;path d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_button_shapes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_button_with_content_fasthtml_examples\n\n test_button_with_content_fasthtml_examples ()\n\nTest buttons with icons and loading spinners.\n\n\nExported source\ndef test_button_with_content_fasthtml_examples():\n    \"\"\"Test buttons with icons and loading spinners.\"\"\"\n    from fasthtml.common import Button, Span, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_daisyui.components.feedback.loading import loading, loading_styles\n    \n    # Create reusable heart icon SVG\n    heart_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"2.5\",\n        stroke=\"currentColor\",\n        cls=str(size_util(\"1.2em\"))\n    )\n    \n    # Button with icon before text\n    icon_start_btn = Button(\n        heart_icon,\n        \"Like\",\n        cls=str(btn)\n    )\n    assert icon_start_btn.attrs['class'] == \"btn\"\n    assert len(icon_start_btn.children) == 2  # Icon and text\n    \n    # Button with icon after text\n    icon_end_btn = Button(\n        \"Like\",\n        heart_icon,\n        cls=str(btn)\n    )\n    assert icon_end_btn.attrs['class'] == \"btn\"\n    assert len(icon_end_btn.children) == 2  # Text and icon\n    \n    # Button with loading spinner (using daisyUI loading classes)\n    loading_square_btn = Button(\n        Span(cls=combine_classes(loading, loading_styles.spinner)),\n        cls=combine_classes(btn, btn_modifiers.square)\n    )\n    assert \"btn-square\" in loading_square_btn.attrs['class']\n    assert \"loading loading-spinner\" in loading_square_btn.children[0].attrs['class']\n    \n    loading_text_btn = Button(\n        Span(cls=combine_classes(loading, loading_styles.spinner)),\n        loading,\n        cls=str(btn)\n    )\n    assert loading_text_btn.attrs['class'] == \"btn\"\n    assert len(loading_text_btn.children) == 2  # Spinner and text\n    \n    # Return all elements in a Div\n    return Div(\n        icon_start_btn,\n        icon_end_btn,\n        loading_square_btn,\n        loading_text_btn\n    )\n\n# Run the tests\ntest_button_with_content_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button class=\"btn\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2.5\" stroke=\"currentColor\" class=\"size-[1.2em]\"&gt;&lt;path d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Like&lt;/button&gt;&lt;button class=\"btn\"&gt;Like&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"2.5\" stroke=\"currentColor\" class=\"size-[1.2em]\"&gt;&lt;path d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-square\"&gt;&lt;span class=\"loading loading-spinner\"&gt;&lt;/span&gt;&lt;/button&gt;&lt;button class=\"btn\"&gt;&lt;span class=\"loading loading-spinner\"&gt;&lt;/span&gt;loading&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_button_with_content_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "actions",
      "button"
    ]
  },
  {
    "objectID": "components/actions/fab.html",
    "href": "components/actions/fab.html",
    "title": "FAB / Speed Dial",
    "section": "",
    "text": "Base FAB Components\nThe base FAB components:\n\n\nExported source\nfab = SingleValueFactory(\"fab\", \"Fab container element. It includes a focusable div and when it gets clicked of focused, it shows more floating buttons \") # Fab container element\nfab_close = SingleValueFactory(\"fab-close\", \"Optional class for a close button (or a wrapper of a close button) \") # Fab close part\nfab_main_action = SingleValueFactory(\"fab-main-action\", \"Optional class for the main action button (or a wrapper of the main action button). Either use fab-close or fab-main-action, not both \") # FAB main action part\n\n\n\n\nFAB Modifiers\nFAB modifier utilities:\n\n\nExported source\nfab_modifiers = SimpleFactory(\n    {\n        \"flower\": \"fab-flower\",\n    },\n    \"FAB modifiers\"\n) # FAB modifiers\n\n\n\n\nFAB Test Examples\n\nsource\n\n\ntest_fab_basic_examples\n\n test_fab_basic_examples ()\n\nTest basic FAB utilities.\n\n\nExported source\ndef test_fab_basic_examples():\n    \"\"\"Test basic FAB utilities.\"\"\"\n    # Basic FAB\n    assert str(fab) == \"fab\"\n    \n    # Test with modifiers\n    assert str(fab.hover) == \"hover:fab\"\n    assert str(fab.md) == \"md:fab\"\n    assert str(fab.dark) == \"dark:fab\"\n\n# Run the tests\ntest_fab_basic_examples()\n\n\n\nsource\n\n\ntest_fab_modifiers_examples\n\n test_fab_modifiers_examples ()\n\nTest button FAB utilities.\n\n\nExported source\ndef test_fab_modifiers_examples():\n    \"\"\"Test button FAB utilities.\"\"\"\n    assert str(fab_modifiers.flower) == \"fab-flower\"\n\n# Run the tests\ntest_fab_modifiers_examples()\n\n\n\nsource\n\n\ntest_fab_basic_fasthtml_examples\n\n test_fab_basic_fasthtml_examples ()\n\nTest basic FAB examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_basic_fasthtml_examples():\n    \"\"\"Test basic FAB examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.primary)),\n        Button(\"A\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(\"B\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(\"C\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        cls=combine_classes(fab)\n    )\n    assert vertical_fab.attrs['class'] == \"fab\"\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_basic_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-primary\"&gt;F&lt;/div&gt;\n&lt;button class=\"btn btn-lg btn-circle\"&gt;A&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;B&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;C&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_with_svgs_fasthtml_examples\n\n test_fab_with_svgs_fasthtml_examples ()\n\nTest FAB with SVG icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_with_svgs_fasthtml_examples():\n    \"\"\"Test FAB with SVG icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    from fasthtml.svg import Svg, Path\n\n    # 1. Plus/New icon (for main FAB button)\n    plus_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M12 4.5v15m7.5-7.5h-15\"\n        ),\n        aria_label=\"New\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"2\",\n        stroke=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 2. Camera icon\n    camera_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M6.827 6.175A2.31 2.31 0 0 1 5.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 0 0-1.134-.175 2.31 2.31 0 0 1-1.64-1.055l-.822-1.316a2.192 2.192 0 0 0-1.736-1.039 48.774 48.774 0 0 0-5.232 0 2.192 2.192 0 0 0-1.736 1.039l-.821 1.316Z\"\n        ),\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M16.5 12.75a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0ZM18.75 10.5h.008v.008h-.008V10.5Z\"\n        ),\n        aria_label=\"Camera\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 3. Gallery/Image icon\n    gallery_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z\"\n        ),\n        aria_label=\"Gallery\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 4. Microphone/Voice icon\n    voice_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M12 18.75a6 6 0 0 0 6-6v-1.5m-6 7.5a6 6 0 0 1-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 0 1-3-3V4.5a3 3 0 1 1 6 0v8.25a3 3 0 0 1-3 3Z\"\n        ),\n        aria_label=\"Voice\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n\n    vertical_fab_with_svgs = Div(\n        Div(plus_icon, tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.secondary)),\n        Button(camera_icon, cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(gallery_icon, cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(voice_icon, cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        cls=combine_classes(fab)\n    )\n    assert vertical_fab_with_svgs.attrs['class'] == \"fab\"\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab_with_svgs,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_with_svgs_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-secondary\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"New\" fill=\"none\" stroke-width=\"2\" stroke=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M12 4.5v15m7.5-7.5h-15\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;/div&gt;\n&lt;button class=\"btn btn-lg btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"Camera\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M6.827 6.175A2.31 2.31 0 0 1 5.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 0 0-1.134-.175 2.31 2.31 0 0 1-1.64-1.055l-.822-1.316a2.192 2.192 0 0 0-1.736-1.039 48.774 48.774 0 0 0-5.232 0 2.192 2.192 0 0 0-1.736 1.039l-.821 1.316Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;path d=\"M16.5 12.75a4.5 4.5 0 1 1-9 0 4.5 4.5 0 0 1 9 0ZM18.75 10.5h.008v.008h-.008V10.5Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"Gallery\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"m2.25 15.75 5.159-5.159a2.25 2.25 0 0 1 3.182 0l5.159 5.159m-1.5-1.5 1.409-1.409a2.25 2.25 0 0 1 3.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 0 0 1.5-1.5V6a1.5 1.5 0 0 0-1.5-1.5H3.75A1.5 1.5 0 0 0 2.25 6v12a1.5 1.5 0 0 0 1.5 1.5Zm10.5-11.25h.008v.008h-.008V8.25Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"Voice\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M12 18.75a6 6 0 0 0 6-6v-1.5m-6 7.5a6 6 0 0 1-6-6v-1.5m6 7.5v3.75m-3.75 0h7.5M12 15.75a3 3 0 0 1-3-3V4.5a3 3 0 1 1 6 0v8.25a3 3 0 0 1-3 3Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_with_svgs_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_with_labels_fasthtml_examples\n\n test_fab_with_labels_fasthtml_examples ()\n\nTest FAB with labels from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_with_labels_fasthtml_examples():\n    \"\"\"Test FAB with labels from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab_with_labels = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.success)),\n        Div(\"Label B\", Button(\"A\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        Div(\"Label C\", Button(\"B\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        Div(\"Label D\", Button(\"C\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        cls=combine_classes(fab)\n    )\n    assert vertical_fab_with_labels.attrs['class'] == \"fab\"\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab_with_labels,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_with_labels_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-success\"&gt;F&lt;/div&gt;\n    &lt;div&gt;\nLabel B&lt;button class=\"btn btn-lg btn-circle\"&gt;A&lt;/button&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel C&lt;button class=\"btn btn-lg btn-circle\"&gt;B&lt;/button&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel D&lt;button class=\"btn btn-lg btn-circle\"&gt;C&lt;/button&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_with_labels_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_rectangle_buttons_fasthtml_examples\n\n test_fab_rectangle_buttons_fasthtml_examples ()\n\nTest FAB with rectangle buttons from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_rectangle_buttons_fasthtml_examples():\n    \"\"\"Test FAB with rectangle buttons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.success)),\n        Button(\"Button A\", cls=combine_classes(btn, btn_sizes.lg)),\n        Button(\"Button B\", cls=combine_classes(btn, btn_sizes.lg)),\n        Button(\"Button C\", cls=combine_classes(btn, btn_sizes.lg)),\n        cls=combine_classes(fab)\n    )\n    assert vertical_fab.attrs['class'] == \"fab\"\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_rectangle_buttons_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-success\"&gt;F&lt;/div&gt;\n&lt;button class=\"btn btn-lg\"&gt;Button A&lt;/button&gt;&lt;button class=\"btn btn-lg\"&gt;Button B&lt;/button&gt;&lt;button class=\"btn btn-lg\"&gt;Button C&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_rectangle_buttons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_close_fasthtml_examples\n\n test_fab_close_fasthtml_examples ()\n\nTest FAB with close button from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_close_fasthtml_examples():\n    \"\"\"Test FAB with close button from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div, Span\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.info)),\n        Div(\n            \"Close\", \n            Span(\"x\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.error)), \n            cls=combine_classes(fab_close)\n        ),\n        Div(\"Label A\", Button(\"A\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        Div(\"Label B\", Button(\"B\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        Div(\"Label C\", Button(\"C\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        cls=combine_classes(fab)\n    )\n    assert vertical_fab.attrs['class'] == \"fab\"\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_close_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-info\"&gt;F&lt;/div&gt;\n    &lt;div class=\"fab-close\"&gt;\nClose&lt;span class=\"btn btn-lg btn-circle btn-error\"&gt;x&lt;/span&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel A&lt;button class=\"btn btn-lg btn-circle\"&gt;A&lt;/button&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel B&lt;button class=\"btn btn-lg btn-circle\"&gt;B&lt;/button&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel C&lt;button class=\"btn btn-lg btn-circle\"&gt;C&lt;/button&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_close_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_main_action_fasthtml_examples\n\n test_fab_main_action_fasthtml_examples ()\n\nTest FAB with main action button from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_main_action_fasthtml_examples():\n    \"\"\"Test FAB with main action button from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div, Span\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.primary)),\n        Div(\n            \"Main Action\", \n            Button(\"M\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.secondary)), \n            cls=combine_classes(fab_main_action)\n        ),\n        Div(\"Label A\", Button(\"A\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        Div(\"Label B\", Button(\"B\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        Div(\"Label C\", Button(\"C\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle))),\n        cls=combine_classes(fab)\n    )\n    assert vertical_fab.attrs['class'] == \"fab\"\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_main_action_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-primary\"&gt;F&lt;/div&gt;\n    &lt;div class=\"fab-main-action\"&gt;\nMain Action&lt;button class=\"btn btn-lg btn-circle btn-secondary\"&gt;M&lt;/button&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel A&lt;button class=\"btn btn-lg btn-circle\"&gt;A&lt;/button&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel B&lt;button class=\"btn btn-lg btn-circle\"&gt;B&lt;/button&gt;    &lt;/div&gt;\n    &lt;div&gt;\nLabel C&lt;button class=\"btn btn-lg btn-circle\"&gt;C&lt;/button&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_main_action_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_single_fasthtml_examples\n\n test_fab_single_fasthtml_examples ()\n\nTest a single FAB from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_single_fasthtml_examples():\n    \"\"\"Test a single FAB from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div, Span\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.primary)),\n        cls=combine_classes(fab)\n    )\n    assert vertical_fab.attrs['class'] == \"fab\"\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_single_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-primary\"&gt;F&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_single_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_flower_fasthtml_examples\n\n test_fab_flower_fasthtml_examples ()\n\nTest FAB flower modifier from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_flower_fasthtml_examples():\n    \"\"\"Test FAB flower modifier from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.success)),\n        Button(\"M\", cls=combine_classes(fab_main_action, btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(\"A\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(\"B\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(\"C\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(\"D\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        cls=combine_classes(fab, fab_modifiers.flower)\n    )\n    assert \"fab\" in vertical_fab.attrs['class']\n    assert \"fab-flower\" in vertical_fab.attrs['class']\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_flower_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab fab-flower\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-success\"&gt;F&lt;/div&gt;\n&lt;button class=\"fab-main-action btn btn-lg btn-circle\"&gt;M&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;A&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;B&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;C&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;D&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_flower_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_flower_with_svgs_fasthtml_examples\n\n test_fab_flower_with_svgs_fasthtml_examples ()\n\nTest FAB flower modifier with SVG icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_flower_with_svgs_fasthtml_examples():\n    \"\"\"Test FAB flower modifier with SVG icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    from fasthtml.svg import Svg, Path\n    \n    # 1. Plus/New icon (main FAB trigger button)\n    plus_icon_filled = Svg(\n        Path(\n            d=\"M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z\"\n        ),\n        aria_label=\"New\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 16 16\",\n        fill=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 2. Pencil/Edit icon (main action button when FAB is open)\n    pencil_icon = Svg(\n        Path(\n            fill_rule=\"evenodd\",\n            d=\"M11.013 2.513a1.75 1.75 0 0 1 2.475 2.474L6.226 12.25a2.751 2.751 0 0 1-.892.596l-2.047.848a.75.75 0 0 1-.98-.98l.848-2.047a2.75 2.75 0 0 1 .596-.892l7.262-7.261Z\",\n            clip_rule=\"evenodd\"\n        ),\n        aria_label=\"New post\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 16 16\",\n        fill=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 3. Camera icon (filled version)\n    camera_icon_filled = Svg(\n        Path(d=\"M9.5 8.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z\"),\n        Path(\n            fill_rule=\"evenodd\",\n            d=\"M2.5 5A1.5 1.5 0 0 0 1 6.5v5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5v-5A1.5 1.5 0 0 0 13.5 5h-.879a1.5 1.5 0 0 1-1.06-.44l-1.122-1.12A1.5 1.5 0 0 0 9.38 3H6.62a1.5 1.5 0 0 0-1.06.44L4.439 4.56A1.5 1.5 0 0 1 3.38 5H2.5ZM11 8.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\",\n            clip_rule=\"evenodd\"\n        ),\n        aria_label=\"New camera photo\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 16 16\",\n        fill=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 4. Poll/List icon\n    poll_icon = Svg(\n        Path(\n            d=\"M3 4.75a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM6.25 3a.75.75 0 0 0 0 1.5h7a.75.75 0 0 0 0-1.5h-7ZM6.25 7.25a.75.75 0 0 0 0 1.5h7a.75.75 0 0 0 0-1.5h-7ZM6.25 11.5a.75.75 0 0 0 0 1.5h7a.75.75 0 0 0 0-1.5h-7ZM4 12.25a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM3 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\"\n        ),\n        aria_label=\"New poll\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 16 16\",\n        fill=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 5. Gallery/Image icon (filled version)\n    gallery_icon_filled = Svg(\n        Path(\n            fill_rule=\"evenodd\",\n            d=\"M2 4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4Zm10.5 5.707a.5.5 0 0 0-.146-.353l-1-1a.5.5 0 0 0-.708 0L9.354 9.646a.5.5 0 0 1-.708 0L6.354 7.354a.5.5 0 0 0-.708 0l-2 2a.5.5 0 0 0-.146.353V12a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5V9.707ZM12 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\",\n            clip_rule=\"evenodd\"\n        ),\n        aria_label=\"New gallery photo\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 16 16\",\n        fill=\"currentColor\",\n        cls=\"size-6\"\n    )\n    \n    # 6. Microphone/Voice icon (filled version)\n    voice_icon_filled = Svg(\n        Path(d=\"M8 1a2 2 0 0 0-2 2v4a2 2 0 1 0 4 0V3a2 2 0 0 0-2-2Z\"),\n        Path(\n            d=\"M4.5 7A.75.75 0 0 0 3 7a5.001 5.001 0 0 0 4.25 4.944V13.5h-1.5a.75.75 0 0 0 0 1.5h4.5a.75.75 0 0 0 0-1.5h-1.5v-1.556A5.001 5.001 0 0 0 13 7a.75.75 0 0 0-1.5 0 3.5 3.5 0 1 1-7 0Z\"\n        ),\n        aria_label=\"New voice\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 16 16\",\n        fill=\"currentColor\",\n        cls=\"size-6\"\n    )\n\n    vertical_fab = Div(\n        Div(plus_icon_filled, tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(pencil_icon, cls=combine_classes(fab_main_action, btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.primary)),\n        Button(camera_icon_filled, cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(poll_icon, cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(gallery_icon_filled, cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        Button(voice_icon_filled, cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)),\n        cls=combine_classes(fab, fab_modifiers.flower)\n    )\n    assert \"fab\" in vertical_fab.attrs['class']\n    assert \"fab-flower\" in vertical_fab.attrs['class']\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_flower_with_svgs_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab fab-flower\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 16 16\" aria-label=\"New\" fill=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M8.75 3.75a.75.75 0 0 0-1.5 0v3.5h-3.5a.75.75 0 0 0 0 1.5h3.5v3.5a.75.75 0 0 0 1.5 0v-3.5h3.5a.75.75 0 0 0 0-1.5h-3.5v-3.5Z\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;/div&gt;\n&lt;button class=\"fab-main-action btn btn-lg btn-circle btn-primary\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 16 16\" aria-label=\"New post\" fill=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M11.013 2.513a1.75 1.75 0 0 1 2.475 2.474L6.226 12.25a2.751 2.751 0 0 1-.892.596l-2.047.848a.75.75 0 0 1-.98-.98l.848-2.047a2.75 2.75 0 0 1 .596-.892l7.262-7.261Z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 16 16\" aria-label=\"New camera photo\" fill=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M9.5 8.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z\"&gt;&lt;/path&gt;&lt;path d=\"M2.5 5A1.5 1.5 0 0 0 1 6.5v5A1.5 1.5 0 0 0 2.5 13h11a1.5 1.5 0 0 0 1.5-1.5v-5A1.5 1.5 0 0 0 13.5 5h-.879a1.5 1.5 0 0 1-1.06-.44l-1.122-1.12A1.5 1.5 0 0 0 9.38 3H6.62a1.5 1.5 0 0 0-1.06.44L4.439 4.56A1.5 1.5 0 0 1 3.38 5H2.5ZM11 8.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 16 16\" aria-label=\"New poll\" fill=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M3 4.75a1 1 0 1 0 0-2 1 1 0 0 0 0 2ZM6.25 3a.75.75 0 0 0 0 1.5h7a.75.75 0 0 0 0-1.5h-7ZM6.25 7.25a.75.75 0 0 0 0 1.5h7a.75.75 0 0 0 0-1.5h-7ZM6.25 11.5a.75.75 0 0 0 0 1.5h7a.75.75 0 0 0 0-1.5h-7ZM4 12.25a1 1 0 1 1-2 0 1 1 0 0 1 2 0ZM3 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 16 16\" aria-label=\"New gallery photo\" fill=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M2 4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4Zm10.5 5.707a.5.5 0 0 0-.146-.353l-1-1a.5.5 0 0 0-.708 0L9.354 9.646a.5.5 0 0 1-.708 0L6.354 7.354a.5.5 0 0 0-.708 0l-2 2a.5.5 0 0 0-.146.353V12a.5.5 0 0 0 .5.5h8a.5.5 0 0 0 .5-.5V9.707ZM12 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 16 16\" aria-label=\"New voice\" fill=\"currentColor\" class=\"size-6\"&gt;&lt;path d=\"M8 1a2 2 0 0 0-2 2v4a2 2 0 1 0 4 0V3a2 2 0 0 0-2-2Z\"&gt;&lt;/path&gt;&lt;path d=\"M4.5 7A.75.75 0 0 0 3 7a5.001 5.001 0 0 0 4.25 4.944V13.5h-1.5a.75.75 0 0 0 0 1.5h4.5a.75.75 0 0 0 0-1.5h-1.5v-1.556A5.001 5.001 0 0 0 13 7a.75.75 0 0 0-1.5 0 3.5 3.5 0 1 1-7 0Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_flower_with_svgs_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fab_flower_with_tooltip_fasthtml_examples\n\n test_fab_flower_with_tooltip_fasthtml_examples ()\n\nTest FAB flower modifier with tooltip from daisyUI v5 documentation.\n\n\nExported source\ndef test_fab_flower_with_tooltip_fasthtml_examples():\n    \"\"\"Test FAB flower modifier with tooltip from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, A, Input, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_colors\n    from cjm_fasthtml_daisyui.components.feedback.tooltip import tooltip, tooltip_placement\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n\n    vertical_fab = Div(\n        Div(\"F\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.info)),\n        Button(\"M\", cls=combine_classes(fab_main_action, btn, btn_sizes.lg, btn_modifiers.circle, btn_colors.success)),\n        Div(Button(\"A\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)), cls=combine_classes(tooltip, tooltip_placement.left), data_tip=\"Label A\"),\n        Div(Button(\"B\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)), cls=combine_classes(tooltip, tooltip_placement.left), data_tip=\"Label B\"),\n        Div(Button(\"C\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)), cls=combine_classes(tooltip), data_tip=\"Label C\"),\n        Div(Button(\"D\", cls=combine_classes(btn, btn_sizes.lg, btn_modifiers.circle)), cls=combine_classes(tooltip), data_tip=\"Label D\"),\n        cls=combine_classes(fab, fab_modifiers.flower)\n    )\n    assert \"fab\" in vertical_fab.attrs['class']\n    assert \"fab-flower\" in vertical_fab.attrs['class']\n    \n    \n    # Return all elements in a Div\n    return Div(\n        vertical_fab,\n        cls=combine_classes(min_h(50))\n    )\n\n# Run the tests\ntest_fab_flower_fasthtml_examples()\n\n\n&lt;div class=\"min-h-50\"&gt;\n  &lt;div class=\"fab fab-flower\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-lg btn-circle btn-success\"&gt;F&lt;/div&gt;\n&lt;button class=\"fab-main-action btn btn-lg btn-circle\"&gt;M&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;A&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;B&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;C&lt;/button&gt;&lt;button class=\"btn btn-lg btn-circle\"&gt;D&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_fab_flower_with_tooltip_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "actions",
      "FAB / Speed Dial"
    ]
  },
  {
    "objectID": "components/actions/dropdown.html",
    "href": "components/actions/dropdown.html",
    "title": "dropdown",
    "section": "",
    "text": "Base Dropdown\n\n\nExported source\ndropdown = SingleValueFactory(\"dropdown\", \"Dropdown container component\") # Dropdown container\ndropdown_content = SingleValueFactory(\"dropdown-content\", \"Content part of dropdown\") # Dropdown content\n\n\n\n\nDropdown Placement\nDropdown placement options:\n\n\nExported source\ndropdown_placement = SimpleFactory(\n    {\n        # Horizontal alignment\n        \"start\": \"dropdown-start\",\n        \"center\": \"dropdown-center\",\n        \"end\": \"dropdown-end\",\n        # Vertical position\n        \"top\": \"dropdown-top\",\n        \"bottom\": \"dropdown-bottom\",\n        \"left\": \"dropdown-left\",\n        \"right\": \"dropdown-right\"\n    },\n    \"Dropdown placement options for horizontal alignment and vertical position\"\n) # Dropdown placement options\n\n\n\n\nDropdown Modifiers\n\n\nExported source\ndropdown_modifiers = SimpleFactory(\n    {\n        \"hover\": \"dropdown-hover\",\n        \"open\": \"dropdown-open\"\n    },\n    \"Dropdown behavior modifiers (hover trigger, force open)\"\n) # Dropdown modifiers\n\n\n\n\nDropdown Test Examples\n\nsource\n\n\ntest_dropdown_basic_examples\n\n test_dropdown_basic_examples ()\n\nTest basic dropdown utilities.\n\n\nExported source\ndef test_dropdown_basic_examples():\n    \"\"\"Test basic dropdown utilities.\"\"\"\n    assert str(dropdown) == \"dropdown\"\n    assert str(dropdown_content) == \"dropdown-content\"\n    \n    # With modifiers\n    assert str(dropdown.hover) == \"hover:dropdown\"\n    assert str(dropdown_content.md) == \"md:dropdown-content\"\n\n# Run the tests\ntest_dropdown_basic_examples()\n\n\n\nsource\n\n\ntest_dropdown_placement_examples\n\n test_dropdown_placement_examples ()\n\nTest dropdown placement options.\n\n\nExported source\ndef test_dropdown_placement_examples():\n    \"\"\"Test dropdown placement options.\"\"\"\n    # Horizontal alignment\n    assert str(dropdown_placement.start) == \"dropdown-start\"\n    assert str(dropdown_placement.center) == \"dropdown-center\"\n    assert str(dropdown_placement.end) == \"dropdown-end\"\n    \n    # Vertical position\n    assert str(dropdown_placement.top) == \"dropdown-top\"\n    assert str(dropdown_placement.bottom) == \"dropdown-bottom\"\n    assert str(dropdown_placement.left) == \"dropdown-left\"\n    assert str(dropdown_placement.right) == \"dropdown-right\"\n\n# Run the tests\ntest_dropdown_placement_examples()\n\n\n\nsource\n\n\ntest_dropdown_modifiers_examples\n\n test_dropdown_modifiers_examples ()\n\nTest dropdown modifier utilities.\n\n\nExported source\ndef test_dropdown_modifiers_examples():\n    \"\"\"Test dropdown modifier utilities.\"\"\"\n    assert str(dropdown_modifiers.hover) == \"dropdown-hover\"\n    assert str(dropdown_modifiers.open) == \"dropdown-open\"\n\n# Run the tests\ntest_dropdown_modifiers_examples()\n\n\n\nsource\n\n\ntest_dropdown_basic_fasthtml_examples\n\n test_dropdown_basic_fasthtml_examples ()\n\nTest basic dropdown implementations including details/summary and popover API.\n\n\nExported source\ndef test_dropdown_basic_fasthtml_examples():\n    \"\"\"Test basic dropdown implementations including details/summary and popover API.\"\"\"\n    from fasthtml.common import Details, Summary, Ul, Li, A, Div, Button\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    \n    # Dropdown using details and summary\n    dropdown_details = Details(\n        Summary(\"open or close\", cls=combine_classes(btn, m._1)),\n        Ul(\n            Li(A(\"Item 1\")),\n            Li(A(\"Item 2\")),\n            cls=combine_classes(\n                menu,\n                dropdown_content,\n                bg_dui.base_100,\n                border_radius.box,\n                z._1,\n                w._52,\n                p._2,\n                shadow.sm\n            )\n        ),\n        cls=str(dropdown)\n    )\n    assert dropdown_details.tag == \"details\"\n    assert \"dropdown\" in dropdown_details.attrs['class']\n    assert \"btn\" in dropdown_details.children[0].attrs['class']\n    assert \"dropdown-content\" in dropdown_details.children[1].attrs['class']\n    \n    # Dropdown using popover API and anchor positioning\n    popover_button = Button(\n        \"Button\",\n        cls=str(btn),\n        popovertarget=\"popover-1\",\n        style=\"anchor-name:--anchor-1\"\n    )\n    popover_menu = Ul(\n        Li(A(\"Item 1\")),\n        Li(A(\"Item 2\")),\n        cls=combine_classes(dropdown, menu, w._52, border_radius.box, bg_dui.base_100, shadow.sm),\n        popover=True,\n        id=\"popover-1\",\n        style=\"position-anchor:--anchor-1\"\n    )\n    assert popover_button.attrs['popovertarget'] == \"popover-1\"\n    assert popover_menu.attrs['popover'] == True\n    assert popover_menu.attrs['id'] == \"popover-1\"\n    \n    # Basic dropdown menu\n    basic_dropdown = Div(\n        Div(\"Click\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        Ul(\n            Li(A(\"Item 1\")),\n            Li(A(\"Item 2\")),\n            tabindex=\"0\",\n            cls=combine_classes(\n                dropdown_content,\n                menu,\n                bg_dui.base_100,\n                border_radius.box,\n                z._1,\n                w._52,\n                p._2,\n                shadow.sm\n            )\n        ),\n        cls=str(dropdown)\n    )\n    assert \"dropdown\" in basic_dropdown.attrs['class']\n    assert basic_dropdown.children[0].attrs['role'] == \"button\"\n    assert basic_dropdown.children[0].attrs['tabindex'] == \"0\"\n    \n    # Return all elements in a Div\n    return Div(\n        dropdown_details,\n        popover_button,\n        popover_menu,\n        basic_dropdown\n    )\n\n# Run the tests\ntest_dropdown_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;details class=\"dropdown\"&gt;&lt;summary class=\"btn m-1\"&gt;open or close&lt;/summary&gt;    &lt;ul class=\"menu dropdown-content bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/details&gt;&lt;button popovertarget=\"popover-1\" class=\"btn\" style=\"anchor-name:--anchor-1\"&gt;Button&lt;/button&gt;  &lt;ul popover id=\"popover-1\" class=\"dropdown menu w-52 rounded-box bg-base-100 shadow-sm\" style=\"position-anchor:--anchor-1\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;div class=\"dropdown\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_dropdown_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_dropdown_placement_fasthtml_examples\n\n test_dropdown_placement_fasthtml_examples ()\n\nTest dropdown placement variations for all positions.\n\n\nExported source\ndef test_dropdown_placement_fasthtml_examples():\n    \"\"\"Test dropdown placement variations for all positions.\"\"\"\n    from fasthtml.common import Div, Ul, Li, A\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    \n    # Helper function to create dropdown content\n    def create_dropdown_content():\n        return Ul(\n            Li(A(\"Item 1\")),\n            Li(A(\"Item 2\")),\n            tabindex=\"0\",\n            cls=combine_classes(\n                dropdown_content,\n                menu,\n                bg_dui.base_100,\n                border_radius.box,\n                z._1,\n                w._52,\n                p._2,\n                shadow.sm\n            )\n        )\n    \n    # Dropdown start (aligns to start of button horizontally)\n    dropdown_start = Div(\n        Div(\"Click ⬇️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.start)\n    )\n    assert \"dropdown-start\" in dropdown_start.attrs['class']\n    \n    # Dropdown end (aligns to end of button horizontally)\n    dropdown_end = Div(\n        Div(\"Click ⬇️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.end)\n    )\n    assert \"dropdown-end\" in dropdown_end.attrs['class']\n    \n    # Dropdown center (aligns to center of button horizontally)\n    dropdown_center = Div(\n        Div(\"Click ⬇️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.center)\n    )\n    assert \"dropdown-center\" in dropdown_center.attrs['class']\n    \n    # Dropdown top\n    dropdown_top = Div(\n        Div(\"Click ⬆️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.top)\n    )\n    assert \"dropdown-top\" in dropdown_top.attrs['class']\n    \n    # Dropdown top center\n    dropdown_top_center = Div(\n        Div(\"Click ⬆️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.top, dropdown_placement.center)\n    )\n    assert \"dropdown-top\" in dropdown_top_center.attrs['class']\n    assert \"dropdown-center\" in dropdown_top_center.attrs['class']\n    \n    # Dropdown top end\n    dropdown_top_end = Div(\n        Div(\"Click ⬆️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.top, dropdown_placement.end)\n    )\n    assert \"dropdown-top\" in dropdown_top_end.attrs['class']\n    assert \"dropdown-end\" in dropdown_top_end.attrs['class']\n    \n    # Dropdown bottom (default)\n    dropdown_bottom = Div(\n        Div(\"Click ⬇️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.bottom)\n    )\n    assert \"dropdown-bottom\" in dropdown_bottom.attrs['class']\n    \n    # Dropdown bottom center\n    dropdown_bottom_center = Div(\n        Div(\"Click ⬇️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.bottom, dropdown_placement.center)\n    )\n    assert \"dropdown-bottom\" in dropdown_bottom_center.attrs['class']\n    assert \"dropdown-center\" in dropdown_bottom_center.attrs['class']\n    \n    # Dropdown bottom end\n    dropdown_bottom_end = Div(\n        Div(\"Click ⬇️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.bottom, dropdown_placement.end)\n    )\n    assert \"dropdown-bottom\" in dropdown_bottom_end.attrs['class']\n    assert \"dropdown-end\" in dropdown_bottom_end.attrs['class']\n    \n    # Dropdown left\n    dropdown_left = Div(\n        Div(\"Click ⬅️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.left)\n    )\n    assert \"dropdown-left\" in dropdown_left.attrs['class']\n    \n    # Dropdown left center\n    dropdown_left_center = Div(\n        Div(\"Click ⬅️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.left, dropdown_placement.center)\n    )\n    assert \"dropdown-left\" in dropdown_left_center.attrs['class']\n    assert \"dropdown-center\" in dropdown_left_center.attrs['class']\n    \n    # Dropdown left end\n    dropdown_left_end = Div(\n        Div(\"Click ⬅️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.left, dropdown_placement.end)\n    )\n    assert \"dropdown-left\" in dropdown_left_end.attrs['class']\n    assert \"dropdown-end\" in dropdown_left_end.attrs['class']\n    \n    # Dropdown right\n    dropdown_right = Div(\n        Div(\"Click ➡️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.right)\n    )\n    assert \"dropdown-right\" in dropdown_right.attrs['class']\n    \n    # Dropdown right center\n    dropdown_right_center = Div(\n        Div(\"Click ➡️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.right, dropdown_placement.center)\n    )\n    assert \"dropdown-right\" in dropdown_right_center.attrs['class']\n    assert \"dropdown-center\" in dropdown_right_center.attrs['class']\n    \n    # Dropdown right end\n    dropdown_right_end = Div(\n        Div(\"Click ➡️\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        create_dropdown_content(),\n        cls=combine_classes(dropdown, dropdown_placement.right, dropdown_placement.end)\n    )\n    assert \"dropdown-right\" in dropdown_right_end.attrs['class']\n    assert \"dropdown-end\" in dropdown_right_end.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        dropdown_start,\n        dropdown_end,\n        dropdown_center,\n        dropdown_top,\n        dropdown_top_center,\n        dropdown_top_end,\n        dropdown_bottom,\n        dropdown_bottom_center,\n        dropdown_bottom_end,\n        dropdown_left,\n        dropdown_left_center,\n        dropdown_left_end,\n        dropdown_right,\n        dropdown_right_center,\n        dropdown_right_end\n    )\n\n# Run the tests\ntest_dropdown_placement_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"dropdown dropdown-start\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬇️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-end\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬇️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-center\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬇️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-top\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬆️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-top dropdown-center\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬆️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-top dropdown-end\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬆️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-bottom\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬇️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-bottom dropdown-center\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬇️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-bottom dropdown-end\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬇️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-left\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬅️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-left dropdown-center\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬅️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-left dropdown-end\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ⬅️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-right\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ➡️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-right dropdown-center\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ➡️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-right dropdown-end\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click ➡️&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_dropdown_placement_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_dropdown_hover_and_state_fasthtml_examples\n\n test_dropdown_hover_and_state_fasthtml_examples ()\n\nTest dropdown hover behavior and force open state.\n\n\nExported source\ndef test_dropdown_hover_and_state_fasthtml_examples():\n    \"\"\"Test dropdown hover behavior and force open state.\"\"\"\n    from fasthtml.common import Div, Ul, Li, A\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    \n    # Dropdown on hover\n    dropdown_hover = Div(\n        Div(\"Hover\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        Ul(\n            Li(A(\"Item 1\")),\n            Li(A(\"Item 2\")),\n            tabindex=\"0\",\n            cls=combine_classes(\n                dropdown_content,\n                menu,\n                bg_dui.base_100,\n                border_radius.box,\n                z._1,\n                w._52,\n                p._2,\n                shadow.sm\n            )\n        ),\n        cls=combine_classes(dropdown, dropdown_modifiers.hover)\n    )\n    assert \"dropdown\" in dropdown_hover.attrs['class']\n    assert \"dropdown-hover\" in dropdown_hover.attrs['class']\n    \n    # Force open dropdown\n    dropdown_open = Div(\n        Div(\"Button\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        Ul(\n            Li(A(\"Item 1\")),\n            Li(A(\"Item 2\")),\n            tabindex=\"0\",\n            cls=combine_classes(\n                dropdown_content,\n                menu,\n                bg_dui.base_100,\n                border_radius.box,\n                z._1,\n                w._52,\n                p._2,\n                shadow.sm\n            )\n        ),\n        cls=combine_classes(dropdown, dropdown_modifiers.open)\n    )\n    assert \"dropdown\" in dropdown_open.attrs['class']\n    assert \"dropdown-open\" in dropdown_open.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        dropdown_hover,\n        dropdown_open\n    )\n\n# Run the tests\ntest_dropdown_hover_and_state_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"dropdown dropdown-hover\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Hover&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"dropdown dropdown-open\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Button&lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_dropdown_hover_and_state_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_dropdown_content_variations_fasthtml_examples\n\n test_dropdown_content_variations_fasthtml_examples ()\n\nTest dropdown with different content types including cards and navbar integration.\n\n\nExported source\ndef test_dropdown_content_variations_fasthtml_examples():\n    \"\"\"Test dropdown with different content types including cards and navbar integration.\"\"\"\n    from fasthtml.common import Div, Ul, Li, A, P, H2, Nav\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p, ps\n    from cjm_fasthtml_tailwind.utilities.layout import z, display_tw\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, items, justify, flex_display\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_modifiers, btn_sizes\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    from cjm_fasthtml_daisyui.components.navigation.navbar import navbar\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body, card_title, card_sizes\n    \n    # Card as dropdown content\n    dropdown_card = Div(\n        Div(\"Click\", tabindex=\"0\", role=\"button\", cls=combine_classes(btn, m._1)),\n        Div(\n            Div(\n                P(\"This is a card. You can use any element as a dropdown.\"),\n                cls=str(card_body)\n            ),\n            tabindex=\"0\",\n            cls=combine_classes(\n                dropdown_content,\n                card,\n                card_sizes.sm,\n                bg_dui.base_100,\n                z._1,\n                w._64,\n                shadow.md\n            )\n        ),\n        cls=str(dropdown)\n    )\n    assert \"dropdown\" in dropdown_card.attrs['class']\n    assert \"card\" in dropdown_card.children[1].attrs['class']\n    assert \"dropdown-content\" in dropdown_card.children[1].attrs['class']\n    \n    # Dropdown in navbar\n    navbar_dropdown = Div(\n        Div(\n            A(\"daisyUI\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            cls=str(ps._4)\n        ),\n        Div(\n            Div(\n                A(\"Button\", cls=combine_classes(btn, btn_styles.ghost, border_radius.field)),\n                Div(\n                    Div(\n                        \"Dropdown\",\n                        tabindex=\"0\",\n                        role=\"button\",\n                        cls=combine_classes(btn, btn_styles.ghost, border_radius.field)\n                    ),\n                    Ul(\n                        Li(A(\"Item 1\")),\n                        Li(A(\"Item 2\")),\n                        tabindex=\"0\",\n                        cls=combine_classes(\n                            menu,\n                            dropdown_content,\n                            bg_dui.base_200,\n                            border_radius.box,\n                            z._1,\n                            m.t._4,\n                            w._52,\n                            p._2,\n                            shadow.sm\n                        )\n                    ),\n                    cls=combine_classes(dropdown, dropdown_placement.end)\n                ),\n                cls=combine_classes(flex_display, items.stretch)\n            ),\n            cls=combine_classes(flex_display, flex.grow, justify.end, p.x._2)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_200)\n    )\n    assert \"navbar\" in navbar_dropdown.attrs['class']\n    dropdown_in_navbar = navbar_dropdown.children[1].children[0].children[1]\n    assert \"dropdown\" in dropdown_in_navbar.attrs['class']\n    assert \"dropdown-end\" in dropdown_in_navbar.attrs['class']\n    \n    # Helper dropdown with info icon\n    info_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        ),\n        tabindex=\"0\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(h._4, w._4, stroke.current)\n    )\n    \n    helper_dropdown = [\n        \"A normal text and a helper dropdown\",\n        Div(\n            Div(\n                info_icon,\n                tabindex=\"0\",\n                role=\"button\",\n                cls=combine_classes(\n                    btn,\n                    btn_modifiers.circle,\n                    btn_styles.ghost,\n                    btn_sizes.xs,\n                    text_dui.info\n                )\n            ),\n            Div(\n                Div(\n                    H2(\"You needed more info?\", cls=str(card_title)),\n                    P(\"Here is a description!\"),\n                    tabindex=\"0\",\n                    cls=str(card_body)\n                ),\n                tabindex=\"0\",\n                cls=combine_classes(\n                    card,\n                    card_sizes.sm,\n                    dropdown_content,\n                    bg_dui.base_100,\n                    border_radius.box,\n                    z._1,\n                    w._64,\n                    shadow.sm\n                )\n            ),\n            cls=combine_classes(dropdown, dropdown_placement.end)\n        )\n    ]\n    helper_dropdown_div = helper_dropdown[1]\n    assert \"dropdown\" in helper_dropdown_div.attrs['class']\n    assert \"dropdown-end\" in helper_dropdown_div.attrs['class']\n    assert \"btn-circle\" in helper_dropdown_div.children[0].attrs['class']\n    assert \"btn-ghost\" in helper_dropdown_div.children[0].attrs['class']\n    assert \"btn-xs\" in helper_dropdown_div.children[0].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        dropdown_card,\n        navbar_dropdown,\n        helper_dropdown[0],  # The text\n        helper_dropdown_div  # The dropdown\n    )\n\n# Run the tests\ntest_dropdown_content_variations_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"dropdown\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;Click&lt;/div&gt;\n    &lt;div tabindex=\"0\" class=\"dropdown-content card card-sm bg-base-100 z-1 w-64 shadow-md\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;p&gt;This is a card. You can use any element as a dropdown.&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"navbar bg-base-200\"&gt;\n    &lt;div class=\"ps-4\"&gt;\n&lt;a href=\"#\" class=\"text-lg font-bold\"&gt;daisyUI&lt;/a&gt;    &lt;/div&gt;\n    &lt;div class=\"flex flex-grow justify-end px-2\"&gt;\n      &lt;div class=\"flex items-stretch\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost rounded-field\"&gt;Button&lt;/a&gt;        &lt;div class=\"dropdown dropdown-end\"&gt;\n          &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost rounded-field\"&gt;Dropdown&lt;/div&gt;\n          &lt;ul tabindex=\"0\" class=\"menu dropdown-content bg-base-200 rounded-box z-1 mt-4 w-52 p-2 shadow-sm\"&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;            &lt;/li&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;            &lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\nA normal text and a helper dropdown  &lt;div class=\"dropdown dropdown-end\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-circle btn-ghost btn-xs text-info\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" tabindex=\"0\" fill=\"none\" class=\"h-4 w-4 stroke-current\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;/div&gt;\n    &lt;div tabindex=\"0\" class=\"card card-sm dropdown-content bg-base-100 rounded-box z-1 w-64 shadow-sm\"&gt;\n      &lt;div tabindex=\"0\" class=\"card-body\"&gt;\n        &lt;h2 class=\"card-title\"&gt;You needed more info?&lt;/h2&gt;\n        &lt;p&gt;Here is a description!&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_dropdown_content_variations_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "actions",
      "dropdown"
    ]
  },
  {
    "objectID": "components/layout/divider.html",
    "href": "components/layout/divider.html",
    "title": "divider",
    "section": "",
    "text": "Base Divider\n\n\nExported source\ndivider = SingleValueFactory(\"divider\", \"Base divider component for creating a line between two elements\") # Base divider component\n\n\n\n\nDivider Colors\n\n\nExported source\ndivider_colors = enums_to_simple_factory(divider, [SemanticColorBrand, SemanticColorStatus], \"divider color variants using daisyUI semantic colors\") # divider color variants\n\n\n\n\nDivider Directions\n\nsource\n\n\nDividerDirection\n\n DividerDirection (value, names=None, module=None, qualname=None,\n                   type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass DividerDirection(str, Enum):\n    VERTICAL = \"vertical\"\n    HORIZONTAL = \"horizontal\"\n\ndivider_directions = enums_to_simple_factory(divider, [DividerDirection], \"divider directions (vertical, horizontal)\") # divider directions\n\n\n\n\nDivider Directions\n\nsource\n\n\nDividerPlacement\n\n DividerPlacement (value, names=None, module=None, qualname=None,\n                   type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass DividerPlacement(str, Enum):\n    START = \"start\"\n    END = \"end\"\n\ndivider_placement = enums_to_simple_factory(divider, [DividerPlacement], \"divider placement (start, end)\") # divider directions\n\n\n\n\nDivider Test Examples\n\nsource\n\n\ntest_divider_basic_examples\n\n test_divider_basic_examples ()\n\nTest basic divider utilities.\n\n\nExported source\ndef test_divider_basic_examples():\n    \"\"\"Test basic divider utilities.\"\"\"\n    # Basic divider\n    assert str(divider) == \"divider\"\n    \n    # Test with modifiers\n    assert str(divider.hover) == \"hover:divider\"\n    assert str(divider.md) == \"md:divider\"\n    assert str(divider.dark) == \"dark:divider\"\n\n# Run the tests\ntest_divider_basic_examples()\n\n\n\nsource\n\n\ntest_divider_colors_examples\n\n test_divider_colors_examples ()\n\nTest divider color variants.\n\n\nExported source\ndef test_divider_colors_examples():\n    \"\"\"Test divider color variants.\"\"\"\n    # All color variants\n    assert str(divider_colors.neutral) == \"divider-neutral\"\n    assert str(divider_colors.primary) == \"divider-primary\"\n    assert str(divider_colors.secondary) == \"divider-secondary\"\n    assert str(divider_colors.accent) == \"divider-accent\"\n    assert str(divider_colors.info) == \"divider-info\"\n    assert str(divider_colors.success) == \"divider-success\"\n    assert str(divider_colors.warning) == \"divider-warning\"\n    assert str(divider_colors.error) == \"divider-error\"\n    \n    # With modifiers\n    assert str(divider_colors.primary.hover) == \"hover:divider-primary\"\n    assert str(divider_colors.success.focus) == \"focus:divider-success\"\n\n# Run the tests\ntest_divider_colors_examples()\n\n\n\nsource\n\n\ntest_divider_directions_examples\n\n test_divider_directions_examples ()\n\nTest divider directions variants.\n\n\nExported source\ndef test_divider_directions_examples():\n    \"\"\"Test divider directions variants.\"\"\"\n    assert str(divider_directions.vertical) == \"divider-vertical\"\n    assert str(divider_directions.horizontal) == \"divider-horizontal\"\n\n# Run the tests\ntest_divider_directions_examples()\n\n\n\nsource\n\n\ntest_divider_placement_examples\n\n test_divider_placement_examples ()\n\nTest divider placement variants.\n\n\nExported source\ndef test_divider_placement_examples():\n    \"\"\"Test divider placement variants.\"\"\"\n    assert str(divider_placement.start) == \"divider-start\"\n    assert str(divider_placement.end) == \"divider-end\"\n\n# Run the tests\ntest_divider_placement_examples()\n\n\n\nsource\n\n\ntest_divider_basic_fasthtml_examples\n\n test_divider_basic_fasthtml_examples ()\n\nTest basic divider and divider with no text from daisyUI v5 documentation.\n\n\nExported source\ndef test_divider_basic_fasthtml_examples():\n    \"\"\"Test basic divider and divider with no text from daisyUI v5 documentation.\"\"\"\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_direction, place_items, grow, grid_display, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card\n    \n    # Divider with text\n    divider_with_text = Div(\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._20, place_items.center)\n        ),\n        Div(\"OR\", cls=str(divider)),\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._20, place_items.center)\n        ),\n        cls=combine_classes(flex_display, w.full, flex_direction.col)\n    )\n    \n    # Verify structure\n    assert divider_with_text.tag == \"div\"\n    assert \"flex\" in divider_with_text.attrs['class']\n    assert \"w-full\" in divider_with_text.attrs['class']\n    assert \"flex-col\" in divider_with_text.attrs['class']\n    \n    # Verify first card\n    first_card = divider_with_text.children[0]\n    assert first_card.tag == \"div\"\n    assert \"card\" in first_card.attrs['class']\n    assert \"bg-base-300\" in first_card.attrs['class']\n    assert \"rounded-box\" in first_card.attrs['class']\n    assert \"grid\" in first_card.attrs['class']\n    assert \"h-20\" in first_card.attrs['class']\n    assert \"place-items-center\" in first_card.attrs['class']\n    assert first_card.children[0] == \"content\"\n    \n    # Verify divider\n    divider_element = divider_with_text.children[1]\n    assert divider_element.tag == \"div\"\n    assert divider_element.attrs['class'] == \"divider\"\n    assert divider_element.children[0] == \"OR\"\n    \n    # Verify second card\n    second_card = divider_with_text.children[2]\n    assert second_card.tag == \"div\"\n    assert \"card\" in second_card.attrs['class']\n    assert second_card.children[0] == \"content\"\n    \n    # Divider with no text\n    divider_no_text = Div(\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._20, place_items.center)\n        ),\n        Div(cls=str(divider)),  # No text\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._20, place_items.center)\n        ),\n        cls=combine_classes(flex_display, w.full, flex_direction.col)\n    )\n    \n    # Verify divider with no text\n    assert divider_no_text.children[1].tag == \"div\"\n    assert divider_no_text.children[1].attrs['class'] == \"divider\"\n    assert divider_no_text.children[1].children == ()  # No children (no text)\n    \n    return Div(divider_with_text, divider_no_text)\n\n# Run the tests\ntest_divider_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"flex w-full flex-col\"&gt;\n    &lt;div class=\"card bg-base-300 rounded-box grid h-20 place-items-center\"&gt;content&lt;/div&gt;\n    &lt;div class=\"divider\"&gt;OR&lt;/div&gt;\n    &lt;div class=\"card bg-base-300 rounded-box grid h-20 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"flex w-full flex-col\"&gt;\n    &lt;div class=\"card bg-base-300 rounded-box grid h-20 place-items-center\"&gt;content&lt;/div&gt;\n    &lt;div class=\"divider\"&gt;&lt;/div&gt;\n    &lt;div class=\"card bg-base-300 rounded-box grid h-20 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_divider_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_divider_horizontal_fasthtml_examples\n\n test_divider_horizontal_fasthtml_examples ()\n\nTest horizontal divider from daisyUI v5 documentation.\n\n\nExported source\ndef test_divider_horizontal_fasthtml_examples():\n    \"\"\"Test horizontal divider from daisyUI v5 documentation.\"\"\"\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_items, grow, grid_display, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card\n    \n    # Horizontal divider\n    horizontal_divider = Div(\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._20, grow(), place_items.center)\n        ),\n        Div(\n            \"OR\",\n            cls=combine_classes(divider, divider_directions.horizontal)\n        ),\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._20, grow(), place_items.center)\n        ),\n        cls=combine_classes(flex_display, w.full)\n    )\n    \n    # Verify structure\n    assert horizontal_divider.tag == \"div\"\n    assert \"flex\" in horizontal_divider.attrs['class']\n    assert \"w-full\" in horizontal_divider.attrs['class']\n    # Note: No flex-col for horizontal layout\n    assert \"flex-col\" not in horizontal_divider.attrs['class']\n    \n    # Verify first card\n    first_card = horizontal_divider.children[0]\n    assert first_card.tag == \"div\"\n    assert \"card\" in first_card.attrs['class']\n    assert \"bg-base-300\" in first_card.attrs['class']\n    assert \"rounded-box\" in first_card.attrs['class']\n    assert \"grid\" in first_card.attrs['class']\n    assert \"h-20\" in first_card.attrs['class']\n    assert \"grow\" in first_card.attrs['class']  # grow for horizontal layout\n    assert \"place-items-center\" in first_card.attrs['class']\n    assert first_card.children[0] == \"content\"\n    \n    # Verify horizontal divider\n    divider_element = horizontal_divider.children[1]\n    assert divider_element.tag == \"div\"\n    assert \"divider\" in divider_element.attrs['class']\n    assert \"divider-horizontal\" in divider_element.attrs['class']\n    assert divider_element.children[0] == \"OR\"\n    \n    # Verify second card\n    second_card = horizontal_divider.children[2]\n    assert second_card.tag == \"div\"\n    assert \"card\" in second_card.attrs['class']\n    assert \"grow\" in second_card.attrs['class']  # grow for horizontal layout\n    assert second_card.children[0] == \"content\"\n    \n    return horizontal_divider\n\n# Run the tests\ntest_divider_horizontal_fasthtml_examples()\n\n\n&lt;div class=\"flex w-full\"&gt;\n  &lt;div class=\"card bg-base-300 rounded-box grid h-20 grow-1 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;div class=\"divider divider-horizontal\"&gt;OR&lt;/div&gt;\n  &lt;div class=\"card bg-base-300 rounded-box grid h-20 grow-1 place-items-center\"&gt;content&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_divider_horizontal_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_divider_responsive_fasthtml_examples\n\n test_divider_responsive_fasthtml_examples ()\n\nTest responsive divider (lg:divider-horizontal) from daisyUI v5 documentation.\n\n\nExported source\ndef test_divider_responsive_fasthtml_examples():\n    \"\"\"Test responsive divider (lg:divider-horizontal) from daisyUI v5 documentation.\"\"\"\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_direction, place_items, grow, grid_display, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card\n    \n    # Responsive divider (vertical on small, horizontal on large)\n    responsive_divider = Div(\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._32, grow(), place_items.center)\n        ),\n        Div(\n            \"OR\",\n            cls=combine_classes(divider, divider_directions.horizontal.lg)\n        ),\n        Div(\n            \"content\",\n            cls=combine_classes(card, bg_dui.base_300, rounded.box, grid_display, h._32, grow(), place_items.center)\n        ),\n        cls=combine_classes(flex_display, w.full, flex_direction.col, flex_direction.row.lg)\n    )\n    \n    # Verify structure\n    assert responsive_divider.tag == \"div\"\n    assert \"flex\" in responsive_divider.attrs['class']\n    assert \"w-full\" in responsive_divider.attrs['class']\n    assert \"flex-col\" in responsive_divider.attrs['class']  # vertical by default\n    assert \"lg:flex-row\" in responsive_divider.attrs['class']  # horizontal on large screens\n    \n    # Verify first card\n    first_card = responsive_divider.children[0]\n    assert first_card.tag == \"div\"\n    assert \"card\" in first_card.attrs['class']\n    assert \"bg-base-300\" in first_card.attrs['class']\n    assert \"rounded-box\" in first_card.attrs['class']\n    assert \"grid\" in first_card.attrs['class']\n    assert \"h-32\" in first_card.attrs['class']  # taller for responsive example\n    assert \"grow\" in first_card.attrs['class']\n    assert \"place-items-center\" in first_card.attrs['class']\n    assert first_card.children[0] == \"content\"\n    \n    # Verify responsive divider\n    divider_element = responsive_divider.children[1]\n    assert divider_element.tag == \"div\"\n    assert \"divider\" in divider_element.attrs['class']\n    assert \"lg:divider-horizontal\" in divider_element.attrs['class']  # horizontal on large screens\n    assert divider_element.children[0] == \"OR\"\n    \n    # Verify second card\n    second_card = responsive_divider.children[2]\n    assert second_card.tag == \"div\"\n    assert \"card\" in second_card.attrs['class']\n    assert \"h-32\" in second_card.attrs['class']  # taller for responsive example\n    assert \"grow\" in second_card.attrs['class']\n    assert second_card.children[0] == \"content\"\n    \n    return responsive_divider\n\n# Run the tests\ntest_divider_responsive_fasthtml_examples()\n\n\n&lt;div class=\"flex w-full flex-col lg:flex-row\"&gt;\n  &lt;div class=\"card bg-base-300 rounded-box grid h-32 grow-1 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;div class=\"divider lg:divider-horizontal\"&gt;OR&lt;/div&gt;\n  &lt;div class=\"card bg-base-300 rounded-box grid h-32 grow-1 place-items-center\"&gt;content&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_divider_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_divider_colors_fasthtml_examples\n\n test_divider_colors_fasthtml_examples ()\n\nTest divider with colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_divider_colors_fasthtml_examples():\n    \"\"\"Test divider with colors from daisyUI v5 documentation.\"\"\"\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_direction, flex_display\n    \n    # Divider with colors\n    divider_colors_example = Div(\n        Div(\"Default\", cls=str(divider)),\n        Div(\"Neutral\", cls=combine_classes(divider, divider_colors.neutral)),\n        Div(\"Primary\", cls=combine_classes(divider, divider_colors.primary)),\n        Div(\"Secondary\", cls=combine_classes(divider, divider_colors.secondary)),\n        Div(\"Accent\", cls=combine_classes(divider, divider_colors.accent)),\n        Div(\"Success\", cls=combine_classes(divider, divider_colors.success)),\n        Div(\"Warning\", cls=combine_classes(divider, divider_colors.warning)),\n        Div(\"Info\", cls=combine_classes(divider, divider_colors.info)),\n        Div(\"Error\", cls=combine_classes(divider, divider_colors.error)),\n        cls=combine_classes(flex_display, w.full, flex_direction.col)\n    )\n    \n    # Verify structure\n    assert divider_colors_example.tag == \"div\"\n    assert \"flex\" in divider_colors_example.attrs['class']\n    assert \"w-full\" in divider_colors_example.attrs['class']\n    assert \"flex-col\" in divider_colors_example.attrs['class']\n    \n    # Verify all color dividers\n    dividers = divider_colors_example.children\n    assert len(dividers) == 9\n    \n    # Default divider\n    assert dividers[0].tag == \"div\"\n    assert dividers[0].attrs['class'] == \"divider\"\n    assert dividers[0].children[0] == \"Default\"\n    \n    # Neutral divider\n    assert dividers[1].tag == \"div\"\n    assert \"divider\" in dividers[1].attrs['class']\n    assert \"divider-neutral\" in dividers[1].attrs['class']\n    assert dividers[1].children[0] == \"Neutral\"\n    \n    # Primary divider\n    assert dividers[2].tag == \"div\"\n    assert \"divider\" in dividers[2].attrs['class']\n    assert \"divider-primary\" in dividers[2].attrs['class']\n    assert dividers[2].children[0] == \"Primary\"\n    \n    # Secondary divider\n    assert dividers[3].tag == \"div\"\n    assert \"divider\" in dividers[3].attrs['class']\n    assert \"divider-secondary\" in dividers[3].attrs['class']\n    assert dividers[3].children[0] == \"Secondary\"\n    \n    # Accent divider\n    assert dividers[4].tag == \"div\"\n    assert \"divider\" in dividers[4].attrs['class']\n    assert \"divider-accent\" in dividers[4].attrs['class']\n    assert dividers[4].children[0] == \"Accent\"\n    \n    # Success divider\n    assert dividers[5].tag == \"div\"\n    assert \"divider\" in dividers[5].attrs['class']\n    assert \"divider-success\" in dividers[5].attrs['class']\n    assert dividers[5].children[0] == \"Success\"\n    \n    # Warning divider\n    assert dividers[6].tag == \"div\"\n    assert \"divider\" in dividers[6].attrs['class']\n    assert \"divider-warning\" in dividers[6].attrs['class']\n    assert dividers[6].children[0] == \"Warning\"\n    \n    # Info divider\n    assert dividers[7].tag == \"div\"\n    assert \"divider\" in dividers[7].attrs['class']\n    assert \"divider-info\" in dividers[7].attrs['class']\n    assert dividers[7].children[0] == \"Info\"\n    \n    # Error divider\n    assert dividers[8].tag == \"div\"\n    assert \"divider\" in dividers[8].attrs['class']\n    assert \"divider-error\" in dividers[8].attrs['class']\n    assert dividers[8].children[0] == \"Error\"\n    \n    return divider_colors_example\n\n# Run the tests\ntest_divider_colors_fasthtml_examples()\n\n\n&lt;div class=\"flex w-full flex-col\"&gt;\n  &lt;div class=\"divider\"&gt;Default&lt;/div&gt;\n  &lt;div class=\"divider divider-neutral\"&gt;Neutral&lt;/div&gt;\n  &lt;div class=\"divider divider-primary\"&gt;Primary&lt;/div&gt;\n  &lt;div class=\"divider divider-secondary\"&gt;Secondary&lt;/div&gt;\n  &lt;div class=\"divider divider-accent\"&gt;Accent&lt;/div&gt;\n  &lt;div class=\"divider divider-success\"&gt;Success&lt;/div&gt;\n  &lt;div class=\"divider divider-warning\"&gt;Warning&lt;/div&gt;\n  &lt;div class=\"divider divider-info\"&gt;Info&lt;/div&gt;\n  &lt;div class=\"divider divider-error\"&gt;Error&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_divider_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_divider_positions_fasthtml_examples\n\n test_divider_positions_fasthtml_examples ()\n\nTest divider in different positions (vertical and horizontal) from daisyUI v5 documentation.\n\n\nExported source\ndef test_divider_positions_fasthtml_examples():\n    \"\"\"Test divider in different positions (vertical and horizontal) from daisyUI v5 documentation.\"\"\"\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_direction, flex_display\n    \n    # Divider in different positions (vertical)\n    vertical_positions = Div(\n        Div(\"Start\", cls=combine_classes(divider, divider_placement.start)),\n        Div(\"Default\", cls=str(divider)),\n        Div(\"End\", cls=combine_classes(divider, divider_placement.end)),\n        cls=combine_classes(flex_display, w.full, flex_direction.col)\n    )\n    \n    # Verify vertical positions structure\n    assert vertical_positions.tag == \"div\"\n    assert \"flex\" in vertical_positions.attrs['class']\n    assert \"w-full\" in vertical_positions.attrs['class']\n    assert \"flex-col\" in vertical_positions.attrs['class']\n    \n    # Verify dividers\n    vertical_dividers = vertical_positions.children\n    assert len(vertical_dividers) == 3\n    \n    # Start divider\n    assert vertical_dividers[0].tag == \"div\"\n    assert \"divider\" in vertical_dividers[0].attrs['class']\n    assert \"divider-start\" in vertical_dividers[0].attrs['class']\n    assert vertical_dividers[0].children[0] == \"Start\"\n    \n    # Default divider (center)\n    assert vertical_dividers[1].tag == \"div\"\n    assert vertical_dividers[1].attrs['class'] == \"divider\"\n    assert vertical_dividers[1].children[0] == \"Default\"\n    \n    # End divider\n    assert vertical_dividers[2].tag == \"div\"\n    assert \"divider\" in vertical_dividers[2].attrs['class']\n    assert \"divider-end\" in vertical_dividers[2].attrs['class']\n    assert vertical_dividers[2].children[0] == \"End\"\n    \n    # Divider in different positions (horizontal)\n    horizontal_positions = Div(\n        Div(\n            \"Start\",\n            cls=combine_classes(divider, divider_directions.horizontal, divider_placement.start)\n        ),\n        Div(\n            \"Default\",\n            cls=combine_classes(divider, divider_directions.horizontal)\n        ),\n        Div(\n            \"End\",\n            cls=combine_classes(divider, divider_directions.horizontal, divider_placement.end)\n        ),\n        cls=combine_classes(flex_display, w.full)\n    )\n    \n    # Verify horizontal positions structure\n    assert horizontal_positions.tag == \"div\"\n    assert \"flex\" in horizontal_positions.attrs['class']\n    assert \"w-full\" in horizontal_positions.attrs['class']\n    assert \"flex-col\" not in horizontal_positions.attrs['class']  # No flex-col for horizontal\n    \n    # Verify horizontal dividers\n    horizontal_dividers = horizontal_positions.children\n    assert len(horizontal_dividers) == 3\n    \n    # Start horizontal divider\n    assert horizontal_dividers[0].tag == \"div\"\n    assert \"divider\" in horizontal_dividers[0].attrs['class']\n    assert \"divider-horizontal\" in horizontal_dividers[0].attrs['class']\n    assert \"divider-start\" in horizontal_dividers[0].attrs['class']\n    assert horizontal_dividers[0].children[0] == \"Start\"\n    \n    # Default horizontal divider (center)\n    assert horizontal_dividers[1].tag == \"div\"\n    assert \"divider\" in horizontal_dividers[1].attrs['class']\n    assert \"divider-horizontal\" in horizontal_dividers[1].attrs['class']\n    assert \"divider-start\" not in horizontal_dividers[1].attrs['class']\n    assert \"divider-end\" not in horizontal_dividers[1].attrs['class']\n    assert horizontal_dividers[1].children[0] == \"Default\"\n    \n    # End horizontal divider\n    assert horizontal_dividers[2].tag == \"div\"\n    assert \"divider\" in horizontal_dividers[2].attrs['class']\n    assert \"divider-horizontal\" in horizontal_dividers[2].attrs['class']\n    assert \"divider-end\" in horizontal_dividers[2].attrs['class']\n    assert horizontal_dividers[2].children[0] == \"End\"\n    \n    return Div(vertical_positions, horizontal_positions)\n\n# Run the tests\ntest_divider_positions_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"flex w-full flex-col\"&gt;\n    &lt;div class=\"divider divider-start\"&gt;Start&lt;/div&gt;\n    &lt;div class=\"divider\"&gt;Default&lt;/div&gt;\n    &lt;div class=\"divider divider-end\"&gt;End&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"flex w-full\"&gt;\n    &lt;div class=\"divider divider-horizontal divider-start\"&gt;Start&lt;/div&gt;\n    &lt;div class=\"divider divider-horizontal\"&gt;Default&lt;/div&gt;\n    &lt;div class=\"divider divider-horizontal divider-end\"&gt;End&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_divider_positions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "divider"
    ]
  },
  {
    "objectID": "components/layout/indicator.html",
    "href": "components/layout/indicator.html",
    "title": "indicator",
    "section": "",
    "text": "Base Indicator\n\n\nExported source\nindicator = SingleValueFactory(\"indicator\", \"Base indicator container element\") # Base indicator component\nindicator_item = SingleValueFactory(\"indicator-item\", \"Indicator item part that will be placed on the corner of sibling\") # Indicator item part\n\n\n\n\nIndicator Placement\n\nsource\n\n\nIndicatorPlacement\n\n IndicatorPlacement (value, names=None, module=None, qualname=None,\n                     type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass IndicatorPlacement(str, Enum):\n    START = \"start\"\n    CENTER = \"center\"\n    END = \"end\"\n    TOP = \"top\"\n    MIDDLE = \"middle\"\n    BOTTOM = \"bottom\"\n \nindicator_placement = enums_to_simple_factory(indicator, [IndicatorPlacement], \"indicator placement (start, end)\") # indicator directions\n\n\n\n\nIndicator Test Examples\n\nsource\n\n\ntest_indicator_basic_examples\n\n test_indicator_basic_examples ()\n\nTest basic indicator utilities.\n\n\nExported source\ndef test_indicator_basic_examples():\n    \"\"\"Test basic indicator utilities.\"\"\"\n    assert str(indicator) == \"indicator\"\n    assert str(indicator_item) == \"indicator-item\"\n    \n    # With modifiers\n    assert str(indicator.hover) == \"hover:indicator\"\n    assert str(indicator_item.md) == \"md:indicator-item\"\n\n# Run the tests\ntest_indicator_basic_examples()\n\n\n\nsource\n\n\ntest_indicator_placement_examples\n\n test_indicator_placement_examples ()\n\nTest indicator placement options.\n\n\nExported source\ndef test_indicator_placement_examples():\n    \"\"\"Test indicator placement options.\"\"\"\n    # Horizontal alignment\n    assert str(indicator_placement.start) == \"indicator-start\"\n    assert str(indicator_placement.center) == \"indicator-center\"\n    assert str(indicator_placement.end) == \"indicator-end\"\n    \n    # Vertical position\n    assert str(indicator_placement.top) == \"indicator-top\"\n    assert str(indicator_placement.middle) == \"indicator-middle\"\n    assert str(indicator_placement.bottom) == \"indicator-bottom\"\n\n# Run the tests\ntest_indicator_placement_examples()\n\n\n\nsource\n\n\ntest_indicator_basic_fasthtml_examples\n\n test_indicator_basic_fasthtml_examples ()\n\nTest basic indicator examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_indicator_basic_fasthtml_examples():\n    \"\"\"Test basic indicator examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span, Button\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_items, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors\n    from cjm_fasthtml_daisyui.components.data_display.status import status, status_colors\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    \n    # Status Indicator\n    status_indicator = Div(\n        Span(cls=combine_classes(indicator_item, status, status_colors.success)),\n        Div(\n            \"content\",\n            cls=combine_classes(bg_dui.base_300, grid_display, h._32, w._32, place_items.center)\n        ),\n        cls=str(indicator)\n    )\n    \n    # Verify status indicator structure\n    assert \"indicator\" in status_indicator.attrs['class']\n    assert status_indicator.children[0].tag == \"span\"\n    assert \"indicator-item\" in status_indicator.children[0].attrs['class']\n    assert \"status\" in status_indicator.children[0].attrs['class']\n    assert \"status-success\" in status_indicator.children[0].attrs['class']\n    assert status_indicator.children[1].tag == \"div\"\n    assert \"bg-base-300\" in status_indicator.children[1].attrs['class']\n    assert \"grid\" in status_indicator.children[1].attrs['class']\n    assert \"h-32\" in status_indicator.children[1].attrs['class']\n    assert \"w-32\" in status_indicator.children[1].attrs['class']\n    assert \"place-items-center\" in status_indicator.children[1].attrs['class']\n    assert status_indicator.children[1].children[0] == \"content\"\n    \n    # Badge as indicator\n    badge_indicator = Div(\n        Span(\"New\", cls=combine_classes(indicator_item, badge, badge_colors.primary)),\n        Div(\n            \"content\",\n            cls=combine_classes(bg_dui.base_300, grid_display, h._32, w._32, place_items.center)\n        ),\n        cls=str(indicator)\n    )\n    \n    # Verify badge indicator structure\n    assert \"indicator\" in badge_indicator.attrs['class']\n    assert badge_indicator.children[0].tag == \"span\"\n    assert \"indicator-item\" in badge_indicator.children[0].attrs['class']\n    assert \"badge\" in badge_indicator.children[0].attrs['class']\n    assert \"badge-primary\" in badge_indicator.children[0].attrs['class']\n    assert badge_indicator.children[0].children[0] == \"New\"\n    assert badge_indicator.children[1].children[0] == \"content\"\n    \n    return Div(status_indicator, badge_indicator)\n\n# Run the tests\ntest_indicator_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item status status-success\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item badge badge-primary\"&gt;New&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_indicator_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_indicator_for_components_fasthtml_examples\n\n test_indicator_for_components_fasthtml_examples ()\n\nTest indicator with various components from daisyUI v5 documentation.\n\n\nExported source\ndef test_indicator_for_components_fasthtml_examples():\n    \"\"\"Test indicator with various components from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span, Button, A, Img, Input\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors\n    from cjm_fasthtml_daisyui.components.navigation.tabs import tabs, tabs_styles, tab, tab_modifiers\n    from cjm_fasthtml_daisyui.components.data_display.avatar import avatar\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input, text_input_styles\n    from cjm_fasthtml_daisyui.components.layout.divider import divider\n    \n    # For button\n    button_indicator = Div(\n        Span(\"12\", cls=combine_classes(indicator_item, badge, badge_colors.secondary)),\n        Button(\"inbox\", cls=str(btn)),\n        cls=str(indicator)\n    )\n    \n    # Verify button indicator\n    assert \"indicator\" in button_indicator.attrs['class']\n    assert button_indicator.children[0].tag == \"span\"\n    assert \"indicator-item\" in button_indicator.children[0].attrs['class']\n    assert \"badge\" in button_indicator.children[0].attrs['class']\n    assert \"badge-secondary\" in button_indicator.children[0].attrs['class']\n    assert button_indicator.children[0].children[0] == \"12\"\n    assert button_indicator.children[1].tag == \"button\"\n    assert \"btn\" in button_indicator.children[1].attrs['class']\n    assert button_indicator.children[1].children[0] == \"inbox\"\n    \n    # For tab\n    tab_indicator = Div(\n        A(\"Messages\", cls=str(tab)),\n        A(\n            \"Notifications\",\n            Span(\"8\", cls=combine_classes(indicator_item, badge)),\n            cls=combine_classes(indicator, tab, tab_modifiers.active)\n        ),\n        A(\"Requests\", cls=str(tab)),\n        cls=combine_classes(tabs, tabs_styles.lift)\n    )\n    \n    # Verify tab indicator\n    assert \"tabs\" in tab_indicator.attrs['class']\n    assert \"tabs-lift\" in tab_indicator.attrs['class']\n    assert tab_indicator.children[0].tag == \"a\"\n    assert \"tab\" in tab_indicator.children[0].attrs['class']\n    assert tab_indicator.children[0].children[0] == \"Messages\"\n    assert tab_indicator.children[1].tag == \"a\"\n    assert \"indicator\" in tab_indicator.children[1].attrs['class']\n    assert \"tab\" in tab_indicator.children[1].attrs['class']\n    assert \"tab-active\" in tab_indicator.children[1].attrs['class']\n    assert tab_indicator.children[1].children[0] == \"Notifications\"\n    assert tab_indicator.children[1].children[1].tag == \"span\"\n    assert \"indicator-item\" in tab_indicator.children[1].children[1].attrs['class']\n    assert \"badge\" in tab_indicator.children[1].children[1].attrs['class']\n    assert tab_indicator.children[1].children[1].children[0] == \"8\"\n    \n    # For avatar\n    avatar_indicator = Div(\n        Span(\"Justice\", cls=combine_classes(indicator_item, badge, badge_colors.secondary)),\n        Div(\n            Img(\n                alt=\"Tailwind CSS examples\",\n                src=\"https://img.daisyui.com/images/profile/demo/[email protected]\"\n            ),\n            cls=combine_classes(h._20, w._20, rounded.lg)\n        ),\n        cls=combine_classes(avatar, indicator)\n    )\n    \n    # Verify avatar indicator\n    assert \"avatar\" in avatar_indicator.attrs['class']\n    assert \"indicator\" in avatar_indicator.attrs['class']\n    assert avatar_indicator.children[0].tag == \"span\"\n    assert \"indicator-item\" in avatar_indicator.children[0].attrs['class']\n    assert \"badge\" in avatar_indicator.children[0].attrs['class']\n    assert \"badge-secondary\" in avatar_indicator.children[0].attrs['class']\n    assert avatar_indicator.children[0].children[0] == \"Justice\"\n    assert avatar_indicator.children[1].tag == \"div\"\n    assert \"h-20\" in avatar_indicator.children[1].attrs['class']\n    assert \"w-20\" in avatar_indicator.children[1].attrs['class']\n    assert \"rounded-lg\" in avatar_indicator.children[1].attrs['class']\n    assert avatar_indicator.children[1].children[0].tag == \"img\"\n    \n    # For an input\n    input_indicator = Div(\n        Span(\"Required\", cls=combine_classes(indicator_item, badge)),\n        Input(\n            type=\"text\",\n            placeholder=\"Your email address\",\n            cls=combine_classes(text_input)\n        ),\n        cls=str(indicator)\n    )\n    \n    # Verify input indicator\n    assert \"indicator\" in input_indicator.attrs['class']\n    assert input_indicator.children[0].tag == \"span\"\n    assert \"indicator-item\" in input_indicator.children[0].attrs['class']\n    assert \"badge\" in input_indicator.children[0].attrs['class']\n    assert input_indicator.children[0].children[0] == \"Required\"\n    assert input_indicator.children[1].tag == \"input\"\n    assert input_indicator.children[1].attrs['type'] == \"text\"\n    assert input_indicator.children[1].attrs['placeholder'] == \"Your email address\"\n    assert \"input\" in input_indicator.children[1].attrs['class']\n    \n    return Div(\n        button_indicator,\n        Div(cls=str(divider)),\n        tab_indicator, \n        Div(cls=str(divider)),\n        avatar_indicator, \n        Div(cls=str(divider)),\n        input_indicator\n    )\n\n# Run the tests\ntest_indicator_for_components_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item badge badge-secondary\"&gt;12&lt;/span&gt;&lt;button class=\"btn\"&gt;inbox&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"divider\"&gt;&lt;/div&gt;\n  &lt;div class=\"tabs tabs-lift\"&gt;\n&lt;a href=\"#\" class=\"tab\"&gt;Messages&lt;/a&gt;&lt;a href=\"#\" class=\"indicator tab tab-active\"&gt;Notifications&lt;span class=\"indicator-item badge\"&gt;8&lt;/span&gt;&lt;/a&gt;&lt;a href=\"#\" class=\"tab\"&gt;Requests&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"divider\"&gt;&lt;/div&gt;\n  &lt;div class=\"avatar indicator\"&gt;\n&lt;span class=\"indicator-item badge badge-secondary\"&gt;Justice&lt;/span&gt;    &lt;div class=\"h-20 w-20 rounded-lg\"&gt;\n&lt;img alt=\"Tailwind CSS examples\" src=\"https://img.daisyui.com/images/profile/demo/[email protected]\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"divider\"&gt;&lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item badge\"&gt;Required&lt;/span&gt;    &lt;input type=\"text\" placeholder=\"Your email address\" class=\"input\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_indicator_for_components_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_indicator_card_fasthtml_examples\n\n test_indicator_card_fasthtml_examples ()\n\nTest button as indicator for card from daisyUI v5 documentation.\n\n\nExported source\ndef test_indicator_card_fasthtml_examples():\n    \"\"\"Test button as indicator for card from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button, H2, P\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body, card_title\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import border_dui\n    \n    # A button as an indicator for a card\n    card_with_indicator = Div(\n        Div(\n            Button(\"Apply\", cls=combine_classes(btn, btn_colors.primary)),\n            cls=combine_classes(indicator_item, indicator_placement.bottom)\n        ),\n        Div(\n            Div(\n                H2(\"Job Title\", cls=str(card_title)),\n                P(\"Rerum reiciendis beatae tenetur excepturi\"),\n                cls=str(card_body)\n            ),\n            cls=combine_classes(card, border_dui.base_300, border, shadow.sm)\n        ),\n        cls=str(indicator)\n    )\n    \n    # Verify structure\n    assert \"indicator\" in card_with_indicator.attrs['class']\n    \n    # Verify indicator item (button container)\n    indicator_item_div = card_with_indicator.children[0]\n    assert \"indicator-item\" in indicator_item_div.attrs['class']\n    assert \"indicator-bottom\" in indicator_item_div.attrs['class']\n    \n    # Verify button\n    apply_button = indicator_item_div.children[0]\n    assert apply_button.tag == \"button\"\n    assert \"btn\" in apply_button.attrs['class']\n    assert \"btn-primary\" in apply_button.attrs['class']\n    assert apply_button.children[0] == \"Apply\"\n    \n    # Verify card\n    card_div = card_with_indicator.children[1]\n    assert \"card\" in card_div.attrs['class']\n    assert \"border-base-300\" in card_div.attrs['class']\n    assert \"border\" in card_div.attrs['class']\n    assert \"shadow-sm\" in card_div.attrs['class']\n    \n    # Verify card body\n    card_body_div = card_div.children[0]\n    assert \"card-body\" in card_body_div.attrs['class']\n    \n    # Verify card title\n    title_element = card_body_div.children[0]\n    assert title_element.tag == \"h2\"\n    assert \"card-title\" in title_element.attrs['class']\n    assert title_element.children[0] == \"Job Title\"\n    \n    # Verify card description\n    desc_element = card_body_div.children[1]\n    assert desc_element.tag == \"p\"\n    assert desc_element.children[0] == \"Rerum reiciendis beatae tenetur excepturi\"\n    \n    return Div(card_with_indicator)\n\n# Run the tests\ntest_indicator_card_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"indicator\"&gt;\n    &lt;div class=\"indicator-item indicator-bottom\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Apply&lt;/button&gt;    &lt;/div&gt;\n    &lt;div class=\"card border-base-300 &lt;cjm_fasthtml_tailwind.utilities.borders.BorderWidthFactory object at 0x7f16dc28abd0&gt; shadow-sm\"&gt;\n      &lt;div class=\"card-body\"&gt;\n        &lt;h2 class=\"card-title\"&gt;Job Title&lt;/h2&gt;\n        &lt;p&gt;Rerum reiciendis beatae tenetur excepturi&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_indicator_card_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_indicator_image_overlay_fasthtml_examples\n\n test_indicator_image_overlay_fasthtml_examples ()\n\nTest indicator in center of image from daisyUI v5 documentation.\n\n\nExported source\ndef test_indicator_image_overlay_fasthtml_examples():\n    \"\"\"Test indicator in center of image from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span, Img\n    \n    # In center of an image\n    image_overlay_indicator = Div(\n        Span(\n            \"Only available for Pro users\",\n            cls=combine_classes(\n                indicator_item,\n                indicator_placement.center,\n                indicator_placement.middle\n            )\n        ),\n        Img(\n            alt=\"Tailwind CSS examples\",\n            src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\"\n        ),\n        cls=str(indicator)\n    )\n    \n    # Verify structure\n    assert \"indicator\" in image_overlay_indicator.attrs['class']\n    \n    # Verify indicator item\n    indicator_span = image_overlay_indicator.children[0]\n    assert indicator_span.tag == \"span\"\n    assert \"indicator-item\" in indicator_span.attrs['class']\n    assert \"indicator-center\" in indicator_span.attrs['class']\n    assert \"indicator-middle\" in indicator_span.attrs['class']\n    assert indicator_span.children[0] == \"Only available for Pro users\"\n    \n    # Verify image\n    img_element = image_overlay_indicator.children[1]\n    assert img_element.tag == \"img\"\n    assert img_element.attrs['alt'] == \"Tailwind CSS examples\"\n    assert img_element.attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\"\n    \n    return Div(image_overlay_indicator)\n\n# Run the tests\ntest_indicator_image_overlay_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-center indicator-middle\"&gt;Only available for Pro users&lt;/span&gt;&lt;img alt=\"Tailwind CSS examples\" src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\"&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_indicator_image_overlay_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_indicator_positions_fasthtml_examples\n\n test_indicator_positions_fasthtml_examples ()\n\nTest all indicator position combinations from daisyUI v5 documentation.\n\n\nExported source\ndef test_indicator_positions_fasthtml_examples():\n    \"\"\"Test all indicator position combinations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_items, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors\n    from cjm_fasthtml_daisyui.components.layout.divider import divider, divider_directions\n    \n    # Helper function to create indicator box\n    def create_indicator_box(*position_classes):\n        return Div(\n            Span(cls=combine_classes(indicator_item, *position_classes, badge, badge_colors.secondary)),\n            Div(\n                \"content\",\n                cls=combine_classes(bg_dui.base_300, grid_display, h._32, w._32, place_items.center)\n            ),\n            cls=str(indicator)\n        )\n    \n    # indicator-top (default) indicator-start\n    top_start = create_indicator_box(indicator_placement.start)\n    assert \"indicator\" in top_start.attrs['class']\n    assert \"indicator-start\" in top_start.children[0].attrs['class']\n    assert \"badge-secondary\" in top_start.children[0].attrs['class']\n    \n    # indicator-top (default) indicator-center\n    top_center = create_indicator_box(indicator_placement.center)\n    assert \"indicator-center\" in top_center.children[0].attrs['class']\n    \n    # indicator-top (default) indicator-end (default)\n    top_end = create_indicator_box()\n    assert \"indicator-item\" in top_end.children[0].attrs['class']\n    assert \"badge\" in top_end.children[0].attrs['class']\n    \n    # indicator-middle indicator-start\n    middle_start = create_indicator_box(indicator_placement.middle, indicator_placement.start)\n    assert \"indicator-middle\" in middle_start.children[0].attrs['class']\n    assert \"indicator-start\" in middle_start.children[0].attrs['class']\n    \n    # indicator-middle indicator-center\n    middle_center = create_indicator_box(indicator_placement.middle, indicator_placement.center)\n    assert \"indicator-middle\" in middle_center.children[0].attrs['class']\n    assert \"indicator-center\" in middle_center.children[0].attrs['class']\n    \n    # indicator-middle indicator-end (default)\n    middle_end = create_indicator_box(indicator_placement.middle)\n    assert \"indicator-middle\" in middle_end.children[0].attrs['class']\n    \n    # indicator-bottom indicator-start\n    bottom_start = create_indicator_box(indicator_placement.bottom, indicator_placement.start)\n    assert \"indicator-bottom\" in bottom_start.children[0].attrs['class']\n    assert \"indicator-start\" in bottom_start.children[0].attrs['class']\n    \n    # indicator-bottom indicator-center\n    bottom_center = create_indicator_box(indicator_placement.bottom, indicator_placement.center)\n    assert \"indicator-bottom\" in bottom_center.children[0].attrs['class']\n    assert \"indicator-center\" in bottom_center.children[0].attrs['class']\n    \n    # indicator-bottom indicator-end (default)\n    bottom_end = create_indicator_box(indicator_placement.bottom)\n    assert \"indicator-bottom\" in bottom_end.children[0].attrs['class']\n    \n    return Div(\n        top_start,\n        top_center,\n        top_end,        \n        middle_start,        \n        middle_center,        \n        middle_end,        \n        bottom_start,        \n        bottom_center,        \n        bottom_end,\n        cls=combine_classes(divider, h._48)\n    )\n\n# Run the tests\ntest_indicator_positions_fasthtml_examples()\n\n\n&lt;div class=\"divider h-48\"&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-start badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-center badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-middle indicator-start badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-middle indicator-center badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-middle badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-bottom indicator-start badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-bottom indicator-center badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-bottom badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_indicator_positions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_indicator_multiple_fasthtml_examples\n\n test_indicator_multiple_fasthtml_examples ()\n\nTest multiple indicators from daisyUI v5 documentation.\n\n\nExported source\ndef test_indicator_multiple_fasthtml_examples():\n    \"\"\"Test multiple indicators from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_items, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge\n    \n    # Multiple indicators\n    multiple_indicators = Div(\n        Span(\"↖︎\", cls=combine_classes(indicator_item, indicator_placement.top, indicator_placement.start, badge)),\n        Span(\"↑\", cls=combine_classes(indicator_item, indicator_placement.top, indicator_placement.center, badge)),\n        Span(\"↗︎\", cls=combine_classes(indicator_item, indicator_placement.top, indicator_placement.end, badge)),\n        Span(\"←\", cls=combine_classes(indicator_item, indicator_placement.middle, indicator_placement.start, badge)),\n        Span(\"●\", cls=combine_classes(indicator_item, indicator_placement.middle, indicator_placement.center, badge)),\n        Span(\"→\", cls=combine_classes(indicator_item, indicator_placement.middle, indicator_placement.end, badge)),\n        Span(\"↙︎\", cls=combine_classes(indicator_item, indicator_placement.bottom, indicator_placement.start, badge)),\n        Span(\"↓\", cls=combine_classes(indicator_item, indicator_placement.bottom, indicator_placement.center, badge)),\n        Span(\"↘︎\", cls=combine_classes(indicator_item, indicator_placement.bottom, indicator_placement.end, badge)),\n        Div(\n            \"Box\",\n            cls=combine_classes(bg_dui.base_300, grid_display, h._32, w._60, place_items.center)\n        ),\n        cls=str(indicator)\n    )\n    \n    # Verify structure\n    assert \"indicator\" in multiple_indicators.attrs['class']\n    \n    # Verify all 9 indicators\n    assert len(multiple_indicators.children) == 10  # 9 indicators + 1 content box\n    \n    # Top row indicators\n    assert multiple_indicators.children[0].children[0] == \"↖︎\"\n    assert \"indicator-top\" in multiple_indicators.children[0].attrs['class']\n    assert \"indicator-start\" in multiple_indicators.children[0].attrs['class']\n    \n    assert multiple_indicators.children[1].children[0] == \"↑\"\n    assert \"indicator-top\" in multiple_indicators.children[1].attrs['class']\n    assert \"indicator-center\" in multiple_indicators.children[1].attrs['class']\n    \n    assert multiple_indicators.children[2].children[0] == \"↗︎\"\n    assert \"indicator-top\" in multiple_indicators.children[2].attrs['class']\n    assert \"indicator-end\" in multiple_indicators.children[2].attrs['class']\n    \n    # Middle row indicators\n    assert multiple_indicators.children[3].children[0] == \"←\"\n    assert \"indicator-middle\" in multiple_indicators.children[3].attrs['class']\n    assert \"indicator-start\" in multiple_indicators.children[3].attrs['class']\n    \n    assert multiple_indicators.children[4].children[0] == \"●\"\n    assert \"indicator-middle\" in multiple_indicators.children[4].attrs['class']\n    assert \"indicator-center\" in multiple_indicators.children[4].attrs['class']\n    \n    assert multiple_indicators.children[5].children[0] == \"→\"\n    assert \"indicator-middle\" in multiple_indicators.children[5].attrs['class']\n    assert \"indicator-end\" in multiple_indicators.children[5].attrs['class']\n    \n    # Bottom row indicators\n    assert multiple_indicators.children[6].children[0] == \"↙︎\"\n    assert \"indicator-bottom\" in multiple_indicators.children[6].attrs['class']\n    assert \"indicator-start\" in multiple_indicators.children[6].attrs['class']\n    \n    assert multiple_indicators.children[7].children[0] == \"↓\"\n    assert \"indicator-bottom\" in multiple_indicators.children[7].attrs['class']\n    assert \"indicator-center\" in multiple_indicators.children[7].attrs['class']\n    \n    assert multiple_indicators.children[8].children[0] == \"↘︎\"\n    assert \"indicator-bottom\" in multiple_indicators.children[8].attrs['class']\n    assert \"indicator-end\" in multiple_indicators.children[8].attrs['class']\n    \n    # Verify content box\n    content_box = multiple_indicators.children[9]\n    assert content_box.tag == \"div\"\n    assert \"bg-base-300\" in content_box.attrs['class']\n    assert \"h-32\" in content_box.attrs['class']\n    assert \"w-60\" in content_box.attrs['class']\n    assert \"place-items-center\" in content_box.attrs['class']\n    assert content_box.children[0] == \"Box\"\n    \n    return Div(multiple_indicators)\n\n# Run the tests\ntest_indicator_multiple_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-top indicator-start badge\"&gt;↖︎&lt;/span&gt;&lt;span class=\"indicator-item indicator-top indicator-center badge\"&gt;↑&lt;/span&gt;&lt;span class=\"indicator-item indicator-top indicator-end badge\"&gt;↗︎&lt;/span&gt;&lt;span class=\"indicator-item indicator-middle indicator-start badge\"&gt;←&lt;/span&gt;&lt;span class=\"indicator-item indicator-middle indicator-center badge\"&gt;●&lt;/span&gt;&lt;span class=\"indicator-item indicator-middle indicator-end badge\"&gt;→&lt;/span&gt;&lt;span class=\"indicator-item indicator-bottom indicator-start badge\"&gt;↙︎&lt;/span&gt;&lt;span class=\"indicator-item indicator-bottom indicator-center badge\"&gt;↓&lt;/span&gt;&lt;span class=\"indicator-item indicator-bottom indicator-end badge\"&gt;↘︎&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-60 place-items-center\"&gt;Box&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_indicator_multiple_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_indicator_responsive_fasthtml_examples\n\n test_indicator_responsive_fasthtml_examples ()\n\nTest responsive indicator from daisyUI v5 documentation.\n\n\nExported source\ndef test_indicator_responsive_fasthtml_examples():\n    \"\"\"Test responsive indicator from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_items, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors\n    \n    # Responsive indicator\n    responsive_indicator = Div(\n        Span(\n            cls=combine_classes(\n                indicator_item,\n                indicator_placement.start,\n                indicator_placement.middle.sm,\n                indicator_placement.bottom.md,\n                indicator_placement.center.lg,\n                indicator_placement.end.xl,\n                badge,\n                badge_colors.secondary\n            )\n        ),\n        Div(\n            \"content\",\n            cls=combine_classes(bg_dui.base_300, grid_display, h._32, w._32, place_items.center)\n        ),\n        cls=str(indicator)\n    )\n    \n    # Verify structure\n    assert \"indicator\" in responsive_indicator.attrs['class']\n    \n    # Verify indicator item with responsive classes\n    indicator_span = responsive_indicator.children[0]\n    assert indicator_span.tag == \"span\"\n    assert \"indicator-item\" in indicator_span.attrs['class']\n    assert \"indicator-start\" in indicator_span.attrs['class']\n    assert \"sm:indicator-middle\" in indicator_span.attrs['class']\n    assert \"md:indicator-bottom\" in indicator_span.attrs['class']\n    assert \"lg:indicator-center\" in indicator_span.attrs['class']\n    assert \"xl:indicator-end\" in indicator_span.attrs['class']\n    assert \"badge\" in indicator_span.attrs['class']\n    assert \"badge-secondary\" in indicator_span.attrs['class']\n    \n    # Verify content box\n    content_box = responsive_indicator.children[1]\n    assert content_box.tag == \"div\"\n    assert \"bg-base-300\" in content_box.attrs['class']\n    assert \"grid\" in content_box.attrs['class']\n    assert \"h-32\" in content_box.attrs['class']\n    assert \"w-32\" in content_box.attrs['class']\n    assert \"place-items-center\" in content_box.attrs['class']\n    assert content_box.children[0] == \"content\"\n    \n    return Div(responsive_indicator)\n\n# Run the tests\ntest_indicator_responsive_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item indicator-start sm:indicator-middle md:indicator-bottom lg:indicator-center xl:indicator-end badge badge-secondary\"&gt;&lt;/span&gt;    &lt;div class=\"bg-base-300 grid h-32 w-32 place-items-center\"&gt;content&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_indicator_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "indicator"
    ]
  },
  {
    "objectID": "components/layout/stack.html",
    "href": "components/layout/stack.html",
    "title": "stack",
    "section": "",
    "text": "Base Stack\n\n\nExported source\nstack = SingleValueFactory(\"stack\", \"Base stack component that puts the children elements on top of each other\") # Base stack component\n\n\n\n\nStack Modifiers\n\nsource\n\n\nStackModifier\n\n StackModifier (value, names=None, module=None, qualname=None, type=None,\n                start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass StackModifier(str, Enum):\n    TOP = \"top\"\n    BOTTOM = \"bottom\"\n    START = \"start\"\n    END = \"end\"\n\nstack_modifiers = enums_to_simple_factory(stack, [StackModifier]) # stack modifiers\n\n\n\n\nStack Test Examples\n\nsource\n\n\ntest_stack_basic_examples\n\n test_stack_basic_examples ()\n\nTest basic stack utilities.\n\n\nExported source\ndef test_stack_basic_examples():\n    \"\"\"Test basic stack utilities.\"\"\"\n    # Basic stack\n    assert str(stack) == \"stack\"\n    \n    # Test with modifiers\n    assert str(stack.hover) == \"hover:stack\"\n    assert str(stack.md) == \"md:stack\"\n    assert str(stack.dark) == \"dark:stack\"\n\n# Run the tests\ntest_stack_basic_examples()\n\n\n\nsource\n\n\ntest_stack_modifiers_examples\n\n test_stack_modifiers_examples ()\n\nTest stack modifier utilities.\n\n\nExported source\ndef test_stack_modifiers_examples():\n    \"\"\"Test stack modifier utilities.\"\"\"\n    assert str(stack_modifiers.top) == \"stack-top\"\n    assert str(stack_modifiers.bottom) == \"stack-bottom\"\n    assert str(stack_modifiers.start) == \"stack-start\"\n    assert str(stack_modifiers.end) == \"stack-end\"\n\n# Run the tests\ntest_stack_modifiers_examples()\n\n\n\nsource\n\n\ntest_stack_basic_divs_fasthtml_examples\n\n test_stack_basic_divs_fasthtml_examples ()\n\nTest basic stack with 3 divs from daisyUI v5 documentation.\n\n\nExported source\ndef test_stack_basic_divs_fasthtml_examples():\n    \"\"\"Test basic stack with 3 divs from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    \n    # 3 divs in a stack\n    stack_divs = Div(\n        Div(\"1\", cls=combine_classes(bg_dui.primary, text_dui.primary_content, grid_display, place_content.center, border_radius.box)),\n        Div(\"2\", cls=combine_classes(bg_dui.accent, text_dui.accent_content, grid_display, place_content.center, border_radius.box)),\n        Div(\"3\", cls=combine_classes(bg_dui.secondary, text_dui.secondary_content, grid_display, place_content.center, border_radius.box)),\n        cls=combine_classes(stack, h._20, w._32)\n    )\n    \n    # Verify structure\n    assert stack_divs.tag == \"div\"\n    assert \"stack\" in stack_divs.attrs['class']\n    assert \"h-20\" in stack_divs.attrs['class']\n    assert \"w-32\" in stack_divs.attrs['class']\n    \n    # Verify all three divs\n    assert len(stack_divs.children) == 3\n    \n    # First div\n    first_div = stack_divs.children[0]\n    assert first_div.tag == \"div\"\n    assert \"bg-primary\" in first_div.attrs['class']\n    assert \"text-primary-content\" in first_div.attrs['class']\n    assert \"grid\" in first_div.attrs['class']\n    assert \"place-content-center\" in first_div.attrs['class']\n    assert \"rounded-box\" in first_div.attrs['class']\n    assert first_div.children[0] == \"1\"\n    \n    # Second div\n    second_div = stack_divs.children[1]\n    assert \"bg-accent\" in second_div.attrs['class']\n    assert \"text-accent-content\" in second_div.attrs['class']\n    assert second_div.children[0] == \"2\"\n    \n    # Third div\n    third_div = stack_divs.children[2]\n    assert \"bg-secondary\" in third_div.attrs['class']\n    assert \"text-secondary-content\" in third_div.attrs['class']\n    assert third_div.children[0] == \"3\"\n    \n    return stack_divs\n\n# Run the tests\ntest_stack_basic_divs_fasthtml_examples()\n\n\n&lt;div class=\"stack h-20 w-32\"&gt;\n  &lt;div class=\"bg-primary text-primary-content grid place-content-center rounded-box\"&gt;1&lt;/div&gt;\n  &lt;div class=\"bg-accent text-accent-content grid place-content-center rounded-box\"&gt;2&lt;/div&gt;\n  &lt;div class=\"bg-secondary text-secondary-content grid place-content-center rounded-box\"&gt;3&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stack_basic_divs_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stack_images_fasthtml_examples\n\n test_stack_images_fasthtml_examples ()\n\nTest stacked images from daisyUI v5 documentation.\n\n\nExported source\ndef test_stack_images_fasthtml_examples():\n    \"\"\"Test stacked images from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    \n    # Stacked images\n    stack_images = Div(\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\", cls=str(border_radius.box)),\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\", cls=str(border_radius.box)),\n        Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", cls=str(border_radius.box)),\n        cls=combine_classes(stack, w._48)\n    )\n    \n    # Verify structure\n    assert stack_images.tag == \"div\"\n    assert \"stack\" in stack_images.attrs['class']\n    assert \"w-48\" in stack_images.attrs['class']\n    \n    # Verify all three images\n    assert len(stack_images.children) == 3\n    \n    # First image\n    first_img = stack_images.children[0]\n    assert first_img.tag == \"img\"\n    assert first_img.attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\"\n    assert first_img.attrs['class'] == \"rounded-box\"\n    \n    # Second image\n    second_img = stack_images.children[1]\n    assert second_img.tag == \"img\"\n    assert second_img.attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\"\n    assert second_img.attrs['class'] == \"rounded-box\"\n    \n    # Third image\n    third_img = stack_images.children[2]\n    assert third_img.tag == \"img\"\n    assert third_img.attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\"\n    assert third_img.attrs['class'] == \"rounded-box\"\n    \n    return stack_images\n\n# Run the tests\ntest_stack_images_fasthtml_examples()\n\n\n&lt;div class=\"stack w-48\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\" class=\"rounded-box\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\" class=\"rounded-box\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" class=\"rounded-box\"&gt;&lt;/div&gt;\n\n\n\ntest_func = test_stack_images_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stack_cards_fasthtml_examples\n\n test_stack_cards_fasthtml_examples ()\n\nTest stacked cards from daisyUI v5 documentation.\n\n\nExported source\ndef test_stack_cards_fasthtml_examples():\n    \"\"\"Test stacked cards from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import text_align\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body\n    \n    # Stacked cards\n    stack_cards = Div(\n        Div(\n            Div(\"A\", cls=str(card_body)),\n            cls=combine_classes(border_dui.base_content, card, bg_dui.base_100, border(), text_align.center)\n        ),\n        Div(\n            Div(\"B\", cls=str(card_body)),\n            cls=combine_classes(border_dui.base_content, card, bg_dui.base_100, border(), text_align.center)\n        ),\n        Div(\n            Div(\"C\", cls=str(card_body)),\n            cls=combine_classes(border_dui.base_content, card, bg_dui.base_100, border(), text_align.center)\n        ),\n        cls=combine_classes(stack, size_util._28)\n    )\n    \n    # Verify structure\n    assert stack_cards.tag == \"div\"\n    assert \"stack\" in stack_cards.attrs['class']\n    assert \"size-28\" in stack_cards.attrs['class']\n    \n    # Verify all three cards\n    assert len(stack_cards.children) == 3\n    \n    for i, letter in enumerate([\"A\", \"B\", \"C\"]):\n        card_div = stack_cards.children[i]\n        assert card_div.tag == \"div\"\n        assert \"border-base-content\" in card_div.attrs['class']\n        assert \"card\" in card_div.attrs['class']\n        assert \"bg-base-100\" in card_div.attrs['class']\n        assert \"border\" in card_div.attrs['class']\n        assert \"text-center\" in card_div.attrs['class']\n        \n        # Verify card body\n        card_body_div = card_div.children[0]\n        assert card_body_div.tag == \"div\"\n        assert card_body_div.attrs['class'] == \"card-body\"\n        assert card_body_div.children[0] == letter\n    \n    return stack_cards\n\n# Run the tests\ntest_stack_cards_fasthtml_examples()\n\n\n&lt;div class=\"stack size-28\"&gt;\n  &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n    &lt;div class=\"card-body\"&gt;A&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n    &lt;div class=\"card-body\"&gt;B&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n    &lt;div class=\"card-body\"&gt;C&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stack_cards_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stack_cards_directions_fasthtml_examples\n\n test_stack_cards_directions_fasthtml_examples ()\n\nTest stacked cards with different directions from daisyUI v5 documentation.\n\n\nExported source\ndef test_stack_cards_directions_fasthtml_examples():\n    \"\"\"Test stacked cards with different directions from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import text_align\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body\n    \n    # Helper function to create a card\n    def create_card(letter):\n        return Div(\n            Div(letter, cls=str(card_body)),\n            cls=combine_classes(border_dui.base_content, card, bg_dui.base_100, border(), text_align.center)\n        )\n    \n    # Stacked cards - top direction\n    stack_top = Div(\n        create_card(\"A\"),\n        create_card(\"B\"),\n        create_card(\"C\"),\n        cls=combine_classes(stack, stack_modifiers.top, size_util._28)\n    )\n    \n    # Verify top stack\n    assert \"stack\" in stack_top.attrs['class']\n    assert \"stack-top\" in stack_top.attrs['class']\n    assert \"size-28\" in stack_top.attrs['class']\n    assert len(stack_top.children) == 3\n    \n    # Stacked cards - start direction\n    stack_start = Div(\n        create_card(\"A\"),\n        create_card(\"B\"),\n        create_card(\"C\"),\n        cls=combine_classes(stack, stack_modifiers.start, size_util._28)\n    )\n    \n    # Verify start stack\n    assert \"stack\" in stack_start.attrs['class']\n    assert \"stack-start\" in stack_start.attrs['class']\n    assert \"size-28\" in stack_start.attrs['class']\n    assert len(stack_start.children) == 3\n    \n    # Stacked cards - end direction\n    stack_end = Div(\n        create_card(\"A\"),\n        create_card(\"B\"),\n        create_card(\"C\"),\n        cls=combine_classes(stack, stack_modifiers.end, size_util._28)\n    )\n    \n    # Verify end stack\n    assert \"stack\" in stack_end.attrs['class']\n    assert \"stack-end\" in stack_end.attrs['class']\n    assert \"size-28\" in stack_end.attrs['class']\n    assert len(stack_end.children) == 3\n    \n    # Verify all cards in each stack\n    for stack_element in [stack_top, stack_start, stack_end]:\n        for i, letter in enumerate([\"A\", \"B\", \"C\"]):\n            card_div = stack_element.children[i]\n            assert card_div.tag == \"div\"\n            assert \"card\" in card_div.attrs['class']\n            assert card_div.children[0].children[0] == letter\n    \n    return Div(stack_top, stack_start, stack_end)\n\n# Run the tests\ntest_stack_cards_directions_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"stack stack-top size-28\"&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;A&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;B&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;C&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"stack stack-start size-28\"&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;A&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;B&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;C&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"stack stack-end size-28\"&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;A&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;B&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"border-base-content card bg-base-100 border text-center\"&gt;\n      &lt;div class=\"card-body\"&gt;C&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stack_cards_directions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stack_cards_shadow_fasthtml_examples\n\n test_stack_cards_shadow_fasthtml_examples ()\n\nTest stacked cards with shadow from daisyUI v5 documentation.\n\n\nExported source\ndef test_stack_cards_shadow_fasthtml_examples():\n    \"\"\"Test stacked cards with shadow from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.typography import text_align\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body\n    \n    # Stacked cards with shadow\n    stack_shadow = Div(\n        Div(\n            Div(\"A\", cls=str(card_body)),\n            cls=combine_classes(card, bg_dui.base_200, text_align.center, shadow.md)\n        ),\n        Div(\n            Div(\"B\", cls=str(card_body)),\n            cls=combine_classes(card, bg_dui.base_200, text_align.center, shadow())\n        ),\n        Div(\n            Div(\"C\", cls=str(card_body)),\n            cls=combine_classes(card, bg_dui.base_200, text_align.center, shadow.sm)\n        ),\n        cls=str(stack)\n    )\n    \n    # Verify structure\n    assert stack_shadow.tag == \"div\"\n    assert stack_shadow.attrs['class'] == \"stack\"\n    assert len(stack_shadow.children) == 3\n    \n    # First card with shadow-md\n    first_card = stack_shadow.children[0]\n    assert first_card.tag == \"div\"\n    assert \"card\" in first_card.attrs['class']\n    assert \"bg-base-200\" in first_card.attrs['class']\n    assert \"text-center\" in first_card.attrs['class']\n    assert \"shadow-md\" in first_card.attrs['class']\n    assert first_card.children[0].attrs['class'] == \"card-body\"\n    assert first_card.children[0].children[0] == \"A\"\n    \n    # Second card with shadow\n    second_card = stack_shadow.children[1]\n    assert \"card\" in second_card.attrs['class']\n    assert \"bg-base-200\" in second_card.attrs['class']\n    assert \"text-center\" in second_card.attrs['class']\n    assert \"shadow\" in second_card.attrs['class']\n    assert second_card.children[0].children[0] == \"B\"\n    \n    # Third card with shadow-sm\n    third_card = stack_shadow.children[2]\n    assert \"card\" in third_card.attrs['class']\n    assert \"bg-base-200\" in third_card.attrs['class']\n    assert \"text-center\" in third_card.attrs['class']\n    assert \"shadow-sm\" in third_card.attrs['class']\n    assert third_card.children[0].children[0] == \"C\"\n    \n    return stack_shadow\n\n# Run the tests\ntest_stack_cards_shadow_fasthtml_examples()\n\n\n&lt;div class=\"stack\"&gt;\n  &lt;div class=\"card bg-base-200 text-center shadow-md\"&gt;\n    &lt;div class=\"card-body\"&gt;A&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-base-200 text-center shadow\"&gt;\n    &lt;div class=\"card-body\"&gt;B&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-base-200 text-center shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;C&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stack_cards_shadow_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stack_notification_cards_fasthtml_examples\n\n test_stack_notification_cards_fasthtml_examples ()\n\nTest stacked notification cards from daisyUI v5 documentation.\n\n\nExported source\ndef test_stack_notification_cards_fasthtml_examples():\n    \"\"\"Test stacked notification cards from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H2, P\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body, card_title\n    \n    # Stacked notification cards\n    stack_notifications = Div(\n        Div(\n            Div(\n                H2(\"Notification 1\", cls=str(card_title)),\n                P(\"You have 3 unread messages. Tap here to see.\"),\n                cls=str(card_body)\n            ),\n            cls=combine_classes(card, shadow.md, bg_dui.base_100)\n        ),\n        Div(\n            Div(\n                H2(\"Notification 2\", cls=str(card_title)),\n                P(\"You have 3 unread messages. Tap here to see.\"),\n                cls=str(card_body)\n            ),\n            cls=combine_classes(card, shadow.md, bg_dui.base_100)\n        ),\n        Div(\n            Div(\n                H2(\"Notification 3\", cls=str(card_title)),\n                P(\"You have 3 unread messages. Tap here to see.\"),\n                cls=str(card_body)\n            ),\n            cls=combine_classes(card, shadow.md, bg_dui.base_100)\n        ),\n        cls=str(stack)\n    )\n    \n    # Verify structure\n    assert stack_notifications.tag == \"div\"\n    assert stack_notifications.attrs['class'] == \"stack\"\n    assert len(stack_notifications.children) == 3\n    \n    # Verify each notification card\n    for i in range(1, 4):\n        card_div = stack_notifications.children[i-1]\n        assert card_div.tag == \"div\"\n        assert \"card\" in card_div.attrs['class']\n        assert \"shadow-md\" in card_div.attrs['class']\n        assert \"bg-base-100\" in card_div.attrs['class']\n        \n        # Verify card body\n        card_body_div = card_div.children[0]\n        assert card_body_div.tag == \"div\"\n        assert card_body_div.attrs['class'] == \"card-body\"\n        \n        # Verify title\n        title = card_body_div.children[0]\n        assert title.tag == \"h2\"\n        assert title.attrs['class'] == \"card-title\"\n        assert title.children[0] == f\"Notification {i}\"\n        \n        # Verify paragraph\n        paragraph = card_body_div.children[1]\n        assert paragraph.tag == \"p\"\n        assert paragraph.children[0] == \"You have 3 unread messages. Tap here to see.\"\n    \n    return stack_notifications\n\n# Run the tests\ntest_stack_notification_cards_fasthtml_examples()\n\n\n&lt;div class=\"stack\"&gt;\n  &lt;div class=\"card shadow-md bg-base-100\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Notification 1&lt;/h2&gt;\n      &lt;p&gt;You have 3 unread messages. Tap here to see.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card shadow-md bg-base-100\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Notification 2&lt;/h2&gt;\n      &lt;p&gt;You have 3 unread messages. Tap here to see.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card shadow-md bg-base-100\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Notification 3&lt;/h2&gt;\n      &lt;p&gt;You have 3 unread messages. Tap here to see.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stack_notification_cards_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "stack"
    ]
  },
  {
    "objectID": "components/layout/join.html",
    "href": "components/layout/join.html",
    "title": "join",
    "section": "",
    "text": "Base Join\n\n\nExported source\njoin = SingleValueFactory(\"join\", \"Base join component for grouping multiple items\") # Base join component\njoin_item = SingleValueFactory(\"join-item\", \"Item inside join. Can be a button, input, etc.\") # Join item component\n\n\n\n\nJoin Direction\n\nsource\n\n\nJoinDirection\n\n JoinDirection (value, names=None, module=None, qualname=None, type=None,\n                start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass JoinDirection(str, Enum):\n    VERTICAL = \"vertical\"\n    HORIZONTAL = \"horizontal\"\n\njoin_directions = enums_to_simple_factory(join, [JoinDirection], \"join directions (vertical, horizontal)\") # join directions\n\n\n\n\nJoin Test Examples\n\nsource\n\n\ntest_join_basic_examples\n\n test_join_basic_examples ()\n\nTest basic join utilities.\n\n\nExported source\ndef test_join_basic_examples():\n    \"\"\"Test basic join utilities.\"\"\"\n    # Basic join\n    assert str(join) == \"join\"\n    assert str(join_item) == \"join-item\"\n    \n    # Test with modifiers\n    assert str(join.hover) == \"hover:join\"\n    assert str(join.md) == \"md:join\"\n    assert str(join.dark) == \"dark:join\"\n\n    assert str(join_item.hover) == \"hover:join-item\"\n    assert str(join_item.md) == \"md:join-item\"\n    assert str(join_item.dark) == \"dark:join-item\"\n\n# Run the tests\ntest_join_basic_examples()\n\n\n\nsource\n\n\ntest_join_directions_examples\n\n test_join_directions_examples ()\n\nTest join directions variants.\n\n\nExported source\ndef test_join_directions_examples():\n    \"\"\"Test join directions variants.\"\"\"\n    assert str(join_directions.vertical) == \"join-vertical\"\n    assert str(join_directions.horizontal) == \"join-horizontal\"\n\n# Run the tests\ntest_join_directions_examples()\n\n\n\nsource\n\n\ntest_join_basic_fasthtml_examples\n\n test_join_basic_fasthtml_examples ()\n\nTest basic join example from daisyUI v5 documentation.\n\n\nExported source\ndef test_join_basic_fasthtml_examples():\n    \"\"\"Test basic join example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Basic join with buttons\n    basic_join = Div(\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert basic_join.tag == \"div\"\n    assert basic_join.attrs['class'] == \"join\"\n    \n    # Verify all buttons\n    assert len(basic_join.children) == 3\n    for i, button in enumerate(basic_join.children):\n        assert button.tag == \"button\"\n        assert \"btn\" in button.attrs['class']\n        assert \"join-item\" in button.attrs['class']\n        assert button.children[0] == \"Button\"\n    \n    return basic_join\n\n# Run the tests\ntest_join_basic_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_join_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_join_vertical_fasthtml_examples\n\n test_join_vertical_fasthtml_examples ()\n\nTest vertical join example from daisyUI v5 documentation.\n\n\nExported source\ndef test_join_vertical_fasthtml_examples():\n    \"\"\"Test vertical join example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Vertical join with buttons\n    vertical_join = Div(\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        cls=combine_classes(join, join_directions.vertical)\n    )\n    \n    # Verify structure\n    assert vertical_join.tag == \"div\"\n    assert \"join\" in vertical_join.attrs['class']\n    assert \"join-vertical\" in vertical_join.attrs['class']\n    \n    # Verify all buttons\n    assert len(vertical_join.children) == 3\n    for button in vertical_join.children:\n        assert button.tag == \"button\"\n        assert \"btn\" in button.attrs['class']\n        assert \"join-item\" in button.attrs['class']\n        assert button.children[0] == \"Button\"\n    \n    return vertical_join\n\n# Run the tests\ntest_join_vertical_fasthtml_examples()\n\n\n&lt;div class=\"join join-vertical\"&gt;\n&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_join_vertical_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_join_responsive_fasthtml_examples\n\n test_join_responsive_fasthtml_examples ()\n\nTest responsive join example from daisyUI v5 documentation.\n\n\nExported source\ndef test_join_responsive_fasthtml_examples():\n    \"\"\"Test responsive join example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Responsive join - vertical on small screen, horizontal on large screen\n    responsive_join = Div(\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        cls=combine_classes(join, join_directions.vertical, join_directions.horizontal.lg)\n    )\n    \n    # Verify structure\n    assert responsive_join.tag == \"div\"\n    assert \"join\" in responsive_join.attrs['class']\n    assert \"join-vertical\" in responsive_join.attrs['class']\n    assert \"lg:join-horizontal\" in responsive_join.attrs['class']\n    \n    # Verify all buttons\n    assert len(responsive_join.children) == 3\n    for button in responsive_join.children:\n        assert button.tag == \"button\"\n        assert \"btn\" in button.attrs['class']\n        assert \"join-item\" in button.attrs['class']\n        assert button.children[0] == \"Button\"\n    \n    return responsive_join\n\n# Run the tests\ntest_join_responsive_fasthtml_examples()\n\n\n&lt;div class=\"join join-vertical lg:join-horizontal\"&gt;\n&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;button class=\"btn join-item\"&gt;Button&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_join_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_join_with_extra_elements_fasthtml_examples\n\n test_join_with_extra_elements_fasthtml_examples ()\n\nTest join with extra elements from daisyUI v5 documentation.\n\n\nExported source\ndef test_join_with_extra_elements_fasthtml_examples():\n    \"\"\"Test join with extra elements from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div, Input, Select, Option, Span\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    from cjm_fasthtml_daisyui.components.data_input.select import select\n    from cjm_fasthtml_daisyui.components.layout.indicator import indicator, indicator_item\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors\n    \n    # Join with extra elements\n    join_extra = Div(\n        Div(\n            Div(\n                Input(placeholder=\"Search\", cls=combine_classes(text_input, join_item))\n            )\n        ),\n        Select(\n            Option(\"Filter\", disabled=True, selected=True),\n            Option(\"Sci-fi\"),\n            Option(\"Drama\"),\n            Option(\"Action\"),\n            cls=combine_classes(select, join_item)\n        ),\n        Div(\n            Span(\"new\", cls=combine_classes(indicator_item, badge, badge_colors.secondary)),\n            Button(\"Search\", cls=combine_classes(btn, join_item)),\n            cls=str(indicator)\n        ),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert join_extra.tag == \"div\"\n    assert join_extra.attrs['class'] == \"join\"\n    assert len(join_extra.children) == 3\n    \n    # Verify first element (nested divs with input)\n    first_element = join_extra.children[0]\n    assert first_element.tag == \"div\"\n    assert first_element.children[0].tag == \"div\"\n    input_element = first_element.children[0].children[0]\n    assert input_element.tag == \"input\"\n    assert \"input\" in input_element.attrs['class']\n    assert \"join-item\" in input_element.attrs['class']\n    assert input_element.attrs['placeholder'] == \"Search\"\n    \n    # Verify select element\n    select_element = join_extra.children[1]\n    assert select_element.tag == \"select\"\n    assert \"select\" in select_element.attrs['class']\n    assert \"join-item\" in select_element.attrs['class']\n    assert len(select_element.children) == 4\n    assert select_element.children[0].tag == \"option\"\n    assert select_element.children[0].attrs['disabled'] == True\n    assert select_element.children[0].attrs['selected'] == True\n    assert select_element.children[0].children[0] == \"Filter\"\n    \n    # Verify indicator with badge and button\n    indicator_element = join_extra.children[2]\n    assert indicator_element.tag == \"div\"\n    assert indicator_element.attrs['class'] == \"indicator\"\n    assert len(indicator_element.children) == 2\n    \n    # Verify badge\n    badge_span = indicator_element.children[0]\n    assert badge_span.tag == \"span\"\n    assert \"indicator-item\" in badge_span.attrs['class']\n    assert \"badge\" in badge_span.attrs['class']\n    assert \"badge-secondary\" in badge_span.attrs['class']\n    assert badge_span.children[0] == \"new\"\n    \n    # Verify button\n    search_button = indicator_element.children[1]\n    assert search_button.tag == \"button\"\n    assert \"btn\" in search_button.attrs['class']\n    assert \"join-item\" in search_button.attrs['class']\n    assert search_button.children[0] == \"Search\"\n    \n    return join_extra\n\n# Run the tests\ntest_join_with_extra_elements_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n  &lt;div&gt;\n    &lt;div&gt;\n      &lt;input placeholder=\"Search\" class=\"input join-item\"&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;select class=\"select join-item\"&gt;&lt;option disabled selected&gt;Filter&lt;/option&gt;&lt;option&gt;Sci-fi&lt;/option&gt;&lt;option&gt;Drama&lt;/option&gt;&lt;option&gt;Action&lt;/option&gt;&lt;/select&gt;  &lt;div class=\"indicator\"&gt;\n&lt;span class=\"indicator-item badge badge-secondary\"&gt;new&lt;/span&gt;&lt;button class=\"btn join-item\"&gt;Search&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_join_with_extra_elements_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_join_custom_border_fasthtml_examples\n\n test_join_custom_border_fasthtml_examples ()\n\nTest join with custom border radius from daisyUI v5 documentation.\n\n\nExported source\ndef test_join_custom_border_fasthtml_examples():\n    \"\"\"Test join with custom border radius from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div, Input\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Join with custom border radius\n    custom_border_join = Div(\n        Input(placeholder=\"Email\", cls=combine_classes(text_input, join_item)),\n        Button(\"Subscribe\", cls=combine_classes(btn, join_item, rounded.r_full)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert custom_border_join.tag == \"div\"\n    assert custom_border_join.attrs['class'] == \"join\"\n    assert len(custom_border_join.children) == 2\n    \n    # Verify input element\n    input_element = custom_border_join.children[0]\n    assert input_element.tag == \"input\"\n    assert \"input\" in input_element.attrs['class']\n    assert \"join-item\" in input_element.attrs['class']\n    assert input_element.attrs['placeholder'] == \"Email\"\n    \n    # Verify button with custom border radius\n    button_element = custom_border_join.children[1]\n    assert button_element.tag == \"button\"\n    assert \"btn\" in button_element.attrs['class']\n    assert \"join-item\" in button_element.attrs['class']\n    assert \"rounded-r-full\" in button_element.attrs['class']\n    assert button_element.children[0] == \"Subscribe\"\n    \n    return custom_border_join\n\n# Run the tests\ntest_join_custom_border_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n  &lt;input placeholder=\"Email\" class=\"input join-item\"&gt;\n&lt;button class=\"btn join-item rounded-r-full\"&gt;Subscribe&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_join_custom_border_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_join_radio_inputs_fasthtml_examples\n\n test_join_radio_inputs_fasthtml_examples ()\n\nTest join with radio inputs styled as buttons from daisyUI v5 documentation.\n\n\nExported source\ndef test_join_radio_inputs_fasthtml_examples():\n    \"\"\"Test join with radio inputs styled as buttons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Join with radio inputs styled as buttons\n    radio_join = Div(\n        Input(type=\"radio\", name=\"options\", aria_label=\"Radio 1\", cls=combine_classes(join_item, btn)),\n        Input(type=\"radio\", name=\"options\", aria_label=\"Radio 2\", cls=combine_classes(join_item, btn)),\n        Input(type=\"radio\", name=\"options\", aria_label=\"Radio 3\", cls=combine_classes(join_item, btn)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert radio_join.tag == \"div\"\n    assert radio_join.attrs['class'] == \"join\"\n    assert len(radio_join.children) == 3\n    \n    # Verify all radio inputs\n    for i, radio in enumerate(radio_join.children, 1):\n        assert radio.tag == \"input\"\n        assert radio.attrs['type'] == \"radio\"\n        assert radio.attrs['name'] == \"options\"\n        assert radio.attrs['aria-label'] == f\"Radio {i}\"\n        assert \"join-item\" in radio.attrs['class']\n        assert \"btn\" in radio.attrs['class']\n    \n    return radio_join\n\n# Run the tests\ntest_join_radio_inputs_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n  &lt;input type=\"radio\" name=\"options\" aria-label=\"Radio 1\" class=\"join-item btn\"&gt;\n  &lt;input type=\"radio\" name=\"options\" aria-label=\"Radio 2\" class=\"join-item btn\"&gt;\n  &lt;input type=\"radio\" name=\"options\" aria-label=\"Radio 3\" class=\"join-item btn\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_join_radio_inputs_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "join"
    ]
  },
  {
    "objectID": "components/navigation/breadcrumbs.html",
    "href": "components/navigation/breadcrumbs.html",
    "title": "breadcrumbs",
    "section": "",
    "text": "Breadcrumbs component\n\n\nExported source\nbreadcrumbs = SingleValueFactory(\"breadcrumbs\", \"Breadcrumbs component for helping users navigate.\") # Breadcrumbs component\n\n\n\n\nBreadcrumbs Test Examples\n\nsource\n\n\ntest_breadcrumbs_basic_examples\n\n test_breadcrumbs_basic_examples ()\n\nTest breadcrumbs utility.\n\n\nExported source\ndef test_breadcrumbs_basic_examples():\n    \"\"\"Test breadcrumbs utility.\"\"\"\n    # Breadcrumb\n    assert str(breadcrumbs) == \"breadcrumbs\"\n\n    # Breadcrumbs with modifiers\n    assert str(breadcrumbs.hover) == \"hover:breadcrumbs\"\n    assert str(breadcrumbs.md) == \"md:breadcrumbs\"\n    assert str(breadcrumbs.dark) == \"dark:breadcrumbs\"\n\n# Run the tests\ntest_breadcrumbs_basic_examples()\n\n\n\nsource\n\n\ntest_breadcrumbs_basic_fasthtml_examples\n\n test_breadcrumbs_basic_fasthtml_examples ()\n\nTest basic breadcrumbs example from daisyUI v5 documentation.\n\n\nExported source\ndef test_breadcrumbs_basic_fasthtml_examples():\n    \"\"\"Test basic breadcrumbs example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Ul, Li, A\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Basic breadcrumbs\n    basic_breadcrumbs = Div(\n        Ul(\n            Li(A(\"Home\", href=\"#\")),\n            Li(A(\"Documents\", href=\"#\")),\n            Li(\"Add Document\")\n        ),\n        cls=combine_classes(breadcrumbs, font_size.sm)\n    )\n    \n    # Verify structure\n    assert basic_breadcrumbs.tag == \"div\"\n    assert \"breadcrumbs\" in basic_breadcrumbs.attrs['class']\n    assert \"text-sm\" in basic_breadcrumbs.attrs['class']\n    \n    # Verify ul element\n    ul_element = basic_breadcrumbs.children[0]\n    assert ul_element.tag == \"ul\"\n    \n    # Verify li elements\n    assert len(ul_element.children) == 3\n    \n    # First li with link\n    first_li = ul_element.children[0]\n    assert first_li.tag == \"li\"\n    assert first_li.children[0].tag == \"a\"\n    assert first_li.children[0].attrs['href'] == \"#\"\n    assert first_li.children[0].children[0] == \"Home\"\n    \n    # Second li with link\n    second_li = ul_element.children[1]\n    assert second_li.tag == \"li\"\n    assert second_li.children[0].tag == \"a\"\n    assert second_li.children[0].attrs['href'] == \"#\"\n    assert second_li.children[0].children[0] == \"Documents\"\n    \n    # Third li without link (current page)\n    third_li = ul_element.children[2]\n    assert third_li.tag == \"li\"\n    assert third_li.children[0] == \"Add Document\"\n    \n    return basic_breadcrumbs\n\n# Run the tests\ntest_breadcrumbs_basic_fasthtml_examples()\n\n\n&lt;div class=\"breadcrumbs text-sm\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Home&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Documents&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;Add Document&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\nsource\n\n\ntest_breadcrumbs_with_icons_fasthtml_examples\n\n test_breadcrumbs_with_icons_fasthtml_examples ()\n\nTest breadcrumbs with icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_breadcrumbs_with_icons_fasthtml_examples():\n    \"\"\"Test breadcrumbs with icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Ul, Li, A, Span\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import items, gap, flex_display\n    \n    # Create reusable folder icon SVG\n    folder_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(h._4, w._4, stroke.current)\n    )\n    \n    # Create add document icon SVG\n    add_doc_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(h._4, w._4, stroke.current)\n    )\n    \n    # Breadcrumbs with icons\n    breadcrumbs_with_icons = Div(\n        Ul(\n            Li(\n                A(\n                    folder_icon,\n                    \"Home\",\n                    href=\"#\"\n                )\n            ),\n            Li(\n                A(\n                    folder_icon,\n                    \"Documents\",\n                    href=\"#\"\n                )\n            ),\n            Li(\n                Span(\n                    add_doc_icon,\n                    \"Add Document\",\n                    cls=combine_classes(flex_display.inline, items.center, gap._2)\n                )\n            )\n        ),\n        cls=combine_classes(breadcrumbs, font_size.sm)\n    )\n    \n    # Verify structure\n    assert breadcrumbs_with_icons.tag == \"div\"\n    assert \"breadcrumbs\" in breadcrumbs_with_icons.attrs['class']\n    assert \"text-sm\" in breadcrumbs_with_icons.attrs['class']\n    \n    # Verify ul element\n    ul_element = breadcrumbs_with_icons.children[0]\n    assert ul_element.tag == \"ul\"\n    assert len(ul_element.children) == 3\n    \n    # First li with icon and link\n    first_li = ul_element.children[0]\n    assert first_li.tag == \"li\"\n    assert first_li.children[0].tag == \"a\"\n    assert first_li.children[0].attrs['href'] == \"#\"\n    assert first_li.children[0].children[0].tag == \"svg\"  # Icon\n    assert first_li.children[0].children[1] == \"Home\"  # Text\n    \n    # Second li with icon and link\n    second_li = ul_element.children[1]\n    assert second_li.tag == \"li\"\n    assert second_li.children[0].tag == \"a\"\n    assert second_li.children[0].attrs['href'] == \"#\"\n    assert second_li.children[0].children[0].tag == \"svg\"  # Icon\n    assert second_li.children[0].children[1] == \"Documents\"  # Text\n    \n    # Third li with icon but no link (current page)\n    third_li = ul_element.children[2]\n    assert third_li.tag == \"li\"\n    assert third_li.children[0].tag == \"span\"\n    assert \"inline-flex\" in third_li.children[0].attrs['class']\n    assert \"items-center\" in third_li.children[0].attrs['class']\n    assert \"gap-2\" in third_li.children[0].attrs['class']\n    assert third_li.children[0].children[0].tag == \"svg\"  # Icon\n    assert third_li.children[0].children[1] == \"Add Document\"  # Text\n    \n    return breadcrumbs_with_icons\n\n# Run the tests\ntest_breadcrumbs_with_icons_fasthtml_examples()\n\n\n&lt;div class=\"breadcrumbs text-sm\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"h-4 w-4 stroke-current\"&gt;&lt;path d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Home&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"h-4 w-4 stroke-current\"&gt;&lt;path d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Documents&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;span class=\"inline-flex items-center gap-2\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"h-4 w-4 stroke-current\"&gt;&lt;path d=\"M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Add Document&lt;/span&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\nsource\n\n\ntest_breadcrumbs_with_max_width_fasthtml_examples\n\n test_breadcrumbs_with_max_width_fasthtml_examples ()\n\nTest breadcrumbs with max-width from daisyUI v5 documentation.\n\n\nExported source\ndef test_breadcrumbs_with_max_width_fasthtml_examples():\n    \"\"\"Test breadcrumbs with max-width from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Ul, Li\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.sizing import max_w\n    \n    # Breadcrumbs with max-width\n    max_width_breadcrumbs = Div(\n        Ul(\n            Li(\"Long text 1\"),\n            Li(\"Long text 2\"),\n            Li(\"Long text 3\"),\n            Li(\"Long text 4\"),\n            Li(\"Long text 5\")\n        ),\n        cls=combine_classes(breadcrumbs, max_w.xs, font_size.sm)\n    )\n    \n    # Verify structure\n    assert max_width_breadcrumbs.tag == \"div\"\n    assert \"breadcrumbs\" in max_width_breadcrumbs.attrs['class']\n    assert \"max-w-xs\" in max_width_breadcrumbs.attrs['class']\n    assert \"text-sm\" in max_width_breadcrumbs.attrs['class']\n    \n    # Verify ul element\n    ul_element = max_width_breadcrumbs.children[0]\n    assert ul_element.tag == \"ul\"\n    assert len(ul_element.children) == 5\n    \n    # Verify all li elements\n    for i in range(5):\n        li = ul_element.children[i]\n        assert li.tag == \"li\"\n        assert li.children[0] == f\"Long text {i + 1}\"\n    \n    return max_width_breadcrumbs\n\n# Run the tests\ntest_breadcrumbs_with_max_width_fasthtml_examples()\n\n\n&lt;div class=\"breadcrumbs max-w-xs text-sm\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Long text 1&lt;/li&gt;\n    &lt;li&gt;Long text 2&lt;/li&gt;\n    &lt;li&gt;Long text 3&lt;/li&gt;\n    &lt;li&gt;Long text 4&lt;/li&gt;\n    &lt;li&gt;Long text 5&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_breadcrumbs_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\ntest_func = test_breadcrumbs_with_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\ntest_func = test_breadcrumbs_with_max_width_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "breadcrumbs"
    ]
  },
  {
    "objectID": "components/navigation/navbar.html",
    "href": "components/navigation/navbar.html",
    "title": "navbar",
    "section": "",
    "text": "Base Navbar\n\n\nExported source\nnavbar = SingleValueFactory(\"navbar\", \"Base navigation bar component\") # Base navbar component\nnavbar_start = SingleValueFactory(\"navbar-start\", \"Navbar start part for the div inside navbar, to fill 50% of width\") # Navbar start part\nnavbar_center = SingleValueFactory(\"navbar-center\", \"Navbar center part for the div inside navbar, to be at center horizontally\") # Navbar center part\nnavbar_end = SingleValueFactory(\"navbar-end\", \"Navbar part for the div inside navbar, to fill second 50% of width\") # Navbar end part\n\n\n\n\nNavbar Test Examples\n\nsource\n\n\ntest_navbar_basic_examples\n\n test_navbar_basic_examples ()\n\nTest basic navbar utilities.\n\n\nExported source\ndef test_navbar_basic_examples():\n    \"\"\"Test basic navbar utilities.\"\"\"\n    # Basic navbar\n    assert str(navbar) == \"navbar\"\n    assert str(navbar_start) == \"navbar-start\"\n    assert str(navbar_center) == \"navbar-center\"\n    assert str(navbar_end) == \"navbar-end\"\n    \n    # navbar with modifiers\n    assert str(navbar.hover) == \"hover:navbar\"\n    assert str(navbar.md) == \"md:navbar\"\n    assert str(navbar.dark) == \"dark:navbar\"\n\n# Run the tests\ntest_navbar_basic_examples()\n\n\n\nsource\n\n\ntest_navbar_title_only_fasthtml_examples\n\n test_navbar_title_only_fasthtml_examples ()\n\nTest navbar with title only from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_title_only_fasthtml_examples():\n    \"\"\"Test navbar with title only from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles\n    \n    # Navbar with title only\n    navbar_title_only = Div(\n        A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert navbar_title_only.tag == \"div\"\n    assert \"navbar\" in navbar_title_only.attrs['class']\n    assert \"bg-base-100\" in navbar_title_only.attrs['class']\n    assert \"shadow-sm\" in navbar_title_only.attrs['class']\n    \n    # Verify title link\n    title_link = navbar_title_only.children[0]\n    assert title_link.tag == \"a\"\n    assert \"btn\" in title_link.attrs['class']\n    assert \"btn-ghost\" in title_link.attrs['class']\n    assert \"text-xl\" in title_link.attrs['class']\n    assert title_link.children[0] == \"daisyUI\"\n    \n    return navbar_title_only\n\n# Run the tests\ntest_navbar_title_only_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;&lt;/div&gt;\n\n\n\ntest_func = test_navbar_title_only_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_with_title_and_icon_fasthtml_examples\n\n test_navbar_with_title_and_icon_fasthtml_examples ()\n\nTest navbar with title and icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_with_title_and_icon_fasthtml_examples():\n    \"\"\"Test navbar with title and icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A, Button\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_modifiers\n    \n    # Create menu dots icon\n    menu_dots_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h._5, w._5, stroke.current)\n    )\n    \n    # Navbar with title and icon\n    navbar_with_icon = Div(\n        Div(\n            A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n            cls=combine_classes(flex._1)\n        ),\n        Div(\n            Button(\n                menu_dots_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=combine_classes(flex.none)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert navbar_with_icon.tag == \"div\"\n    assert \"navbar\" in navbar_with_icon.attrs['class']\n    \n    # Verify flex-1 div with title\n    flex_1_div = navbar_with_icon.children[0]\n    assert flex_1_div.tag == \"div\"\n    assert \"flex-1\" in flex_1_div.attrs['class']\n    assert flex_1_div.children[0].tag == \"a\"\n    assert flex_1_div.children[0].children[0] == \"daisyUI\"\n    \n    # Verify flex-none div with button\n    flex_none_div = navbar_with_icon.children[1]\n    assert flex_none_div.tag == \"div\"\n    assert \"flex-none\" in flex_none_div.attrs['class']\n    button = flex_none_div.children[0]\n    assert button.tag == \"button\"\n    assert \"btn\" in button.attrs['class']\n    assert \"btn-square\" in button.attrs['class']\n    assert \"btn-ghost\" in button.attrs['class']\n    assert button.children[0].tag == \"svg\"\n    \n    return navbar_with_icon\n\n# Run the tests\ntest_navbar_with_title_and_icon_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n  &lt;div class=\"flex-1\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"flex-none\"&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-5 w-5 stroke-current\"&gt;&lt;path d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_with_title_and_icon_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_with_icons_fasthtml_examples\n\n test_navbar_with_icons_fasthtml_examples ()\n\nTest navbar with icon at start and end from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_with_icons_fasthtml_examples():\n    \"\"\"Test navbar with icon at start and end from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A, Button\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_modifiers\n    \n    # Create hamburger menu icon\n    hamburger_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M4 6h16M4 12h16M4 18h16\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h._5, w._5, stroke.current)\n    )\n    \n    # Create menu dots icon\n    menu_dots_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h._5, w._5, stroke.current)\n    )\n    \n    # Navbar with icon at start and end\n    navbar_with_icons = Div(\n        Div(\n            Button(\n                hamburger_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=combine_classes(flex.none)\n        ),\n        Div(\n            A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n            cls=combine_classes(flex._1)\n        ),\n        Div(\n            Button(\n                menu_dots_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=combine_classes(flex.none)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert navbar_with_icons.tag == \"div\"\n    assert \"navbar\" in navbar_with_icons.attrs['class']\n    assert len(navbar_with_icons.children) == 3\n    \n    # Verify start button\n    start_div = navbar_with_icons.children[0]\n    assert start_div.tag == \"div\"\n    assert \"flex-none\" in start_div.attrs['class']\n    start_button = start_div.children[0]\n    assert start_button.tag == \"button\"\n    assert \"btn-square\" in start_button.attrs['class']\n    assert start_button.children[0].tag == \"svg\"\n    \n    # Verify center title\n    center_div = navbar_with_icons.children[1]\n    assert center_div.tag == \"div\"\n    assert \"flex-1\" in center_div.attrs['class']\n    assert center_div.children[0].tag == \"a\"\n    assert center_div.children[0].children[0] == \"daisyUI\"\n    \n    # Verify end button\n    end_div = navbar_with_icons.children[2]\n    assert end_div.tag == \"div\"\n    assert \"flex-none\" in end_div.attrs['class']\n    end_button = end_div.children[0]\n    assert end_button.tag == \"button\"\n    assert \"btn-square\" in end_button.attrs['class']\n    assert end_button.children[0].tag == \"svg\"\n    \n    return navbar_with_icons\n\n# Run the tests\ntest_navbar_with_icons_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n  &lt;div class=\"flex-none\"&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-5 w-5 stroke-current\"&gt;&lt;path d=\"M4 6h16M4 12h16M4 18h16\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"flex-1\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"flex-none\"&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-5 w-5 stroke-current\"&gt;&lt;path d=\"M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_with_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_with_menu_fasthtml_examples\n\n test_navbar_with_menu_fasthtml_examples ()\n\nTest navbar with menu and submenu from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_with_menu_fasthtml_examples():\n    \"\"\"Test navbar with menu and submenu from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A, Ul, Li, Details, Summary\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_directions\n    \n    # Navbar with menu and submenu\n    navbar_with_menu = Div(\n        Div(\n            A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n            cls=combine_classes(flex._1)\n        ),\n        Div(\n            Ul(\n                Li(A(\"Link\")),\n                Li(\n                    Details(\n                        Summary(\"Parent\"),\n                        Ul(\n                            Li(A(\"Link 1\")),\n                            Li(A(\"Link 2\")),\n                            cls=combine_classes(bg_dui.base_100, rounded.t.none, p._2)\n                        )\n                    )\n                ),\n                cls=combine_classes(menu, menu_directions.horizontal, p.x._1)\n            ),\n            cls=combine_classes(flex.none)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert navbar_with_menu.tag == \"div\"\n    assert \"navbar\" in navbar_with_menu.attrs['class']\n    \n    # Verify title div\n    title_div = navbar_with_menu.children[0]\n    assert title_div.tag == \"div\"\n    assert \"flex-1\" in title_div.attrs['class']\n    assert title_div.children[0].children[0] == \"daisyUI\"\n    \n    # Verify menu div\n    menu_div = navbar_with_menu.children[1]\n    assert menu_div.tag == \"div\"\n    assert \"flex-none\" in menu_div.attrs['class']\n    \n    # Verify menu ul\n    menu_ul = menu_div.children[0]\n    assert menu_ul.tag == \"ul\"\n    assert \"menu\" in menu_ul.attrs['class']\n    assert \"menu-horizontal\" in menu_ul.attrs['class']\n    assert \"px-1\" in menu_ul.attrs['class']\n    \n    # Verify menu items\n    assert len(menu_ul.children) == 2\n    assert menu_ul.children[0].tag == \"li\"\n    assert menu_ul.children[0].children[0].tag == \"a\"\n    assert menu_ul.children[0].children[0].children[0] == \"Link\"\n    \n    # Verify submenu\n    submenu_li = menu_ul.children[1]\n    assert submenu_li.tag == \"li\"\n    assert submenu_li.children[0].tag == \"details\"\n    assert submenu_li.children[0].children[0].tag == \"summary\"\n    assert submenu_li.children[0].children[0].children[0] == \"Parent\"\n    \n    # Verify submenu items\n    submenu_ul = submenu_li.children[0].children[1]\n    assert submenu_ul.tag == \"ul\"\n    assert \"bg-base-100\" in submenu_ul.attrs['class']\n    assert \"rounded-t-none\" in submenu_ul.attrs['class']\n    assert \"p-2\" in submenu_ul.attrs['class']\n    assert len(submenu_ul.children) == 2\n    \n    return navbar_with_menu\n\n# Run the tests\ntest_navbar_with_menu_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n  &lt;div class=\"flex-1\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"flex-none\"&gt;\n    &lt;ul class=\"menu menu-horizontal px-1\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Link&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;details&gt;&lt;summary&gt;Parent&lt;/summary&gt;          &lt;ul class=\"bg-base-100 rounded-t-none p-2\"&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Link 1&lt;/a&gt;            &lt;/li&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Link 2&lt;/a&gt;            &lt;/li&gt;\n          &lt;/ul&gt;\n&lt;/details&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_with_menu_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_with_search_and_dropdown_fasthtml_examples\n\n test_navbar_with_search_and_dropdown_fasthtml_examples ()\n\nTest navbar with search input and dropdown from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_with_search_and_dropdown_fasthtml_examples():\n    \"\"\"Test navbar with search input and dropdown from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A, Ul, Li, Span, Input, Img\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, gap, justify\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_modifiers\n    from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown, dropdown_placement, dropdown_content\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_sizes\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge\n    from cjm_fasthtml_daisyui.components.data_display.avatar import avatar\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Navbar with search input and dropdown\n    navbar_search_dropdown = Div(\n        Div(\n            A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n            cls=combine_classes(flex._1)\n        ),\n        Div(\n            Input(\n                type=\"text\",\n                placeholder=\"Search\",\n                cls=combine_classes(text_input, w._24, w.auto.md)\n            ),\n            Div(\n                Div(\n                    Div(\n                        Img(\n                            alt=\"Tailwind CSS Navbar component\",\n                            src=\"https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp\",\n                            cls=combine_classes(w._10, rounded.full)\n                        ),\n                        cls=str(w._10)\n                    ),\n                    tabindex=\"0\",\n                    role=\"button\",\n                    cls=combine_classes(btn, btn_styles.ghost, btn_modifiers.circle, avatar)\n                ),\n                Ul(\n                    Li(\n                        A(\n                            \"Profile\",\n                            Span(\"New\", cls=str(badge)),\n                            cls=combine_classes(justify.between)\n                        )\n                    ),\n                    Li(A(\"Settings\")),\n                    Li(A(\"Logout\")),\n                    tabindex=\"0\",\n                    cls=combine_classes(\n                        menu, menu_sizes.sm, dropdown_content,\n                        bg_dui.base_100, border_radius.box,\n                        z._1, m.t._3, w._52, p._2, shadow.sm\n                    )\n                ),\n                cls=combine_classes(dropdown, dropdown_placement.end)\n            ),\n            cls=combine_classes(flex._, gap._2)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert navbar_search_dropdown.tag == \"div\"\n    assert \"navbar\" in navbar_search_dropdown.attrs['class']\n    assert \"bg-base-100\" in navbar_search_dropdown.attrs['class']\n    assert \"shadow-sm\" in navbar_search_dropdown.attrs['class']\n    \n    # Verify title div\n    title_div = navbar_search_dropdown.children[0]\n    assert title_div.tag == \"div\"\n    assert \"flex-1\" in title_div.attrs['class']\n    assert title_div.children[0].tag == \"a\"\n    assert title_div.children[0].children[0] == \"daisyUI\"\n    \n    # Verify search and dropdown container\n    search_dropdown_div = navbar_search_dropdown.children[1]\n    assert search_dropdown_div.tag == \"div\"\n    assert \"flex\" in search_dropdown_div.attrs['class']\n    assert \"gap-2\" in search_dropdown_div.attrs['class']\n    \n    # Verify search input\n    search_input = search_dropdown_div.children[0]\n    assert search_input.tag == \"input\"\n    assert search_input.attrs['type'] == \"text\"\n    assert search_input.attrs['placeholder'] == \"Search\"\n    assert \"input\" in search_input.attrs['class']\n    assert \"w-24\" in search_input.attrs['class']\n    assert \"md:w-auto\" in search_input.attrs['class']\n    \n    # Verify dropdown\n    dropdown_div = search_dropdown_div.children[1]\n    assert \"dropdown\" in dropdown_div.attrs['class']\n    assert \"dropdown-end\" in dropdown_div.attrs['class']\n    \n    # Verify avatar button\n    avatar_button = dropdown_div.children[0]\n    assert avatar_button.attrs['tabindex'] == \"0\"\n    assert avatar_button.attrs['role'] == \"button\"\n    assert \"btn\" in avatar_button.attrs['class']\n    assert \"btn-ghost\" in avatar_button.attrs['class']\n    assert \"btn-circle\" in avatar_button.attrs['class']\n    assert \"avatar\" in avatar_button.attrs['class']\n    \n    # Verify avatar image container\n    img_container = avatar_button.children[0]\n    assert \"w-10\" in img_container.attrs['class']\n    img_element = img_container.children[0]\n    assert img_element.tag == \"img\"\n    assert img_element.attrs['alt'] == \"Tailwind CSS Navbar component\"\n    assert \"w-10\" in img_element.attrs['class']\n    assert \"rounded-full\" in img_element.attrs['class']\n    \n    # Verify dropdown menu\n    dropdown_menu = dropdown_div.children[1]\n    assert dropdown_menu.tag == \"ul\"\n    assert dropdown_menu.attrs['tabindex'] == \"0\"\n    assert \"menu\" in dropdown_menu.attrs['class']\n    assert \"menu-sm\" in dropdown_menu.attrs['class']\n    assert \"dropdown-content\" in dropdown_menu.attrs['class']\n    \n    # Verify menu items\n    assert len(dropdown_menu.children) == 3\n    profile_li = dropdown_menu.children[0]\n    assert profile_li.children[0].tag == \"a\"\n    assert \"justify-between\" in profile_li.children[0].attrs['class']\n    assert profile_li.children[0].children[0] == \"Profile\"\n    assert profile_li.children[0].children[1].tag == \"span\"\n    assert \"badge\" in profile_li.children[0].children[1].attrs['class']\n    assert profile_li.children[0].children[1].children[0] == \"New\"\n    \n    return navbar_search_dropdown\n\n# Run the tests\ntest_navbar_with_search_and_dropdown_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n  &lt;div class=\"flex-1\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"flex-- gap-2\"&gt;\n    &lt;input type=\"text\" placeholder=\"Search\" class=\"input w-24 md:w-auto\"&gt;\n    &lt;div class=\"dropdown dropdown-end\"&gt;\n      &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost btn-circle avatar\"&gt;\n        &lt;div class=\"w-10\"&gt;\n&lt;img alt=\"Tailwind CSS Navbar component\" src=\"https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp\" class=\"w-10 rounded-full\"&gt;        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;ul tabindex=\"0\" class=\"menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow-sm\"&gt;\n        &lt;li&gt;\n&lt;a href=\"#\" class=\"justify-between\"&gt;Profile&lt;span class=\"badge\"&gt;New&lt;/span&gt;&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Settings&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Logout&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_with_search_and_dropdown_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_with_icon_indicator_and_dropdown_fasthtml_examples\n\n test_navbar_with_icon_indicator_and_dropdown_fasthtml_examples ()\n\nTest navbar with icon, indicator and dropdown from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_with_icon_indicator_and_dropdown_fasthtml_examples():\n    \"\"\"Test navbar with icon, indicator and dropdown from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A, Ul, Li, Span, Button, Img\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, justify\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_modifiers, btn_colors\n    from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown, dropdown_placement, dropdown_content\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_sizes\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_sizes\n    from cjm_fasthtml_daisyui.components.data_display.avatar import avatar\n    from cjm_fasthtml_daisyui.components.layout.indicator import indicator, indicator_item\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body, card_actions, card_sizes\n    \n    # Create shopping cart icon\n    cart_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Navbar with icon, indicator and dropdown\n    navbar_icon_indicator = Div(\n        Div(\n            A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n            cls=combine_classes(flex._1)\n        ),\n        Div(\n            # Shopping cart dropdown\n            Div(\n                Div(\n                    Div(\n                        cart_icon,\n                        Span(\"8\", cls=combine_classes(badge, badge_sizes.sm, indicator_item)),\n                        cls=str(indicator)\n                    ),\n                    tabindex=\"0\",\n                    role=\"button\",\n                    cls=combine_classes(btn, btn_styles.ghost, btn_modifiers.circle)\n                ),\n                Div(\n                    Div(\n                        Span(\"8 Items\", cls=combine_classes(font_size.lg, font_weight.bold)),\n                        Span(\"Subtotal: $999\", cls=str(text_dui.info)),\n                        Div(\n                            Button(\"View cart\", cls=combine_classes(btn, btn_colors.primary, btn_modifiers.block)),\n                            cls=str(card_actions)\n                        ),\n                        cls=str(card_body)\n                    ),\n                    tabindex=\"0\",\n                    cls=combine_classes(\n                        card, card_sizes.sm, dropdown_content,\n                        bg_dui.base_100, z._1, m.t._3, w._52, shadow.sm\n                    )\n                ),\n                cls=combine_classes(dropdown, dropdown_placement.end)\n            ),\n            # Avatar dropdown\n            Div(\n                Div(\n                    Div(\n                        Img(\n                            alt=\"Tailwind CSS Navbar component\",\n                            src=\"https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp\",\n                            cls=combine_classes(w._10, rounded.full)\n                        ),\n                        cls=str(w._10)\n                    ),\n                    tabindex=\"0\",\n                    role=\"button\",\n                    cls=combine_classes(btn, btn_styles.ghost, btn_modifiers.circle, avatar)\n                ),\n                Ul(\n                    Li(\n                        A(\n                            \"Profile\",\n                            Span(\"New\", cls=str(badge)),\n                            cls=combine_classes(justify.between)\n                        )\n                    ),\n                    Li(A(\"Settings\")),\n                    Li(A(\"Logout\")),\n                    tabindex=\"0\",\n                    cls=combine_classes(\n                        menu, menu_sizes.sm, dropdown_content,\n                        bg_dui.base_100, border_radius.box,\n                        z._1, m.t._3, w._52, p._2, shadow.sm\n                    )\n                ),\n                cls=combine_classes(dropdown, dropdown_placement.end)\n            ),\n            cls=combine_classes(flex.none)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert navbar_icon_indicator.tag == \"div\"\n    assert \"navbar\" in navbar_icon_indicator.attrs['class']\n    assert \"bg-base-100\" in navbar_icon_indicator.attrs['class']\n    assert \"shadow-sm\" in navbar_icon_indicator.attrs['class']\n    \n    # Verify title div\n    title_div = navbar_icon_indicator.children[0]\n    assert title_div.tag == \"div\"\n    assert \"flex-1\" in title_div.attrs['class']\n    assert title_div.children[0].tag == \"a\"\n    assert title_div.children[0].children[0] == \"daisyUI\"\n    \n    # Verify flex-none container with two dropdowns\n    dropdowns_div = navbar_icon_indicator.children[1]\n    assert dropdowns_div.tag == \"div\"\n    assert \"flex-none\" in dropdowns_div.attrs['class']\n    assert len(dropdowns_div.children) == 2\n    \n    # Verify shopping cart dropdown\n    cart_dropdown = dropdowns_div.children[0]\n    assert \"dropdown\" in cart_dropdown.attrs['class']\n    assert \"dropdown-end\" in cart_dropdown.attrs['class']\n    \n    # Verify cart button with indicator\n    cart_button = cart_dropdown.children[0]\n    assert cart_button.attrs['tabindex'] == \"0\"\n    assert cart_button.attrs['role'] == \"button\"\n    assert \"btn\" in cart_button.attrs['class']\n    assert \"btn-ghost\" in cart_button.attrs['class']\n    assert \"btn-circle\" in cart_button.attrs['class']\n    \n    # Verify indicator with badge\n    indicator_div = cart_button.children[0]\n    assert \"indicator\" in indicator_div.attrs['class']\n    assert indicator_div.children[0].tag == \"svg\"  # Cart icon\n    indicator_badge = indicator_div.children[1]\n    assert \"badge\" in indicator_badge.attrs['class']\n    assert \"badge-sm\" in indicator_badge.attrs['class']\n    assert \"indicator-item\" in indicator_badge.attrs['class']\n    assert indicator_badge.children[0] == \"8\"\n    \n    # Verify cart dropdown content (card)\n    cart_content = cart_dropdown.children[1]\n    assert cart_content.attrs['tabindex'] == \"0\"\n    assert \"card\" in cart_content.attrs['class']\n    assert \"card-sm\" in cart_content.attrs['class']  # Using card-compact\n    assert \"dropdown-content\" in cart_content.attrs['class']\n    \n    # Verify cart card body\n    cart_body = cart_content.children[0]\n    assert \"card-body\" in cart_body.attrs['class']\n    assert cart_body.children[0].tag == \"span\"\n    assert \"text-lg\" in cart_body.children[0].attrs['class']\n    assert \"font-bold\" in cart_body.children[0].attrs['class']\n    assert cart_body.children[0].children[0] == \"8 Items\"\n    assert cart_body.children[1].tag == \"span\"\n    assert \"text-info\" in cart_body.children[1].attrs['class']\n    assert cart_body.children[1].children[0] == \"Subtotal: $999\"\n    \n    # Verify view cart button\n    cart_actions = cart_body.children[2]\n    assert \"card-actions\" in cart_actions.attrs['class']\n    view_cart_btn = cart_actions.children[0]\n    assert view_cart_btn.tag == \"button\"\n    assert \"btn\" in view_cart_btn.attrs['class']\n    assert \"btn-primary\" in view_cart_btn.attrs['class']\n    assert \"btn-block\" in view_cart_btn.attrs['class']\n    assert view_cart_btn.children[0] == \"View cart\"\n    \n    # Verify avatar dropdown\n    avatar_dropdown = dropdowns_div.children[1]\n    assert \"dropdown\" in avatar_dropdown.attrs['class']\n    assert \"dropdown-end\" in avatar_dropdown.attrs['class']\n    \n    # Verify avatar button\n    avatar_button = avatar_dropdown.children[0]\n    assert \"btn\" in avatar_button.attrs['class']\n    assert \"btn-ghost\" in avatar_button.attrs['class']\n    assert \"btn-circle\" in avatar_button.attrs['class']\n    assert \"avatar\" in avatar_button.attrs['class']\n    \n    # Verify avatar dropdown menu\n    avatar_menu = avatar_dropdown.children[1]\n    assert avatar_menu.tag == \"ul\"\n    assert \"menu\" in avatar_menu.attrs['class']\n    assert \"menu-sm\" in avatar_menu.attrs['class']\n    assert len(avatar_menu.children) == 3\n    \n    return navbar_icon_indicator\n\n# Run the tests\ntest_navbar_with_icon_indicator_and_dropdown_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n  &lt;div class=\"flex-1\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"flex-none\"&gt;\n    &lt;div class=\"dropdown dropdown-end\"&gt;\n      &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost btn-circle\"&gt;\n        &lt;div class=\"indicator\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span class=\"badge badge-sm indicator-item\"&gt;8&lt;/span&gt;        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div tabindex=\"0\" class=\"card card-sm dropdown-content bg-base-100 z-1 mt-3 w-52 shadow-sm\"&gt;\n        &lt;div class=\"card-body\"&gt;\n&lt;span class=\"text-lg font-bold\"&gt;8 Items&lt;/span&gt;&lt;span class=\"text-info\"&gt;Subtotal: $999&lt;/span&gt;          &lt;div class=\"card-actions\"&gt;\n&lt;button class=\"btn btn-primary btn-block\"&gt;View cart&lt;/button&gt;          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"dropdown dropdown-end\"&gt;\n      &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost btn-circle avatar\"&gt;\n        &lt;div class=\"w-10\"&gt;\n&lt;img alt=\"Tailwind CSS Navbar component\" src=\"https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp\" class=\"w-10 rounded-full\"&gt;        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;ul tabindex=\"0\" class=\"menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow-sm\"&gt;\n        &lt;li&gt;\n&lt;a href=\"#\" class=\"justify-between\"&gt;Profile&lt;span class=\"badge\"&gt;New&lt;/span&gt;&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Settings&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Logout&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_with_icon_indicator_and_dropdown_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_with_dropdown_center_logo_fasthtml_examples\n\n test_navbar_with_dropdown_center_logo_fasthtml_examples ()\n\nTest navbar with dropdown, center logo and icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_with_dropdown_center_logo_fasthtml_examples():\n    \"\"\"Test navbar with dropdown, center logo and icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A, Button, Ul, Li, Span\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_modifiers\n    from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown, dropdown_content\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_sizes\n    from cjm_fasthtml_daisyui.components.layout.indicator import indicator, indicator_item\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_sizes, badge_colors\n    \n    # Create hamburger menu icon\n    hamburger_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M4 6h16M4 12h16M4 18h7\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Create search icon\n    search_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Create notification icon\n    notification_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Navbar with dropdown, center logo and icon\n    navbar_dropdown_center = Div(\n        Div(\n            Div(\n                Div(\n                    hamburger_icon,\n                    tabindex=\"0\",\n                    role=\"button\",\n                    cls=combine_classes(btn, btn_styles.ghost, btn_modifiers.circle)\n                ),\n                Ul(\n                    Li(A(\"Homepage\")),\n                    Li(A(\"Portfolio\")),\n                    Li(A(\"About\")),\n                    tabindex=\"0\",\n                    cls=combine_classes(\n                        menu, menu_sizes.sm, dropdown_content,\n                        bg_dui.base_100, border_radius.box,\n                        z._1, m.t._3, w._52, p._2, shadow.sm\n                    )\n                ),\n                cls=str(dropdown)\n            ),\n            cls=str(navbar_start)\n        ),\n        Div(\n            A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n            cls=str(navbar_center)\n        ),\n        Div(\n            Button(\n                search_icon,\n                cls=combine_classes(btn, btn_styles.ghost, btn_modifiers.circle)\n            ),\n            Button(\n                Div(\n                    notification_icon,\n                    Span(cls=combine_classes(badge, badge_sizes.xs, badge_colors.primary, indicator_item)),\n                    cls=str(indicator)\n                ),\n                cls=combine_classes(btn, btn_styles.ghost, btn_modifiers.circle)\n            ),\n            cls=str(navbar_end)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert navbar_dropdown_center.tag == \"div\"\n    assert \"navbar\" in navbar_dropdown_center.attrs['class']\n    \n    # Verify navbar-start with dropdown\n    start_div = navbar_dropdown_center.children[0]\n    assert \"navbar-start\" in start_div.attrs['class']\n    dropdown_div = start_div.children[0]\n    assert \"dropdown\" in dropdown_div.attrs['class']\n    \n    # Verify navbar-center with logo\n    center_div = navbar_dropdown_center.children[1]\n    assert \"navbar-center\" in center_div.attrs['class']\n    assert center_div.children[0].children[0] == \"daisyUI\"\n    \n    # Verify navbar-end with buttons\n    end_div = navbar_dropdown_center.children[2]\n    assert \"navbar-end\" in end_div.attrs['class']\n    assert len(end_div.children) == 2\n    \n    # Verify notification button with indicator\n    notification_btn = end_div.children[1]\n    assert notification_btn.tag == \"button\"\n    indicator_div = notification_btn.children[0]\n    assert \"indicator\" in indicator_div.attrs['class']\n    indicator_badge = indicator_div.children[1]\n    assert \"badge\" in indicator_badge.attrs['class']\n    assert \"badge-xs\" in indicator_badge.attrs['class']\n    assert \"badge-primary\" in indicator_badge.attrs['class']\n    assert \"indicator-item\" in indicator_badge.attrs['class']\n    \n    return navbar_dropdown_center\n\n# Run the tests\ntest_navbar_with_dropdown_center_logo_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n  &lt;div class=\"navbar-start\"&gt;\n    &lt;div class=\"dropdown\"&gt;\n      &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost btn-circle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M4 6h16M4 12h16M4 18h7\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;ul tabindex=\"0\" class=\"menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow-sm\"&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Homepage&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Portfolio&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;About&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"navbar-center\"&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"navbar-end\"&gt;\n&lt;button class=\"btn btn-ghost btn-circle\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-ghost btn-circle\"&gt;      &lt;div class=\"indicator\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span class=\"badge badge-xs badge-primary indicator-item\"&gt;&lt;/span&gt;      &lt;/div&gt;\n&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_with_dropdown_center_logo_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_responsive_fasthtml_examples\n\n test_navbar_responsive_fasthtml_examples ()\n\nTest responsive navbar from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_responsive_fasthtml_examples():\n    \"\"\"Test responsive navbar from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A, Ul, Li, Details, Summary, Button\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z, display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles\n    from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown, dropdown_content\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_sizes, menu_directions\n    \n    # Create hamburger menu icon\n    hamburger_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M4 6h16M4 12h8m-8 6h16\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Responsive navbar\n    responsive_navbar = Div(\n        Div(\n            Div(\n                Div(\n                    hamburger_icon,\n                    tabindex=\"0\",\n                    role=\"button\",\n                    cls=combine_classes(btn, btn_styles.ghost, display_tw.hidden.lg)\n                ),\n                Ul(\n                    Li(A(\"Item 1\")),\n                    Li(\n                        A(\"Parent\"),\n                        Ul(\n                            Li(A(\"Submenu 1\")),\n                            Li(A(\"Submenu 2\")),\n                            cls=str(p._2)\n                        )\n                    ),\n                    Li(A(\"Item 3\")),\n                    tabindex=\"0\",\n                    cls=combine_classes(\n                        menu, menu_sizes.sm, dropdown_content,\n                        bg_dui.base_100, border_radius.box,\n                        z._1, m.t._3, w._52, p._2, shadow.sm\n                    )\n                ),\n                cls=str(dropdown)\n            ),\n            A(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n            cls=str(navbar_start)\n        ),\n        Div(\n            Ul(\n                Li(A(\"Item 1\")),\n                Li(\n                    Details(\n                        Summary(\"Parent\"),\n                        Ul(\n                            Li(A(\"Submenu 1\")),\n                            Li(A(\"Submenu 2\")),\n                            cls=str(p._2)\n                        )\n                    )\n                ),\n                Li(A(\"Item 3\")),\n                cls=combine_classes(menu, menu_directions.horizontal, p.x._1)\n            ),\n            cls=combine_classes(navbar_center, display_tw.hidden, flex_display.lg)\n        ),\n        Div(\n            A(\"Button\", cls=str(btn)),\n            cls=str(navbar_end)\n        ),\n        cls=combine_classes(navbar, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify structure\n    assert responsive_navbar.tag == \"div\"\n    assert \"navbar\" in responsive_navbar.attrs['class']\n    \n    # Verify navbar-start with dropdown\n    start_div = responsive_navbar.children[0]\n    assert \"navbar-start\" in start_div.attrs['class']\n    dropdown_div = start_div.children[0]\n    assert \"dropdown\" in dropdown_div.attrs['class']\n    \n    # Verify dropdown button is hidden on large screens\n    dropdown_button = dropdown_div.children[0]\n    assert \"lg:hidden\" in dropdown_button.attrs['class']\n    \n    # Verify navbar-center with horizontal menu (hidden on small, flex on large)\n    center_div = responsive_navbar.children[1]\n    assert \"navbar-center\" in center_div.attrs['class']\n    assert \"hidden\" in center_div.attrs['class']\n    assert \"lg:flex\" in center_div.attrs['class']\n    \n    # Verify navbar-end with button\n    end_div = responsive_navbar.children[2]\n    assert \"navbar-end\" in end_div.attrs['class']\n    assert end_div.children[0].tag == \"a\"\n    assert \"btn\" in end_div.children[0].attrs['class']\n    assert end_div.children[0].children[0] == \"Button\"\n    \n    return responsive_navbar\n\n# Run the tests\ntest_navbar_responsive_fasthtml_examples()\n\n\n&lt;div class=\"navbar bg-base-100 shadow-sm\"&gt;\n  &lt;div class=\"navbar-start\"&gt;\n    &lt;div class=\"dropdown\"&gt;\n      &lt;div tabindex=\"0\" role=\"button\" class=\"btn btn-ghost lg:hidden\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M4 6h16M4 12h8m-8 6h16\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;ul tabindex=\"0\" class=\"menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 shadow-sm\"&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Parent&lt;/a&gt;          &lt;ul class=\"p-2\"&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;            &lt;/li&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;            &lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;a href=\"#\" class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/a&gt;  &lt;/div&gt;\n  &lt;div class=\"navbar-center hidden lg:flex\"&gt;\n    &lt;ul class=\"menu menu-horizontal px-1\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;details&gt;&lt;summary&gt;Parent&lt;/summary&gt;          &lt;ul class=\"p-2\"&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;            &lt;/li&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;            &lt;/li&gt;\n          &lt;/ul&gt;\n&lt;/details&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n  &lt;div class=\"navbar-end\"&gt;\n&lt;a href=\"#\" class=\"btn\"&gt;Button&lt;/a&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_navbar_colors_fasthtml_examples\n\n test_navbar_colors_fasthtml_examples ()\n\nTest navbar with colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_navbar_colors_fasthtml_examples():\n    \"\"\"Test navbar with colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles\n    \n    # Navbar with neutral color\n    navbar_neutral = Div(\n        Button(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n        cls=combine_classes(navbar, bg_dui.neutral, text_dui.neutral_content)\n    )\n    \n    # Verify neutral navbar\n    assert navbar_neutral.tag == \"div\"\n    assert \"navbar\" in navbar_neutral.attrs['class']\n    assert \"bg-neutral\" in navbar_neutral.attrs['class']\n    assert \"text-neutral-content\" in navbar_neutral.attrs['class']\n    assert navbar_neutral.children[0].tag == \"button\"\n    assert navbar_neutral.children[0].children[0] == \"daisyUI\"\n    \n    # Navbar with base-300 color\n    navbar_base300 = Div(\n        Button(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n        cls=combine_classes(navbar, bg_dui.base_300)\n    )\n    \n    # Verify base-300 navbar\n    assert \"navbar\" in navbar_base300.attrs['class']\n    assert \"bg-base-300\" in navbar_base300.attrs['class']\n    \n    # Navbar with primary color\n    navbar_primary = Div(\n        Button(\"daisyUI\", cls=combine_classes(btn, btn_styles.ghost, font_size.xl)),\n        cls=combine_classes(navbar, bg_dui.primary, text_dui.primary_content)\n    )\n    \n    # Verify primary navbar\n    assert \"navbar\" in navbar_primary.attrs['class']\n    assert \"bg-primary\" in navbar_primary.attrs['class']\n    assert \"text-primary-content\" in navbar_primary.attrs['class']\n    \n    # Return all color variations\n    return Div(\n        navbar_neutral,\n        navbar_base300,\n        navbar_primary\n    )\n\n# Run the tests\ntest_navbar_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"navbar bg-neutral text-neutral-content\"&gt;\n&lt;button class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"navbar bg-base-300\"&gt;\n&lt;button class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"navbar bg-primary text-primary-content\"&gt;\n&lt;button class=\"btn btn-ghost text-xl\"&gt;daisyUI&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_navbar_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "navbar"
    ]
  },
  {
    "objectID": "components/navigation/pagination.html",
    "href": "components/navigation/pagination.html",
    "title": "pagination",
    "section": "",
    "text": "Note on Pagination Components\nFor pagination, we use join component to show multiple links or buttons next to each other.\nAll joing utilities are already defined in the cjm_fasthtml_daisyui.components.layout.join module.\n\n\nPagination Test Examples\n\nsource\n\n\ntest_pagination_basic_examples\n\n test_pagination_basic_examples ()\n\nTest basic pagination utilities.\n\n\nExported source\ndef test_pagination_basic_examples():\n    \"\"\"Test basic pagination utilities.\"\"\"\n    # Basic join\n    assert str(join) == \"join\"\n    assert str(join_item) == \"join-item\"\n    \n    # Test with modifiers\n    assert str(join.hover) == \"hover:join\"\n    assert str(join.md) == \"md:join\"\n    assert str(join.dark) == \"dark:join\"\n\n    assert str(join_item.hover) == \"hover:join-item\"\n    assert str(join_item.md) == \"md:join-item\"\n    assert str(join_item.dark) == \"dark:join-item\"\n\n# Run the tests\ntest_pagination_basic_examples()\n\n\n\nsource\n\n\ntest_pagination_directions_examples\n\n test_pagination_directions_examples ()\n\nTest join directions variants.\n\n\nExported source\ndef test_pagination_directions_examples():\n    \"\"\"Test join directions variants.\"\"\"\n    assert str(join_directions.vertical) == \"join-vertical\"\n    assert str(join_directions.horizontal) == \"join-horizontal\"\n\n# Run the tests\ntest_pagination_directions_examples()\n\n\n\nsource\n\n\ntest_pagination_basic_fasthtml_examples\n\n test_pagination_basic_fasthtml_examples ()\n\nTest pagination with an active button from daisyUI v5 documentation.\n\n\nExported source\ndef test_pagination_basic_fasthtml_examples():\n    \"\"\"Test pagination with an active button from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_behaviors\n    \n    # Pagination with an active button\n    pagination = Div(\n        Button(\"1\", cls=combine_classes(join_item, btn)),\n        Button(\"2\", cls=combine_classes(join_item, btn, btn_behaviors.active)),\n        Button(\"3\", cls=combine_classes(join_item, btn)),\n        Button(\"4\", cls=combine_classes(join_item, btn)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert pagination.tag == \"div\"\n    assert pagination.attrs['class'] == \"join\"\n    \n    # Verify buttons\n    assert len(pagination.children) == 4\n    \n    # First button (inactive)\n    first_button = pagination.children[0]\n    assert first_button.tag == \"button\"\n    assert \"join-item\" in first_button.attrs['class']\n    assert \"btn\" in first_button.attrs['class']\n    assert \"btn-active\" not in first_button.attrs['class']\n    assert first_button.children[0] == \"1\"\n    \n    # Second button (active)\n    second_button = pagination.children[1]\n    assert second_button.tag == \"button\"\n    assert \"join-item\" in second_button.attrs['class']\n    assert \"btn\" in second_button.attrs['class']\n    assert \"btn-active\" in second_button.attrs['class']\n    assert second_button.children[0] == \"2\"\n    \n    # Third button (inactive)\n    third_button = pagination.children[2]\n    assert third_button.tag == \"button\"\n    assert \"join-item\" in third_button.attrs['class']\n    assert \"btn\" in third_button.attrs['class']\n    assert \"btn-active\" not in third_button.attrs['class']\n    assert third_button.children[0] == \"3\"\n    \n    # Fourth button (inactive)\n    fourth_button = pagination.children[3]\n    assert fourth_button.tag == \"button\"\n    assert \"join-item\" in fourth_button.attrs['class']\n    assert \"btn\" in fourth_button.attrs['class']\n    assert \"btn-active\" not in fourth_button.attrs['class']\n    assert fourth_button.children[0] == \"4\"\n    \n    return pagination\n\n# Run the tests\ntest_pagination_basic_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn\"&gt;1&lt;/button&gt;&lt;button class=\"join-item btn btn-active\"&gt;2&lt;/button&gt;&lt;button class=\"join-item btn\"&gt;3&lt;/button&gt;&lt;button class=\"join-item btn\"&gt;4&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_pagination_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_pagination_sizes_fasthtml_examples\n\n test_pagination_sizes_fasthtml_examples ()\n\nTest pagination with different button sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_pagination_sizes_fasthtml_examples():\n    \"\"\"Test pagination with different button sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_behaviors, btn_sizes\n    \n    # Extra small pagination\n    pagination_xs = Div(\n        Button(\"1\", cls=combine_classes(join_item, btn, btn_sizes.xs)),\n        Button(\"2\", cls=combine_classes(join_item, btn, btn_sizes.xs, btn_behaviors.active)),\n        Button(\"3\", cls=combine_classes(join_item, btn, btn_sizes.xs)),\n        Button(\"4\", cls=combine_classes(join_item, btn, btn_sizes.xs)),\n        cls=str(join)\n    )\n    assert pagination_xs.attrs['class'] == \"join\"\n    assert \"btn-xs\" in pagination_xs.children[0].attrs['class']\n    assert \"btn-xs\" in pagination_xs.children[1].attrs['class']\n    assert \"btn-active\" in pagination_xs.children[1].attrs['class']\n    \n    # Small pagination\n    pagination_sm = Div(\n        Button(\"1\", cls=combine_classes(join_item, btn, btn_sizes.sm)),\n        Button(\"2\", cls=combine_classes(join_item, btn, btn_sizes.sm, btn_behaviors.active)),\n        Button(\"3\", cls=combine_classes(join_item, btn, btn_sizes.sm)),\n        Button(\"4\", cls=combine_classes(join_item, btn, btn_sizes.sm)),\n        cls=str(join)\n    )\n    assert pagination_sm.attrs['class'] == \"join\"\n    assert \"btn-sm\" in pagination_sm.children[0].attrs['class']\n    assert \"btn-sm\" in pagination_sm.children[1].attrs['class']\n    assert \"btn-active\" in pagination_sm.children[1].attrs['class']\n    \n    # Medium pagination\n    pagination_md = Div(\n        Button(\"1\", cls=combine_classes(join_item, btn, btn_sizes.md)),\n        Button(\"2\", cls=combine_classes(join_item, btn, btn_sizes.md, btn_behaviors.active)),\n        Button(\"3\", cls=combine_classes(join_item, btn, btn_sizes.md)),\n        Button(\"4\", cls=combine_classes(join_item, btn, btn_sizes.md)),\n        cls=str(join)\n    )\n    assert pagination_md.attrs['class'] == \"join\"\n    assert \"btn-md\" in pagination_md.children[0].attrs['class']\n    assert \"btn-md\" in pagination_md.children[1].attrs['class']\n    assert \"btn-active\" in pagination_md.children[1].attrs['class']\n    \n    # Large pagination\n    pagination_lg = Div(\n        Button(\"1\", cls=combine_classes(join_item, btn, btn_sizes.lg)),\n        Button(\"2\", cls=combine_classes(join_item, btn, btn_sizes.lg, btn_behaviors.active)),\n        Button(\"3\", cls=combine_classes(join_item, btn, btn_sizes.lg)),\n        Button(\"4\", cls=combine_classes(join_item, btn, btn_sizes.lg)),\n        cls=str(join)\n    )\n    assert pagination_lg.attrs['class'] == \"join\"\n    assert \"btn-lg\" in pagination_lg.children[0].attrs['class']\n    assert \"btn-lg\" in pagination_lg.children[1].attrs['class']\n    assert \"btn-active\" in pagination_lg.children[1].attrs['class']\n    \n    # Extra large pagination\n    pagination_xl = Div(\n        Button(\"1\", cls=combine_classes(join_item, btn, btn_sizes.xl)),\n        Button(\"2\", cls=combine_classes(join_item, btn, btn_sizes.xl, btn_behaviors.active)),\n        Button(\"3\", cls=combine_classes(join_item, btn, btn_sizes.xl)),\n        Button(\"4\", cls=combine_classes(join_item, btn, btn_sizes.xl)),\n        cls=str(join)\n    )\n    assert pagination_xl.attrs['class'] == \"join\"\n    assert \"btn-xl\" in pagination_xl.children[0].attrs['class']\n    assert \"btn-xl\" in pagination_xl.children[1].attrs['class']\n    assert \"btn-active\" in pagination_xl.children[1].attrs['class']\n    \n    # Return all size variations\n    return Div(\n        pagination_xs,\n        pagination_sm,\n        pagination_md,\n        pagination_lg,\n        pagination_xl\n    )\n\n# Run the tests\ntest_pagination_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn btn-xs\"&gt;1&lt;/button&gt;&lt;button class=\"join-item btn btn-xs btn-active\"&gt;2&lt;/button&gt;&lt;button class=\"join-item btn btn-xs\"&gt;3&lt;/button&gt;&lt;button class=\"join-item btn btn-xs\"&gt;4&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn btn-sm\"&gt;1&lt;/button&gt;&lt;button class=\"join-item btn btn-sm btn-active\"&gt;2&lt;/button&gt;&lt;button class=\"join-item btn btn-sm\"&gt;3&lt;/button&gt;&lt;button class=\"join-item btn btn-sm\"&gt;4&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn btn-md\"&gt;1&lt;/button&gt;&lt;button class=\"join-item btn btn-md btn-active\"&gt;2&lt;/button&gt;&lt;button class=\"join-item btn btn-md\"&gt;3&lt;/button&gt;&lt;button class=\"join-item btn btn-md\"&gt;4&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn btn-lg\"&gt;1&lt;/button&gt;&lt;button class=\"join-item btn btn-lg btn-active\"&gt;2&lt;/button&gt;&lt;button class=\"join-item btn btn-lg\"&gt;3&lt;/button&gt;&lt;button class=\"join-item btn btn-lg\"&gt;4&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn btn-xl\"&gt;1&lt;/button&gt;&lt;button class=\"join-item btn btn-xl btn-active\"&gt;2&lt;/button&gt;&lt;button class=\"join-item btn btn-xl\"&gt;3&lt;/button&gt;&lt;button class=\"join-item btn btn-xl\"&gt;4&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_pagination_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_pagination_disabled_fasthtml_examples\n\n test_pagination_disabled_fasthtml_examples ()\n\nTest pagination with a disabled button from daisyUI v5 documentation.\n\n\nExported source\ndef test_pagination_disabled_fasthtml_examples():\n    \"\"\"Test pagination with a disabled button from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_behaviors\n    \n    # Pagination with a disabled button\n    pagination_disabled = Div(\n        Button(\"1\", cls=combine_classes(join_item, btn)),\n        Button(\"2\", cls=combine_classes(join_item, btn)),\n        Button(\"...\", cls=combine_classes(join_item, btn, btn_behaviors.disabled)),\n        Button(\"99\", cls=combine_classes(join_item, btn)),\n        Button(\"100\", cls=combine_classes(join_item, btn)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert pagination_disabled.tag == \"div\"\n    assert pagination_disabled.attrs['class'] == \"join\"\n    assert len(pagination_disabled.children) == 5\n    \n    # First button\n    assert pagination_disabled.children[0].tag == \"button\"\n    assert \"join-item\" in pagination_disabled.children[0].attrs['class']\n    assert \"btn\" in pagination_disabled.children[0].attrs['class']\n    assert pagination_disabled.children[0].children[0] == \"1\"\n    \n    # Second button\n    assert pagination_disabled.children[1].tag == \"button\"\n    assert \"join-item\" in pagination_disabled.children[1].attrs['class']\n    assert \"btn\" in pagination_disabled.children[1].attrs['class']\n    assert pagination_disabled.children[1].children[0] == \"2\"\n    \n    # Disabled button (...)\n    disabled_button = pagination_disabled.children[2]\n    assert disabled_button.tag == \"button\"\n    assert \"join-item\" in disabled_button.attrs['class']\n    assert \"btn\" in disabled_button.attrs['class']\n    assert \"btn-disabled\" in disabled_button.attrs['class']\n    assert disabled_button.children[0] == \"...\"\n    \n    # 99 button\n    assert pagination_disabled.children[3].tag == \"button\"\n    assert \"join-item\" in pagination_disabled.children[3].attrs['class']\n    assert \"btn\" in pagination_disabled.children[3].attrs['class']\n    assert pagination_disabled.children[3].children[0] == \"99\"\n    \n    # 100 button\n    assert pagination_disabled.children[4].tag == \"button\"\n    assert \"join-item\" in pagination_disabled.children[4].attrs['class']\n    assert \"btn\" in pagination_disabled.children[4].attrs['class']\n    assert pagination_disabled.children[4].children[0] == \"100\"\n    \n    return pagination_disabled\n\n# Run the tests\ntest_pagination_disabled_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn\"&gt;1&lt;/button&gt;&lt;button class=\"join-item btn\"&gt;2&lt;/button&gt;&lt;button class=\"join-item btn btn-disabled\"&gt;...&lt;/button&gt;&lt;button class=\"join-item btn\"&gt;99&lt;/button&gt;&lt;button class=\"join-item btn\"&gt;100&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_pagination_disabled_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_pagination_extra_small_fasthtml_examples\n\n test_pagination_extra_small_fasthtml_examples ()\n\nTest extra small buttons pagination from daisyUI v5 documentation.\n\n\nExported source\ndef test_pagination_extra_small_fasthtml_examples():\n    \"\"\"Test extra small buttons pagination from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Extra small buttons pagination with text\n    pagination_extra_small = Div(\n        Button(\"«\", cls=combine_classes(join_item, btn)),\n        Button(\"Page 22\", cls=combine_classes(join_item, btn)),\n        Button(\"»\", cls=combine_classes(join_item, btn)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert pagination_extra_small.tag == \"div\"\n    assert pagination_extra_small.attrs['class'] == \"join\"\n    assert len(pagination_extra_small.children) == 3\n    \n    # Previous button («)\n    prev_button = pagination_extra_small.children[0]\n    assert prev_button.tag == \"button\"\n    assert \"join-item\" in prev_button.attrs['class']\n    assert \"btn\" in prev_button.attrs['class']\n    assert prev_button.children[0] == \"«\"\n    \n    # Page button\n    page_button = pagination_extra_small.children[1]\n    assert page_button.tag == \"button\"\n    assert \"join-item\" in page_button.attrs['class']\n    assert \"btn\" in page_button.attrs['class']\n    assert page_button.children[0] == \"Page 22\"\n    \n    # Next button (»)\n    next_button = pagination_extra_small.children[2]\n    assert next_button.tag == \"button\"\n    assert \"join-item\" in next_button.attrs['class']\n    assert \"btn\" in next_button.attrs['class']\n    assert next_button.children[0] == \"»\"\n    \n    return pagination_extra_small\n\n# Run the tests\ntest_pagination_extra_small_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n&lt;button class=\"join-item btn\"&gt;«&lt;/button&gt;&lt;button class=\"join-item btn\"&gt;Page 22&lt;/button&gt;&lt;button class=\"join-item btn\"&gt;»&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_pagination_extra_small_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_pagination_grid_fasthtml_examples\n\n test_pagination_grid_fasthtml_examples ()\n\nTest next/prev outline buttons with equal width from daisyUI v5 documentation.\n\n\nExported source\ndef test_pagination_grid_fasthtml_examples():\n    \"\"\"Test next/prev outline buttons with equal width from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_cols, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles\n    \n    # Next/Prev outline buttons with equal width\n    pagination_grid = Div(\n        Button(\"Previous page\", cls=combine_classes(join_item, btn, btn_styles.outline)),\n        Button(\"Next\", cls=combine_classes(join_item, btn, btn_styles.outline)),\n        cls=combine_classes(join, grid_display, grid_cols._2)\n    )\n    \n    # Verify structure\n    assert pagination_grid.tag == \"div\"\n    assert \"join\" in pagination_grid.attrs['class']\n    assert \"grid\" in pagination_grid.attrs['class']\n    assert \"grid-cols-2\" in pagination_grid.attrs['class']\n    assert len(pagination_grid.children) == 2\n    \n    # Previous page button\n    prev_button = pagination_grid.children[0]\n    assert prev_button.tag == \"button\"\n    assert \"join-item\" in prev_button.attrs['class']\n    assert \"btn\" in prev_button.attrs['class']\n    assert \"btn-outline\" in prev_button.attrs['class']\n    assert prev_button.children[0] == \"Previous page\"\n    \n    # Next button\n    next_button = pagination_grid.children[1]\n    assert next_button.tag == \"button\"\n    assert \"join-item\" in next_button.attrs['class']\n    assert \"btn\" in next_button.attrs['class']\n    assert \"btn-outline\" in next_button.attrs['class']\n    assert next_button.children[0] == \"Next\"\n    \n    return pagination_grid\n\n# Run the tests\ntest_pagination_grid_fasthtml_examples()\n\n\n&lt;div class=\"join grid grid-cols-2\"&gt;\n&lt;button class=\"join-item btn btn-outline\"&gt;Previous page&lt;/button&gt;&lt;button class=\"join-item btn btn-outline\"&gt;Next&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_pagination_grid_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_pagination_radio_fasthtml_examples\n\n test_pagination_radio_fasthtml_examples ()\n\nTest pagination using radio inputs from daisyUI v5 documentation.\n\n\nExported source\ndef test_pagination_radio_fasthtml_examples():\n    \"\"\"Test pagination using radio inputs from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_modifiers\n    \n    # Pagination using radio inputs\n    pagination_radio = Div(\n        Input(\n            type=\"radio\",\n            name=\"options\",\n            aria_label=\"1\",\n            checked=\"checked\",\n            cls=combine_classes(join_item, btn, btn_modifiers.square)\n        ),\n        Input(\n            type=\"radio\",\n            name=\"options\",\n            aria_label=\"2\",\n            cls=combine_classes(join_item, btn, btn_modifiers.square)\n        ),\n        Input(\n            type=\"radio\",\n            name=\"options\",\n            aria_label=\"3\",\n            cls=combine_classes(join_item, btn, btn_modifiers.square)\n        ),\n        Input(\n            type=\"radio\",\n            name=\"options\",\n            aria_label=\"4\",\n            cls=combine_classes(join_item, btn, btn_modifiers.square)\n        ),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert pagination_radio.tag == \"div\"\n    assert pagination_radio.attrs['class'] == \"join\"\n    assert len(pagination_radio.children) == 4\n    \n    # First radio input (checked)\n    first_radio = pagination_radio.children[0]\n    assert first_radio.tag == \"input\"\n    assert first_radio.attrs['type'] == \"radio\"\n    assert first_radio.attrs['name'] == \"options\"\n    assert first_radio.attrs['aria-label'] == \"1\"\n    assert first_radio.attrs['checked'] == \"checked\"\n    assert \"join-item\" in first_radio.attrs['class']\n    assert \"btn\" in first_radio.attrs['class']\n    assert \"btn-square\" in first_radio.attrs['class']\n    \n    # Second radio input\n    second_radio = pagination_radio.children[1]\n    assert second_radio.tag == \"input\"\n    assert second_radio.attrs['type'] == \"radio\"\n    assert second_radio.attrs['name'] == \"options\"\n    assert second_radio.attrs['aria-label'] == \"2\"\n    assert 'checked' not in second_radio.attrs\n    assert \"join-item\" in second_radio.attrs['class']\n    assert \"btn\" in second_radio.attrs['class']\n    assert \"btn-square\" in second_radio.attrs['class']\n    \n    # Third radio input\n    third_radio = pagination_radio.children[2]\n    assert third_radio.tag == \"input\"\n    assert third_radio.attrs['type'] == \"radio\"\n    assert third_radio.attrs['name'] == \"options\"\n    assert third_radio.attrs['aria-label'] == \"3\"\n    assert 'checked' not in third_radio.attrs\n    assert \"join-item\" in third_radio.attrs['class']\n    assert \"btn\" in third_radio.attrs['class']\n    assert \"btn-square\" in third_radio.attrs['class']\n    \n    # Fourth radio input\n    fourth_radio = pagination_radio.children[3]\n    assert fourth_radio.tag == \"input\"\n    assert fourth_radio.attrs['type'] == \"radio\"\n    assert fourth_radio.attrs['name'] == \"options\"\n    assert fourth_radio.attrs['aria-label'] == \"4\"\n    assert 'checked' not in fourth_radio.attrs\n    assert \"join-item\" in fourth_radio.attrs['class']\n    assert \"btn\" in fourth_radio.attrs['class']\n    assert \"btn-square\" in fourth_radio.attrs['class']\n    \n    return pagination_radio\n\n# Run the tests\ntest_pagination_radio_fasthtml_examples()\n\n\n&lt;div class=\"join\"&gt;\n  &lt;input type=\"radio\" name=\"options\" aria-label=\"1\" checked=\"checked\" class=\"join-item btn btn-square\"&gt;\n  &lt;input type=\"radio\" name=\"options\" aria-label=\"2\" class=\"join-item btn btn-square\"&gt;\n  &lt;input type=\"radio\" name=\"options\" aria-label=\"3\" class=\"join-item btn btn-square\"&gt;\n  &lt;input type=\"radio\" name=\"options\" aria-label=\"4\" class=\"join-item btn btn-square\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_pagination_radio_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "pagination"
    ]
  },
  {
    "objectID": "components/navigation/menu.html",
    "href": "components/navigation/menu.html",
    "title": "menu",
    "section": "",
    "text": "Base Menu\n\n\nExported source\nmenu = SingleValueFactory(\"menu\", \"Base menu component for displaying a &lt;ul&gt; list of links vertically or horizontally\") # Base menu component\nmenu_title = SingleValueFactory(\"menu-title\", \"Menu title part for styling a &lt;li&gt; as a title\") # Menu title part\nmenu_dropdown = SingleValueFactory(\"menu-dropdown\", \"Menu dropdown part for the collapsible &lt;ul&gt; if you want to show it using JS\") # Menu dropdown part\nmenu_dropdown_toggle = SingleValueFactory(\"menu-dropdown-toggle\", \"Menu part for the toggle to show/hide the menu-dropdown using JS\") # Menu dropdown toggle part\n\n\n\n\nMenu Modifiers\n\n\nExported source\nmenu_modifiers = SimpleFactory(\n    {\n        \"disabled\": \"menu-disabled\",\n        \"active\": \"menu-active\",\n        \"focus\": \"menu-focus\",\n        \"dropdown-show\": \"menu-dropdown-show\"\n    },\n    \"Menu modifiers (disabled, active, focus, show dropdown)\"\n) # Menu modifiers\n\n\n\n\nMenu Sizes\n\n\nExported source\nmenu_sizes = enums_to_simple_factory(menu, [DaisyUINamedSize], \"Menu size variants from extra small to extra large\") # Menu size variants\n\n\n\n\nMenu Directions\n\n\nExported source\nmenu_directions = SimpleFactory(\n    {\n        \"vertical\": \"menu-vertical\",\n        \"horizontal\": \"menu-horizontal\",\n    },\n    \"Menu directions (vertical, horizontal)\"\n) # Menu directions\n\n\n\n\nMenu Test Examples\n\nsource\n\n\ntest_menu_basic_examples\n\n test_menu_basic_examples ()\n\nTest basic menu utilities.\n\n\nExported source\ndef test_menu_basic_examples():\n    \"\"\"Test basic menu utilities.\"\"\"\n    # Basic menu\n    assert str(menu) == \"menu\"\n    assert str(menu_title) == \"menu-title\"\n    assert str(menu_dropdown) == \"menu-dropdown\"\n    assert str(menu_dropdown_toggle) == \"menu-dropdown-toggle\"\n    \n    # menu with modifiers\n    assert str(menu.hover) == \"hover:menu\"\n    assert str(menu.md) == \"md:menu\"\n    assert str(menu.dark) == \"dark:menu\"\n\n# Run the tests\ntest_menu_basic_examples()\n\n\n\nsource\n\n\ntest_menu_modifiers_examples\n\n test_menu_modifiers_examples ()\n\nTest menu modifier utilities.\n\n\nExported source\ndef test_menu_modifiers_examples():\n    \"\"\"Test menu modifier utilities.\"\"\"\n    assert str(menu_modifiers.disabled) == \"menu-disabled\"\n    assert str(menu_modifiers.active) == \"menu-active\"\n    assert str(menu_modifiers.focus) == \"menu-focus\"\n    assert str(menu_modifiers.dropdown_show) == \"menu-dropdown-show\"\n\n# Run the tests\ntest_menu_modifiers_examples()\n\n\n\nsource\n\n\ntest_menu_sizes_examples\n\n test_menu_sizes_examples ()\n\nTest menu size variants.\n\n\nExported source\ndef test_menu_sizes_examples():\n    \"\"\"Test menu size variants.\"\"\"\n    assert str(menu_sizes.xs) == \"menu-xs\"\n    assert str(menu_sizes.sm) == \"menu-sm\"\n    assert str(menu_sizes.md) == \"menu-md\"\n    assert str(menu_sizes.lg) == \"menu-lg\"\n    assert str(menu_sizes.xl) == \"menu-xl\"\n    \n    # With responsive modifiers\n    assert str(menu_sizes.xs.sm) == \"sm:menu-xs\"\n    assert str(menu_sizes.lg.md) == \"md:menu-lg\"\n\n# Run the tests\ntest_menu_sizes_examples()\n\n\n\nsource\n\n\ntest_menu_directions_examples\n\n test_menu_directions_examples ()\n\nTest menu direction utilities.\n\n\nExported source\ndef test_menu_directions_examples():\n    \"\"\"Test menu direction utilities.\"\"\"\n    assert str(menu_directions.vertical) == \"menu-vertical\"\n    assert str(menu_directions.horizontal) == \"menu-horizontal\"\n\n# Run the tests\ntest_menu_directions_examples()\n\n\n\nsource\n\n\ntest_menu_basic_fasthtml_examples\n\n test_menu_basic_fasthtml_examples ()\n\nTest basic menu from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_basic_fasthtml_examples():\n    \"\"\"Test basic menu from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Basic menu\n    basic_menu = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(A(\"Item 2\", href=\"#\")),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify structure\n    assert basic_menu.tag == \"ul\"\n    assert \"menu\" in basic_menu.attrs['class']\n    assert \"bg-base-200\" in basic_menu.attrs['class']\n    assert \"rounded-box\" in basic_menu.attrs['class']\n    assert \"w-56\" in basic_menu.attrs['class']\n    \n    # Verify li elements\n    assert len(basic_menu.children) == 3\n    for i in range(3):\n        li = basic_menu.children[i]\n        assert li.tag == \"li\"\n        assert li.children[0].tag == \"a\"\n        assert li.children[0].attrs['href'] == \"#\"\n        assert li.children[0].children[0] == f\"Item {i + 1}\"\n    \n    return basic_menu\n\n# Run the tests\ntest_menu_basic_fasthtml_examples()\n\n\n&lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;  &lt;/li&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;  &lt;/li&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_menu_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_responsive_fasthtml_examples\n\n test_menu_responsive_fasthtml_examples ()\n\nTest responsive menu and horizontal menu from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_responsive_fasthtml_examples():\n    \"\"\"Test responsive menu and horizontal menu from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Div\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Responsive: vertical on small screen, horizontal on large screen\n    responsive_menu = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(A(\"Item 2\", href=\"#\")),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, menu_directions.vertical, menu_directions.horizontal.lg, bg_dui.base_200, rounded.box)\n    )\n    \n    # Verify structure\n    assert responsive_menu.tag == \"ul\"\n    assert \"menu\" in responsive_menu.attrs['class']\n    assert \"menu-vertical\" in responsive_menu.attrs['class']\n    assert \"lg:menu-horizontal\" in responsive_menu.attrs['class']\n    assert \"bg-base-200\" in responsive_menu.attrs['class']\n    assert \"rounded-box\" in responsive_menu.attrs['class']\n    \n    # Horizontal menu\n    horizontal_menu = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(A(\"Item 2\", href=\"#\")),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, menu_directions.horizontal, bg_dui.base_200)\n    )\n    \n    # Verify horizontal menu\n    assert horizontal_menu.tag == \"ul\"\n    assert \"menu\" in horizontal_menu.attrs['class']\n    assert \"menu-horizontal\" in horizontal_menu.attrs['class']\n    assert \"bg-base-200\" in horizontal_menu.attrs['class']\n    \n    return Div(responsive_menu, horizontal_menu)\n\n# Run the tests\ntest_menu_responsive_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"menu menu-vertical lg:menu-horizontal bg-base-200 rounded-box\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-horizontal bg-base-200\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_menu_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_icons_fasthtml_examples\n\n test_menu_icons_fasthtml_examples ()\n\nTest menu with icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_icons_fasthtml_examples():\n    \"\"\"Test menu with icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Span, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.spacing import m\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_sizes, badge_colors\n    from cjm_fasthtml_daisyui.components.feedback.tooltip import tooltip, tooltip_placement\n    \n    # Create reusable icons\n    home_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    info_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    stats_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._5, w._5),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Menu with icon only (vertical)\n    icon_only_menu = Ul(\n        Li(A(home_icon, href=\"#\")),\n        Li(A(info_icon, href=\"#\")),\n        Li(A(stats_icon, href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box)\n    )\n    \n    # Verify icon only menu\n    assert icon_only_menu.tag == \"ul\"\n    assert \"menu\" in icon_only_menu.attrs['class']\n    assert len(icon_only_menu.children) == 3\n    for i in range(3):\n        li = icon_only_menu.children[i]\n        assert li.tag == \"li\"\n        assert li.children[0].tag == \"a\"\n        assert li.children[0].children[0].tag == \"svg\"\n    \n    # Menu with icon only (horizontal)\n    icon_only_horizontal = Ul(\n        Li(A(home_icon, href=\"#\")),\n        Li(A(info_icon, href=\"#\")),\n        Li(A(stats_icon, href=\"#\")),\n        cls=combine_classes(menu, menu_directions.horizontal, bg_dui.base_200, rounded.box)\n    )\n    \n    # Verify horizontal icon menu\n    assert \"menu-horizontal\" in icon_only_horizontal.attrs['class']\n    \n    # Menu with icons and text\n    icons_with_text = Ul(\n        Li(A(home_icon, \"Item 2\", href=\"#\")),\n        Li(A(info_icon, \"Item 1\", href=\"#\")),\n        Li(A(stats_icon, \"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify icons with text\n    assert \"w-56\" in icons_with_text.attrs['class']\n    assert icons_with_text.children[0].children[0].children[0].tag == \"svg\"\n    assert icons_with_text.children[0].children[0].children[1] == \"Item 2\"\n    \n    # Menu with icons and badge (responsive)\n    icons_with_badge = Ul(\n        Li(\n            A(\n                home_icon,\n                \"Inbox\",\n                Span(\"99+\", cls=combine_classes(badge, badge_sizes.xs)),\n                href=\"#\"\n            )\n        ),\n        Li(\n            A(\n                info_icon,\n                \"Updates\",\n                Span(\"NEW\", cls=combine_classes(badge, badge_sizes.xs, badge_colors.warning)),\n                href=\"#\"\n            )\n        ),\n        Li(\n            A(\n                \"Stats\",\n                Span(cls=combine_classes(badge, badge_sizes.xs, badge_colors.info)),\n                href=\"#\"\n            )\n        ),\n        cls=combine_classes(menu, bg_dui.base_200, menu_directions.horizontal.lg, rounded.box)\n    )\n    \n    # Verify menu with badges\n    assert \"lg:menu-horizontal\" in icons_with_badge.attrs['class']\n    first_li = icons_with_badge.children[0]\n    assert first_li.children[0].children[0].tag == \"svg\"  # Icon\n    assert first_li.children[0].children[1] == \"Inbox\"  # Text\n    assert \"badge\" in first_li.children[0].children[2].attrs['class']  # Badge\n    assert first_li.children[0].children[2].children[0] == \"99+\"\n    \n    # Menu with icon only with tooltip\n    icon_with_tooltip = Ul(\n        Li(\n            A(\n                home_icon,\n                href=\"#\",\n                cls=combine_classes(tooltip, tooltip_placement.right),\n                data_tip=\"Home\"\n            )\n        ),\n        Li(\n            A(\n                info_icon,\n                href=\"#\",\n                cls=combine_classes(tooltip, tooltip_placement.right),\n                data_tip=\"Details\"\n            )\n        ),\n        Li(\n            A(\n                stats_icon,\n                href=\"#\",\n                cls=combine_classes(tooltip, tooltip_placement.right),\n                data_tip=\"Stats\"\n            )\n        ),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box)\n    )\n    \n    # Verify tooltips\n    assert icon_with_tooltip.children[0].children[0].attrs['data-tip'] == \"Home\"\n    assert \"tooltip\" in icon_with_tooltip.children[0].children[0].attrs['class']\n    assert \"tooltip-right\" in icon_with_tooltip.children[0].children[0].attrs['class']\n    \n    # Menu with icon only (horizontal) with tooltip\n    icon_horizontal_tooltip = Ul(\n        Li(\n            A(\n                home_icon,\n                href=\"#\",\n                cls=str(tooltip),\n                data_tip=\"Home\"\n            )\n        ),\n        Li(\n            A(\n                info_icon,\n                href=\"#\",\n                cls=str(tooltip),\n                data_tip=\"Details\"\n            )\n        ),\n        Li(\n            A(\n                stats_icon,\n                href=\"#\",\n                cls=str(tooltip),\n                data_tip=\"Stats\"\n            )\n        ),\n        cls=combine_classes(menu, menu_directions.horizontal, bg_dui.base_200, rounded.box, m.t._6)\n    )\n    \n    # Verify horizontal with tooltips\n    assert \"menu-horizontal\" in icon_horizontal_tooltip.attrs['class']\n    assert \"mt-6\" in icon_horizontal_tooltip.attrs['class']\n    assert icon_horizontal_tooltip.children[1].children[0].attrs['data-tip'] == \"Details\"\n    \n    return Div(\n        icon_only_menu,\n        icon_only_horizontal,\n        icons_with_text,\n        icons_with_badge,\n        icon_with_tooltip,\n        icon_horizontal_tooltip\n    )\n\n# Run the tests\ntest_menu_icons_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-horizontal bg-base-200 rounded-box\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Item 2&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 lg:menu-horizontal rounded-box\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Inbox&lt;span class=\"badge badge-xs\"&gt;99+&lt;/span&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Updates&lt;span class=\"badge badge-xs badge-warning\"&gt;NEW&lt;/span&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Stats&lt;span class=\"badge badge-xs badge-info\"&gt;&lt;/span&gt;&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\" data-tip=\"Home\" class=\"tooltip tooltip-right\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\" data-tip=\"Details\" class=\"tooltip tooltip-right\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\" data-tip=\"Stats\" class=\"tooltip tooltip-right\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-horizontal bg-base-200 rounded-box mt-6\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\" data-tip=\"Home\" class=\"tooltip\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\" data-tip=\"Details\" class=\"tooltip\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\" data-tip=\"Stats\" class=\"tooltip\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_menu_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_sizes_fasthtml_examples\n\n test_menu_sizes_fasthtml_examples ()\n\nTest menu sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_sizes_fasthtml_examples():\n    \"\"\"Test menu sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Extra small menu\n    xs_menu = Ul(\n        Li(A(\"Xsmall 1\", href=\"#\")),\n        Li(A(\"Xsmall 2\", href=\"#\")),\n        cls=combine_classes(menu, menu_sizes.xs, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify xs menu\n    assert xs_menu.tag == \"ul\"\n    assert \"menu\" in xs_menu.attrs['class']\n    assert \"menu-xs\" in xs_menu.attrs['class']\n    assert \"w-56\" in xs_menu.attrs['class']\n    assert xs_menu.children[0].children[0].children[0] == \"Xsmall 1\"\n    \n    # Small menu\n    sm_menu = Ul(\n        Li(A(\"Small 1\", href=\"#\")),\n        Li(A(\"Small 2\", href=\"#\")),\n        cls=combine_classes(menu, menu_sizes.sm, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify sm menu\n    assert \"menu-sm\" in sm_menu.attrs['class']\n    assert sm_menu.children[0].children[0].children[0] == \"Small 1\"\n    \n    # Medium menu\n    md_menu = Ul(\n        Li(A(\"Medium 1\", href=\"#\")),\n        Li(A(\"Medium 2\", href=\"#\")),\n        cls=combine_classes(menu, menu_sizes.md, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify md menu\n    assert \"menu-md\" in md_menu.attrs['class']\n    assert md_menu.children[0].children[0].children[0] == \"Medium 1\"\n    \n    # Large menu\n    lg_menu = Ul(\n        Li(A(\"Large 1\", href=\"#\")),\n        Li(A(\"Large 2\", href=\"#\")),\n        cls=combine_classes(menu, menu_sizes.lg, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify lg menu\n    assert \"menu-lg\" in lg_menu.attrs['class']\n    assert lg_menu.children[0].children[0].children[0] == \"Large 1\"\n    \n    # Extra large menu\n    xl_menu = Ul(\n        Li(A(\"Xlarge 1\", href=\"#\")),\n        Li(A(\"Xlarge 2\", href=\"#\")),\n        cls=combine_classes(menu, menu_sizes.xl, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify xl menu\n    assert \"menu-xl\" in xl_menu.attrs['class']\n    assert xl_menu.children[0].children[0].children[0] == \"Xlarge 1\"\n    \n    return Div(xs_menu, sm_menu, md_menu, lg_menu, xl_menu)\n\n# Run the tests\ntest_menu_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"menu menu-xs bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Xsmall 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Xsmall 2&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-sm bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Small 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Small 2&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-md bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Medium 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Medium 2&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-lg bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Large 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Large 2&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-xl bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Xlarge 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Xlarge 2&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_menu_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_with_title_fasthtml_examples\n\n test_menu_with_title_fasthtml_examples ()\n\nTest menu with title from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_with_title_fasthtml_examples():\n    \"\"\"Test menu with title from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, H2, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Menu with title\n    menu_with_title = Ul(\n        Li(\"Title\", cls=str(menu_title)),\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(A(\"Item 2\", href=\"#\")),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify menu with title\n    assert menu_with_title.tag == \"ul\"\n    assert \"menu\" in menu_with_title.attrs['class']\n    assert menu_with_title.children[0].tag == \"li\"\n    assert \"menu-title\" in menu_with_title.children[0].attrs['class']\n    assert menu_with_title.children[0].children[0] == \"Title\"\n    assert menu_with_title.children[1].children[0].children[0] == \"Item 1\"\n    \n    # Menu with title as a parent\n    menu_title_parent = Ul(\n        Li(\n            H2(\"Title\", cls=str(menu_title)),\n            Ul(\n                Li(A(\"Item 1\", href=\"#\")),\n                Li(A(\"Item 2\", href=\"#\")),\n                Li(A(\"Item 3\", href=\"#\"))\n            )\n        ),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify menu with title as parent\n    assert menu_title_parent.children[0].tag == \"li\"\n    assert menu_title_parent.children[0].children[0].tag == \"h2\"\n    assert \"menu-title\" in menu_title_parent.children[0].children[0].attrs['class']\n    assert menu_title_parent.children[0].children[0].children[0] == \"Title\"\n    assert menu_title_parent.children[0].children[1].tag == \"ul\"\n    assert len(menu_title_parent.children[0].children[1].children) == 3\n    \n    return Div(menu_with_title, menu_title_parent)\n\n# Run the tests\ntest_menu_with_title_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li class=\"menu-title\"&gt;Title&lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n      &lt;h2 class=\"menu-title\"&gt;Title&lt;/h2&gt;\n      &lt;ul&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_menu_with_title_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_submenu_fasthtml_examples\n\n test_menu_submenu_fasthtml_examples ()\n\nTest submenu examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_submenu_fasthtml_examples():\n    \"\"\"Test submenu examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Details, Summary, Span, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Basic submenu\n    basic_submenu = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(\n            A(\"Parent\", href=\"#\"),\n            Ul(\n                Li(A(\"Submenu 1\", href=\"#\")),\n                Li(A(\"Submenu 2\", href=\"#\")),\n                Li(\n                    A(\"Parent\", href=\"#\"),\n                    Ul(\n                        Li(A(\"Submenu 1\", href=\"#\")),\n                        Li(A(\"Submenu 2\", href=\"#\"))\n                    )\n                )\n            )\n        ),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify basic submenu structure\n    assert basic_submenu.tag == \"ul\"\n    assert \"menu\" in basic_submenu.attrs['class']\n    assert basic_submenu.children[1].children[0].children[0] == \"Parent\"\n    assert basic_submenu.children[1].children[1].tag == \"ul\"\n    assert len(basic_submenu.children[1].children[1].children) == 3\n    # Nested submenu\n    nested = basic_submenu.children[1].children[1].children[2]\n    assert nested.children[0].children[0] == \"Parent\"\n    assert nested.children[1].tag == \"ul\"\n    \n    # Collapsible submenu\n    collapsible_submenu = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(\n            Details(\n                Summary(\"Parent\"),\n                Ul(\n                    Li(A(\"Submenu 1\", href=\"#\")),\n                    Li(A(\"Submenu 2\", href=\"#\")),\n                    Li(\n                        Details(\n                            Summary(\"Parent\"),\n                            Ul(\n                                Li(A(\"Submenu 1\", href=\"#\")),\n                                Li(A(\"Submenu 2\", href=\"#\"))\n                            ),\n                            open=True\n                        )\n                    )\n                ),\n                open=True\n            )\n        ),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify collapsible submenu\n    assert collapsible_submenu.children[1].children[0].tag == \"details\"\n    assert collapsible_submenu.children[1].children[0].attrs['open'] == True\n    assert collapsible_submenu.children[1].children[0].children[0].tag == \"summary\"\n    assert collapsible_submenu.children[1].children[0].children[0].children[0] == \"Parent\"\n    \n    # Collapsible submenu with class names\n    dropdown_submenu = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(\n            Span(\"Parent\", cls=str(menu_dropdown_toggle)),\n            Ul(\n                Li(A(\"Submenu 1\", href=\"#\")),\n                Li(A(\"Submenu 2\", href=\"#\")),\n                cls=str(menu_dropdown)\n            )\n        ),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify dropdown submenu\n    assert dropdown_submenu.children[1].children[0].tag == \"span\"\n    assert \"menu-dropdown-toggle\" in dropdown_submenu.children[1].children[0].attrs['class']\n    assert dropdown_submenu.children[1].children[1].tag == \"ul\"\n    assert \"menu-dropdown\" in dropdown_submenu.children[1].children[1].attrs['class']\n    \n    # Collapsible submenu shown\n    dropdown_shown = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(\n            Span(\"Parent\", cls=combine_classes(menu_dropdown_toggle, menu_modifiers.dropdown_show)),\n            Ul(\n                Li(A(\"Submenu 1\", href=\"#\")),\n                Li(A(\"Submenu 2\", href=\"#\")),\n                cls=combine_classes(menu_dropdown, menu_modifiers.dropdown_show)\n            )\n        ),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify shown dropdown\n    assert \"menu-dropdown-show\" in dropdown_shown.children[1].children[0].attrs['class']\n    assert \"menu-dropdown-show\" in dropdown_shown.children[1].children[1].attrs['class']\n    \n    # Horizontal submenu\n    horizontal_submenu = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(\n            A(\"Parent\", href=\"#\"),\n            Ul(\n                Li(A(\"Submenu 1\", href=\"#\")),\n                Li(A(\"Submenu 2\", href=\"#\"))\n            )\n        ),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, menu_directions.horizontal, bg_dui.base_200, rounded.box)\n    )\n    \n    # Verify horizontal submenu\n    assert \"menu-horizontal\" in horizontal_submenu.attrs['class']\n    assert horizontal_submenu.children[1].children[0].children[0] == \"Parent\"\n    assert horizontal_submenu.children[1].children[1].tag == \"ul\"\n    \n    return Div(\n        basic_submenu,\n        collapsible_submenu,\n        dropdown_submenu,\n        dropdown_shown,\n        horizontal_submenu\n    )\n\n# Run the tests\ntest_menu_submenu_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Parent&lt;/a&gt;      &lt;ul&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Parent&lt;/a&gt;          &lt;ul&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;            &lt;/li&gt;\n            &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;            &lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;details open&gt;&lt;summary&gt;Parent&lt;/summary&gt;        &lt;ul&gt;\n          &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;          &lt;/li&gt;\n          &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;          &lt;/li&gt;\n          &lt;li&gt;\n&lt;details open&gt;&lt;summary&gt;Parent&lt;/summary&gt;              &lt;ul&gt;\n                &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;                &lt;/li&gt;\n                &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;                &lt;/li&gt;\n              &lt;/ul&gt;\n&lt;/details&gt;          &lt;/li&gt;\n        &lt;/ul&gt;\n&lt;/details&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;span class=\"menu-dropdown-toggle\"&gt;Parent&lt;/span&gt;      &lt;ul class=\"menu-dropdown\"&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;span class=\"menu-dropdown-toggle menu-dropdown-show\"&gt;Parent&lt;/span&gt;      &lt;ul class=\"menu-dropdown menu-dropdown-show\"&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu menu-horizontal bg-base-200 rounded-box\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Parent&lt;/a&gt;      &lt;ul&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_menu_submenu_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_states_fasthtml_examples\n\n test_menu_states_fasthtml_examples ()\n\nTest menu states and modifiers from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_states_fasthtml_examples():\n    \"\"\"Test menu states and modifiers from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Menu with disabled items\n    menu_with_disabled = Ul(\n        Li(A(\"Enabled item\", href=\"#\")),\n        Li(A(\"disabled item\", href=\"#\"), cls=str(menu_modifiers.disabled)),\n        Li(A(\"disabled item\", href=\"#\"), cls=str(menu_modifiers.disabled)),\n        cls=combine_classes(menu, bg_dui.base_200, rounded.box, w._56)\n    )\n    \n    # Verify disabled items\n    assert menu_with_disabled.tag == \"ul\"\n    assert \"menu\" in menu_with_disabled.attrs['class']\n    assert menu_with_disabled.children[0].children[0].children[0] == \"Enabled item\"\n    assert \"menu-disabled\" in menu_with_disabled.children[1].attrs['class']\n    assert \"menu-disabled\" in menu_with_disabled.children[2].attrs['class']\n    \n    # Menu with active item\n    menu_with_active = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(A(\"Item 2\", href=\"#\", cls=str(menu_modifiers.active))),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, w._56)\n    )\n    \n    # Verify active item\n    assert \"menu\" in menu_with_active.attrs['class']\n    assert menu_with_active.children[1].children[0].tag == \"a\"\n    assert \"menu-active\" in menu_with_active.children[1].children[0].attrs['class']\n    assert menu_with_active.children[1].children[0].children[0] == \"Item 2\"\n    \n    # Menu without padding and border radius (using arbitrary selector)\n    menu_no_padding = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(A(\"Item 2\", href=\"#\")),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, bg_dui.base_200, w._56, \"[&_li&gt;*]:rounded-none\", p._0)\n    )\n    \n    # Verify no padding menu\n    assert \"p-0\" in menu_no_padding.attrs['class']\n    assert \"[&_li&gt;*]:rounded-none\" in menu_no_padding.attrs['class']\n    \n    return Div(menu_with_disabled, menu_with_active, menu_no_padding)\n\n# Run the tests\ntest_menu_states_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"menu bg-base-200 rounded-box w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Enabled item&lt;/a&gt;    &lt;/li&gt;\n    &lt;li class=\"menu-disabled\"&gt;\n&lt;a href=\"#\"&gt;disabled item&lt;/a&gt;    &lt;/li&gt;\n    &lt;li class=\"menu-disabled\"&gt;\n&lt;a href=\"#\"&gt;disabled item&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 w-56\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\" class=\"menu-active\"&gt;Item 2&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"menu bg-base-200 w-56 [&amp;_li&gt;*]:rounded-none p-0\"&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 2&lt;/a&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_menu_states_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_file_tree_fasthtml_examples\n\n test_menu_file_tree_fasthtml_examples ()\n\nTest file tree menu from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_file_tree_fasthtml_examples():\n    \"\"\"Test file tree menu from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Details, Summary\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w, max_w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Create reusable icons\n    file_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._4, w._4),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\"\n    )\n    \n    folder_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._4, w._4),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\"\n    )\n    \n    image_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(h._4, w._4),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\"\n    )\n    \n    # File tree menu\n    file_tree = Ul(\n        Li(A(file_icon, \"resume.pdf\", href=\"#\")),\n        Li(\n            Details(\n                Summary(folder_icon, \"My Files\"),\n                Ul(\n                    Li(A(file_icon, \"Project-final.psd\", href=\"#\")),\n                    Li(A(file_icon, \"Project-final-2.psd\", href=\"#\")),\n                    Li(\n                        Details(\n                            Summary(folder_icon, \"Images\"),\n                            Ul(\n                                Li(A(image_icon, \"Screenshot1.png\", href=\"#\")),\n                                Li(A(image_icon, \"Screenshot2.png\", href=\"#\")),\n                                Li(\n                                    Details(\n                                        Summary(folder_icon, \"Others\"),\n                                        Ul(\n                                            Li(A(image_icon, \"Screenshot3.png\", href=\"#\"))\n                                        ),\n                                        open=True\n                                    )\n                                )\n                            ),\n                            open=True\n                        )\n                    )\n                ),\n                open=True\n            )\n        ),\n        Li(A(file_icon, \"reports-final-2.pdf\", href=\"#\")),\n        cls=combine_classes(menu, menu_sizes.xs, bg_dui.base_200, rounded.box, max_w.xs, w.full)\n    )\n    \n    # Verify structure\n    assert file_tree.tag == \"ul\"\n    assert \"menu\" in file_tree.attrs['class']\n    assert \"menu-xs\" in file_tree.attrs['class']\n    assert \"max-w-xs\" in file_tree.attrs['class']\n    assert \"w-full\" in file_tree.attrs['class']\n    \n    # Verify top-level items\n    assert len(file_tree.children) == 3\n    assert file_tree.children[0].children[0].children[0].tag == \"svg\"  # file icon\n    assert file_tree.children[0].children[0].children[1] == \"resume.pdf\"\n    \n    # Verify nested folder structure\n    my_files = file_tree.children[1].children[0]\n    assert my_files.tag == \"details\"\n    assert my_files.attrs['open'] == True\n    assert my_files.children[0].tag == \"summary\"\n    assert my_files.children[0].children[0].tag == \"svg\"  # folder icon\n    assert my_files.children[0].children[1] == \"My Files\"\n    \n    # Verify nested files\n    my_files_list = my_files.children[1]\n    assert my_files_list.tag == \"ul\"\n    assert len(my_files_list.children) == 3\n    assert my_files_list.children[0].children[0].children[1] == \"Project-final.psd\"\n    assert my_files_list.children[1].children[0].children[1] == \"Project-final-2.psd\"\n    \n    # Verify images folder\n    images_folder = my_files_list.children[2].children[0]\n    assert images_folder.tag == \"details\"\n    assert images_folder.attrs['open'] == True\n    assert images_folder.children[0].children[1] == \"Images\"\n    \n    # Verify images list\n    images_list = images_folder.children[1]\n    assert images_list.tag == \"ul\"\n    assert len(images_list.children) == 3\n    assert images_list.children[0].children[0].children[1] == \"Screenshot1.png\"\n    assert images_list.children[1].children[0].children[1] == \"Screenshot2.png\"\n    \n    # Verify Others subfolder\n    others_folder = images_list.children[2].children[0]\n    assert others_folder.tag == \"details\"\n    assert others_folder.children[0].children[1] == \"Others\"\n    others_list = others_folder.children[1]\n    assert others_list.children[0].children[0].children[1] == \"Screenshot3.png\"\n    \n    # Verify last file\n    assert file_tree.children[2].children[0].children[1] == \"reports-final-2.pdf\"\n    \n    return file_tree\n\n# Run the tests\ntest_menu_file_tree_fasthtml_examples()\n\n\n&lt;ul class=\"menu menu-xs bg-base-200 rounded-box max-w-xs w-full\"&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;resume.pdf&lt;/a&gt;  &lt;/li&gt;\n  &lt;li&gt;\n&lt;details open&gt;&lt;summary&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;My Files&lt;/summary&gt;      &lt;ul&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Project-final.psd&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Project-final-2.psd&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;details open&gt;&lt;summary&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Images&lt;/summary&gt;            &lt;ul&gt;\n              &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Screenshot1.png&lt;/a&gt;              &lt;/li&gt;\n              &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Screenshot2.png&lt;/a&gt;              &lt;/li&gt;\n              &lt;li&gt;\n&lt;details open&gt;&lt;summary&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Others&lt;/summary&gt;                  &lt;ul&gt;\n                    &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Screenshot3.png&lt;/a&gt;                    &lt;/li&gt;\n                  &lt;/ul&gt;\n&lt;/details&gt;              &lt;/li&gt;\n            &lt;/ul&gt;\n&lt;/details&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n&lt;/details&gt;  &lt;/li&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"h-4 w-4\"&gt;&lt;path d=\"M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;reports-final-2.pdf&lt;/a&gt;  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_menu_file_tree_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_mega_menu_fasthtml_examples\n\n test_menu_mega_menu_fasthtml_examples ()\n\nTest mega menu with submenu (responsive) from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_mega_menu_fasthtml_examples():\n    \"\"\"Test mega menu with submenu (responsive) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.sizing import min_w\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Mega menu with submenu (responsive)\n    mega_menu = Ul(\n        Li(\n            A(\"Solutions\", href=\"#\"),\n            Ul(\n                Li(A(\"Design\", href=\"#\")),\n                Li(A(\"Development\", href=\"#\")),\n                Li(A(\"Hosting\", href=\"#\")),\n                Li(A(\"Domain register\", href=\"#\"))\n            )\n        ),\n        Li(\n            A(\"Enterprise\", href=\"#\"),\n            Ul(\n                Li(A(\"CRM software\", href=\"#\")),\n                Li(A(\"Marketing management\", href=\"#\")),\n                Li(A(\"Security\", href=\"#\")),\n                Li(A(\"Consulting\", href=\"#\"))\n            )\n        ),\n        Li(\n            A(\"Products\", href=\"#\"),\n            Ul(\n                Li(A(\"UI Kit\", href=\"#\")),\n                Li(A(\"WordPress themes\", href=\"#\")),\n                Li(A(\"WordPress plugins\", href=\"#\")),\n                Li(\n                    A(\"Open source\", href=\"#\"),\n                    Ul(\n                        Li(A(\"Auth management system\", href=\"#\")),\n                        Li(A(\"VScode theme\", href=\"#\")),\n                        Li(A(\"Color picker app\", href=\"#\"))\n                    )\n                )\n            )\n        ),\n        Li(\n            A(\"Company\", href=\"#\"),\n            Ul(\n                Li(A(\"About us\", href=\"#\")),\n                Li(A(\"Contact us\", href=\"#\")),\n                Li(A(\"Privacy policy\", href=\"#\")),\n                Li(A(\"Press kit\", href=\"#\"))\n            )\n        ),\n        cls=combine_classes(menu, menu_directions.horizontal.xl, bg_dui.base_200, rounded.box, min_w.max.lg)\n    )\n    \n    # Verify structure\n    assert mega_menu.tag == \"ul\"\n    assert \"menu\" in mega_menu.attrs['class']\n    assert \"xl:menu-horizontal\" in mega_menu.attrs['class']\n    assert \"lg:min-w-max\" in mega_menu.attrs['class']\n    assert \"bg-base-200\" in mega_menu.attrs['class']\n    assert \"rounded-box\" in mega_menu.attrs['class']\n    \n    # Verify main menu items\n    assert len(mega_menu.children) == 4\n    assert mega_menu.children[0].children[0].children[0] == \"Solutions\"\n    assert mega_menu.children[1].children[0].children[0] == \"Enterprise\"\n    assert mega_menu.children[2].children[0].children[0] == \"Products\"\n    assert mega_menu.children[3].children[0].children[0] == \"Company\"\n    \n    # Verify Solutions submenu\n    solutions_submenu = mega_menu.children[0].children[1]\n    assert solutions_submenu.tag == \"ul\"\n    assert len(solutions_submenu.children) == 4\n    assert solutions_submenu.children[0].children[0].children[0] == \"Design\"\n    assert solutions_submenu.children[1].children[0].children[0] == \"Development\"\n    assert solutions_submenu.children[2].children[0].children[0] == \"Hosting\"\n    assert solutions_submenu.children[3].children[0].children[0] == \"Domain register\"\n    \n    # Verify Enterprise submenu\n    enterprise_submenu = mega_menu.children[1].children[1]\n    assert len(enterprise_submenu.children) == 4\n    assert enterprise_submenu.children[0].children[0].children[0] == \"CRM software\"\n    assert enterprise_submenu.children[1].children[0].children[0] == \"Marketing management\"\n    \n    # Verify Products submenu with nested submenu\n    products_submenu = mega_menu.children[2].children[1]\n    assert len(products_submenu.children) == 4\n    assert products_submenu.children[0].children[0].children[0] == \"UI Kit\"\n    assert products_submenu.children[3].children[0].children[0] == \"Open source\"\n    \n    # Verify nested Open source submenu\n    open_source_submenu = products_submenu.children[3].children[1]\n    assert open_source_submenu.tag == \"ul\"\n    assert len(open_source_submenu.children) == 3\n    assert open_source_submenu.children[0].children[0].children[0] == \"Auth management system\"\n    assert open_source_submenu.children[1].children[0].children[0] == \"VScode theme\"\n    assert open_source_submenu.children[2].children[0].children[0] == \"Color picker app\"\n    \n    # Verify Company submenu\n    company_submenu = mega_menu.children[3].children[1]\n    assert len(company_submenu.children) == 4\n    assert company_submenu.children[0].children[0].children[0] == \"About us\"\n    assert company_submenu.children[3].children[0].children[0] == \"Press kit\"\n    \n    return mega_menu\n\n# Run the tests\ntest_menu_mega_menu_fasthtml_examples()\n\n\n&lt;ul class=\"menu xl:menu-horizontal bg-base-200 rounded-box lg:min-w-max\"&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Solutions&lt;/a&gt;    &lt;ul&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Design&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Development&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Hosting&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Domain register&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Enterprise&lt;/a&gt;    &lt;ul&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;CRM software&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Marketing management&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Security&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Consulting&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Products&lt;/a&gt;    &lt;ul&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;UI Kit&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;WordPress themes&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;WordPress plugins&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Open source&lt;/a&gt;        &lt;ul&gt;\n          &lt;li&gt;\n&lt;a href=\"#\"&gt;Auth management system&lt;/a&gt;          &lt;/li&gt;\n          &lt;li&gt;\n&lt;a href=\"#\"&gt;VScode theme&lt;/a&gt;          &lt;/li&gt;\n          &lt;li&gt;\n&lt;a href=\"#\"&gt;Color picker app&lt;/a&gt;          &lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Company&lt;/a&gt;    &lt;ul&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;About us&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Contact us&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Privacy policy&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Press kit&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_menu_mega_menu_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_menu_collapsible_responsive_fasthtml_examples\n\n test_menu_collapsible_responsive_fasthtml_examples ()\n\nTest collapsible with submenu (responsive) from daisyUI v5 documentation.\n\n\nExported source\ndef test_menu_collapsible_responsive_fasthtml_examples():\n    \"\"\"Test collapsible with submenu (responsive) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Details, Summary\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.spacing import m\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Collapsible with submenu (responsive)\n    collapsible_responsive = Ul(\n        Li(A(\"Item 1\", href=\"#\")),\n        Li(\n            Details(\n                Summary(\"Parent item\"),\n                Ul(\n                    Li(A(\"Submenu 1\", href=\"#\")),\n                    Li(A(\"Submenu 2\", href=\"#\")),\n                    Li(\n                        Details(\n                            Summary(\"Parent\"),\n                            Ul(\n                                Li(A(\"item 1\", href=\"#\")),\n                                Li(A(\"item 2\", href=\"#\"))\n                            ),\n                            open=True\n                        )\n                    )\n                ),\n                open=True\n            )\n        ),\n        Li(A(\"Item 3\", href=\"#\")),\n        cls=combine_classes(menu, menu_directions.horizontal.lg, bg_dui.base_200, rounded.box, m.b._64.lg)\n    )\n    \n    # Verify structure\n    assert collapsible_responsive.tag == \"ul\"\n    assert \"menu\" in collapsible_responsive.attrs['class']\n    assert \"lg:menu-horizontal\" in collapsible_responsive.attrs['class']\n    assert \"bg-base-200\" in collapsible_responsive.attrs['class']\n    assert \"rounded-box\" in collapsible_responsive.attrs['class']\n    assert \"lg:mb-64\" in collapsible_responsive.attrs['class']\n    \n    # Verify main items\n    assert len(collapsible_responsive.children) == 3\n    assert collapsible_responsive.children[0].children[0].children[0] == \"Item 1\"\n    assert collapsible_responsive.children[2].children[0].children[0] == \"Item 3\"\n    \n    # Verify parent item with details\n    parent_details = collapsible_responsive.children[1].children[0]\n    assert parent_details.tag == \"details\"\n    assert parent_details.attrs['open'] == True\n    assert parent_details.children[0].tag == \"summary\"\n    assert parent_details.children[0].children[0] == \"Parent item\"\n    \n    # Verify parent submenu\n    parent_submenu = parent_details.children[1]\n    assert parent_submenu.tag == \"ul\"\n    assert len(parent_submenu.children) == 3\n    assert parent_submenu.children[0].children[0].children[0] == \"Submenu 1\"\n    assert parent_submenu.children[1].children[0].children[0] == \"Submenu 2\"\n    \n    # Verify nested parent details\n    nested_parent = parent_submenu.children[2].children[0]\n    assert nested_parent.tag == \"details\"\n    assert nested_parent.attrs['open'] == True\n    assert nested_parent.children[0].tag == \"summary\"\n    assert nested_parent.children[0].children[0] == \"Parent\"\n    \n    # Verify nested submenu\n    nested_submenu = nested_parent.children[1]\n    assert nested_submenu.tag == \"ul\"\n    assert len(nested_submenu.children) == 2\n    assert nested_submenu.children[0].children[0].children[0] == \"item 1\"\n    assert nested_submenu.children[1].children[0].children[0] == \"item 2\"\n    \n    return collapsible_responsive\n\n# Run the tests\ntest_menu_collapsible_responsive_fasthtml_examples()\n\n\n&lt;ul class=\"menu lg:menu-horizontal bg-base-200 rounded-box lg:mb-64\"&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 1&lt;/a&gt;  &lt;/li&gt;\n  &lt;li&gt;\n&lt;details open&gt;&lt;summary&gt;Parent item&lt;/summary&gt;      &lt;ul&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 1&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;a href=\"#\"&gt;Submenu 2&lt;/a&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;details open&gt;&lt;summary&gt;Parent&lt;/summary&gt;            &lt;ul&gt;\n              &lt;li&gt;\n&lt;a href=\"#\"&gt;item 1&lt;/a&gt;              &lt;/li&gt;\n              &lt;li&gt;\n&lt;a href=\"#\"&gt;item 2&lt;/a&gt;              &lt;/li&gt;\n            &lt;/ul&gt;\n&lt;/details&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n&lt;/details&gt;  &lt;/li&gt;\n  &lt;li&gt;\n&lt;a href=\"#\"&gt;Item 3&lt;/a&gt;  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_menu_collapsible_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "menu"
    ]
  },
  {
    "objectID": "components/mockup/browser.html",
    "href": "components/mockup/browser.html",
    "title": "browser mockup",
    "section": "",
    "text": "Base Browser Mockup\n\n\nExported source\nmockup_browser = SingleValueFactory(\"mockup-browser\", \"Base browser mockup component\") # Base mockup browser component\nmockup_browser_toolbar = SingleValueFactory(\"mockup-browser-toolbar\", \"Toolbar part which can include addressbar, etc\") # Base mockup browser toolbar part\n\n\n\n\nBrowser Mockup Test Examples\n\nsource\n\n\ntest_mockup_browser_basic_examples\n\n test_mockup_browser_basic_examples ()\n\nTest basic mockup_browser utilities.\n\n\nExported source\ndef test_mockup_browser_basic_examples():\n    \"\"\"Test basic mockup_browser utilities.\"\"\"\n    # Basic mockup_browser\n    assert str(mockup_browser) == \"mockup-browser\"\n    assert str(mockup_browser_toolbar) == \"mockup-browser-toolbar\"\n    \n    # Test with modifiers\n    assert str(mockup_browser.hover) == \"hover:mockup-browser\"\n    assert str(mockup_browser.md) == \"md:mockup-browser\"\n    assert str(mockup_browser.dark) == \"dark:mockup-browser\"\n\n# Run the tests\ntest_mockup_browser_basic_examples()\n\n\n\nsource\n\n\ntest_browser_mockup_with_border_fasthtml_examples\n\n test_browser_mockup_with_border_fasthtml_examples ()\n\nTest browser mockup with border from daisyUI v5 documentation.\n\n\nExported source\ndef test_browser_mockup_with_border_fasthtml_examples():\n    \"\"\"Test browser mockup with border from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import border_dui\n    \n    # Browser mockup with border\n    browser_with_border = Div(\n        Div(\n            Div(\"https://daisyui.com\", cls=str(text_input)),\n            cls=str(mockup_browser_toolbar)\n        ),\n        Div(\n            \"Hello!\",\n            cls=combine_classes(grid_display, place_content.center, border.t(), border_dui.base_300, h._80)\n        ),\n        cls=combine_classes(mockup_browser, border_dui.base_300, border(), w.full)\n    )\n    \n    # Verify structure\n    assert browser_with_border.tag == \"div\"\n    assert \"mockup-browser\" in browser_with_border.attrs['class']\n    assert \"border-base-300\" in browser_with_border.attrs['class']\n    assert \"border\" in browser_with_border.attrs['class']\n    assert \"w-full\" in browser_with_border.attrs['class']\n    \n    # Verify toolbar\n    toolbar = browser_with_border.children[0]\n    assert toolbar.tag == \"div\"\n    assert toolbar.attrs['class'] == \"mockup-browser-toolbar\"\n    \n    # Verify address bar (input div)\n    address_bar = toolbar.children[0]\n    assert address_bar.tag == \"div\"\n    assert address_bar.attrs['class'] == \"input\"\n    assert address_bar.children[0] == \"https://daisyui.com\"\n    \n    # Verify content area\n    content = browser_with_border.children[1]\n    assert content.tag == \"div\"\n    assert \"grid\" in content.attrs['class']\n    assert \"place-content-center\" in content.attrs['class']\n    assert \"border-t\" in content.attrs['class']\n    assert \"border-base-300\" in content.attrs['class']\n    assert \"h-80\" in content.attrs['class']\n    assert content.children[0] == \"Hello!\"\n    \n    return browser_with_border\n\n# Run the tests\ntest_browser_mockup_with_border_fasthtml_examples()\n\n\n&lt;div class=\"mockup-browser border-base-300 border w-full\"&gt;\n  &lt;div class=\"mockup-browser-toolbar\"&gt;\n    &lt;div class=\"input\"&gt;https://daisyui.com&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"grid place-content-center border-t border-base-300 h-80\"&gt;Hello!&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_browser_mockup_with_border_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_browser_mockup_with_background_fasthtml_examples\n\n test_browser_mockup_with_background_fasthtml_examples ()\n\nTest browser mockup with background color from daisyUI v5 documentation.\n\n\nExported source\ndef test_browser_mockup_with_background_fasthtml_examples():\n    \"\"\"Test browser mockup with background color from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import border_dui\n    \n    # Browser mockup with background color (no border-t on content)\n    browser_with_background = Div(\n        Div(\n            Div(\"https://daisyui.com\", cls=str(text_input)),\n            cls=str(mockup_browser_toolbar)\n        ),\n        Div(\n            \"Hello!\",\n            cls=combine_classes(grid_display, place_content.center, h._80)\n        ),\n        cls=combine_classes(mockup_browser, border(), border_dui.base_300, w.full)\n    )\n    \n    # Verify structure\n    assert browser_with_background.tag == \"div\"\n    assert \"mockup-browser\" in browser_with_background.attrs['class']\n    assert \"border\" in browser_with_background.attrs['class']\n    assert \"border-base-300\" in browser_with_background.attrs['class']\n    assert \"w-full\" in browser_with_background.attrs['class']\n    \n    # Verify toolbar\n    toolbar = browser_with_background.children[0]\n    assert toolbar.tag == \"div\"\n    assert toolbar.attrs['class'] == \"mockup-browser-toolbar\"\n    \n    # Verify address bar (input div)\n    address_bar = toolbar.children[0]\n    assert address_bar.tag == \"div\"\n    assert address_bar.attrs['class'] == \"input\"\n    assert address_bar.children[0] == \"https://daisyui.com\"\n    \n    # Verify content area (no border-t)\n    content = browser_with_background.children[1]\n    assert content.tag == \"div\"\n    assert \"grid\" in content.attrs['class']\n    assert \"place-content-center\" in content.attrs['class']\n    assert \"h-80\" in content.attrs['class']\n    assert \"border-t\" not in content.attrs['class']  # Key difference - no border-t\n    assert content.children[0] == \"Hello!\"\n    \n    return browser_with_background\n\n# Run the tests\ntest_browser_mockup_with_background_fasthtml_examples()\n\n\n&lt;div class=\"mockup-browser border border-base-300 w-full\"&gt;\n  &lt;div class=\"mockup-browser-toolbar\"&gt;\n    &lt;div class=\"input\"&gt;https://daisyui.com&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"grid place-content-center h-80\"&gt;Hello!&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_browser_mockup_with_background_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "mockup",
      "browser mockup"
    ]
  },
  {
    "objectID": "components/mockup/code.html",
    "href": "components/mockup/code.html",
    "title": "code mockup",
    "section": "",
    "text": "Base Code Mockup\n\n\nExported source\nmockup_code = SingleValueFactory(\"mockup-code\", \"Base code terminal mockup\") # Base mockup code component\n\n\n\n\nCode Mockup Test Examples\n\nsource\n\n\ntest_mockup_code_basic_examples\n\n test_mockup_code_basic_examples ()\n\nTest basic mockup_code utilities.\n\n\nExported source\ndef test_mockup_code_basic_examples():\n    \"\"\"Test basic mockup_code utilities.\"\"\"\n    # Basic mockup_code\n    assert str(mockup_code) == \"mockup-code\"\n    \n    # Test with modifiers\n    assert str(mockup_code.hover) == \"hover:mockup-code\"\n    assert str(mockup_code.md) == \"md:mockup-code\"\n    assert str(mockup_code.dark) == \"dark:mockup-code\"\n\n# Run the tests\ntest_mockup_code_basic_examples()\n\n\n\nsource\n\n\ntest_mockup_code_with_line_prefix_fasthtml_examples\n\n test_mockup_code_with_line_prefix_fasthtml_examples ()\n\nTest mockup code with line prefix from daisyUI v5 documentation.\n\n\nExported source\ndef test_mockup_code_with_line_prefix_fasthtml_examples():\n    \"\"\"Test mockup code with line prefix from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Pre, Code\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Mockup code with line prefix\n    code_with_prefix = Div(\n        Pre(\n            Code(\"npm i daisyui\"),\n            data_prefix=\"\"\n        ),\n        cls=combine_classes(mockup_code, w.full)\n    )\n    \n    # Verify structure\n    assert code_with_prefix.tag == \"div\"\n    assert \"mockup-code\" in code_with_prefix.attrs['class']\n    assert \"w-full\" in code_with_prefix.attrs['class']\n    \n    # Verify pre element\n    pre_element = code_with_prefix.children[0]\n    assert pre_element.tag == \"pre\"\n    assert pre_element.attrs['data-prefix'] == \"\"\n    \n    # Verify code element\n    code_element = pre_element.children[0]\n    assert code_element.tag == \"code\"\n    assert code_element.children[0] == \"npm i daisyui\"\n    \n    return code_with_prefix\n\n# Run the tests\ntest_mockup_code_with_line_prefix_fasthtml_examples()\n\n\n&lt;div class=\"mockup-code w-full\"&gt;\n&lt;pre&gt;&lt;code&gt;npm i daisyui&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mockup_code_with_line_prefix_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mockup_code_multi_line_fasthtml_examples\n\n test_mockup_code_multi_line_fasthtml_examples ()\n\nTest multi-line mockup code from daisyUI v5 documentation.\n\n\nExported source\ndef test_mockup_code_multi_line_fasthtml_examples():\n    \"\"\"Test multi-line mockup code from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Pre, Code\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    \n    # Multi-line mockup code\n    multi_line_code = Div(\n        Pre(Code(\"npm i daisyui\"), data_prefix=\"\"),\n        Pre(Code(\"installing...\"), data_prefix=\"&gt;\", cls=str(text_dui.warning)),\n        Pre(Code(\"Done!\"), data_prefix=\"&gt;\", cls=str(text_dui.success)),\n        cls=combine_classes(mockup_code, w.full)\n    )\n    \n    # Verify structure\n    assert multi_line_code.tag == \"div\"\n    assert \"mockup-code\" in multi_line_code.attrs['class']\n    assert \"w-full\" in multi_line_code.attrs['class']\n    assert len(multi_line_code.children) == 3\n    \n    # Verify first pre element\n    first_pre = multi_line_code.children[0]\n    assert first_pre.tag == \"pre\"\n    assert first_pre.attrs['data-prefix'] == \"\"\n    assert first_pre.children[0].tag == \"code\"\n    assert first_pre.children[0].children[0] == \"npm i daisyui\"\n    \n    # Verify second pre element with warning color\n    second_pre = multi_line_code.children[1]\n    assert second_pre.tag == \"pre\"\n    assert second_pre.attrs['data-prefix'] == \"&gt;\"\n    assert second_pre.attrs['class'] == \"text-warning\"\n    assert second_pre.children[0].tag == \"code\"\n    assert second_pre.children[0].children[0] == \"installing...\"\n    \n    # Verify third pre element with success color\n    third_pre = multi_line_code.children[2]\n    assert third_pre.tag == \"pre\"\n    assert third_pre.attrs['data-prefix'] == \"&gt;\"\n    assert third_pre.attrs['class'] == \"text-success\"\n    assert third_pre.children[0].tag == \"code\"\n    assert third_pre.children[0].children[0] == \"Done!\"\n    \n    return multi_line_code\n\n# Run the tests\ntest_mockup_code_multi_line_fasthtml_examples()\n\n\n&lt;div class=\"mockup-code w-full\"&gt;\n&lt;pre&gt;&lt;code&gt;npm i daisyui&lt;/code&gt;&lt;/pre&gt;&lt;pre data-prefix=\"&gt;\" class=\"text-warning\"&gt;&lt;code&gt;installing...&lt;/code&gt;&lt;/pre&gt;&lt;pre data-prefix=\"&gt;\" class=\"text-success\"&gt;&lt;code&gt;Done!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mockup_code_multi_line_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mockup_code_highlighted_line_fasthtml_examples\n\n test_mockup_code_highlighted_line_fasthtml_examples ()\n\nTest mockup code with highlighted line from daisyUI v5 documentation.\n\n\nExported source\ndef test_mockup_code_highlighted_line_fasthtml_examples():\n    \"\"\"Test mockup code with highlighted line from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Pre, Code\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Mockup code with highlighted line\n    highlighted_code = Div(\n        Pre(Code(\"npm i daisyui\"), data_prefix=\"1\"),\n        Pre(Code(\"installing...\"), data_prefix=\"2\"),\n        Pre(Code(\"Error!\"), data_prefix=\"3\", cls=combine_classes(bg_dui.warning, text_dui.warning_content)),\n        cls=combine_classes(mockup_code, w.full)\n    )\n    \n    # Verify structure\n    assert highlighted_code.tag == \"div\"\n    assert \"mockup-code\" in highlighted_code.attrs['class']\n    assert \"w-full\" in highlighted_code.attrs['class']\n    assert len(highlighted_code.children) == 3\n    \n    # Verify first pre element with line number\n    first_pre = highlighted_code.children[0]\n    assert first_pre.tag == \"pre\"\n    assert first_pre.attrs['data-prefix'] == \"1\"\n    assert first_pre.children[0].tag == \"code\"\n    assert first_pre.children[0].children[0] == \"npm i daisyui\"\n    \n    # Verify second pre element with line number\n    second_pre = highlighted_code.children[1]\n    assert second_pre.tag == \"pre\"\n    assert second_pre.attrs['data-prefix'] == \"2\"\n    assert second_pre.children[0].tag == \"code\"\n    assert second_pre.children[0].children[0] == \"installing...\"\n    \n    # Verify third pre element with highlighting\n    third_pre = highlighted_code.children[2]\n    assert third_pre.tag == \"pre\"\n    assert third_pre.attrs['data-prefix'] == \"3\"\n    assert \"bg-warning\" in third_pre.attrs['class']\n    assert \"text-warning-content\" in third_pre.attrs['class']\n    assert third_pre.children[0].tag == \"code\"\n    assert third_pre.children[0].children[0] == \"Error!\"\n    \n    return highlighted_code\n\n# Run the tests\ntest_mockup_code_highlighted_line_fasthtml_examples()\n\n\n&lt;div class=\"mockup-code w-full\"&gt;\n&lt;pre data-prefix=\"1\"&gt;&lt;code&gt;npm i daisyui&lt;/code&gt;&lt;/pre&gt;&lt;pre data-prefix=\"2\"&gt;&lt;code&gt;installing...&lt;/code&gt;&lt;/pre&gt;&lt;pre data-prefix=\"3\" class=\"bg-warning text-warning-content\"&gt;&lt;code&gt;Error!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mockup_code_highlighted_line_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mockup_code_long_line_fasthtml_examples\n\n test_mockup_code_long_line_fasthtml_examples ()\n\nTest mockup code with long line that will scroll from daisyUI v5 documentation.\n\n\nExported source\ndef test_mockup_code_long_line_fasthtml_examples():\n    \"\"\"Test mockup code with long line that will scroll from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Pre, Code\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Mockup code with long line\n    long_line_code = Div(\n        Pre(\n            Code(\"Magnam dolore beatae necessitatibus nemopsum itaque sit. Et porro quae qui et et dolore ratione.\"),\n            data_prefix=\"~\"\n        ),\n        cls=combine_classes(mockup_code, w.full)\n    )\n    \n    # Verify structure\n    assert long_line_code.tag == \"div\"\n    assert \"mockup-code\" in long_line_code.attrs['class']\n    assert \"w-full\" in long_line_code.attrs['class']\n    \n    # Verify pre element with tilde prefix\n    pre_element = long_line_code.children[0]\n    assert pre_element.tag == \"pre\"\n    assert pre_element.attrs['data-prefix'] == \"~\"\n    \n    # Verify code element with long text\n    code_element = pre_element.children[0]\n    assert code_element.tag == \"code\"\n    assert code_element.children[0] == \"Magnam dolore beatae necessitatibus nemopsum itaque sit. Et porro quae qui et et dolore ratione.\"\n    \n    return long_line_code\n\n# Run the tests\ntest_mockup_code_long_line_fasthtml_examples()\n\n\n&lt;div class=\"mockup-code w-full\"&gt;\n&lt;pre data-prefix=\"~\"&gt;&lt;code&gt;Magnam dolore beatae necessitatibus nemopsum itaque sit. Et porro quae qui et et dolore ratione.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mockup_code_long_line_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mockup_code_without_prefix_fasthtml_examples\n\n test_mockup_code_without_prefix_fasthtml_examples ()\n\nTest mockup code without prefix from daisyUI v5 documentation.\n\n\nExported source\ndef test_mockup_code_without_prefix_fasthtml_examples():\n    \"\"\"Test mockup code without prefix from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Pre, Code\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Mockup code without prefix\n    no_prefix_code = Div(\n        Pre(Code(\"without prefix\")),\n        cls=combine_classes(mockup_code, w.full)\n    )\n    \n    # Verify structure\n    assert no_prefix_code.tag == \"div\"\n    assert \"mockup-code\" in no_prefix_code.attrs['class']\n    assert \"w-full\" in no_prefix_code.attrs['class']\n    \n    # Verify pre element (no data-prefix attribute)\n    pre_element = no_prefix_code.children[0]\n    assert pre_element.tag == \"pre\"\n    assert 'data-prefix' not in pre_element.attrs\n    \n    # Verify code element\n    code_element = pre_element.children[0]\n    assert code_element.tag == \"code\"\n    assert code_element.children[0] == \"without prefix\"\n    \n    return no_prefix_code\n\n# Run the tests\ntest_mockup_code_without_prefix_fasthtml_examples()\n\n\n&lt;div class=\"mockup-code w-full\"&gt;\n&lt;pre&gt;&lt;code&gt;without prefix&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mockup_code_without_prefix_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mockup_code_with_color_fasthtml_examples\n\n test_mockup_code_with_color_fasthtml_examples ()\n\nTest mockup code with custom color from daisyUI v5 documentation.\n\n\nExported source\ndef test_mockup_code_with_color_fasthtml_examples():\n    \"\"\"Test mockup code with custom color from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Pre, Code\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Mockup code with custom color\n    colored_code = Div(\n        Pre(Code(\"can be any color!\")),\n        cls=combine_classes(mockup_code, bg_dui.primary, text_dui.primary_content, w.full)\n    )\n    \n    # Verify structure\n    assert colored_code.tag == \"div\"\n    assert \"mockup-code\" in colored_code.attrs['class']\n    assert \"bg-primary\" in colored_code.attrs['class']\n    assert \"text-primary-content\" in colored_code.attrs['class']\n    assert \"w-full\" in colored_code.attrs['class']\n    \n    # Verify pre element\n    pre_element = colored_code.children[0]\n    assert pre_element.tag == \"pre\"\n    assert 'data-prefix' not in pre_element.attrs\n    \n    # Verify code element\n    code_element = pre_element.children[0]\n    assert code_element.tag == \"code\"\n    assert code_element.children[0] == \"can be any color!\"\n    \n    return colored_code\n\n# Run the tests\ntest_mockup_code_with_color_fasthtml_examples()\n\n\n&lt;div class=\"mockup-code bg-primary text-primary-content w-full\"&gt;\n&lt;pre&gt;&lt;code&gt;can be any color!&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mockup_code_with_color_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "mockup",
      "code mockup"
    ]
  },
  {
    "objectID": "components/feedback/toast.html",
    "href": "components/feedback/toast.html",
    "title": "toast",
    "section": "",
    "text": "Base Toast\n\n\nExported source\ntoast = SingleValueFactory(\"toast\", \"Container element that sticks to the corner of page\") # Base toast component\n\n\n\n\nToast Placement\n\nsource\n\n\nToastPlacement\n\n ToastPlacement (value, names=None, module=None, qualname=None, type=None,\n                 start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nToast Test Examples\n\nsource\n\n\ntest_toast_basic_examples\n\n test_toast_basic_examples ()\n\nTest basic toast utilities.\n\n\nExported source\ndef test_toast_basic_examples():\n    \"\"\"Test basic toast utilities.\"\"\"\n    # Basic toast\n    assert str(toast) == \"toast\"\n    \n    # Test with modifiers\n    assert str(toast.hover) == \"hover:toast\"\n    assert str(toast.md) == \"md:toast\"\n    assert str(toast.dark) == \"dark:toast\"\n\n# Run the tests\ntest_toast_basic_examples()\n\n\n\nsource\n\n\ntest_toast_placement_examples\n\n test_toast_placement_examples ()\n\nTest toast placement options.\n\n\nExported source\ndef test_toast_placement_examples():\n    \"\"\"Test toast placement options.\"\"\"\n    # Horizontal alignment\n    assert str(toast_placement.start) == \"toast-start\"\n    assert str(toast_placement.center) == \"toast-center\"\n    assert str(toast_placement.end) == \"toast-end\"\n    \n    # Vertical position\n    assert str(toast_placement.top) == \"toast-top\"\n    assert str(toast_placement.middle) == \"toast-middle\"\n    assert str(toast_placement.bottom) == \"toast-bottom\"\n\n# Run the tests\ntest_toast_placement_examples()\n\n\n\nsource\n\n\ntest_toast_basic_fasthtml_examples\n\n test_toast_basic_fasthtml_examples ()\n\nTest basic toast with alert inside from daisyUI v5 documentation.\n\n\nExported source\ndef test_toast_basic_fasthtml_examples():\n    \"\"\"Test basic toast with alert inside from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors\n    \n    # Basic toast with alert inside\n    basic_toast = Div(\n        Div(\n            Span(\"New message arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        cls=str(toast)\n    )\n    \n    # Verify structure\n    assert basic_toast.tag == \"div\"\n    assert basic_toast.attrs['class'] == \"toast\"\n    \n    # Verify alert inside toast\n    alert_element = basic_toast.children[0]\n    assert alert_element.tag == \"div\"\n    assert \"alert\" in alert_element.attrs['class']\n    assert \"alert-info\" in alert_element.attrs['class']\n    \n    # Verify alert content\n    assert alert_element.children[0].tag == \"span\"\n    assert alert_element.children[0].children[0] == \"New message arrived.\"\n    \n    return basic_toast\n\n# Run the tests\ntest_toast_basic_fasthtml_examples()\n\n\n&lt;div class=\"toast\"&gt;\n  &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New message arrived.&lt;/span&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toast_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toast_top_positions_fasthtml_examples\n\n test_toast_top_positions_fasthtml_examples ()\n\nTest toast positioning at top (start, center, end) from daisyUI v5 documentation.\n\n\nExported source\ndef test_toast_top_positions_fasthtml_examples():\n    \"\"\"Test toast positioning at top (start, center, end) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n    from cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors\n    \n    # Toast top start\n    toast_top_start = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.top, toast_placement.start)\n    )\n    \n    # Verify structure\n    assert toast_top_start.tag == \"div\"\n    assert \"toast\" in toast_top_start.attrs['class']\n    assert \"toast-top\" in toast_top_start.attrs['class']\n    assert \"toast-start\" in toast_top_start.attrs['class']\n    assert len(toast_top_start.children) == 2\n    \n    # Verify first alert\n    first_alert = toast_top_start.children[0]\n    assert \"alert\" in first_alert.attrs['class']\n    assert \"alert-info\" in first_alert.attrs['class']\n    assert first_alert.children[0].children[0] == \"New mail arrived.\"\n    \n    # Verify second alert\n    second_alert = toast_top_start.children[1]\n    assert \"alert\" in second_alert.attrs['class']\n    assert \"alert-success\" in second_alert.attrs['class']\n    assert second_alert.children[0].children[0] == \"Message sent successfully.\"\n    \n    # Toast top center\n    toast_top_center = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.top, toast_placement.center)\n    )\n    \n    assert \"toast\" in toast_top_center.attrs['class']\n    assert \"toast-top\" in toast_top_center.attrs['class']\n    assert \"toast-center\" in toast_top_center.attrs['class']\n    \n    # Toast top end\n    toast_top_end = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.top, toast_placement.end)\n    )\n    \n    assert \"toast\" in toast_top_end.attrs['class']\n    assert \"toast-top\" in toast_top_end.attrs['class']\n    assert \"toast-end\" in toast_top_end.attrs['class']\n    \n    # Return all top position variations\n    return Div(\n        toast_top_start,\n        toast_top_center,\n        toast_top_end,\n        cls=combine_classes(min_h(48))\n    )\n\n# Run the tests\ntest_toast_top_positions_fasthtml_examples()\n\n\n&lt;div class=\"min-h-48\"&gt;\n  &lt;div class=\"toast toast-top toast-start\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"toast toast-top toast-center\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"toast toast-top toast-end\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toast_top_positions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toast_middle_positions_fasthtml_examples\n\n test_toast_middle_positions_fasthtml_examples ()\n\nTest toast positioning at middle (start, center, end) from daisyUI v5 documentation.\n\n\nExported source\ndef test_toast_middle_positions_fasthtml_examples():\n    \"\"\"Test toast positioning at middle (start, center, end) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n    from cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors\n    \n    # Toast start middle\n    toast_start_middle = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.start, toast_placement.middle)\n    )\n    \n    # Verify structure\n    assert toast_start_middle.tag == \"div\"\n    assert \"toast\" in toast_start_middle.attrs['class']\n    assert \"toast-start\" in toast_start_middle.attrs['class']\n    assert \"toast-middle\" in toast_start_middle.attrs['class']\n    assert len(toast_start_middle.children) == 2\n    \n    # Verify alerts\n    assert \"alert-info\" in toast_start_middle.children[0].attrs['class']\n    assert toast_start_middle.children[0].children[0].children[0] == \"New mail arrived.\"\n    assert \"alert-success\" in toast_start_middle.children[1].attrs['class']\n    assert toast_start_middle.children[1].children[0].children[0] == \"Message sent successfully.\"\n    \n    # Toast center middle\n    toast_center_middle = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.center, toast_placement.middle)\n    )\n    \n    assert \"toast\" in toast_center_middle.attrs['class']\n    assert \"toast-center\" in toast_center_middle.attrs['class']\n    assert \"toast-middle\" in toast_center_middle.attrs['class']\n    \n    # Toast end middle\n    toast_end_middle = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.end, toast_placement.middle)\n    )\n    \n    assert \"toast\" in toast_end_middle.attrs['class']\n    assert \"toast-end\" in toast_end_middle.attrs['class']\n    assert \"toast-middle\" in toast_end_middle.attrs['class']\n    \n    # Return all middle position variations\n    return Div(\n        toast_start_middle,\n        toast_center_middle,\n        toast_end_middle,\n        cls=combine_classes(min_h(48))\n    )\n\n# Run the tests\ntest_toast_middle_positions_fasthtml_examples()\n\n\n&lt;div class=\"min-h-48\"&gt;\n  &lt;div class=\"toast toast-start toast-middle\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"toast toast-center toast-middle\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"toast toast-end toast-middle\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toast_middle_positions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toast_bottom_positions_fasthtml_examples\n\n test_toast_bottom_positions_fasthtml_examples ()\n\nTest toast positioning at bottom (start, center, end) from daisyUI v5 documentation.\n\n\nExported source\ndef test_toast_bottom_positions_fasthtml_examples():\n    \"\"\"Test toast positioning at bottom (start, center, end) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h\n    from cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors\n    \n    # Toast start bottom (default)\n    toast_start_bottom = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.start)\n    )\n    \n    # Verify structure - note that bottom is default, so no toast-bottom class\n    assert toast_start_bottom.tag == \"div\"\n    assert \"toast\" in toast_start_bottom.attrs['class']\n    assert \"toast-start\" in toast_start_bottom.attrs['class']\n    # Bottom is default, so toast-bottom is not needed\n    assert len(toast_start_bottom.children) == 2\n    \n    # Verify alerts\n    assert \"alert-info\" in toast_start_bottom.children[0].attrs['class']\n    assert toast_start_bottom.children[0].children[0].children[0] == \"New mail arrived.\"\n    assert \"alert-success\" in toast_start_bottom.children[1].attrs['class']\n    assert toast_start_bottom.children[1].children[0].children[0] == \"Message sent successfully.\"\n    \n    # Toast center bottom (default)\n    toast_center_bottom = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.center)\n    )\n    \n    assert \"toast\" in toast_center_bottom.attrs['class']\n    assert \"toast-center\" in toast_center_bottom.attrs['class']\n    # Bottom is default, so toast-bottom is not needed\n    \n    # Toast end bottom (both are defaults)\n    toast_end_bottom = Div(\n        Div(\n            Span(\"New mail arrived.\"),\n            cls=combine_classes(alert, alert_colors.info)\n        ),\n        Div(\n            Span(\"Message sent successfully.\"),\n            cls=combine_classes(alert, alert_colors.success)\n        ),\n        cls=combine_classes(toast, toast_placement.end)\n    )\n    \n    assert \"toast\" in toast_end_bottom.attrs['class']\n    assert \"toast-end\" in toast_end_bottom.attrs['class']\n    # Bottom is default, so toast-bottom is not needed\n    \n    # Return all bottom position variations\n    return Div(\n        toast_start_bottom,\n        toast_center_bottom,\n        toast_end_bottom,\n        cls=combine_classes(min_h(48))\n    )\n\n# Run the tests\ntest_toast_bottom_positions_fasthtml_examples()\n\n\n&lt;div class=\"min-h-48\"&gt;\n  &lt;div class=\"toast toast-start\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"toast toast-center\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"toast toast-end\"&gt;\n    &lt;div class=\"alert alert-info\"&gt;\n&lt;span&gt;New mail arrived.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div class=\"alert alert-success\"&gt;\n&lt;span&gt;Message sent successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toast_bottom_positions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "feedback",
      "toast"
    ]
  },
  {
    "objectID": "components/feedback/alert.html",
    "href": "components/feedback/alert.html",
    "title": "alert",
    "section": "",
    "text": "Base Alert\n\n\nExported source\nalert = SingleValueFactory(\"alert\", \"Base alert container\") # Base alert component\n\n\n\n\nAlert Styles\n\n\nExported source\nalert_styles = enums_to_simple_factory(alert, [OutlineStyle, DashStyle, SoftStyle]) # Alert style variants\n\n\n\n\nAlert Colors\n\n\nExported source\nalert_colors = enums_to_simple_factory(alert, [SemanticColorStatus], \"Alert color variants using daisyUI semantic colors\") # Alert color variants\n\n\n\n\nAlert Directions\n\n\nExported source\nalert_directions = SimpleFactory(\n    {\n        \"vertical\": \"alert-vertical\",\n        \"horizontal\": \"alert-horizontal\",\n    },\n    \"alert directions (vertical, horizontal)\"\n) # alert directions\n\n\n\n\nAlert Test Examples\n\nsource\n\n\ntest_alert_basic_examples\n\n test_alert_basic_examples ()\n\nTest basic alert utilities.\n\n\nExported source\ndef test_alert_basic_examples():\n    \"\"\"Test basic alert utilities.\"\"\"\n    # Basic alert\n    assert str(alert) == \"alert\"\n    \n    # Button with modifiers\n    assert str(alert.hover) == \"hover:alert\"\n    assert str(alert.md) == \"md:alert\"\n    assert str(alert.dark) == \"dark:alert\"\n\n# Run the tests\ntest_alert_basic_examples()\n\n\n\nsource\n\n\ntest_alert_styles_examples\n\n test_alert_styles_examples ()\n\nTest alert style variants.\n\n\nExported source\ndef test_alert_styles_examples():\n    \"\"\"Test alert style variants.\"\"\"\n    assert str(alert_styles.outline) == \"alert-outline\"\n    assert str(alert_styles.dash) == \"alert-dash\"\n    assert str(alert_styles.soft) == \"alert-soft\"\n\n# Run the tests\ntest_alert_styles_examples()\n\n\n\nsource\n\n\ntest_alert_colors_examples\n\n test_alert_colors_examples ()\n\nTest alert color variants.\n\n\nExported source\ndef test_alert_colors_examples():\n    \"\"\"Test alert color variants.\"\"\"\n    # All color variants\n    assert str(alert_colors.info) == \"alert-info\"\n    assert str(alert_colors.success) == \"alert-success\"\n    assert str(alert_colors.warning) == \"alert-warning\"\n    assert str(alert_colors.error) == \"alert-error\"\n    \n    # With modifiers\n    assert str(alert_colors.info.hover) == \"hover:alert-info\"\n    assert str(alert_colors.success.focus) == \"focus:alert-success\"\n\n# Run the tests\ntest_alert_colors_examples()\n\n\n\nsource\n\n\ntest_alert_directions_examples\n\n test_alert_directions_examples ()\n\nTest alert direction utilities.\n\n\nExported source\ndef test_alert_directions_examples():\n    \"\"\"Test alert direction utilities.\"\"\"\n    assert str(alert_directions.vertical) == \"alert-vertical\"\n    assert str(alert_directions.horizontal) == \"alert-horizontal\"\n\n# Run the tests\ntest_alert_directions_examples()\n\n\n\nsource\n\n\ntest_alert_basic_fasthtml_examples\n\n test_alert_basic_fasthtml_examples ()\n\nTest basic alert example from daisyUI v5 documentation.\n\n\nExported source\ndef test_alert_basic_fasthtml_examples():\n    \"\"\"Test basic alert example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import shrink\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import stroke_dui\n    \n    # Basic alert\n    basic_alert = Div(\n        Svg(\n            Path(\n                stroke_linecap=\"round\",\n                stroke_linejoin=\"round\",\n                stroke_width=\"2\",\n                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n            ),\n            xmlns=\"http://www.w3.org/2000/svg\",\n            fill=\"none\",\n            viewBox=\"0 0 24 24\",\n            cls=combine_classes(stroke_dui.info, h._6, w._6, shrink._0)\n        ),\n        Span(\"12 unread messages. Tap to see.\"),\n        role=\"alert\",\n        cls=str(alert)\n    )\n    \n    # Verify structure\n    assert basic_alert.tag == \"div\"\n    assert basic_alert.attrs['role'] == \"alert\"\n    assert basic_alert.attrs['class'] == \"alert\"\n    \n    # Verify SVG icon\n    svg_element = basic_alert.children[0]\n    assert svg_element.tag == \"svg\"\n    assert \"stroke-info\" in svg_element.attrs['class']\n    assert \"h-6\" in svg_element.attrs['class']\n    assert \"w-6\" in svg_element.attrs['class']\n    assert \"shrink-0\" in svg_element.attrs['class']\n    \n    # Verify text span\n    span_element = basic_alert.children[1]\n    assert span_element.tag == \"span\"\n    assert span_element.children[0] == \"12 unread messages. Tap to see.\"\n    \n    return basic_alert\n\n# Run the tests\ntest_alert_basic_fasthtml_examples()\n\n\n&lt;div role=\"alert\" class=\"alert\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"stroke-info h-6 w-6 shrink-0\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;12 unread messages. Tap to see.&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_alert_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_alert_colors_fasthtml_examples\n\n test_alert_colors_fasthtml_examples ()\n\nTest alert color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_alert_colors_fasthtml_examples():\n    \"\"\"Test alert color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import shrink\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    \n    # Create reusable icons\n    info_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(h._6, w._6, shrink._0, stroke.current)\n    )\n    \n    success_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(h._6, w._6, shrink._0, stroke.current)\n    )\n    \n    warning_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(h._6, w._6, shrink._0, stroke.current)\n    )\n    \n    error_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(h._6, w._6, shrink._0, stroke.current)\n    )\n    \n    # Info alert\n    info_alert = Div(\n        info_icon,\n        Span(\"New software update available.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.info)\n    )\n    assert info_alert.attrs['role'] == \"alert\"\n    assert \"alert\" in info_alert.attrs['class']\n    assert \"alert-info\" in info_alert.attrs['class']\n    assert info_alert.children[1].children[0] == \"New software update available.\"\n    \n    # Success alert\n    success_alert = Div(\n        success_icon,\n        Span(\"Your purchase has been confirmed!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.success)\n    )\n    assert \"alert\" in success_alert.attrs['class']\n    assert \"alert-success\" in success_alert.attrs['class']\n    assert success_alert.children[1].children[0] == \"Your purchase has been confirmed!\"\n    \n    # Warning alert\n    warning_alert = Div(\n        warning_icon,\n        Span(\"Warning: Invalid email address!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.warning)\n    )\n    assert \"alert\" in warning_alert.attrs['class']\n    assert \"alert-warning\" in warning_alert.attrs['class']\n    assert warning_alert.children[1].children[0] == \"Warning: Invalid email address!\"\n    \n    # Error alert\n    error_alert = Div(\n        error_icon,\n        Span(\"Error! Task failed successfully.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.error)\n    )\n    assert \"alert\" in error_alert.attrs['class']\n    assert \"alert-error\" in error_alert.attrs['class']\n    assert error_alert.children[1].children[0] == \"Error! Task failed successfully.\"\n    \n    # Return all alerts in a Div\n    return Div(\n        info_alert,\n        success_alert,\n        warning_alert,\n        error_alert\n    )\n\n# Run the tests\ntest_alert_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div role=\"alert\" class=\"alert alert-info\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"h-6 w-6 shrink-0 stroke-current\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;New software update available.&lt;/span&gt;  &lt;/div&gt;\n  &lt;div role=\"alert\" class=\"alert alert-success\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"h-6 w-6 shrink-0 stroke-current\"&gt;&lt;path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Your purchase has been confirmed!&lt;/span&gt;  &lt;/div&gt;\n  &lt;div role=\"alert\" class=\"alert alert-warning\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"h-6 w-6 shrink-0 stroke-current\"&gt;&lt;path d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Warning: Invalid email address!&lt;/span&gt;  &lt;/div&gt;\n  &lt;div role=\"alert\" class=\"alert alert-error\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"h-6 w-6 shrink-0 stroke-current\"&gt;&lt;path d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Error! Task failed successfully.&lt;/span&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_alert_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_alert_styles_fasthtml_examples\n\n test_alert_styles_fasthtml_examples ()\n\nTest alert style variations (soft, outline, dash) from daisyUI v5 documentation.\n\n\nExported source\ndef test_alert_styles_fasthtml_examples():\n    \"\"\"Test alert style variations (soft, outline, dash) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    \n    # Alert soft style\n    soft_info = Div(\n        Span(\"12 unread messages. Tap to see.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.info, alert_styles.soft)\n    )\n    assert \"alert\" in soft_info.attrs['class']\n    assert \"alert-info\" in soft_info.attrs['class']\n    assert \"alert-soft\" in soft_info.attrs['class']\n    \n    soft_success = Div(\n        Span(\"Your purchase has been confirmed!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.success, alert_styles.soft)\n    )\n    assert \"alert-success\" in soft_success.attrs['class']\n    assert \"alert-soft\" in soft_success.attrs['class']\n    \n    soft_warning = Div(\n        Span(\"Warning: Invalid email address!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.warning, alert_styles.soft)\n    )\n    assert \"alert-warning\" in soft_warning.attrs['class']\n    assert \"alert-soft\" in soft_warning.attrs['class']\n    \n    soft_error = Div(\n        Span(\"Error! Task failed successfully.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.error, alert_styles.soft)\n    )\n    assert \"alert-error\" in soft_error.attrs['class']\n    assert \"alert-soft\" in soft_error.attrs['class']\n    \n    # Alert outline style\n    outline_info = Div(\n        Span(\"12 unread messages. Tap to see.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.info, alert_styles.outline)\n    )\n    assert \"alert\" in outline_info.attrs['class']\n    assert \"alert-info\" in outline_info.attrs['class']\n    assert \"alert-outline\" in outline_info.attrs['class']\n    \n    outline_success = Div(\n        Span(\"Your purchase has been confirmed!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.success, alert_styles.outline)\n    )\n    assert \"alert-success\" in outline_success.attrs['class']\n    assert \"alert-outline\" in outline_success.attrs['class']\n    \n    outline_warning = Div(\n        Span(\"Warning: Invalid email address!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.warning, alert_styles.outline)\n    )\n    assert \"alert-warning\" in outline_warning.attrs['class']\n    assert \"alert-outline\" in outline_warning.attrs['class']\n    \n    outline_error = Div(\n        Span(\"Error! Task failed successfully.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.error, alert_styles.outline)\n    )\n    assert \"alert-error\" in outline_error.attrs['class']\n    assert \"alert-outline\" in outline_error.attrs['class']\n    \n    # Alert dash style\n    dash_info = Div(\n        Span(\"12 unread messages. Tap to see.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.info, alert_styles.dash)\n    )\n    assert \"alert\" in dash_info.attrs['class']\n    assert \"alert-info\" in dash_info.attrs['class']\n    assert \"alert-dash\" in dash_info.attrs['class']\n    \n    dash_success = Div(\n        Span(\"Your purchase has been confirmed!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.success, alert_styles.dash)\n    )\n    assert \"alert-success\" in dash_success.attrs['class']\n    assert \"alert-dash\" in dash_success.attrs['class']\n    \n    dash_warning = Div(\n        Span(\"Warning: Invalid email address!\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.warning, alert_styles.dash)\n    )\n    assert \"alert-warning\" in dash_warning.attrs['class']\n    assert \"alert-dash\" in dash_warning.attrs['class']\n    \n    dash_error = Div(\n        Span(\"Error! Task failed successfully.\"),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_colors.error, alert_styles.dash)\n    )\n    assert \"alert-error\" in dash_error.attrs['class']\n    assert \"alert-dash\" in dash_error.attrs['class']\n    \n    # Return all style variations in a Div\n    return Div(\n        # Soft style alerts\n        Div(soft_info, soft_success, soft_warning, soft_error),\n        # Outline style alerts\n        Div(outline_info, outline_success, outline_warning, outline_error),\n        # Dash style alerts\n        Div(dash_info, dash_success, dash_warning, dash_error)\n    )\n\n# Run the tests\ntest_alert_styles_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-info alert-soft\"&gt;\n&lt;span&gt;12 unread messages. Tap to see.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-success alert-soft\"&gt;\n&lt;span&gt;Your purchase has been confirmed!&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-warning alert-soft\"&gt;\n&lt;span&gt;Warning: Invalid email address!&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-error alert-soft\"&gt;\n&lt;span&gt;Error! Task failed successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-info alert-outline\"&gt;\n&lt;span&gt;12 unread messages. Tap to see.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-success alert-outline\"&gt;\n&lt;span&gt;Your purchase has been confirmed!&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-warning alert-outline\"&gt;\n&lt;span&gt;Warning: Invalid email address!&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-error alert-outline\"&gt;\n&lt;span&gt;Error! Task failed successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-info alert-dash\"&gt;\n&lt;span&gt;12 unread messages. Tap to see.&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-success alert-dash\"&gt;\n&lt;span&gt;Your purchase has been confirmed!&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-warning alert-dash\"&gt;\n&lt;span&gt;Warning: Invalid email address!&lt;/span&gt;    &lt;/div&gt;\n    &lt;div role=\"alert\" class=\"alert alert-error alert-dash\"&gt;\n&lt;span&gt;Error! Task failed successfully.&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_alert_styles_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_alert_with_buttons_fasthtml_examples\n\n test_alert_with_buttons_fasthtml_examples ()\n\nTest alert with buttons and responsive layout from daisyUI v5 documentation.\n\n\nExported source\ndef test_alert_with_buttons_fasthtml_examples():\n    \"\"\"Test alert with buttons and responsive layout from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span, Button\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import shrink\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import stroke_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_colors\n    \n    # Create reusable info icon\n    info_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(stroke_dui.info, h._6, w._6, shrink._0)\n    )\n    \n    # Alert with buttons + responsive (vertical on mobile, horizontal on sm+)\n    responsive_alert = Div(\n        info_icon,\n        Span(\"we use cookies for no reason.\"),\n        Div(\n            Button(\"Deny\", cls=combine_classes(btn, btn_sizes.sm)),\n            Button(\"Accept\", cls=combine_classes(btn, btn_sizes.sm, btn_colors.primary))\n        ),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_directions.vertical, alert_directions.horizontal.sm)\n    )\n    \n    # Verify structure\n    assert responsive_alert.tag == \"div\"\n    assert responsive_alert.attrs['role'] == \"alert\"\n    assert \"alert\" in responsive_alert.attrs['class']\n    assert \"alert-vertical\" in responsive_alert.attrs['class']\n    assert \"sm:alert-horizontal\" in responsive_alert.attrs['class']\n    \n    # Verify icon\n    assert responsive_alert.children[0].tag == \"svg\"\n    assert \"stroke-info\" in responsive_alert.children[0].attrs['class']\n    \n    # Verify text\n    assert responsive_alert.children[1].tag == \"span\"\n    assert responsive_alert.children[1].children[0] == \"we use cookies for no reason.\"\n    \n    # Verify button container\n    button_container = responsive_alert.children[2]\n    assert button_container.tag == \"div\"\n    assert len(button_container.children) == 2\n    \n    # Verify deny button\n    deny_button = button_container.children[0]\n    assert deny_button.tag == \"button\"\n    assert \"btn\" in deny_button.attrs['class']\n    assert \"btn-sm\" in deny_button.attrs['class']\n    assert deny_button.children[0] == \"Deny\"\n    \n    # Verify accept button\n    accept_button = button_container.children[1]\n    assert accept_button.tag == \"button\"\n    assert \"btn\" in accept_button.attrs['class']\n    assert \"btn-sm\" in accept_button.attrs['class']\n    assert \"btn-primary\" in accept_button.attrs['class']\n    assert accept_button.children[0] == \"Accept\"\n    \n    return responsive_alert\n\n# Run the tests\ntest_alert_with_buttons_fasthtml_examples()\n\n\n&lt;div role=\"alert\" class=\"alert alert-vertical sm:alert-horizontal\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"stroke-info h-6 w-6 shrink-0\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;we use cookies for no reason.&lt;/span&gt;  &lt;div&gt;\n&lt;button class=\"btn btn-sm\"&gt;Deny&lt;/button&gt;&lt;button class=\"btn btn-sm btn-primary\"&gt;Accept&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_alert_with_buttons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_alert_with_title_description_fasthtml_examples\n\n test_alert_with_title_description_fasthtml_examples ()\n\nTest alert with title and description from daisyUI v5 documentation.\n\n\nExported source\ndef test_alert_with_title_description_fasthtml_examples():\n    \"\"\"Test alert with title and description from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H3, Button\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import shrink\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import stroke_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes\n    \n    # Create reusable info icon\n    info_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(stroke_dui.info, h._6, w._6, shrink._0)\n    )\n    \n    # Alert with title and description\n    title_desc_alert = Div(\n        info_icon,\n        Div(\n            H3(\"New message!\", cls=str(font_weight.bold)),\n            Div(\"You have 1 unread message\", cls=str(font_size.xs))\n        ),\n        Button(\"See\", cls=combine_classes(btn, btn_sizes.sm)),\n        role=\"alert\",\n        cls=combine_classes(alert, alert_directions.vertical, alert_directions.horizontal.sm)\n    )\n    \n    # Verify structure\n    assert title_desc_alert.tag == \"div\"\n    assert title_desc_alert.attrs['role'] == \"alert\"\n    assert \"alert\" in title_desc_alert.attrs['class']\n    assert \"alert-vertical\" in title_desc_alert.attrs['class']\n    assert \"sm:alert-horizontal\" in title_desc_alert.attrs['class']\n    \n    # Verify icon\n    assert title_desc_alert.children[0].tag == \"svg\"\n    assert \"stroke-info\" in title_desc_alert.children[0].attrs['class']\n    \n    # Verify content container\n    content_container = title_desc_alert.children[1]\n    assert content_container.tag == \"div\"\n    assert len(content_container.children) == 2\n    \n    # Verify title\n    title_element = content_container.children[0]\n    assert title_element.tag == \"h3\"\n    assert \"font-bold\" in title_element.attrs['class']\n    assert title_element.children[0] == \"New message!\"\n    \n    # Verify description\n    desc_element = content_container.children[1]\n    assert desc_element.tag == \"div\"\n    assert \"text-xs\" in desc_element.attrs['class']\n    assert desc_element.children[0] == \"You have 1 unread message\"\n    \n    # Verify button\n    see_button = title_desc_alert.children[2]\n    assert see_button.tag == \"button\"\n    assert \"btn\" in see_button.attrs['class']\n    assert \"btn-sm\" in see_button.attrs['class']\n    assert see_button.children[0] == \"See\"\n    \n    return title_desc_alert\n\n# Run the tests\ntest_alert_with_title_description_fasthtml_examples()\n\n\n&lt;div role=\"alert\" class=\"alert alert-vertical sm:alert-horizontal\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"stroke-info h-6 w-6 shrink-0\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;  &lt;div&gt;\n    &lt;h3 class=\"font-bold\"&gt;New message!&lt;/h3&gt;\n    &lt;div class=\"text-xs\"&gt;You have 1 unread message&lt;/div&gt;\n  &lt;/div&gt;\n&lt;button class=\"btn btn-sm\"&gt;See&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_alert_with_title_description_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "feedback",
      "alert"
    ]
  },
  {
    "objectID": "components/feedback/tooltip.html",
    "href": "components/feedback/tooltip.html",
    "title": "tooltip",
    "section": "",
    "text": "Base Tooltip\n\n\nExported source\ntooltip = SingleValueFactory(\"tooltip\", \"Base tooltip component\") # Base tooltip component\ntooltip_content = SingleValueFactory(\"tooltip-content\", \"Optional. Setting a div as the content of the tooltip instead of the `data-tip` text\") # Base tooltip content part\n\n\n\n\nTooltip Placement\n\nsource\n\n\nTooltipPlacement\n\n TooltipPlacement (value, names=None, module=None, qualname=None,\n                   type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nTooltip Modifiers\n\nsource\n\n\nTooltipModifier\n\n TooltipModifier (value, names=None, module=None, qualname=None,\n                  type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nTooltip Colors\n\n\nTooltip Test Examples\n\nsource\n\n\ntest_tooltip_basic_examples\n\n test_tooltip_basic_examples ()\n\nTest basic tooltip utilities.\n\n\nExported source\ndef test_tooltip_basic_examples():\n    \"\"\"Test basic tooltip utilities.\"\"\"\n    # Basic tooltip\n    assert str(tooltip) == \"tooltip\"\n    assert str(tooltip_content) == \"tooltip-content\"\n    \n    # Test with modifiers\n    assert str(tooltip.hover) == \"hover:tooltip\"\n    assert str(tooltip.md) == \"md:tooltip\"\n    assert str(tooltip.dark) == \"dark:tooltip\"\n\n# Run the tests\ntest_tooltip_basic_examples()\n\n\n\nsource\n\n\ntest_tooltip_placement_examples\n\n test_tooltip_placement_examples ()\n\nTest tooltip placement options.\n\n\nExported source\ndef test_tooltip_placement_examples():\n    \"\"\"Test tooltip placement options.\"\"\"\n    assert str(tooltip_placement.top) == \"tooltip-top\"\n    assert str(tooltip_placement.bottom) == \"tooltip-bottom\"\n    assert str(tooltip_placement.left) == \"tooltip-left\"\n    assert str(tooltip_placement.right) == \"tooltip-right\"\n\n# Run the tests\ntest_tooltip_placement_examples()\n\n\n\nsource\n\n\ntest_tooltip_modifiers_examples\n\n test_tooltip_modifiers_examples ()\n\nTest tooltip modifier utilities.\n\n\nExported source\ndef test_tooltip_modifiers_examples():\n    \"\"\"Test tooltip modifier utilities.\"\"\"\n    assert str(tooltip_modifiers.open) == \"tooltip-open\"\n\n# Run the tests\ntest_tooltip_modifiers_examples()\n\n\n\nsource\n\n\ntest_tooltip_colors_examples\n\n test_tooltip_colors_examples ()\n\nTest tooltip color variants.\n\n\nExported source\ndef test_tooltip_colors_examples():\n    \"\"\"Test tooltip color variants.\"\"\"\n    # All color variants\n    assert str(tooltip_colors.neutral) == \"tooltip-neutral\"\n    assert str(tooltip_colors.primary) == \"tooltip-primary\"\n    assert str(tooltip_colors.secondary) == \"tooltip-secondary\"\n    assert str(tooltip_colors.accent) == \"tooltip-accent\"\n    assert str(tooltip_colors.info) == \"tooltip-info\"\n    assert str(tooltip_colors.success) == \"tooltip-success\"\n    assert str(tooltip_colors.warning) == \"tooltip-warning\"\n    assert str(tooltip_colors.error) == \"tooltip-error\"\n    \n    # With modifiers\n    assert str(tooltip_colors.primary.hover) == \"hover:tooltip-primary\"\n    assert str(tooltip_colors.success.focus) == \"focus:tooltip-success\"\n\n# Run the tests\ntest_tooltip_colors_examples()\n\n\n\nsource\n\n\ntest_tooltip_basic_fasthtml_examples\n\n test_tooltip_basic_fasthtml_examples ()\n\nTest basic tooltip examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_tooltip_basic_fasthtml_examples():\n    \"\"\"Test basic tooltip examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Basic tooltip\n    basic_tooltip = Div(\n        Button(\"Hover me\", cls=str(btn)),\n        cls=str(tooltip),\n        data_tip=\"hello\"\n    )\n    \n    # Verify structure\n    assert basic_tooltip.tag == \"div\"\n    assert basic_tooltip.attrs['class'] == \"tooltip\"\n    assert basic_tooltip.attrs['data-tip'] == \"hello\"\n    assert basic_tooltip.children[0].tag == \"button\"\n    assert basic_tooltip.children[0].attrs['class'] == \"btn\"\n    assert basic_tooltip.children[0].children[0] == \"Hover me\"\n    \n    # Force open tooltip\n    force_open = Div(\n        Button(\"Force open\", cls=str(btn)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open),\n        data_tip=\"hello\"\n    )\n    \n    assert force_open.tag == \"div\"\n    assert \"tooltip\" in force_open.attrs['class']\n    assert \"tooltip-open\" in force_open.attrs['class']\n    assert force_open.attrs['data-tip'] == \"hello\"\n    assert force_open.children[0].children[0] == \"Force open\"\n    \n    return Div(basic_tooltip, force_open)\n\n# Run the tests\ntest_tooltip_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div data-tip=\"hello\" class=\"tooltip\"&gt;\n&lt;button class=\"btn\"&gt;Hover me&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"hello\" class=\"tooltip tooltip-open\"&gt;\n&lt;button class=\"btn\"&gt;Force open&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tooltip_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tooltip_with_content_fasthtml_examples\n\n test_tooltip_with_content_fasthtml_examples ()\n\nTest tooltip with tooltip-content from daisyUI v5 documentation.\n\n\nExported source\ndef test_tooltip_with_content_fasthtml_examples():\n    \"\"\"Test tooltip with tooltip-content from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import animate\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.transforms import rotate\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Tooltip with tooltip-content\n    tooltip_with_content = Div(\n        Div(\n            Div(\n                \"Wow!\",\n                cls=combine_classes(\n                    animate.bounce,\n                    text_color.orange._400,\n                    rotate(10, negative=True),\n                    font_size._2xl,\n                    font_weight.black\n                )\n            ),\n            cls=str(tooltip_content)\n        ),\n        Button(\"Hover me\", cls=str(btn)),\n        cls=str(tooltip)\n    )\n    \n    # Verify structure\n    assert tooltip_with_content.tag == \"div\"\n    assert tooltip_with_content.attrs['class'] == \"tooltip\"\n    \n    # Verify tooltip-content div\n    content_div = tooltip_with_content.children[0]\n    assert content_div.tag == \"div\"\n    assert content_div.attrs['class'] == \"tooltip-content\"\n    \n    # Verify animated content\n    animated_div = content_div.children[0]\n    assert animated_div.tag == \"div\"\n    assert \"animate-bounce\" in animated_div.attrs['class']\n    assert \"text-orange-400\" in animated_div.attrs['class']\n    assert \"-rotate-10\" in animated_div.attrs['class']\n    assert \"text-2xl\" in animated_div.attrs['class']\n    assert \"font-black\" in animated_div.attrs['class']\n    assert animated_div.children[0] == \"Wow!\"\n    \n    # Verify button\n    button = tooltip_with_content.children[1]\n    assert button.tag == \"button\"\n    assert button.attrs['class'] == \"btn\"\n    assert button.children[0] == \"Hover me\"\n    \n    return tooltip_with_content\n\n# Run the tests\ntest_tooltip_with_content_fasthtml_examples()\n\n\n&lt;div class=\"tooltip\"&gt;\n  &lt;div class=\"tooltip-content\"&gt;\n    &lt;div class=\"animate-bounce text-orange-400 -rotate-10 text-2xl font-black\"&gt;Wow!&lt;/div&gt;\n  &lt;/div&gt;\n&lt;button class=\"btn\"&gt;Hover me&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_tooltip_with_content_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tooltip_positions_fasthtml_examples\n\n test_tooltip_positions_fasthtml_examples ()\n\nTest tooltip position variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_tooltip_positions_fasthtml_examples():\n    \"\"\"Test tooltip position variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Top position\n    top_tooltip = Div(\n        Button(\"Top\", cls=str(btn)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_placement.top),\n        data_tip=\"hello\"\n    )\n    assert \"tooltip\" in top_tooltip.attrs['class']\n    assert \"tooltip-open\" in top_tooltip.attrs['class']\n    assert \"tooltip-top\" in top_tooltip.attrs['class']\n    assert top_tooltip.attrs['data-tip'] == \"hello\"\n    assert top_tooltip.children[0].children[0] == \"Top\"\n    \n    # Bottom position\n    bottom_tooltip = Div(\n        Button(\"Bottom\", cls=str(btn)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_placement.bottom),\n        data_tip=\"hello\"\n    )\n    assert \"tooltip-bottom\" in bottom_tooltip.attrs['class']\n    assert bottom_tooltip.children[0].children[0] == \"Bottom\"\n    \n    # Left position\n    left_tooltip = Div(\n        Button(\"Left\", cls=str(btn)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_placement.left),\n        data_tip=\"hello\"\n    )\n    assert \"tooltip-left\" in left_tooltip.attrs['class']\n    assert left_tooltip.children[0].children[0] == \"Left\"\n    \n    # Right position\n    right_tooltip = Div(\n        Button(\"Right\", cls=str(btn)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_placement.right),\n        data_tip=\"hello\"\n    )\n    assert \"tooltip-right\" in right_tooltip.attrs['class']\n    assert right_tooltip.children[0].children[0] == \"Right\"\n    \n    return Div(top_tooltip, bottom_tooltip, left_tooltip, right_tooltip)\n\n# Run the tests\ntest_tooltip_positions_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div data-tip=\"hello\" class=\"tooltip tooltip-open tooltip-top\"&gt;\n&lt;button class=\"btn\"&gt;Top&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"hello\" class=\"tooltip tooltip-open tooltip-bottom\"&gt;\n&lt;button class=\"btn\"&gt;Bottom&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"hello\" class=\"tooltip tooltip-open tooltip-left\"&gt;\n&lt;button class=\"btn\"&gt;Left&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"hello\" class=\"tooltip tooltip-open tooltip-right\"&gt;\n&lt;button class=\"btn\"&gt;Right&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tooltip_positions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tooltip_colors_fasthtml_examples\n\n test_tooltip_colors_fasthtml_examples ()\n\nTest tooltip color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_tooltip_colors_fasthtml_examples():\n    \"\"\"Test tooltip color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Neutral color\n    neutral_tooltip = Div(\n        Button(\"neutral\", cls=combine_classes(btn, btn_colors.neutral)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.neutral),\n        data_tip=\"neutral\"\n    )\n    assert \"tooltip\" in neutral_tooltip.attrs['class']\n    assert \"tooltip-open\" in neutral_tooltip.attrs['class']\n    assert \"tooltip-neutral\" in neutral_tooltip.attrs['class']\n    assert neutral_tooltip.attrs['data-tip'] == \"neutral\"\n    assert \"btn-neutral\" in neutral_tooltip.children[0].attrs['class']\n    \n    # Primary color\n    primary_tooltip = Div(\n        Button(\"primary\", cls=combine_classes(btn, btn_colors.primary)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.primary),\n        data_tip=\"primary\"\n    )\n    assert \"tooltip-primary\" in primary_tooltip.attrs['class']\n    assert primary_tooltip.attrs['data-tip'] == \"primary\"\n    assert \"btn-primary\" in primary_tooltip.children[0].attrs['class']\n    \n    # Secondary color\n    secondary_tooltip = Div(\n        Button(\"secondary\", cls=combine_classes(btn, btn_colors.secondary)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.secondary),\n        data_tip=\"secondary\"\n    )\n    assert \"tooltip-secondary\" in secondary_tooltip.attrs['class']\n    assert \"btn-secondary\" in secondary_tooltip.children[0].attrs['class']\n    \n    # Accent color\n    accent_tooltip = Div(\n        Button(\"accent\", cls=combine_classes(btn, btn_colors.accent)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.accent),\n        data_tip=\"accent\"\n    )\n    assert \"tooltip-accent\" in accent_tooltip.attrs['class']\n    assert \"btn-accent\" in accent_tooltip.children[0].attrs['class']\n    \n    # Info color\n    info_tooltip = Div(\n        Button(\"info\", cls=combine_classes(btn, btn_colors.info)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.info),\n        data_tip=\"info\"\n    )\n    assert \"tooltip-info\" in info_tooltip.attrs['class']\n    assert \"btn-info\" in info_tooltip.children[0].attrs['class']\n    \n    # Success color\n    success_tooltip = Div(\n        Button(\"success\", cls=combine_classes(btn, btn_colors.success)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.success),\n        data_tip=\"success\"\n    )\n    assert \"tooltip-success\" in success_tooltip.attrs['class']\n    assert \"btn-success\" in success_tooltip.children[0].attrs['class']\n    \n    # Warning color\n    warning_tooltip = Div(\n        Button(\"warning\", cls=combine_classes(btn, btn_colors.warning)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.warning),\n        data_tip=\"warning\"\n    )\n    assert \"tooltip-warning\" in warning_tooltip.attrs['class']\n    assert \"btn-warning\" in warning_tooltip.children[0].attrs['class']\n    \n    # Error color\n    error_tooltip = Div(\n        Button(\"error\", cls=combine_classes(btn, btn_colors.error)),\n        cls=combine_classes(tooltip, tooltip_modifiers.open, tooltip_colors.error),\n        data_tip=\"error\"\n    )\n    assert \"tooltip-error\" in error_tooltip.attrs['class']\n    assert \"btn-error\" in error_tooltip.children[0].attrs['class']\n    \n    return Div(\n        neutral_tooltip,\n        primary_tooltip,\n        secondary_tooltip,\n        accent_tooltip,\n        info_tooltip,\n        success_tooltip,\n        warning_tooltip,\n        error_tooltip\n    )\n\n# Run the tests\ntest_tooltip_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div data-tip=\"neutral\" class=\"tooltip tooltip-open tooltip-neutral\"&gt;\n&lt;button class=\"btn btn-neutral\"&gt;neutral&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"primary\" class=\"tooltip tooltip-open tooltip-primary\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;primary&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"secondary\" class=\"tooltip tooltip-open tooltip-secondary\"&gt;\n&lt;button class=\"btn btn-secondary\"&gt;secondary&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"accent\" class=\"tooltip tooltip-open tooltip-accent\"&gt;\n&lt;button class=\"btn btn-accent\"&gt;accent&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"info\" class=\"tooltip tooltip-open tooltip-info\"&gt;\n&lt;button class=\"btn btn-info\"&gt;info&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"success\" class=\"tooltip tooltip-open tooltip-success\"&gt;\n&lt;button class=\"btn btn-success\"&gt;success&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"warning\" class=\"tooltip tooltip-open tooltip-warning\"&gt;\n&lt;button class=\"btn btn-warning\"&gt;warning&lt;/button&gt;  &lt;/div&gt;\n  &lt;div data-tip=\"error\" class=\"tooltip tooltip-open tooltip-error\"&gt;\n&lt;button class=\"btn btn-error\"&gt;error&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tooltip_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tooltip_responsive_fasthtml_examples\n\n test_tooltip_responsive_fasthtml_examples ()\n\nTest responsive tooltip from daisyUI v5 documentation.\n\n\nExported source\ndef test_tooltip_responsive_fasthtml_examples():\n    \"\"\"Test responsive tooltip from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Responsive tooltip - only shows on large screens\n    responsive_tooltip = Div(\n        Button(\"Hover me\", cls=str(btn)),\n        cls=str(tooltip.lg),\n        data_tip=\"hello\"\n    )\n    \n    # Verify structure\n    assert responsive_tooltip.tag == \"div\"\n    assert responsive_tooltip.attrs['class'] == \"lg:tooltip\"\n    assert responsive_tooltip.attrs['data-tip'] == \"hello\"\n    assert responsive_tooltip.children[0].tag == \"button\"\n    assert responsive_tooltip.children[0].attrs['class'] == \"btn\"\n    assert responsive_tooltip.children[0].children[0] == \"Hover me\"\n    \n    return responsive_tooltip\n\n# Run the tests\ntest_tooltip_responsive_fasthtml_examples()\n\n\n&lt;div data-tip=\"hello\" class=\"lg:tooltip\"&gt;\n&lt;button class=\"btn\"&gt;Hover me&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_tooltip_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "feedback",
      "tooltip"
    ]
  },
  {
    "objectID": "components/feedback/progress.html",
    "href": "components/feedback/progress.html",
    "title": "progress",
    "section": "",
    "text": "Base Progress\n\n\nExported source\nprogress = SingleValueFactory(\"progress\", \"Base progress component for &lt;progress&gt; tag\") # Base progress component\n\n\n\n\nProgress Colors\n\n\nExported source\nprogress_colors = enums_to_simple_factory(progress, [SemanticColorBrand, SemanticColorStatus], \"Progress color variants using daisyUI semantic colors\") # Progress color variants\n\n\n\n\nProgress Test Examples\n\nsource\n\n\ntest_progress_basic_examples\n\n test_progress_basic_examples ()\n\nTest basic progress utilities.\n\n\nExported source\ndef test_progress_basic_examples():\n    \"\"\"Test basic progress utilities.\"\"\"\n    # Basic progress\n    assert str(progress) == \"progress\"\n    \n    # Progress with modifiers\n    assert str(progress.hover) == \"hover:progress\"\n    assert str(progress.md) == \"md:progress\"\n    assert str(progress.dark) == \"dark:progress\"\n\n# Run the tests\ntest_progress_basic_examples()\n\n\n\nsource\n\n\ntest_progress_colors_examples\n\n test_progress_colors_examples ()\n\nTest progress color variants.\n\n\nExported source\ndef test_progress_colors_examples():\n    \"\"\"Test progress color variants.\"\"\"\n    # All color variants\n    assert str(progress_colors.neutral) == \"progress-neutral\"\n    assert str(progress_colors.primary) == \"progress-primary\"\n    assert str(progress_colors.secondary) == \"progress-secondary\"\n    assert str(progress_colors.accent) == \"progress-accent\"\n    assert str(progress_colors.info) == \"progress-info\"\n    assert str(progress_colors.success) == \"progress-success\"\n    assert str(progress_colors.warning) == \"progress-warning\"\n    assert str(progress_colors.error) == \"progress-error\"\n    \n    # With modifiers\n    assert str(progress_colors.primary.hover) == \"hover:progress-primary\"\n    assert str(progress_colors.success.focus) == \"focus:progress-success\"\n\n# Run the tests\ntest_progress_colors_examples()\n\n\n\nsource\n\n\ntest_progress_basic_fasthtml_examples\n\n test_progress_basic_fasthtml_examples ()\n\nTest basic progress examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_progress_basic_fasthtml_examples():\n    \"\"\"Test basic progress examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Progress, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Progress with different values\n    progress_0 = Progress(value=\"0\", max=\"100\", cls=combine_classes(progress, w._56))\n    assert progress_0.tag == \"progress\"\n    assert \"progress\" in progress_0.attrs['class']\n    assert \"w-56\" in progress_0.attrs['class']\n    assert progress_0.attrs['value'] == \"0\"\n    assert progress_0.attrs['max'] == \"100\"\n    \n    progress_10 = Progress(value=\"10\", max=\"100\", cls=combine_classes(progress, w._56))\n    assert progress_10.attrs['value'] == \"10\"\n    assert progress_10.attrs['max'] == \"100\"\n    \n    progress_40 = Progress(value=\"40\", max=\"100\", cls=combine_classes(progress, w._56))\n    assert progress_40.attrs['value'] == \"40\"\n    assert progress_40.attrs['max'] == \"100\"\n    \n    progress_70 = Progress(value=\"70\", max=\"100\", cls=combine_classes(progress, w._56))\n    assert progress_70.attrs['value'] == \"70\"\n    assert progress_70.attrs['max'] == \"100\"\n    \n    progress_100 = Progress(value=\"100\", max=\"100\", cls=combine_classes(progress, w._56))\n    assert progress_100.attrs['value'] == \"100\"\n    assert progress_100.attrs['max'] == \"100\"\n    \n    # Return all elements in a Div\n    return Div(\n        progress_0,\n        progress_10,\n        progress_40,\n        progress_70,\n        progress_100\n    )\n\n# Run the tests\ntest_progress_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress w-56\"&gt;&lt;/progress&gt;&lt;/div&gt;\n\n\n\ntest_func = test_progress_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_progress_primary_color_fasthtml_examples\n\n test_progress_primary_color_fasthtml_examples ()\n\nTest progress with primary color from daisyUI v5 documentation.\n\n\nExported source\ndef test_progress_primary_color_fasthtml_examples():\n    \"\"\"Test progress with primary color from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Progress, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Primary color progress with different values\n    primary_0 = Progress(value=\"0\", max=\"100\", cls=combine_classes(progress, progress_colors.primary, w._56))\n    assert \"progress\" in primary_0.attrs['class']\n    assert \"progress-primary\" in primary_0.attrs['class']\n    assert \"w-56\" in primary_0.attrs['class']\n    assert primary_0.attrs['value'] == \"0\"\n    \n    primary_10 = Progress(value=\"10\", max=\"100\", cls=combine_classes(progress, progress_colors.primary, w._56))\n    assert \"progress-primary\" in primary_10.attrs['class']\n    assert primary_10.attrs['value'] == \"10\"\n    \n    primary_40 = Progress(value=\"40\", max=\"100\", cls=combine_classes(progress, progress_colors.primary, w._56))\n    assert \"progress-primary\" in primary_40.attrs['class']\n    assert primary_40.attrs['value'] == \"40\"\n    \n    primary_70 = Progress(value=\"70\", max=\"100\", cls=combine_classes(progress, progress_colors.primary, w._56))\n    assert \"progress-primary\" in primary_70.attrs['class']\n    assert primary_70.attrs['value'] == \"70\"\n    \n    primary_100 = Progress(value=\"100\", max=\"100\", cls=combine_classes(progress, progress_colors.primary, w._56))\n    assert \"progress-primary\" in primary_100.attrs['class']\n    assert primary_100.attrs['value'] == \"100\"\n    \n    # Return all elements in a Div\n    return Div(\n        primary_0,\n        primary_10,\n        primary_40,\n        primary_70,\n        primary_100\n    )\n\n# Run the tests\ntest_progress_primary_color_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-primary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-primary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-primary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-primary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-primary w-56\"&gt;&lt;/progress&gt;&lt;/div&gt;\n\n\n\ntest_func = test_progress_primary_color_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_progress_all_colors_fasthtml_examples\n\n test_progress_all_colors_fasthtml_examples ()\n\nTest progress with all semantic colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_progress_all_colors_fasthtml_examples():\n    \"\"\"Test progress with all semantic colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Progress, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Helper function to create progress bars with different values for a given color\n    def create_color_set(color_class, color_name):\n        return [\n            Progress(value=\"0\", max=\"100\", cls=combine_classes(progress, color_class, w._56)),\n            Progress(value=\"10\", max=\"100\", cls=combine_classes(progress, color_class, w._56)),\n            Progress(value=\"40\", max=\"100\", cls=combine_classes(progress, color_class, w._56)),\n            Progress(value=\"70\", max=\"100\", cls=combine_classes(progress, color_class, w._56)),\n            Progress(value=\"100\", max=\"100\", cls=combine_classes(progress, color_class, w._56))\n        ]\n    \n    # Secondary color\n    secondary_bars = create_color_set(progress_colors.secondary, \"secondary\")\n    for bar in secondary_bars:\n        assert \"progress-secondary\" in bar.attrs['class']\n    \n    # Accent color\n    accent_bars = create_color_set(progress_colors.accent, \"accent\")\n    for bar in accent_bars:\n        assert \"progress-accent\" in bar.attrs['class']\n    \n    # Neutral color\n    neutral_bars = create_color_set(progress_colors.neutral, \"neutral\")\n    for bar in neutral_bars:\n        assert \"progress-neutral\" in bar.attrs['class']\n    \n    # Info color\n    info_bars = create_color_set(progress_colors.info, \"info\")\n    for bar in info_bars:\n        assert \"progress-info\" in bar.attrs['class']\n    \n    # Success color\n    success_bars = create_color_set(progress_colors.success, \"success\")\n    for bar in success_bars:\n        assert \"progress-success\" in bar.attrs['class']\n    \n    # Warning color\n    warning_bars = create_color_set(progress_colors.warning, \"warning\")\n    for bar in warning_bars:\n        assert \"progress-warning\" in bar.attrs['class']\n    \n    # Error color\n    error_bars = create_color_set(progress_colors.error, \"error\")\n    for bar in error_bars:\n        assert \"progress-error\" in bar.attrs['class']\n    \n    # Return all elements grouped by color\n    return Div(\n        Div(*secondary_bars),\n        Div(*accent_bars),\n        Div(*neutral_bars),\n        Div(*info_bars),\n        Div(*success_bars),\n        Div(*warning_bars),\n        Div(*error_bars)\n    )\n\n# Run the tests\ntest_progress_all_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-secondary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-secondary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-secondary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-secondary w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-secondary w-56\"&gt;&lt;/progress&gt;  &lt;/div&gt;\n  &lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-accent w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-accent w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-accent w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-accent w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-accent w-56\"&gt;&lt;/progress&gt;  &lt;/div&gt;\n  &lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-neutral w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-neutral w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-neutral w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-neutral w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-neutral w-56\"&gt;&lt;/progress&gt;  &lt;/div&gt;\n  &lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-info w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-info w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-info w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-info w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-info w-56\"&gt;&lt;/progress&gt;  &lt;/div&gt;\n  &lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-success w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-success w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-success w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-success w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-success w-56\"&gt;&lt;/progress&gt;  &lt;/div&gt;\n  &lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-warning w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-warning w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-warning w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-warning w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-warning w-56\"&gt;&lt;/progress&gt;  &lt;/div&gt;\n  &lt;div&gt;\n&lt;progress value=\"0\" max=\"100\" class=\"progress progress-error w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"10\" max=\"100\" class=\"progress progress-error w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"40\" max=\"100\" class=\"progress progress-error w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"70\" max=\"100\" class=\"progress progress-error w-56\"&gt;&lt;/progress&gt;&lt;progress value=\"100\" max=\"100\" class=\"progress progress-error w-56\"&gt;&lt;/progress&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_progress_all_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_progress_indeterminate_fasthtml_examples\n\n test_progress_indeterminate_fasthtml_examples ()\n\nTest indeterminate progress (without value) from daisyUI v5 documentation.\n\n\nExported source\ndef test_progress_indeterminate_fasthtml_examples():\n    \"\"\"Test indeterminate progress (without value) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Progress, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Indeterminate progress (without value)\n    indeterminate = Progress(cls=combine_classes(progress, w._56))\n    assert indeterminate.tag == \"progress\"\n    assert \"progress\" in indeterminate.attrs['class']\n    assert \"w-56\" in indeterminate.attrs['class']\n    # Check that value and max attributes are not present\n    assert 'value' not in indeterminate.attrs\n    assert 'max' not in indeterminate.attrs\n    \n    # Return the element in a Div\n    return Div(indeterminate)\n\n# Run the tests\ntest_progress_indeterminate_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;progress class=\"progress w-56\"&gt;&lt;/progress&gt;&lt;/div&gt;\n\n\n\ntest_func = test_progress_indeterminate_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "feedback",
      "progress"
    ]
  },
  {
    "objectID": "components/data_display/collapse.html",
    "href": "components/data_display/collapse.html",
    "title": "collapse",
    "section": "",
    "text": "Base Collapse\nThe base collapse components:\n\n\nExported source\ncollapse = SingleValueFactory(\"collapse\", \"Collapse/accordion container component\") # Collapse container\ncollapse_title = SingleValueFactory(\"collapse-title\", \"Title part of collapse\") # Collapse title\ncollapse_content = SingleValueFactory(\"collapse-content\", \"Content part of collapse\") # Collapse content\n\n\n\n\nCollapse Modifiers\nCollapse modifier utilities:\n\n\nExported source\ncollapse_modifiers = SimpleFactory(\n    {\n        \"arrow\": \"collapse-arrow\",\n        \"plus\": \"collapse-plus\",\n        \"open\": \"collapse-open\",\n        \"close\": \"collapse-close\"\n    },\n    \"Collapse modifiers (arrow icon, plus/minus icon, force open/close)\"\n) # Collapse modifiers\n\n\n\n\nCollapse Test Examples\n\nsource\n\n\ntest_collapse_basic_examples\n\n test_collapse_basic_examples ()\n\nTest basic collapse utilities.\n\n\nExported source\ndef test_collapse_basic_examples():\n    \"\"\"Test basic collapse utilities.\"\"\"\n    # Basic components\n    assert str(collapse) == \"collapse\"\n    assert str(collapse_title) == \"collapse-title\"\n    assert str(collapse_content) == \"collapse-content\"\n    \n    # With modifiers\n    assert str(collapse.hover) == \"hover:collapse\"\n    assert str(collapse_title.md) == \"md:collapse-title\"\n    assert str(collapse_content.dark) == \"dark:collapse-content\"\n\n# Run the tests\ntest_collapse_basic_examples()\n\n\n\nsource\n\n\ntest_collapse_modifiers_examples\n\n test_collapse_modifiers_examples ()\n\nTest collapse modifier utilities.\n\n\nExported source\ndef test_collapse_modifiers_examples():\n    \"\"\"Test collapse modifier utilities.\"\"\"\n    assert str(collapse_modifiers.arrow) == \"collapse-arrow\"\n    assert str(collapse_modifiers.plus) == \"collapse-plus\"\n    assert str(collapse_modifiers.open) == \"collapse-open\"\n    assert str(collapse_modifiers.close) == \"collapse-close\"\n    \n    # With responsive modifiers\n    assert str(collapse_modifiers.arrow.hover) == \"hover:collapse-arrow\"\n    assert str(collapse_modifiers.plus.focus) == \"focus:collapse-plus\"\n\n# Run the tests\ntest_collapse_modifiers_examples()\n\n\n\nsource\n\n\ntest_collapse_basic_fasthtml_examples\n\n test_collapse_basic_fasthtml_examples ()\n\nTest basic collapse examples: focus, checkbox, and details/summary from daisyUI v5 documentation.\n\n\nExported source\ndef test_collapse_basic_fasthtml_examples():\n    \"\"\"Test basic collapse examples: focus, checkbox, and details/summary from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input, Details, Summary\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # Collapse with focus (tabindex)\n    focus_collapse = Div(\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        tabindex=\"0\",\n        cls=combine_classes(collapse, bg_dui.base_100, border_dui.base_300, border())\n    )\n    assert focus_collapse.attrs['tabindex'] == \"0\"\n    assert \"collapse\" in focus_collapse.attrs['class']\n    assert \"bg-base-100\" in focus_collapse.attrs['class']\n    assert \"border-base-300\" in focus_collapse.attrs['class']\n    assert \"border\" in focus_collapse.attrs['class']\n    assert \"collapse-title\" in focus_collapse.children[0].attrs['class']\n    assert \"font-semibold\" in focus_collapse.children[0].attrs['class']\n    assert focus_collapse.children[0].children[0] == \"How do I create an account?\"\n    assert \"collapse-content\" in focus_collapse.children[1].attrs['class']\n    assert \"text-sm\" in focus_collapse.children[1].attrs['class']\n    \n    # Collapse with checkbox\n    checkbox_collapse = Div(\n        Input(type=\"checkbox\"),\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, bg_dui.base_100, border_dui.base_300, border())\n    )\n    assert checkbox_collapse.children[0].tag == \"input\"\n    assert checkbox_collapse.children[0].attrs['type'] == \"checkbox\"\n    assert \"collapse\" in checkbox_collapse.attrs['class']\n    assert \"bg-base-100\" in checkbox_collapse.attrs['class']\n    assert \"border-base-300\" in checkbox_collapse.attrs['class']\n    assert \"border\" in checkbox_collapse.attrs['class']\n    assert \"collapse-title\" in checkbox_collapse.children[1].attrs['class']\n    assert \"collapse-content\" in checkbox_collapse.children[2].attrs['class']\n    \n    # Collapse using details and summary tag\n    details_collapse = Details(\n        Summary(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, bg_dui.base_100, border_dui.base_300, border())\n    )\n    assert details_collapse.tag == \"details\"\n    assert details_collapse.children[0].tag == \"summary\"\n    assert \"collapse\" in details_collapse.attrs['class']\n    assert \"bg-base-100\" in details_collapse.attrs['class']\n    assert \"border-base-300\" in details_collapse.attrs['class']\n    assert \"border\" in details_collapse.attrs['class']\n    assert \"collapse-title\" in details_collapse.children[0].attrs['class']\n    assert \"font-semibold\" in details_collapse.children[0].attrs['class']\n    assert details_collapse.children[0].children[0] == \"How do I create an account?\"\n    assert \"collapse-content\" in details_collapse.children[1].attrs['class']\n    assert \"text-sm\" in details_collapse.children[1].attrs['class']\n    \n    # Return all collapse examples in a Div\n    return Div(focus_collapse, checkbox_collapse, details_collapse)\n\n# Run the tests\ntest_collapse_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div tabindex=\"0\" class=\"collapse bg-base-100 border-base-300 border\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse bg-base-100 border-base-300 border\"&gt;\n    &lt;input type=\"checkbox\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;details class=\"collapse bg-base-100 border-base-300 border\"&gt;&lt;summary class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/summary&gt;    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n&lt;/details&gt;&lt;/div&gt;\n\n\n\ntest_func = test_collapse_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_collapse_style_fasthtml_examples\n\n test_collapse_style_fasthtml_examples ()\n\nTest collapse style examples: without border/background, with arrow icon, with plus/minus icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_collapse_style_fasthtml_examples():\n    \"\"\"Test collapse style examples: without border/background, with arrow icon, with plus/minus icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # Collapse without border and background\n    minimal_collapse = Div(\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        tabindex=\"0\",\n        cls=str(collapse)\n    )\n    assert minimal_collapse.attrs['tabindex'] == \"0\"\n    assert minimal_collapse.attrs['class'] == \"collapse\"\n    assert \"collapse-title\" in minimal_collapse.children[0].attrs['class']\n    assert \"font-semibold\" in minimal_collapse.children[0].attrs['class']\n    assert minimal_collapse.children[0].children[0] == \"How do I create an account?\"\n    assert \"collapse-content\" in minimal_collapse.children[1].attrs['class']\n    assert \"text-sm\" in minimal_collapse.children[1].attrs['class']\n    \n    # Collapse with arrow icon\n    arrow_collapse = Div(\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        tabindex=\"0\",\n        cls=combine_classes(collapse, collapse_modifiers.arrow, bg_dui.base_100, border_dui.base_300, border())\n    )\n    assert arrow_collapse.attrs['tabindex'] == \"0\"\n    assert \"collapse\" in arrow_collapse.attrs['class']\n    assert \"collapse-arrow\" in arrow_collapse.attrs['class']\n    assert \"bg-base-100\" in arrow_collapse.attrs['class']\n    assert \"border-base-300\" in arrow_collapse.attrs['class']\n    assert \"border\" in arrow_collapse.attrs['class']\n    assert \"collapse-title\" in arrow_collapse.children[0].attrs['class']\n    assert \"collapse-content\" in arrow_collapse.children[1].attrs['class']\n    \n    # Collapse with plus/minus icon\n    plus_collapse = Div(\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        tabindex=\"0\",\n        cls=combine_classes(collapse, collapse_modifiers.plus, bg_dui.base_100, border_dui.base_300, border())\n    )\n    assert plus_collapse.attrs['tabindex'] == \"0\"\n    assert \"collapse\" in plus_collapse.attrs['class']\n    assert \"collapse-plus\" in plus_collapse.attrs['class']\n    assert \"bg-base-100\" in plus_collapse.attrs['class']\n    assert \"border-base-300\" in plus_collapse.attrs['class']\n    assert \"border\" in plus_collapse.attrs['class']\n    assert \"collapse-title\" in plus_collapse.children[0].attrs['class']\n    assert \"font-semibold\" in plus_collapse.children[0].attrs['class']\n    assert plus_collapse.children[0].children[0] == \"How do I create an account?\"\n    assert \"collapse-content\" in plus_collapse.children[1].attrs['class']\n    assert \"text-sm\" in plus_collapse.children[1].attrs['class']\n    \n    # Return all collapse style examples in a Div\n    return Div(minimal_collapse, arrow_collapse, plus_collapse)\n\n# Run the tests\ntest_collapse_style_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div tabindex=\"0\" class=\"collapse\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div tabindex=\"0\" class=\"collapse collapse-arrow bg-base-100 border-base-300 border\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div tabindex=\"0\" class=\"collapse collapse-plus bg-base-100 border-base-300 border\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_collapse_style_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_collapse_state_fasthtml_examples\n\n test_collapse_state_fasthtml_examples ()\n\nTest collapse state examples: force open and force close from daisyUI v5 documentation.\n\n\nExported source\ndef test_collapse_state_fasthtml_examples():\n    \"\"\"Test collapse state examples: force open and force close from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.borders import border \n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # Force open collapse\n    open_collapse = Div(\n        Div(\"I have collapse-open class\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        tabindex=\"0\",\n        cls=combine_classes(collapse, collapse_modifiers.open, bg_dui.base_100, border_dui.base_300, border())\n    )\n    assert open_collapse.attrs['tabindex'] == \"0\"\n    assert \"collapse\" in open_collapse.attrs['class']\n    assert \"collapse-open\" in open_collapse.attrs['class']\n    assert \"bg-base-100\" in open_collapse.attrs['class']\n    assert \"border-base-300\" in open_collapse.attrs['class']\n    assert \"border\" in open_collapse.attrs['class']\n    assert \"collapse-title\" in open_collapse.children[0].attrs['class']\n    assert \"font-semibold\" in open_collapse.children[0].attrs['class']\n    assert open_collapse.children[0].children[0] == \"I have collapse-open class\"\n    assert \"collapse-content\" in open_collapse.children[1].attrs['class']\n    assert \"text-sm\" in open_collapse.children[1].attrs['class']\n    \n    # Force close collapse  \n    close_collapse = Div(\n        Div(\"I have collapse-close class\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        tabindex=\"0\",\n        cls=combine_classes(collapse, collapse_modifiers.close, bg_dui.base_100, border_dui.base_300, border())\n    )\n    assert close_collapse.attrs['tabindex'] == \"0\"\n    assert \"collapse\" in close_collapse.attrs['class']\n    assert \"collapse-close\" in close_collapse.attrs['class']\n    assert \"bg-base-100\" in close_collapse.attrs['class']\n    assert \"border-base-300\" in close_collapse.attrs['class']\n    assert \"border\" in close_collapse.attrs['class']\n    assert \"collapse-title\" in close_collapse.children[0].attrs['class']\n    assert \"font-semibold\" in close_collapse.children[0].attrs['class']\n    assert close_collapse.children[0].children[0] == \"I have collapse-close class\"\n    assert \"collapse-content\" in close_collapse.children[1].attrs['class']\n    assert \"text-sm\" in close_collapse.children[1].attrs['class']\n    \n    # Return both collapse state examples in a Div\n    return Div(open_collapse, close_collapse)\n\n# Run the tests\ntest_collapse_state_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div tabindex=\"0\" class=\"collapse collapse-open bg-base-100 border-base-300 border\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;I have collapse-open class&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div tabindex=\"0\" class=\"collapse collapse-close bg-base-100 border-base-300 border\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;I have collapse-close class&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_collapse_state_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_collapse_color_fasthtml_examples\n\n test_collapse_color_fasthtml_examples ()\n\nTest collapse color examples: custom colors for focus and checkbox from daisyUI v5 documentation.\n\n\nExported source\ndef test_collapse_color_fasthtml_examples():\n    \"\"\"Test collapse color examples: custom colors for focus and checkbox from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui, text_dui\n    \n    # Custom colors for collapse that works with focus\n    custom_focus_collapse = Div(\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        tabindex=\"0\",\n        cls=combine_classes(\n            bg_dui.primary,\n            text_dui.primary_content,\n            bg_dui.secondary.focus,\n            text_dui.secondary_content.focus,\n            collapse\n        )\n    )\n    assert custom_focus_collapse.attrs['tabindex'] == \"0\"\n    assert \"collapse\" in custom_focus_collapse.attrs['class']\n    assert \"bg-primary\" in custom_focus_collapse.attrs['class']\n    assert \"text-primary-content\" in custom_focus_collapse.attrs['class']\n    assert \"focus:bg-secondary\" in custom_focus_collapse.attrs['class']\n    assert \"focus:text-secondary-content\" in custom_focus_collapse.attrs['class']\n    assert \"collapse-title\" in custom_focus_collapse.children[0].attrs['class']\n    assert \"font-semibold\" in custom_focus_collapse.children[0].attrs['class']\n    assert custom_focus_collapse.children[0].children[0] == \"How do I create an account?\"\n    assert \"collapse-content\" in custom_focus_collapse.children[1].attrs['class']\n    assert \"text-sm\" in custom_focus_collapse.children[1].attrs['class']\n    \n    # Custom colors for collapse that works with checkbox using peer\n    custom_checkbox_collapse = Div(\n        Input(type=\"checkbox\", cls=\"peer\"),\n        Div(\n            \"How do I create an account?\",\n            cls=combine_classes(\n                collapse_title,\n                bg_dui.primary,\n                text_dui.primary_content,\n                bg_dui.secondary.peer(\"checked\"),\n                text_dui.secondary_content.peer(\"checked\")\n            )\n        ),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(\n                collapse_content,\n                bg_dui.primary,\n                text_dui.primary_content,\n                bg_dui.secondary.peer(\"checked\"),\n                text_dui.secondary_content.peer(\"checked\")\n            )\n        ),\n        cls=combine_classes(bg_dui.base_100, border_dui.base_300, collapse, border())\n    )\n    assert custom_checkbox_collapse.children[0].tag == \"input\"\n    assert custom_checkbox_collapse.children[0].attrs['type'] == \"checkbox\"\n    assert \"peer\" in custom_checkbox_collapse.children[0].attrs['class']\n    assert \"collapse\" in custom_checkbox_collapse.attrs['class']\n    assert \"bg-base-100\" in custom_checkbox_collapse.attrs['class']\n    assert \"border-base-300\" in custom_checkbox_collapse.attrs['class']\n    assert \"border\" in custom_checkbox_collapse.attrs['class']\n    \n    # Verify title styling\n    assert \"collapse-title\" in custom_checkbox_collapse.children[1].attrs['class']\n    assert \"bg-primary\" in custom_checkbox_collapse.children[1].attrs['class']\n    assert \"text-primary-content\" in custom_checkbox_collapse.children[1].attrs['class']\n    assert \"peer-checked:bg-secondary\" in custom_checkbox_collapse.children[1].attrs['class']\n    assert \"peer-checked:text-secondary-content\" in custom_checkbox_collapse.children[1].attrs['class']\n    assert custom_checkbox_collapse.children[1].children[0] == \"How do I create an account?\"\n    \n    # Verify content styling\n    assert \"collapse-content\" in custom_checkbox_collapse.children[2].attrs['class']\n    assert \"bg-primary\" in custom_checkbox_collapse.children[2].attrs['class']\n    assert \"text-primary-content\" in custom_checkbox_collapse.children[2].attrs['class']\n    assert \"peer-checked:bg-secondary\" in custom_checkbox_collapse.children[2].attrs['class']\n    assert \"peer-checked:text-secondary-content\" in custom_checkbox_collapse.children[2].attrs['class']\n    \n    # Return both color examples in a Div\n    return Div(custom_focus_collapse, custom_checkbox_collapse)\n\n# Run the tests\ntest_collapse_color_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div tabindex=\"0\" class=\"bg-primary text-primary-content focus:bg-secondary focus:text-secondary-content collapse\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"bg-base-100 border-base-300 collapse border\"&gt;\n    &lt;input type=\"checkbox\" class=\"peer\"&gt;\n    &lt;div class=\"collapse-title bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_collapse_color_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "collapse"
    ]
  },
  {
    "objectID": "components/data_display/chat_bubble.html",
    "href": "components/data_display/chat_bubble.html",
    "title": "chat bubble",
    "section": "",
    "text": "Base Chat\nThe base chat components:\n\n\nExported source\nchat = SingleValueFactory(\"chat\", \"Container for one line of conversation and its data\") # Chat container\nchat_image = SingleValueFactory(\"chat-image\", \"Author image part of chat\") # Chat image\nchat_header = SingleValueFactory(\"chat-header\", \"Text above the chat bubble\") # Chat header\nchat_footer = SingleValueFactory(\"chat-footer\", \"Text below the chat bubble\") # Chat footer\nchat_bubble = SingleValueFactory(\"chat-bubble\", \"Chat bubble element\") # Chat bubble\n\n\n\n\nChat Placement\nChat placement alignment (required):\n\n\nExported source\nchat_placement = SimpleFactory(\n    {\n        \"start\": \"chat-start\",\n        \"end\": \"chat-end\"\n    },\n    \"Chat placement alignment (start or end - required)\"\n) # Chat placement\n\n\n\n\nChat Bubble Colors\nChat bubble color variants using daisyUI semantic colors:\n\n\nExported source\nchat_bubble_colors = enums_to_simple_factory(chat_bubble, [SemanticColorBrand, SemanticColorStatus], \"Chat bubble color variants using daisyUI semantic colors\") # Chat bubble color variants\n\n\n\n\nChat Test Examples\n\nsource\n\n\ntest_chat_basic_examples\n\n test_chat_basic_examples ()\n\nTest basic chat utilities.\n\n\nExported source\ndef test_chat_basic_examples():\n    \"\"\"Test basic chat utilities.\"\"\"\n    # Basic components\n    assert str(chat) == \"chat\"\n    assert str(chat_image) == \"chat-image\"\n    assert str(chat_header) == \"chat-header\"\n    assert str(chat_footer) == \"chat-footer\"\n    assert str(chat_bubble) == \"chat-bubble\"\n    \n    # With modifiers\n    assert str(chat.hover) == \"hover:chat\"\n    assert str(chat_bubble.md) == \"md:chat-bubble\"\n    assert str(chat_header.dark) == \"dark:chat-header\"\n\n# Run the tests\ntest_chat_basic_examples()\n\n\n\nsource\n\n\ntest_chat_placement_examples\n\n test_chat_placement_examples ()\n\nTest chat placement utilities.\n\n\nExported source\ndef test_chat_placement_examples():\n    \"\"\"Test chat placement utilities.\"\"\"\n    assert str(chat_placement.start) == \"chat-start\"\n    assert str(chat_placement.end) == \"chat-end\"\n    \n    # With responsive modifiers\n    assert str(chat_placement.start.hover) == \"hover:chat-start\"\n    assert str(chat_placement.end.md) == \"md:chat-end\"\n\n# Run the tests\ntest_chat_placement_examples()\n\n\n\nsource\n\n\ntest_chat_bubble_colors_examples\n\n test_chat_bubble_colors_examples ()\n\nTest chat bubble color variants.\n\n\nExported source\ndef test_chat_bubble_colors_examples():\n    \"\"\"Test chat bubble color variants.\"\"\"\n    # All color variants\n    assert str(chat_bubble_colors.neutral) == \"chat-bubble-neutral\"\n    assert str(chat_bubble_colors.primary) == \"chat-bubble-primary\"\n    assert str(chat_bubble_colors.secondary) == \"chat-bubble-secondary\"\n    assert str(chat_bubble_colors.accent) == \"chat-bubble-accent\"\n    assert str(chat_bubble_colors.info) == \"chat-bubble-info\"\n    assert str(chat_bubble_colors.success) == \"chat-bubble-success\"\n    assert str(chat_bubble_colors.warning) == \"chat-bubble-warning\"\n    assert str(chat_bubble_colors.error) == \"chat-bubble-error\"\n    \n    # With modifiers\n    assert str(chat_bubble_colors.primary.hover) == \"hover:chat-bubble-primary\"\n    assert str(chat_bubble_colors.success.focus) == \"focus:chat-bubble-success\"\n\n# Run the tests\ntest_chat_bubble_colors_examples()\n\n\n\nsource\n\n\ntest_chat_basic_fasthtml_examples\n\n test_chat_basic_fasthtml_examples ()\n\nTest basic chat-start and chat-end from daisyUI v5 documentation.\n\n\nExported source\ndef test_chat_basic_fasthtml_examples():\n    \"\"\"Test basic chat-start and chat-end from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Br\n    \n    # Basic chat-start and chat-end\n    chat_start = Div(\n        Div(\n            \"It's over Anakin,\",\n            Br(),\n            \"I have the high ground.\",\n            cls=str(chat_bubble)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert chat_start.tag == \"div\"\n    assert \"chat\" in chat_start.attrs['class']\n    assert \"chat-start\" in chat_start.attrs['class']\n    assert chat_start.children[0].tag == \"div\"\n    assert \"chat-bubble\" in chat_start.children[0].attrs['class']\n    assert chat_start.children[0].children[0] == \"It's over Anakin,\"\n    assert chat_start.children[0].children[1].tag == \"br\"\n    assert chat_start.children[0].children[2] == \"I have the high ground.\"\n    \n    chat_end = Div(\n        Div(\"You underestimate my power!\", cls=str(chat_bubble)),\n        cls=combine_classes(chat, chat_placement.end)\n    )\n    assert chat_end.tag == \"div\"\n    assert \"chat\" in chat_end.attrs['class']\n    assert \"chat-end\" in chat_end.attrs['class']\n    assert \"chat-bubble\" in chat_end.children[0].attrs['class']\n    assert chat_end.children[0].children[0] == \"You underestimate my power!\"\n    \n    # Return all examples in a Div\n    return Div(chat_start, chat_end)\n\n# Run the tests\ntest_chat_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-bubble\"&gt;\nIt's over Anakin,&lt;br&gt;I have the high ground.    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-end\"&gt;\n    &lt;div class=\"chat-bubble\"&gt;You underestimate my power!&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_chat_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_chat_with_image_fasthtml_examples\n\n test_chat_with_image_fasthtml_examples ()\n\nTest chat with image from daisyUI v5 documentation.\n\n\nExported source\ndef test_chat_with_image_fasthtml_examples():\n    \"\"\"Test chat with image from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.components.data_display.avatar import avatar\n    \n    # Define the image URL once\n    kenobee_img = \"https://img.daisyui.com/images/profile/demo/kenobee@192.webp\"\n    \n    # Single chat with image\n    single_chat = Div(\n        Div(\n            Div(\n                Img(\n                    alt=\"Tailwind CSS chat bubble component\",\n                    src=kenobee_img\n                ),\n                cls=combine_classes(w._10, rounded.full)\n            ),\n            cls=combine_classes(chat_image, avatar)\n        ),\n        Div(\n            \"It was said that you would, destroy the Sith, not join them.\",\n            cls=str(chat_bubble)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert \"chat\" in single_chat.attrs['class']\n    assert \"chat-start\" in single_chat.attrs['class']\n    assert \"chat-image\" in single_chat.children[0].attrs['class']\n    assert \"avatar\" in single_chat.children[0].attrs['class']\n    assert \"w-10\" in single_chat.children[0].children[0].attrs['class']\n    assert \"rounded-full\" in single_chat.children[0].children[0].attrs['class']\n    assert single_chat.children[0].children[0].children[0].tag == \"img\"\n    assert single_chat.children[0].children[0].children[0].attrs['src'] == kenobee_img\n    assert \"chat-bubble\" in single_chat.children[1].attrs['class']\n    assert single_chat.children[1].children[0] == \"It was said that you would, destroy the Sith, not join them.\"\n    \n    # Multiple messages with same image\n    chat_message_1 = Div(\n        Div(\n            Div(\n                Img(\n                    alt=\"Tailwind CSS chat bubble component\",\n                    src=kenobee_img\n                ),\n                cls=combine_classes(w._10, rounded.full)\n            ),\n            cls=combine_classes(chat_image, avatar)\n        ),\n        Div(\n            \"It was said that you would, destroy the Sith, not join them.\",\n            cls=str(chat_bubble)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    \n    chat_message_2 = Div(\n        Div(\n            Div(\n                Img(\n                    alt=\"Tailwind CSS chat bubble component\",\n                    src=kenobee_img\n                ),\n                cls=combine_classes(w._10, rounded.full)\n            ),\n            cls=combine_classes(chat_image, avatar)\n        ),\n        Div(\n            \"It was you who would bring balance to the Force\",\n            cls=str(chat_bubble)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    \n    chat_message_3 = Div(\n        Div(\n            Div(\n                Img(\n                    alt=\"Tailwind CSS chat bubble component\",\n                    src=kenobee_img\n                ),\n                cls=combine_classes(w._10, rounded.full)\n            ),\n            cls=combine_classes(chat_image, avatar)\n        ),\n        Div(\n            \"Not leave it in Darkness\",\n            cls=str(chat_bubble)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    \n    # Verify all messages have consistent structure\n    for msg in [chat_message_1, chat_message_2, chat_message_3]:\n        assert \"chat\" in msg.attrs['class']\n        assert \"chat-start\" in msg.attrs['class']\n        assert \"chat-image\" in msg.children[0].attrs['class']\n        assert \"avatar\" in msg.children[0].attrs['class']\n        assert msg.children[0].children[0].children[0].attrs['src'] == kenobee_img\n        assert \"chat-bubble\" in msg.children[1].attrs['class']\n    \n    # Verify different message content\n    assert chat_message_1.children[1].children[0] == \"It was said that you would, destroy the Sith, not join them.\"\n    assert chat_message_2.children[1].children[0] == \"It was you who would bring balance to the Force\"\n    assert chat_message_3.children[1].children[0] == \"Not leave it in Darkness\"\n    \n    # Return all examples in a Div\n    return Div(single_chat, chat_message_1, chat_message_2, chat_message_3)\n\n# Run the tests\ntest_chat_with_image_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-image avatar\"&gt;\n      &lt;div class=\"w-10 rounded-full\"&gt;\n&lt;img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/profile/demo/kenobee@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;It was said that you would, destroy the Sith, not join them.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-image avatar\"&gt;\n      &lt;div class=\"w-10 rounded-full\"&gt;\n&lt;img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/profile/demo/kenobee@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;It was said that you would, destroy the Sith, not join them.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-image avatar\"&gt;\n      &lt;div class=\"w-10 rounded-full\"&gt;\n&lt;img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/profile/demo/kenobee@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;It was you who would bring balance to the Force&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-image avatar\"&gt;\n      &lt;div class=\"w-10 rounded-full\"&gt;\n&lt;img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/profile/demo/kenobee@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;Not leave it in Darkness&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_chat_with_image_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_chat_with_header_footer_fasthtml_examples\n\n test_chat_with_header_footer_fasthtml_examples ()\n\nTest chat with image, header and footer from daisyUI v5 documentation.\n\n\nExported source\ndef test_chat_with_header_footer_fasthtml_examples():\n    \"\"\"Test chat with image, header and footer from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img, Time\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import opacity\n    from cjm_fasthtml_daisyui.components.data_display.avatar import avatar\n    \n    # Chat with image, header and footer - Start alignment\n    kenobee_img = \"https://img.daisyui.com/images/profile/demo/kenobee@192.webp\"\n    \n    chat_start_full = Div(\n        Div(\n            Div(\n                Img(\n                    alt=\"Tailwind CSS chat bubble component\",\n                    src=kenobee_img\n                ),\n                cls=combine_classes(w._10, rounded.full)\n            ),\n            cls=combine_classes(chat_image, avatar)\n        ),\n        Div(\n            \"Obi-Wan Kenobi\",\n            Time(\"12:45\", cls=combine_classes(font_size.xs, opacity._50)),\n            cls=str(chat_header)\n        ),\n        Div(\n            \"You were the Chosen One!\",\n            cls=str(chat_bubble)\n        ),\n        Div(\n            \"Delivered\",\n            cls=combine_classes(chat_footer, opacity._50)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert \"chat\" in chat_start_full.attrs['class']\n    assert \"chat-start\" in chat_start_full.attrs['class']\n    assert \"chat-image\" in chat_start_full.children[0].attrs['class']\n    assert \"avatar\" in chat_start_full.children[0].attrs['class']\n    assert chat_start_full.children[0].children[0].children[0].attrs['src'] == kenobee_img\n    assert \"chat-header\" in chat_start_full.children[1].attrs['class']\n    assert chat_start_full.children[1].children[0] == \"Obi-Wan Kenobi\"\n    assert chat_start_full.children[1].children[1].tag == \"time\"\n    assert chat_start_full.children[1].children[1].children[0] == \"12:45\"\n    assert \"text-xs\" in chat_start_full.children[1].children[1].attrs['class']\n    assert \"opacity-50\" in chat_start_full.children[1].children[1].attrs['class']\n    assert \"chat-bubble\" in chat_start_full.children[2].attrs['class']\n    assert chat_start_full.children[2].children[0] == \"You were the Chosen One!\"\n    assert \"chat-footer\" in chat_start_full.children[3].attrs['class']\n    assert \"opacity-50\" in chat_start_full.children[3].attrs['class']\n    assert chat_start_full.children[3].children[0] == \"Delivered\"\n    \n    # Chat with image, header and footer - End alignment\n    anakeen_img = \"https://img.daisyui.com/images/profile/demo/anakeen@192.webp\"\n    \n    chat_end_full = Div(\n        Div(\n            Div(\n                Img(\n                    alt=\"Tailwind CSS chat bubble component\",\n                    src=anakeen_img\n                ),\n                cls=combine_classes(w._10, rounded.full)\n            ),\n            cls=combine_classes(chat_image, avatar)\n        ),\n        Div(\n            \"Anakin\",\n            Time(\"12:46\", cls=combine_classes(font_size.xs, opacity._50)),\n            cls=str(chat_header)\n        ),\n        Div(\n            \"I hate you!\",\n            cls=str(chat_bubble)\n        ),\n        Div(\n            \"Seen at 12:46\",\n            cls=combine_classes(chat_footer, opacity._50)\n        ),\n        cls=combine_classes(chat, chat_placement.end)\n    )\n    assert \"chat\" in chat_end_full.attrs['class']\n    assert \"chat-end\" in chat_end_full.attrs['class']\n    assert chat_end_full.children[0].children[0].children[0].attrs['src'] == anakeen_img\n    assert chat_end_full.children[1].children[0] == \"Anakin\"\n    assert chat_end_full.children[1].children[1].children[0] == \"12:46\"\n    assert chat_end_full.children[2].children[0] == \"I hate you!\"\n    assert chat_end_full.children[3].children[0] == \"Seen at 12:46\"\n    \n    # Chat with header and footer (no image)\n    chat_no_image_1 = Div(\n        Div(\n            \"Obi-Wan Kenobi\",\n            Time(\"2 hours ago\", cls=combine_classes(font_size.xs, opacity._50)),\n            cls=str(chat_header)\n        ),\n        Div(\n            \"You were the Chosen One!\",\n            cls=str(chat_bubble)\n        ),\n        Div(\n            \"Seen\",\n            cls=combine_classes(chat_footer, opacity._50)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert len(chat_no_image_1.children) == 3  # No image component\n    assert \"chat-header\" in chat_no_image_1.children[0].attrs['class']\n    assert chat_no_image_1.children[0].children[0] == \"Obi-Wan Kenobi\"\n    assert chat_no_image_1.children[0].children[1].children[0] == \"2 hours ago\"\n    assert \"chat-bubble\" in chat_no_image_1.children[1].attrs['class']\n    assert chat_no_image_1.children[1].children[0] == \"You were the Chosen One!\"\n    assert \"chat-footer\" in chat_no_image_1.children[2].attrs['class']\n    assert chat_no_image_1.children[2].children[0] == \"Seen\"\n    \n    chat_no_image_2 = Div(\n        Div(\n            \"Obi-Wan Kenobi\",\n            Time(\"2 hour ago\", cls=combine_classes(font_size.xs, opacity._50)),\n            cls=str(chat_header)\n        ),\n        Div(\n            \"I loved you.\",\n            cls=str(chat_bubble)\n        ),\n        Div(\n            \"Delivered\",\n            cls=combine_classes(chat_footer, opacity._50)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert chat_no_image_2.children[0].children[1].children[0] == \"2 hour ago\"\n    assert chat_no_image_2.children[1].children[0] == \"I loved you.\"\n    assert chat_no_image_2.children[2].children[0] == \"Delivered\"\n    \n    # Return all examples in a Div\n    return Div(chat_start_full, chat_end_full, chat_no_image_1, chat_no_image_2)\n\n# Run the tests\ntest_chat_with_header_footer_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-image avatar\"&gt;\n      &lt;div class=\"w-10 rounded-full\"&gt;\n&lt;img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/profile/demo/kenobee@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"chat-header\"&gt;\nObi-Wan Kenobi&lt;time class=\"text-xs opacity-50\"&gt;12:45&lt;/time&gt;    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;You were the Chosen One!&lt;/div&gt;\n    &lt;div class=\"chat-footer opacity-50\"&gt;Delivered&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-end\"&gt;\n    &lt;div class=\"chat-image avatar\"&gt;\n      &lt;div class=\"w-10 rounded-full\"&gt;\n&lt;img alt=\"Tailwind CSS chat bubble component\" src=\"https://img.daisyui.com/images/profile/demo/anakeen@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"chat-header\"&gt;\nAnakin&lt;time class=\"text-xs opacity-50\"&gt;12:46&lt;/time&gt;    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;I hate you!&lt;/div&gt;\n    &lt;div class=\"chat-footer opacity-50\"&gt;Seen at 12:46&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-header\"&gt;\nObi-Wan Kenobi&lt;time class=\"text-xs opacity-50\"&gt;2 hours ago&lt;/time&gt;    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;You were the Chosen One!&lt;/div&gt;\n    &lt;div class=\"chat-footer opacity-50\"&gt;Seen&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-header\"&gt;\nObi-Wan Kenobi&lt;time class=\"text-xs opacity-50\"&gt;2 hour ago&lt;/time&gt;    &lt;/div&gt;\n    &lt;div class=\"chat-bubble\"&gt;I loved you.&lt;/div&gt;\n    &lt;div class=\"chat-footer opacity-50\"&gt;Delivered&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_chat_with_header_footer_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_chat_colors_fasthtml_examples\n\n test_chat_colors_fasthtml_examples ()\n\nTest chat bubble with colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_chat_colors_fasthtml_examples():\n    \"\"\"Test chat bubble with colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    \n    # Chat bubbles with different colors - all start aligned\n    primary_chat = Div(\n        Div(\n            \"What kind of nonsense is this\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.primary)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert \"chat\" in primary_chat.attrs['class']\n    assert \"chat-start\" in primary_chat.attrs['class']\n    assert \"chat-bubble\" in primary_chat.children[0].attrs['class']\n    assert \"chat-bubble-primary\" in primary_chat.children[0].attrs['class']\n    assert primary_chat.children[0].children[0] == \"What kind of nonsense is this\"\n    \n    secondary_chat = Div(\n        Div(\n            \"Put me on the Council and not make me a Master!??\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.secondary)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert \"chat-bubble-secondary\" in secondary_chat.children[0].attrs['class']\n    assert secondary_chat.children[0].children[0] == \"Put me on the Council and not make me a Master!??\"\n    \n    accent_chat = Div(\n        Div(\n            \"That's never been done in the history of the Jedi.\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.accent)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert \"chat-bubble-accent\" in accent_chat.children[0].attrs['class']\n    assert accent_chat.children[0].children[0] == \"That's never been done in the history of the Jedi.\"\n    \n    neutral_chat = Div(\n        Div(\n            \"It's insulting!\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.neutral)\n        ),\n        cls=combine_classes(chat, chat_placement.start)\n    )\n    assert \"chat-bubble-neutral\" in neutral_chat.children[0].attrs['class']\n    assert neutral_chat.children[0].children[0] == \"It's insulting!\"\n    \n    # Chat bubbles with different colors - all end aligned\n    info_chat = Div(\n        Div(\n            \"Calm down, Anakin.\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.info)\n        ),\n        cls=combine_classes(chat, chat_placement.end)\n    )\n    assert \"chat\" in info_chat.attrs['class']\n    assert \"chat-end\" in info_chat.attrs['class']\n    assert \"chat-bubble-info\" in info_chat.children[0].attrs['class']\n    assert info_chat.children[0].children[0] == \"Calm down, Anakin.\"\n    \n    success_chat = Div(\n        Div(\n            \"You have been given a great honor.\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.success)\n        ),\n        cls=combine_classes(chat, chat_placement.end)\n    )\n    assert \"chat-bubble-success\" in success_chat.children[0].attrs['class']\n    assert success_chat.children[0].children[0] == \"You have been given a great honor.\"\n    \n    warning_chat = Div(\n        Div(\n            \"To be on the Council at your age.\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.warning)\n        ),\n        cls=combine_classes(chat, chat_placement.end)\n    )\n    assert \"chat-bubble-warning\" in warning_chat.children[0].attrs['class']\n    assert warning_chat.children[0].children[0] == \"To be on the Council at your age.\"\n    \n    error_chat = Div(\n        Div(\n            \"It's never happened before.\",\n            cls=combine_classes(chat_bubble, chat_bubble_colors.error)\n        ),\n        cls=combine_classes(chat, chat_placement.end)\n    )\n    assert \"chat-bubble-error\" in error_chat.children[0].attrs['class']\n    assert error_chat.children[0].children[0] == \"It's never happened before.\"\n    \n    # Return all examples in a Div\n    return Div(\n        primary_chat, secondary_chat, accent_chat, neutral_chat,\n        info_chat, success_chat, warning_chat, error_chat\n    )\n\n# Run the tests\ntest_chat_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-primary\"&gt;What kind of nonsense is this&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-secondary\"&gt;Put me on the Council and not make me a Master!??&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-accent\"&gt;That's never been done in the history of the Jedi.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-start\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-neutral\"&gt;It's insulting!&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-end\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-info\"&gt;Calm down, Anakin.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-end\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-success\"&gt;You have been given a great honor.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-end\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-warning\"&gt;To be on the Council at your age.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"chat chat-end\"&gt;\n    &lt;div class=\"chat-bubble chat-bubble-error\"&gt;It's never happened before.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_chat_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "chat bubble"
    ]
  },
  {
    "objectID": "components/data_display/hover_gallery.html",
    "href": "components/data_display/hover_gallery.html",
    "title": "hover gallery",
    "section": "",
    "text": "Base Hover Gallery Component\nThe base hover gallery components:\n\n\nExported source\nhover_gallery = SingleValueFactory(\"hover-gallery\", \"Container &lt;div&gt; or &lt;figure&gt; that includes images \") # Hover gallery container\n\n\n\n\nHover Gallery Test Examples\n\nsource\n\n\ntest_hover_gallery_basic_examples\n\n test_hover_gallery_basic_examples ()\n\nTest basic hover gallery utilities.\n\n\nExported source\ndef test_hover_gallery_basic_examples():\n    \"\"\"Test basic hover gallery utilities.\"\"\"\n    # Basic components\n    assert str(hover_gallery) == \"hover-gallery\"\n    \n    # With modifiers\n    assert str(hover_gallery.hover) == \"hover:hover-gallery\"\n    assert str(hover_gallery.md) == \"md:hover-gallery\"\n    assert str(hover_gallery.dark) == \"dark:hover-gallery\"\n\n# Run the tests\ntest_hover_gallery_basic_examples()\n\n\n\nsource\n\n\ntest_hover_gallery_basic_fasthtml_examples\n\n test_hover_gallery_basic_fasthtml_examples ()\n\nTest basic hover gallery from daisyUI v5 documentation.\n\n\nExported source\ndef test_hover_gallery_basic_fasthtml_examples():\n    \"\"\"Test basic hover gallery from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Figure, Div, Img\n    from cjm_fasthtml_tailwind.utilities.layout import aspect\n    from cjm_fasthtml_tailwind.utilities.sizing import max_w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Basic hover gallery\n    img_gallery = Figure(\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-1.webp\"),\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-2.webp\"),\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-3.webp\"),\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-4.webp\"),\n        cls=combine_classes(hover_gallery, max_w(60))\n    )\n    assert img_gallery.tag == \"figure\"\n    assert \"hover-gallery\" in img_gallery.attrs['class']\n    \n    # Return the components in a Div\n    return Div(img_gallery)\n\n# Run the tests\ntest_hover_gallery_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;figure class=\"hover-gallery max-w-60\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-1.webp\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-2.webp\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-3.webp\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-4.webp\"&gt;&lt;/figure&gt;&lt;/div&gt;\n\n\n\ntest_func = test_hover_gallery_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_hover_gallery_card_fasthtml_examples\n\n test_hover_gallery_card_fasthtml_examples ()\n\nTest basic hover gallery in card from daisyUI v5 documentation.\n\n\nExported source\ndef test_hover_gallery_card_fasthtml_examples():\n    \"\"\"Test basic hover gallery in card from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Figure, Div, Img, H2, Span, P\n    from cjm_fasthtml_tailwind.utilities.layout import aspect\n    from cjm_fasthtml_tailwind.utilities.sizing import max_w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display, flex_display, justify\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_title, card_sizes, card_body\n\n    # Basic hover gallery\n    img_gallery = Figure(\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-1.webp\"),\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-2.webp\"),\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-3.webp\"),\n        Img(src=\"https://img.daisyui.com/images/stock/daisyui-hat-4.webp\"),\n        cls=combine_classes(hover_gallery)\n    )\n    assert img_gallery.tag == \"figure\"\n    assert \"hover-gallery\" in img_gallery.attrs['class']\n\n    img_gallery_card = Div(\n        img_gallery,\n        Div(\n            H2(\n                \"daisyUI Hat\", \n                Span(\"$25\", cls=combine_classes(font_weight.normal)), \n                cls=combine_classes(card_title, flex_display, justify.between)),\n            P(\"High Quality classic cap hat with stitch logo\"),\n            cls=combine_classes(card_body)\n        ),\n        cls=combine_classes(card, max_w(60), card_sizes.sm, bg_dui.base_200, shadow())\n    )\n    # Return the components in a Div\n    return Div(img_gallery_card)\n\n# Run the tests\ntest_hover_gallery_card_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card max-w-60 card-sm bg-base-200 shadow\"&gt;\n&lt;figure class=\"hover-gallery\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-1.webp\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-2.webp\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-3.webp\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/daisyui-hat-4.webp\"&gt;&lt;/figure&gt;    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title flex justify-between\"&gt;\ndaisyUI Hat&lt;span class=\"font-normal\"&gt;$25&lt;/span&gt;      &lt;/h2&gt;\n      &lt;p&gt;High Quality classic cap hat with stitch logo&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_hover_gallery_card_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "hover gallery"
    ]
  },
  {
    "objectID": "components/data_display/carousel.html",
    "href": "components/data_display/carousel.html",
    "title": "carousel",
    "section": "",
    "text": "Base Carousel\nThe base carousel components:\n\n\nExported source\ncarousel = SingleValueFactory(\"carousel\", \"Carousel container\") # Carousel container\ncarousel_item = SingleValueFactory(\"carousel-item\", \"Carousel item\") # Carousel item\n\n\n\n\nCarousel Snap Alignment\nCarousel snap alignment modifiers:\n\n\nExported source\ncarousel_snap = SimpleFactory(\n    {\n        \"start\": \"carousel-start\",\n        \"center\": \"carousel-center\",\n        \"end\": \"carousel-end\"\n    },\n    \"Carousel snap alignment options (start is default)\"\n) # Carousel snap alignment\n\n\n\n\nCarousel Direction\nCarousel direction modifiers:\n\n\nExported source\ncarousel_direction = SimpleFactory(\n    {\n        \"horizontal\": \"carousel-horizontal\",\n        \"vertical\": \"carousel-vertical\"\n    },\n    \"Carousel direction layout (horizontal is default)\"\n) # Carousel direction\n\n\n\n\nCarousel Test Examples\n\nsource\n\n\ntest_carousel_basic_examples\n\n test_carousel_basic_examples ()\n\nTest basic carousel utilities.\n\n\nExported source\ndef test_carousel_basic_examples():\n    \"\"\"Test basic carousel utilities.\"\"\"\n    # Basic components\n    assert str(carousel) == \"carousel\"\n    assert str(carousel_item) == \"carousel-item\"\n    \n    # With modifiers\n    assert str(carousel.hover) == \"hover:carousel\"\n    assert str(carousel_item.md) == \"md:carousel-item\"\n    assert str(carousel.dark) == \"dark:carousel\"\n\n# Run the tests\ntest_carousel_basic_examples()\n\n\n\nsource\n\n\ntest_carousel_modifiers_examples\n\n test_carousel_modifiers_examples ()\n\nTest carousel modifier utilities.\n\n\nExported source\ndef test_carousel_modifiers_examples():\n    \"\"\"Test carousel modifier utilities.\"\"\"\n    # Snap alignment\n    assert str(carousel_snap.start) == \"carousel-start\"\n    assert str(carousel_snap.center) == \"carousel-center\"\n    assert str(carousel_snap.end) == \"carousel-end\"\n    \n    # Direction\n    assert str(carousel_direction.horizontal) == \"carousel-horizontal\"\n    assert str(carousel_direction.vertical) == \"carousel-vertical\"\n    \n    # With responsive modifiers\n    assert str(carousel_snap.center.hover) == \"hover:carousel-center\"\n    assert str(carousel_direction.vertical.md) == \"md:carousel-vertical\"\n\n# Run the tests\ntest_carousel_modifiers_examples()\n\n\n\nsource\n\n\ntest_carousel_snap_alignment_fasthtml_examples\n\n test_carousel_snap_alignment_fasthtml_examples ()\n\nTest carousel snap alignment examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_carousel_snap_alignment_fasthtml_examples():\n    \"\"\"Test carousel snap alignment examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    \n    # Snap to start (default)\n    snap_start_carousel = Div(\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\",\n                alt=\"Burger\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\",\n                alt=\"Burger\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\",\n                alt=\"Burger\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp\",\n                alt=\"Burger\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1550258987-190a2d41a8ba.webp\",\n                alt=\"Burger\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1559181567-c3190ca9959b.webp\",\n                alt=\"Burger\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1601004890684-d8cbf643f5f2.webp\",\n                alt=\"Burger\"\n            ),\n            cls=str(carousel_item)\n        ),\n        cls=combine_classes(carousel, border_radius.box)\n    )\n    assert \"carousel\" in snap_start_carousel.attrs['class']\n    assert \"rounded-box\" in snap_start_carousel.attrs['class']\n    assert len(snap_start_carousel.children) == 7\n    for child in snap_start_carousel.children:\n        assert \"carousel-item\" in child.attrs['class']\n        assert child.children[0].tag == \"img\"\n        assert child.children[0].attrs['alt'] == \"Burger\"\n    \n    # Snap to center\n    snap_center_carousel = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", alt=\"Pizza\"),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\",\n                alt=\"Pizza\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\",\n                alt=\"Pizza\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp\",\n                alt=\"Pizza\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(src=\"https://img.daisyui.com/images/stock/photo-1550258987-190a2d41a8ba.webp\", alt=\"Pizza\"),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(src=\"https://img.daisyui.com/images/stock/photo-1559181567-c3190ca9959b.webp\", alt=\"Pizza\"),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1601004890684-d8cbf643f5f2.webp\",\n                alt=\"Pizza\"\n            ),\n            cls=str(carousel_item)\n        ),\n        cls=combine_classes(carousel, carousel_snap.center, border_radius.box)\n    )\n    assert \"carousel\" in snap_center_carousel.attrs['class']\n    assert \"carousel-center\" in snap_center_carousel.attrs['class']\n    assert \"rounded-box\" in snap_center_carousel.attrs['class']\n    for child in snap_center_carousel.children:\n        assert child.children[0].attrs['alt'] == \"Pizza\"\n    \n    # Snap to end\n    snap_end_carousel = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\", alt=\"Drink\"),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\",\n                alt=\"Drink\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\",\n                alt=\"Drink\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp\",\n                alt=\"Drink\"\n            ),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(src=\"https://img.daisyui.com/images/stock/photo-1550258987-190a2d41a8ba.webp\", alt=\"Drink\"),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(src=\"https://img.daisyui.com/images/stock/photo-1559181567-c3190ca9959b.webp\", alt=\"Drink\"),\n            cls=str(carousel_item)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1601004890684-d8cbf643f5f2.webp\",\n                alt=\"Drink\"\n            ),\n            cls=str(carousel_item)\n        ),\n        cls=combine_classes(carousel, carousel_snap.end, border_radius.box)\n    )\n    assert \"carousel\" in snap_end_carousel.attrs['class']\n    assert \"carousel-end\" in snap_end_carousel.attrs['class']\n    assert \"rounded-box\" in snap_end_carousel.attrs['class']\n    for child in snap_end_carousel.children:\n        assert child.children[0].attrs['alt'] == \"Drink\"\n    \n    # Return all examples in a Div\n    return Div(\n        snap_start_carousel,\n        snap_center_carousel,\n        snap_end_carousel\n    )\n\n# Run the tests\ntest_carousel_snap_alignment_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"carousel rounded-box\"&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Burger\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\" alt=\"Burger\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\" alt=\"Burger\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp\" alt=\"Burger\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1550258987-190a2d41a8ba.webp\" alt=\"Burger\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559181567-c3190ca9959b.webp\" alt=\"Burger\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1601004890684-d8cbf643f5f2.webp\" alt=\"Burger\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"carousel carousel-center rounded-box\"&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Pizza\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\" alt=\"Pizza\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\" alt=\"Pizza\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp\" alt=\"Pizza\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1550258987-190a2d41a8ba.webp\" alt=\"Pizza\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559181567-c3190ca9959b.webp\" alt=\"Pizza\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1601004890684-d8cbf643f5f2.webp\" alt=\"Pizza\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"carousel carousel-end rounded-box\"&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp\" alt=\"Drink\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1565098772267-60af42b81ef2.webp\" alt=\"Drink\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1572635148818-ef6fd45eb394.webp\" alt=\"Drink\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1494253109108-2e30c049369b.webp\" alt=\"Drink\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1550258987-190a2d41a8ba.webp\" alt=\"Drink\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1559181567-c3190ca9959b.webp\" alt=\"Drink\"&gt;    &lt;/div&gt;\n    &lt;div class=\"carousel-item\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1601004890684-d8cbf643f5f2.webp\" alt=\"Drink\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_carousel_snap_alignment_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_carousel_layout_fasthtml_variations\n\n test_carousel_layout_fasthtml_variations ()\n\nTest carousel layout variations from daisyUI v5 documentation.\n\ntest_func = test_carousel_layout_fasthtml_variations\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_carousel_navigation_fasthtml_examples\n\n test_carousel_navigation_fasthtml_examples ()\n\nTest carousel with navigation examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_carousel_navigation_fasthtml_examples():\n    \"\"\"Test carousel with navigation examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img, A\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify, gap, flex_display\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw, position, left, right, top\n    from cjm_fasthtml_tailwind.utilities.transforms import translate, transform\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers\n    \n    # Carousel with indicator buttons\n    carousel_with_indicators = Div(\n        Div(\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/stock/photo-1625726411847-8cbb60cc71e6.webp\",\n                    cls=str(w.full)\n                ),\n                id=\"item1\",\n                cls=combine_classes(carousel_item, w.full)\n            ),\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/stock/photo-1609621838510-5ad474b7d25d.webp\",\n                    cls=str(w.full)\n                ),\n                id=\"item2\",\n                cls=combine_classes(carousel_item, w.full)\n            ),\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/stock/photo-1414694762283-acccc27bca85.webp\",\n                    cls=str(w.full)\n                ),\n                id=\"item3\",\n                cls=combine_classes(carousel_item, w.full)\n            ),\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/stock/photo-1665553365602-b2fb8e5d1707.webp\",\n                    cls=str(w.full)\n                ),\n                id=\"item4\",\n                cls=combine_classes(carousel_item, w.full)\n            ),\n            cls=combine_classes(carousel, w.full)\n        ),\n        Div(\n            A(\"1\", href=\"#item1\", cls=combine_classes(btn, btn_sizes.xs)),\n            A(\"2\", href=\"#item2\", cls=combine_classes(btn, btn_sizes.xs)),\n            A(\"3\", href=\"#item3\", cls=combine_classes(btn, btn_sizes.xs)),\n            A(\"4\", href=\"#item4\", cls=combine_classes(btn, btn_sizes.xs)),\n            cls=combine_classes(flex_display, w.full, justify.center, gap._2, p.y._2)\n        )\n    )\n    \n    # Verify carousel structure\n    carousel_div = carousel_with_indicators.children[0]\n    assert \"carousel\" in carousel_div.attrs['class']\n    assert \"w-full\" in carousel_div.attrs['class']\n    assert len(carousel_div.children) == 4\n    \n    # Verify carousel items\n    for i, child in enumerate(carousel_div.children):\n        assert \"carousel-item\" in child.attrs['class']\n        assert \"w-full\" in child.attrs['class']\n        assert child.attrs['id'] == f\"item{i+1}\"\n        assert child.children[0].tag == \"img\"\n        assert \"w-full\" in child.children[0].attrs['class']\n    \n    # Verify indicator buttons\n    indicators_div = carousel_with_indicators.children[1]\n    assert \"flex\" in indicators_div.attrs['class']\n    assert \"w-full\" in indicators_div.attrs['class']\n    assert \"justify-center\" in indicators_div.attrs['class']\n    assert \"gap-2\" in indicators_div.attrs['class']\n    assert \"py-2\" in indicators_div.attrs['class']\n    \n    for i, indicator in enumerate(indicators_div.children):\n        assert indicator.tag == \"a\"\n        assert indicator.attrs['href'] == f\"#item{i+1}\"\n        assert \"btn\" in indicator.attrs['class']\n        assert \"btn-xs\" in indicator.attrs['class']\n        assert indicator.children[0] == str(i+1)\n    \n    # Carousel with next/prev buttons\n    carousel_with_nav = Div(\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1625726411847-8cbb60cc71e6.webp\",\n                cls=str(w.full)\n            ),\n            Div(\n                A(\"❮\", href=\"#slide4\", cls=combine_classes(btn, btn_modifiers.circle)),\n                A(\"❯\", href=\"#slide2\", cls=combine_classes(btn, btn_modifiers.circle)),\n                cls=combine_classes(\n                    position.absolute,\n                    left._5,\n                    right._5,\n                    top(\"1/2\"),\n                    flex_display,\n                    translate.y(\"1/2\", negative=True),\n                    justify.between\n                )\n            ),\n            id=\"slide1\",\n            cls=combine_classes(carousel_item, position.relative, w.full)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1609621838510-5ad474b7d25d.webp\",\n                cls=str(w.full)\n            ),\n            Div(\n                A(\"❮\", href=\"#slide1\", cls=combine_classes(btn, btn_modifiers.circle)),\n                A(\"❯\", href=\"#slide3\", cls=combine_classes(btn, btn_modifiers.circle)),\n                cls=combine_classes(\n                    position.absolute,\n                    left._5,\n                    right._5,\n                    top(\"1/2\"),\n                    flex_display,\n                    translate.y(\"1/2\", negative=True),\n                    justify.between\n                )\n            ),\n            id=\"slide2\",\n            cls=combine_classes(carousel_item, position.relative, w.full)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1414694762283-acccc27bca85.webp\",\n                cls=str(w.full)\n            ),\n            Div(\n                A(\"❮\", href=\"#slide2\", cls=combine_classes(btn, btn_modifiers.circle)),\n                A(\"❯\", href=\"#slide4\", cls=combine_classes(btn, btn_modifiers.circle)),\n                cls=combine_classes(\n                    position.absolute,\n                    left._5,\n                    right._5,\n                    top(\"1/2\"),\n                    flex_display,\n                    translate.y(\"1/2\", negative=True),\n                    justify.between\n                )\n            ),\n            id=\"slide3\",\n            cls=combine_classes(carousel_item, position.relative, w.full)\n        ),\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1665553365602-b2fb8e5d1707.webp\",\n                cls=str(w.full)\n            ),\n            Div(\n                A(\"❮\", href=\"#slide3\", cls=combine_classes(btn, btn_modifiers.circle)),\n                A(\"❯\", href=\"#slide1\", cls=combine_classes(btn, btn_modifiers.circle)),\n                cls=combine_classes(\n                    position.absolute,\n                    left._5,\n                    right._5,\n                    top(\"1/2\"),\n                    flex_display,\n                    translate.y(\"1/2\", negative=True),\n                    justify.between\n                )\n            ),\n            id=\"slide4\",\n            cls=combine_classes(carousel_item, position.relative, w.full)\n        ),\n        cls=combine_classes(carousel, w.full)\n    )\n    \n    # Verify carousel structure\n    assert \"carousel\" in carousel_with_nav.attrs['class']\n    assert \"w-full\" in carousel_with_nav.attrs['class']\n    assert len(carousel_with_nav.children) == 4\n    \n    # Verify each slide\n    for i, slide in enumerate(carousel_with_nav.children):\n        slide_num = i + 1\n        assert slide.attrs['id'] == f\"slide{slide_num}\"\n        assert \"carousel-item\" in slide.attrs['class']\n        assert \"relative\" in slide.attrs['class']\n        assert \"w-full\" in slide.attrs['class']\n        \n        # Verify image\n        assert slide.children[0].tag == \"img\"\n        assert \"w-full\" in slide.children[0].attrs['class']\n        \n        # Verify navigation controls\n        nav_div = slide.children[1]\n        assert \"absolute\" in nav_div.attrs['class']\n        assert \"left-5\" in nav_div.attrs['class']\n        assert \"right-5\" in nav_div.attrs['class']\n        assert \"top-1/2\" in nav_div.attrs['class']\n        assert \"flex\" in nav_div.attrs['class']\n        assert \"-translate-y-1/2\" in nav_div.attrs['class']\n        assert \"justify-between\" in nav_div.attrs['class']\n        \n        # Verify prev/next buttons\n        prev_btn = nav_div.children[0]\n        next_btn = nav_div.children[1]\n        assert prev_btn.tag == \"a\"\n        assert next_btn.tag == \"a\"\n        assert \"btn\" in prev_btn.attrs['class']\n        assert \"btn-circle\" in prev_btn.attrs['class']\n        assert \"btn\" in next_btn.attrs['class']\n        assert \"btn-circle\" in next_btn.attrs['class']\n        assert prev_btn.children[0] == \"❮\"\n        assert next_btn.children[0] == \"❯\"\n        \n        # Verify href links form a circular navigation\n        if slide_num == 1:\n            assert prev_btn.attrs['href'] == \"#slide4\"\n            assert next_btn.attrs['href'] == \"#slide2\"\n        elif slide_num == 2:\n            assert prev_btn.attrs['href'] == \"#slide1\"\n            assert next_btn.attrs['href'] == \"#slide3\"\n        elif slide_num == 3:\n            assert prev_btn.attrs['href'] == \"#slide2\"\n            assert next_btn.attrs['href'] == \"#slide4\"\n        elif slide_num == 4:\n            assert prev_btn.attrs['href'] == \"#slide3\"\n            assert next_btn.attrs['href'] == \"#slide1\"\n    \n    # Return all examples in a Div\n    return Div(\n        carousel_with_indicators,\n        carousel_with_nav\n    )\n\n# Run the tests\ntest_carousel_navigation_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;div class=\"carousel w-full\"&gt;\n      &lt;div id=\"item1\" class=\"carousel-item w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1625726411847-8cbb60cc71e6.webp\" class=\"w-full\"&gt;      &lt;/div&gt;\n      &lt;div id=\"item2\" class=\"carousel-item w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1609621838510-5ad474b7d25d.webp\" class=\"w-full\"&gt;      &lt;/div&gt;\n      &lt;div id=\"item3\" class=\"carousel-item w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1414694762283-acccc27bca85.webp\" class=\"w-full\"&gt;      &lt;/div&gt;\n      &lt;div id=\"item4\" class=\"carousel-item w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1665553365602-b2fb8e5d1707.webp\" class=\"w-full\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"flex w-full justify-center gap-2 py-2\"&gt;\n&lt;a href=\"#item1\" class=\"btn btn-xs\"&gt;1&lt;/a&gt;&lt;a href=\"#item2\" class=\"btn btn-xs\"&gt;2&lt;/a&gt;&lt;a href=\"#item3\" class=\"btn btn-xs\"&gt;3&lt;/a&gt;&lt;a href=\"#item4\" class=\"btn btn-xs\"&gt;4&lt;/a&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"carousel w-full\"&gt;\n    &lt;div id=\"slide1\" class=\"carousel-item relative w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1625726411847-8cbb60cc71e6.webp\" class=\"w-full\"&gt;      &lt;div class=\"absolute left-5 right-5 top-1/2 flex -translate-y-1/2 justify-between\"&gt;\n&lt;a href=\"#slide4\" class=\"btn btn-circle\"&gt;❮&lt;/a&gt;&lt;a href=\"#slide2\" class=\"btn btn-circle\"&gt;❯&lt;/a&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"slide2\" class=\"carousel-item relative w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1609621838510-5ad474b7d25d.webp\" class=\"w-full\"&gt;      &lt;div class=\"absolute left-5 right-5 top-1/2 flex -translate-y-1/2 justify-between\"&gt;\n&lt;a href=\"#slide1\" class=\"btn btn-circle\"&gt;❮&lt;/a&gt;&lt;a href=\"#slide3\" class=\"btn btn-circle\"&gt;❯&lt;/a&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"slide3\" class=\"carousel-item relative w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1414694762283-acccc27bca85.webp\" class=\"w-full\"&gt;      &lt;div class=\"absolute left-5 right-5 top-1/2 flex -translate-y-1/2 justify-between\"&gt;\n&lt;a href=\"#slide2\" class=\"btn btn-circle\"&gt;❮&lt;/a&gt;&lt;a href=\"#slide4\" class=\"btn btn-circle\"&gt;❯&lt;/a&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"slide4\" class=\"carousel-item relative w-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1665553365602-b2fb8e5d1707.webp\" class=\"w-full\"&gt;      &lt;div class=\"absolute left-5 right-5 top-1/2 flex -translate-y-1/2 justify-between\"&gt;\n&lt;a href=\"#slide3\" class=\"btn btn-circle\"&gt;❮&lt;/a&gt;&lt;a href=\"#slide1\" class=\"btn btn-circle\"&gt;❯&lt;/a&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_carousel_navigation_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "carousel"
    ]
  },
  {
    "objectID": "components/data_display/badge.html",
    "href": "components/data_display/badge.html",
    "title": "badge",
    "section": "",
    "text": "Base Badge\nThe base badge component:\n\n\nExported source\nbadge = SingleValueFactory(\"badge\", \"Badge container element\") # Badge container\n\n\n\n\nBadge Colors\nBadge color variants using daisyUI semantic colors:\n\n\nExported source\nbadge_colors = enums_to_simple_factory(badge, [SemanticColorBrand, SemanticColorStatus], \"Badge color variants using daisyUI semantic colors\") # Badge color variants\n\n\n\n\nBadge Styles\nDifferent badge style variants:\n\n\nExported source\nbadge_styles = enums_to_simple_factory(badge, [OutlineStyle, DashStyle, SoftStyle, GhostStyle], \"Badge style variants (outline, dash, soft, ghost)\") # Badge style variants\n\n\n\n\nBadge Sizes\nBadge size variants:\n\n\nExported source\nbadge_sizes = enums_to_simple_factory(badge, [DaisyUINamedSize], \"Badge size variants from extra small to extra large\") # Badge size variants\n\n\n\n\nBadge Test Examples\n\nsource\n\n\ntest_badge_basic_examples\n\n test_badge_basic_examples ()\n\nTest basic badge utilities.\n\n\nExported source\ndef test_badge_basic_examples():\n    \"\"\"Test basic badge utilities.\"\"\"\n    # Basic badge\n    assert str(badge) == \"badge\"\n    \n    # With modifiers\n    assert str(badge.hover) == \"hover:badge\"\n    assert str(badge.md) == \"md:badge\"\n    assert str(badge.dark) == \"dark:badge\"\n\n# Run the tests\ntest_badge_basic_examples()\n\n\n\nsource\n\n\ntest_badge_colors_examples\n\n test_badge_colors_examples ()\n\nTest badge color variants.\n\n\nExported source\ndef test_badge_colors_examples():\n    \"\"\"Test badge color variants.\"\"\"\n    # All color variants\n    assert str(badge_colors.neutral) == \"badge-neutral\"\n    assert str(badge_colors.primary) == \"badge-primary\"\n    assert str(badge_colors.secondary) == \"badge-secondary\"\n    assert str(badge_colors.accent) == \"badge-accent\"\n    assert str(badge_colors.info) == \"badge-info\"\n    assert str(badge_colors.success) == \"badge-success\"\n    assert str(badge_colors.warning) == \"badge-warning\"\n    assert str(badge_colors.error) == \"badge-error\"\n    \n    # With modifiers\n    assert str(badge_colors.primary.hover) == \"hover:badge-primary\"\n    assert str(badge_colors.success.focus) == \"focus:badge-success\"\n\n# Run the tests\ntest_badge_colors_examples()\n\n\n\nsource\n\n\ntest_badge_styles_examples\n\n test_badge_styles_examples ()\n\nTest badge style variants.\n\n\nExported source\ndef test_badge_styles_examples():\n    \"\"\"Test badge style variants.\"\"\"\n    assert str(badge_styles.outline) == \"badge-outline\"\n    assert str(badge_styles.dash) == \"badge-dash\"\n    assert str(badge_styles.soft) == \"badge-soft\"\n    assert str(badge_styles.ghost) == \"badge-ghost\"\n\n# Run the tests\ntest_badge_styles_examples()\n\n\n\nsource\n\n\ntest_badge_sizes_examples\n\n test_badge_sizes_examples ()\n\nTest badge size variants.\n\n\nExported source\ndef test_badge_sizes_examples():\n    \"\"\"Test badge size variants.\"\"\"\n    assert str(badge_sizes.xs) == \"badge-xs\"\n    assert str(badge_sizes.sm) == \"badge-sm\"\n    assert str(badge_sizes.md) == \"badge-md\"\n    assert str(badge_sizes.lg) == \"badge-lg\"\n    assert str(badge_sizes.xl) == \"badge-xl\"\n    \n    # With responsive modifiers\n    assert str(badge_sizes.xs.sm) == \"sm:badge-xs\"\n    assert str(badge_sizes.lg.md) == \"md:badge-lg\"\n\n# Run the tests\ntest_badge_sizes_examples()\n\n\n\nsource\n\n\ntest_badge_basic_fasthtml_examples\n\n test_badge_basic_fasthtml_examples ()\n\nTest basic badge and badge sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_badge_basic_fasthtml_examples():\n    \"\"\"Test basic badge and badge sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Basic badge\n    basic_badge = Span(\"Badge\", cls=str(badge))\n    assert basic_badge.tag == \"span\"\n    assert basic_badge.attrs['class'] == \"badge\"\n    assert basic_badge.children[0] == \"Badge\"\n    \n    # Badge sizes\n    xs_badge = Div(\"Xsmall\", cls=combine_classes(badge, badge_sizes.xs))\n    assert xs_badge.tag == \"div\"\n    assert \"badge\" in xs_badge.attrs['class']\n    assert \"badge-xs\" in xs_badge.attrs['class']\n    assert xs_badge.children[0] == \"Xsmall\"\n    \n    sm_badge = Div(\"Small\", cls=combine_classes(badge, badge_sizes.sm))\n    assert \"badge\" in sm_badge.attrs['class']\n    assert \"badge-sm\" in sm_badge.attrs['class']\n    assert sm_badge.children[0] == \"Small\"\n    \n    md_badge = Div(\"Medium\", cls=combine_classes(badge, badge_sizes.md))\n    assert \"badge\" in md_badge.attrs['class']\n    assert \"badge-md\" in md_badge.attrs['class']\n    assert md_badge.children[0] == \"Medium\"\n    \n    lg_badge = Div(\"Large\", cls=combine_classes(badge, badge_sizes.lg))\n    assert \"badge\" in lg_badge.attrs['class']\n    assert \"badge-lg\" in lg_badge.attrs['class']\n    assert lg_badge.children[0] == \"Large\"\n    \n    xl_badge = Div(\"Xlarge\", cls=combine_classes(badge, badge_sizes.xl))\n    assert \"badge\" in xl_badge.attrs['class']\n    assert \"badge-xl\" in xl_badge.attrs['class']\n    assert xl_badge.children[0] == \"Xlarge\"\n    \n    # Return all elements in a Div\n    return Div(\n        basic_badge,\n        xs_badge,\n        sm_badge,\n        md_badge,\n        lg_badge,\n        xl_badge\n    )\n\n# Run the tests\ntest_badge_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"badge\"&gt;Badge&lt;/span&gt;  &lt;div class=\"badge badge-xs\"&gt;Xsmall&lt;/div&gt;\n  &lt;div class=\"badge badge-sm\"&gt;Small&lt;/div&gt;\n  &lt;div class=\"badge badge-md\"&gt;Medium&lt;/div&gt;\n  &lt;div class=\"badge badge-lg\"&gt;Large&lt;/div&gt;\n  &lt;div class=\"badge badge-xl\"&gt;Xlarge&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_badge_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_badge_colors_fasthtml_examples\n\n test_badge_colors_fasthtml_examples ()\n\nTest badge with colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_badge_colors_fasthtml_examples():\n    \"\"\"Test badge with colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    \n    # Badge with colors\n    primary_badge = Div(\"Primary\", cls=combine_classes(badge, badge_colors.primary))\n    assert primary_badge.tag == \"div\"\n    assert \"badge\" in primary_badge.attrs['class']\n    assert \"badge-primary\" in primary_badge.attrs['class']\n    assert primary_badge.children[0] == \"Primary\"\n    \n    secondary_badge = Div(\"Secondary\", cls=combine_classes(badge, badge_colors.secondary))\n    assert \"badge\" in secondary_badge.attrs['class']\n    assert \"badge-secondary\" in secondary_badge.attrs['class']\n    assert secondary_badge.children[0] == \"Secondary\"\n    \n    accent_badge = Div(\"Accent\", cls=combine_classes(badge, badge_colors.accent))\n    assert \"badge\" in accent_badge.attrs['class']\n    assert \"badge-accent\" in accent_badge.attrs['class']\n    assert accent_badge.children[0] == \"Accent\"\n    \n    neutral_badge = Div(\"Neutral\", cls=combine_classes(badge, badge_colors.neutral))\n    assert \"badge\" in neutral_badge.attrs['class']\n    assert \"badge-neutral\" in neutral_badge.attrs['class']\n    assert neutral_badge.children[0] == \"Neutral\"\n    \n    info_badge = Div(\"Info\", cls=combine_classes(badge, badge_colors.info))\n    assert \"badge\" in info_badge.attrs['class']\n    assert \"badge-info\" in info_badge.attrs['class']\n    assert info_badge.children[0] == \"Info\"\n    \n    success_badge = Div(\"Success\", cls=combine_classes(badge, badge_colors.success))\n    assert \"badge\" in success_badge.attrs['class']\n    assert \"badge-success\" in success_badge.attrs['class']\n    assert success_badge.children[0] == \"Success\"\n    \n    warning_badge = Div(\"Warning\", cls=combine_classes(badge, badge_colors.warning))\n    assert \"badge\" in warning_badge.attrs['class']\n    assert \"badge-warning\" in warning_badge.attrs['class']\n    assert warning_badge.children[0] == \"Warning\"\n    \n    error_badge = Div(\"Error\", cls=combine_classes(badge, badge_colors.error))\n    assert \"badge\" in error_badge.attrs['class']\n    assert \"badge-error\" in error_badge.attrs['class']\n    assert error_badge.children[0] == \"Error\"\n    \n    # Return all elements in a Div\n    return Div(\n        primary_badge,\n        secondary_badge,\n        accent_badge,\n        neutral_badge,\n        info_badge,\n        success_badge,\n        warning_badge,\n        error_badge\n    )\n\n# Run the tests\ntest_badge_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"badge badge-primary\"&gt;Primary&lt;/div&gt;\n  &lt;div class=\"badge badge-secondary\"&gt;Secondary&lt;/div&gt;\n  &lt;div class=\"badge badge-accent\"&gt;Accent&lt;/div&gt;\n  &lt;div class=\"badge badge-neutral\"&gt;Neutral&lt;/div&gt;\n  &lt;div class=\"badge badge-info\"&gt;Info&lt;/div&gt;\n  &lt;div class=\"badge badge-success\"&gt;Success&lt;/div&gt;\n  &lt;div class=\"badge badge-warning\"&gt;Warning&lt;/div&gt;\n  &lt;div class=\"badge badge-error\"&gt;Error&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_badge_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_badge_style_fasthtml_examples\n\n test_badge_style_fasthtml_examples ()\n\nTest badge with different styles from daisyUI v5 documentation.\n\n\nExported source\ndef test_badge_style_fasthtml_examples():\n    \"\"\"Test badge with different styles from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    \n    # Badge with soft style\n    soft_primary = Div(\"Primary\", cls=combine_classes(badge, badge_styles.soft, badge_colors.primary))\n    assert \"badge\" in soft_primary.attrs['class']\n    assert \"badge-soft\" in soft_primary.attrs['class']\n    assert \"badge-primary\" in soft_primary.attrs['class']\n    assert soft_primary.children[0] == \"Primary\"\n    \n    soft_secondary = Div(\"Secondary\", cls=combine_classes(badge, badge_styles.soft, badge_colors.secondary))\n    assert \"badge-soft\" in soft_secondary.attrs['class']\n    assert \"badge-secondary\" in soft_secondary.attrs['class']\n    \n    soft_accent = Div(\"Accent\", cls=combine_classes(badge, badge_styles.soft, badge_colors.accent))\n    assert \"badge-soft\" in soft_accent.attrs['class']\n    assert \"badge-accent\" in soft_accent.attrs['class']\n    \n    soft_info = Div(\"Info\", cls=combine_classes(badge, badge_styles.soft, badge_colors.info))\n    assert \"badge-soft\" in soft_info.attrs['class']\n    assert \"badge-info\" in soft_info.attrs['class']\n    \n    soft_success = Div(\"Success\", cls=combine_classes(badge, badge_styles.soft, badge_colors.success))\n    assert \"badge-soft\" in soft_success.attrs['class']\n    assert \"badge-success\" in soft_success.attrs['class']\n    \n    soft_warning = Div(\"Warning\", cls=combine_classes(badge, badge_styles.soft, badge_colors.warning))\n    assert \"badge-soft\" in soft_warning.attrs['class']\n    assert \"badge-warning\" in soft_warning.attrs['class']\n    \n    soft_error = Div(\"Error\", cls=combine_classes(badge, badge_styles.soft, badge_colors.error))\n    assert \"badge-soft\" in soft_error.attrs['class']\n    assert \"badge-error\" in soft_error.attrs['class']\n    \n    # Badge with outline style\n    outline_primary = Div(\"Primary\", cls=combine_classes(badge, badge_styles.outline, badge_colors.primary))\n    assert \"badge-outline\" in outline_primary.attrs['class']\n    assert \"badge-primary\" in outline_primary.attrs['class']\n    \n    outline_secondary = Div(\"Secondary\", cls=combine_classes(badge, badge_styles.outline, badge_colors.secondary))\n    assert \"badge-outline\" in outline_secondary.attrs['class']\n    assert \"badge-secondary\" in outline_secondary.attrs['class']\n    \n    outline_accent = Div(\"Accent\", cls=combine_classes(badge, badge_styles.outline, badge_colors.accent))\n    assert \"badge-outline\" in outline_accent.attrs['class']\n    assert \"badge-accent\" in outline_accent.attrs['class']\n    \n    outline_info = Div(\"Info\", cls=combine_classes(badge, badge_styles.outline, badge_colors.info))\n    assert \"badge-outline\" in outline_info.attrs['class']\n    assert \"badge-info\" in outline_info.attrs['class']\n    \n    outline_success = Div(\"Success\", cls=combine_classes(badge, badge_styles.outline, badge_colors.success))\n    assert \"badge-outline\" in outline_success.attrs['class']\n    assert \"badge-success\" in outline_success.attrs['class']\n    \n    outline_warning = Div(\"Warning\", cls=combine_classes(badge, badge_styles.outline, badge_colors.warning))\n    assert \"badge-outline\" in outline_warning.attrs['class']\n    assert \"badge-warning\" in outline_warning.attrs['class']\n    \n    outline_error = Div(\"Error\", cls=combine_classes(badge, badge_styles.outline, badge_colors.error))\n    assert \"badge-outline\" in outline_error.attrs['class']\n    assert \"badge-error\" in outline_error.attrs['class']\n    \n    # Badge with dash style\n    dash_primary = Div(\"Primary\", cls=combine_classes(badge, badge_styles.dash, badge_colors.primary))\n    assert \"badge-dash\" in dash_primary.attrs['class']\n    assert \"badge-primary\" in dash_primary.attrs['class']\n    \n    dash_secondary = Div(\"Secondary\", cls=combine_classes(badge, badge_styles.dash, badge_colors.secondary))\n    assert \"badge-dash\" in dash_secondary.attrs['class']\n    assert \"badge-secondary\" in dash_secondary.attrs['class']\n    \n    dash_accent = Div(\"Accent\", cls=combine_classes(badge, badge_styles.dash, badge_colors.accent))\n    assert \"badge-dash\" in dash_accent.attrs['class']\n    assert \"badge-accent\" in dash_accent.attrs['class']\n    \n    dash_info = Div(\"Info\", cls=combine_classes(badge, badge_styles.dash, badge_colors.info))\n    assert \"badge-dash\" in dash_info.attrs['class']\n    assert \"badge-info\" in dash_info.attrs['class']\n    \n    dash_success = Div(\"Success\", cls=combine_classes(badge, badge_styles.dash, badge_colors.success))\n    assert \"badge-dash\" in dash_success.attrs['class']\n    assert \"badge-success\" in dash_success.attrs['class']\n    \n    dash_warning = Div(\"Warning\", cls=combine_classes(badge, badge_styles.dash, badge_colors.warning))\n    assert \"badge-dash\" in dash_warning.attrs['class']\n    assert \"badge-warning\" in dash_warning.attrs['class']\n    \n    dash_error = Div(\"Error\", cls=combine_classes(badge, badge_styles.dash, badge_colors.error))\n    assert \"badge-dash\" in dash_error.attrs['class']\n    assert \"badge-error\" in dash_error.attrs['class']\n    \n    # Neutral badge with outline/dash style on white background\n    neutral_badges_container = Div(\n        Div(\"Outline\", cls=combine_classes(badge, badge_colors.neutral, badge_styles.outline)),\n        Div(\"Dash\", cls=combine_classes(badge, badge_colors.neutral, badge_styles.dash)),\n        cls=combine_classes(bg.white, p._6)\n    )\n    assert \"bg-white\" in neutral_badges_container.attrs['class']\n    assert \"p-6\" in neutral_badges_container.attrs['class']\n    assert \"badge-neutral\" in neutral_badges_container.children[0].attrs['class']\n    assert \"badge-outline\" in neutral_badges_container.children[0].attrs['class']\n    assert \"badge-neutral\" in neutral_badges_container.children[1].attrs['class']\n    assert \"badge-dash\" in neutral_badges_container.children[1].attrs['class']\n    \n    # Badge ghost\n    ghost_badge = Div(\"ghost\", cls=combine_classes(badge, badge_styles.ghost))\n    assert \"badge\" in ghost_badge.attrs['class']\n    assert \"badge-ghost\" in ghost_badge.attrs['class']\n    assert ghost_badge.children[0] == \"ghost\"\n    \n    # Empty badges\n    empty_lg = Div(cls=combine_classes(badge, badge_colors.primary, badge_sizes.lg))\n    assert \"badge\" in empty_lg.attrs['class']\n    assert \"badge-primary\" in empty_lg.attrs['class']\n    assert \"badge-lg\" in empty_lg.attrs['class']\n    assert empty_lg.children == ()\n    \n    empty_md = Div(cls=combine_classes(badge, badge_colors.primary, badge_sizes.md))\n    assert \"badge-md\" in empty_md.attrs['class']\n    assert empty_md.children == ()\n    \n    empty_sm = Div(cls=combine_classes(badge, badge_colors.primary, badge_sizes.sm))\n    assert \"badge-sm\" in empty_sm.attrs['class']\n    assert empty_sm.children == ()\n    \n    empty_xs = Div(cls=combine_classes(badge, badge_colors.primary, badge_sizes.xs))\n    assert \"badge-xs\" in empty_xs.attrs['class']\n    assert empty_xs.children == ()\n    \n    # Return all elements in a Div\n    return Div(\n        # Soft style badges\n        Div(\n            soft_primary,\n            soft_secondary,\n            soft_accent,\n            soft_info,\n            soft_success,\n            soft_warning,\n            soft_error\n        ),\n        # Outline style badges\n        Div(\n            outline_primary,\n            outline_secondary,\n            outline_accent,\n            outline_info,\n            outline_success,\n            outline_warning,\n            outline_error\n        ),\n        # Dash style badges\n        Div(\n            dash_primary,\n            dash_secondary,\n            dash_accent,\n            dash_info,\n            dash_success,\n            dash_warning,\n            dash_error\n        ),\n        # Neutral badges container\n        neutral_badges_container,\n        # Ghost badge\n        ghost_badge,\n        # Empty badges\n        Div(\n            empty_lg,\n            empty_md,\n            empty_sm,\n            empty_xs\n        )\n    )\n\n# Run the tests\ntest_badge_style_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;div class=\"badge badge-soft badge-primary\"&gt;Primary&lt;/div&gt;\n    &lt;div class=\"badge badge-soft badge-secondary\"&gt;Secondary&lt;/div&gt;\n    &lt;div class=\"badge badge-soft badge-accent\"&gt;Accent&lt;/div&gt;\n    &lt;div class=\"badge badge-soft badge-info\"&gt;Info&lt;/div&gt;\n    &lt;div class=\"badge badge-soft badge-success\"&gt;Success&lt;/div&gt;\n    &lt;div class=\"badge badge-soft badge-warning\"&gt;Warning&lt;/div&gt;\n    &lt;div class=\"badge badge-soft badge-error\"&gt;Error&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div class=\"badge badge-outline badge-primary\"&gt;Primary&lt;/div&gt;\n    &lt;div class=\"badge badge-outline badge-secondary\"&gt;Secondary&lt;/div&gt;\n    &lt;div class=\"badge badge-outline badge-accent\"&gt;Accent&lt;/div&gt;\n    &lt;div class=\"badge badge-outline badge-info\"&gt;Info&lt;/div&gt;\n    &lt;div class=\"badge badge-outline badge-success\"&gt;Success&lt;/div&gt;\n    &lt;div class=\"badge badge-outline badge-warning\"&gt;Warning&lt;/div&gt;\n    &lt;div class=\"badge badge-outline badge-error\"&gt;Error&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div class=\"badge badge-dash badge-primary\"&gt;Primary&lt;/div&gt;\n    &lt;div class=\"badge badge-dash badge-secondary\"&gt;Secondary&lt;/div&gt;\n    &lt;div class=\"badge badge-dash badge-accent\"&gt;Accent&lt;/div&gt;\n    &lt;div class=\"badge badge-dash badge-info\"&gt;Info&lt;/div&gt;\n    &lt;div class=\"badge badge-dash badge-success\"&gt;Success&lt;/div&gt;\n    &lt;div class=\"badge badge-dash badge-warning\"&gt;Warning&lt;/div&gt;\n    &lt;div class=\"badge badge-dash badge-error\"&gt;Error&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"bg-white p-6\"&gt;\n    &lt;div class=\"badge badge-neutral badge-outline\"&gt;Outline&lt;/div&gt;\n    &lt;div class=\"badge badge-neutral badge-dash\"&gt;Dash&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"badge badge-ghost\"&gt;ghost&lt;/div&gt;\n  &lt;div&gt;\n    &lt;div class=\"badge badge-primary badge-lg\"&gt;&lt;/div&gt;\n    &lt;div class=\"badge badge-primary badge-md\"&gt;&lt;/div&gt;\n    &lt;div class=\"badge badge-primary badge-sm\"&gt;&lt;/div&gt;\n    &lt;div class=\"badge badge-primary badge-xs\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_badge_style_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_badge_icon_fasthtml_examples\n\n test_badge_icon_fasthtml_examples ()\n\nTest badge with icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_badge_icon_fasthtml_examples():\n    \"\"\"Test badge with icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from fasthtml.svg import Svg, G, Circle, Path, Polyline, Rect, Line\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.svg import fill, stroke, stroke_width\n    \n    # Create reusable SVG icons\n    info_icon = Svg(\n        G(\n            Circle(cx=\"12\", cy=\"12\", r=\"10\", fill=\"none\", stroke=\"currentColor\", \n                   stroke_linecap=\"square\", stroke_miterlimit=\"10\", stroke_width=\"2\"),\n            Path(d=\"m12,17v-5.5c0-.276-.224-.5-.5-.5h-1.5\", fill=\"none\", stroke=\"currentColor\", \n                 stroke_linecap=\"square\", stroke_miterlimit=\"10\", stroke_width=\"2\"),\n            Circle(cx=\"12\", cy=\"7.25\", r=\"1.25\", fill=\"currentColor\", stroke_width=\"2\"),\n            fill=\"currentColor\", stroke_linejoin=\"miter\", stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"[1em]\")), xmlns=\"http://www.w3.org/2000/svg\", viewBox=\"0 0 24 24\"\n    )\n    \n    success_icon = Svg(\n        G(\n            Circle(cx=\"12\", cy=\"12\", r=\"10\", fill=\"none\", stroke=\"currentColor\", \n                   stroke_linecap=\"square\", stroke_miterlimit=\"10\", stroke_width=\"2\"),\n            Polyline(points=\"7 13 10 16 17 8\", fill=\"none\", stroke=\"currentColor\", \n                      stroke_linecap=\"square\", stroke_miterlimit=\"10\", stroke_width=\"2\"),\n            fill=\"currentColor\", stroke_linejoin=\"miter\", stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"[1em]\")), xmlns=\"http://www.w3.org/2000/svg\", viewBox=\"0 0 24 24\"\n    )\n    \n    warning_icon = Svg(\n        G(\n            Path(d=\"M7.638,3.495L2.213,12.891c-.605,1.048,.151,2.359,1.362,2.359H14.425c1.211,0,1.967-1.31,1.362-2.359L10.362,3.495c-.605-1.048-2.119-1.048-2.724,0Z\", \n                 fill=\"none\", stroke=\"currentColor\", stroke_linecap=\"round\", stroke_linejoin=\"round\", stroke_width=\"1.5\"),\n            Line(x1=\"9\", y1=\"6.5\", x2=\"9\", y2=\"10\", fill=\"none\", stroke=\"currentColor\", \n                 stroke_linecap=\"round\", stroke_linejoin=\"round\", stroke_width=\"1.5\"),\n            Path(d=\"M9,13.569c-.552,0-1-.449-1-1s.448-1,1-1,1,.449,1,1-.448,1-1,1Z\", \n                 fill=\"currentColor\", data_stroke=\"none\", stroke=\"none\"),\n            fill=\"currentColor\"\n        ),\n        cls=str(size_util(\"[1em]\")), xmlns=\"http://www.w3.org/2000/svg\", viewBox=\"0 0 18 18\"\n    )\n    \n    error_icon = Svg(\n        G(\n            Rect(x=\"1.972\", y=\"11\", width=\"20.056\", height=\"2\", \n                 transform=\"translate(-4.971 12) rotate(-45)\", fill=\"currentColor\", stroke_width=\"0\"),\n            Path(d=\"m12,23c-6.065,0-11-4.935-11-11S5.935,1,12,1s11,4.935,11,11-4.935,11-11,11Zm0-20C7.038,3,3,7.037,3,12s4.038,9,9,9,9-4.037,9-9S16.962,3,12,3Z\", \n                 stroke_width=\"0\", fill=\"currentColor\"),\n            fill=\"currentColor\"\n        ),\n        cls=str(size_util(\"[1em]\")), xmlns=\"http://www.w3.org/2000/svg\", viewBox=\"0 0 24 24\"\n    )\n    \n    # Badge with icon\n    info_badge = Div(\n        info_icon,\n        \"Info\",\n        cls=combine_classes(badge, badge_colors.info)\n    )\n    assert info_badge.tag == \"div\"\n    assert \"badge\" in info_badge.attrs['class']\n    assert \"badge-info\" in info_badge.attrs['class']\n    assert info_badge.children[0].tag == \"svg\"\n    assert info_badge.children[1] == \"Info\"\n    \n    success_badge = Div(\n        success_icon,\n        \"Success\",\n        cls=combine_classes(badge, badge_colors.success)\n    )\n    assert \"badge-success\" in success_badge.attrs['class']\n    assert success_badge.children[0].tag == \"svg\"\n    assert success_badge.children[1] == \"Success\"\n    \n    warning_badge = Div(\n        warning_icon,\n        \"Warning\",\n        cls=combine_classes(badge, badge_colors.warning)\n    )\n    assert \"badge-warning\" in warning_badge.attrs['class']\n    assert warning_badge.children[0].tag == \"svg\"\n    assert warning_badge.children[1] == \"Warning\"\n    \n    error_badge = Div(\n        error_icon,\n        \"Error\",\n        cls=combine_classes(badge, badge_colors.error)\n    )\n    assert \"badge-error\" in error_badge.attrs['class']\n    assert error_badge.children[0].tag == \"svg\"\n    assert error_badge.children[1] == \"Error\"\n    \n    # Return all elements in a Div\n    return Div(\n        info_badge,\n        success_badge,\n        warning_badge,\n        error_badge\n    )\n\n# Run the tests\ntest_badge_icon_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"badge badge-info\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"10\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m12,17v-5.5c0-.276-.224-.5-.5-.5h-1.5\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;circle r=\"1.25\" cx=\"12\" cy=\"7.25\" fill=\"currentColor\" stroke-width=\"2\"&gt;&lt;/circle&gt;&lt;/g&gt;&lt;/svg&gt;Info  &lt;/div&gt;\n  &lt;div class=\"badge badge-success\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"10\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;polyline points=\"7 13 10 16 17 8\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;/g&gt;&lt;/svg&gt;Success  &lt;/div&gt;\n  &lt;div class=\"badge badge-warning\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 18 18\" class=\"size-[1em]\"&gt;&lt;g fill=\"currentColor\"&gt;&lt;path d=\"M7.638,3.495L2.213,12.891c-.605,1.048,.151,2.359,1.362,2.359H14.425c1.211,0,1.967-1.31,1.362-2.359L10.362,3.495c-.605-1.048-2.119-1.048-2.724,0Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;line x1=\"9\" y1=\"6.5\" x2=\"9\" y2=\"10\" stroke=\"currentColor\" stroke-width=\"1.5\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/line&gt;&lt;path d=\"M9,13.569c-.552,0-1-.449-1-1s.448-1,1-1,1,.449,1,1-.448,1-1,1Z\" fill=\"currentColor\" stroke=\"none\" data-stroke=\"none\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;Warning  &lt;/div&gt;\n  &lt;div class=\"badge badge-error\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1em]\"&gt;&lt;g fill=\"currentColor\"&gt;&lt;rect transform=\"translate(-4.971 12) rotate(-45)\" width=\"20.056\" height=\"2\" x=\"1.972\" y=\"11\" fill=\"currentColor\" stroke-width=\"0\"&gt;&lt;/rect&gt;&lt;path d=\"m12,23c-6.065,0-11-4.935-11-11S5.935,1,12,1s11,4.935,11,11-4.935,11-11,11Zm0-20C7.038,3,3,7.037,3,12s4.038,9,9,9,9-4.037,9-9S16.962,3,12,3Z\" fill=\"currentColor\" stroke-width=\"0\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;Error  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_badge_icon_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_badge_in_text_fasthtml_examples\n\n test_badge_in_text_fasthtml_examples ()\n\nTest badge in text from daisyUI v5 documentation.\n\n\nExported source\ndef test_badge_in_text_fasthtml_examples():\n    \"\"\"Test badge in text from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import H1, H2, H3, H4, H5, P, Span, Div\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Badge in a text\n    h1 = H1(\n        \"Heading 1 \",\n        Span(\"Badge\", cls=combine_classes(badge, badge_sizes.xl)),\n        cls=combine_classes(font_size.xl, font_weight.semibold)\n    )\n    assert h1.tag == \"h1\"\n    assert \"text-xl\" in h1.attrs['class']\n    assert \"font-semibold\" in h1.attrs['class']\n    assert h1.children[0] == \"Heading 1 \"\n    assert h1.children[1].tag == \"span\"\n    assert \"badge\" in h1.children[1].attrs['class']\n    assert \"badge-xl\" in h1.children[1].attrs['class']\n    \n    h2 = H2(\n        \"Heading 2 \",\n        Span(\"Badge\", cls=combine_classes(badge, badge_sizes.lg)),\n        cls=combine_classes(font_size.lg, font_weight.semibold)\n    )\n    assert h2.tag == \"h2\"\n    assert \"text-lg\" in h2.attrs['class']\n    assert \"badge-lg\" in h2.children[1].attrs['class']\n    \n    h3 = H3(\n        \"Heading 3 \",\n        Span(\"Badge\", cls=combine_classes(badge, badge_sizes.md)),\n        cls=combine_classes(font_size.base, font_weight.semibold)\n    )\n    assert h3.tag == \"h3\"\n    assert \"text-base\" in h3.attrs['class']\n    assert \"badge-md\" in h3.children[1].attrs['class']\n    \n    h4 = H4(\n        \"Heading 4 \",\n        Span(\"Badge\", cls=combine_classes(badge, badge_sizes.sm)),\n        cls=combine_classes(font_size.sm, font_weight.semibold)\n    )\n    assert h4.tag == \"h4\"\n    assert \"text-sm\" in h4.attrs['class']\n    assert \"badge-sm\" in h4.children[1].attrs['class']\n    \n    h5 = H5(\n        \"Heading 5 \",\n        Span(\"Badge\", cls=combine_classes(badge, badge_sizes.xs)),\n        cls=combine_classes(font_size.xs, font_weight.semibold)\n    )\n    assert h5.tag == \"h5\"\n    assert \"text-xs\" in h5.attrs['class']\n    assert \"badge-xs\" in h5.children[1].attrs['class']\n    \n    p = P(\n        \"Paragraph \",\n        Span(\"Badge\", cls=combine_classes(badge, badge_sizes.xs)),\n        cls=str(font_size.xs)\n    )\n    assert p.tag == \"p\"\n    assert p.attrs['class'] == \"text-xs\"\n    assert \"badge-xs\" in p.children[1].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        h1,\n        h2,\n        h3,\n        h4,\n        h5,\n        p\n    )\n\n# Run the tests\ntest_badge_in_text_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;h1 class=\"text-xl font-semibold\"&gt;\nHeading 1 &lt;span class=\"badge badge-xl\"&gt;Badge&lt;/span&gt;  &lt;/h1&gt;\n  &lt;h2 class=\"text-lg font-semibold\"&gt;\nHeading 2 &lt;span class=\"badge badge-lg\"&gt;Badge&lt;/span&gt;  &lt;/h2&gt;\n  &lt;h3 class=\"text-base font-semibold\"&gt;\nHeading 3 &lt;span class=\"badge badge-md\"&gt;Badge&lt;/span&gt;  &lt;/h3&gt;\n  &lt;h4 class=\"text-sm font-semibold\"&gt;\nHeading 4 &lt;span class=\"badge badge-sm\"&gt;Badge&lt;/span&gt;  &lt;/h4&gt;\n  &lt;h5 class=\"text-xs font-semibold\"&gt;\nHeading 5 &lt;span class=\"badge badge-xs\"&gt;Badge&lt;/span&gt;  &lt;/h5&gt;\n  &lt;p class=\"text-xs\"&gt;\nParagraph &lt;span class=\"badge badge-xs\"&gt;Badge&lt;/span&gt;  &lt;/p&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_badge_in_text_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_badge_in_button_fasthtml_examples\n\n test_badge_in_button_fasthtml_examples ()\n\nTest badge in button from daisyUI v5 documentation.\n\n\nExported source\ndef test_badge_in_button_fasthtml_examples():\n    \"\"\"Test badge in button from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Badge in a button\n    button1 = Button(\n        \"Inbox \",\n        Div(\"+99\", cls=combine_classes(badge, badge_sizes.sm)),\n        cls=str(btn)\n    )\n    assert button1.tag == \"button\"\n    assert button1.attrs['class'] == \"btn\"\n    assert button1.children[0] == \"Inbox \"\n    assert button1.children[1].tag == \"div\"\n    assert \"badge\" in button1.children[1].attrs['class']\n    assert \"badge-sm\" in button1.children[1].attrs['class']\n    assert button1.children[1].children[0] == \"+99\"\n    \n    button2 = Button(\n        \"Inbox \",\n        Div(\"+99\", cls=combine_classes(badge, badge_sizes.sm, badge_colors.secondary)),\n        cls=str(btn)\n    )\n    assert button2.tag == \"button\"\n    assert button2.attrs['class'] == \"btn\"\n    assert \"badge\" in button2.children[1].attrs['class']\n    assert \"badge-sm\" in button2.children[1].attrs['class']\n    assert \"badge-secondary\" in button2.children[1].attrs['class']\n    assert button2.children[1].children[0] == \"+99\"\n    \n    # Return all elements in a Div\n    return Div(\n        button1,\n        button2\n    )\n\n# Run the tests\ntest_badge_in_button_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button class=\"btn\"&gt;Inbox     &lt;div class=\"badge badge-sm\"&gt;+99&lt;/div&gt;\n&lt;/button&gt;&lt;button class=\"btn\"&gt;Inbox     &lt;div class=\"badge badge-sm badge-secondary\"&gt;+99&lt;/div&gt;\n&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_badge_in_button_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "badge"
    ]
  },
  {
    "objectID": "components/data_display/list.html",
    "href": "components/data_display/list.html",
    "title": "list",
    "section": "",
    "text": "Base List\nThe base list components:\n\n\nExported source\nlist_ui = SingleValueFactory(\"list\", \"A vertical flex layout to include list rows\") # List container\nlist_row = SingleValueFactory(\"list-row\", \"The item inside list - a horizontal grid layout to include data\") # List row\n\n\n\n\nList Modifiers\nList modifier utilities for controlling column layout:\n\n\nExported source\nlist_modifiers = SimpleFactory(\n    {\n        \"col_wrap\": \"list-col-wrap\",\n        \"col_grow\": \"list-col-grow\"\n    },\n    \"List modifiers for column layout (wrap to next line, fill remaining space)\"\n) # List modifiers\n\n\n\n\nList Test Examples\n\nsource\n\n\ntest_list_basic_examples\n\n test_list_basic_examples ()\n\nTest basic list utilities.\n\n\nExported source\ndef test_list_basic_examples():\n    \"\"\"Test basic list utilities.\"\"\"\n    # Basic components\n    assert str(list_ui) == \"list\"\n    assert str(list_row) == \"list-row\"\n    \n    # With modifiers\n    assert str(list_ui.hover) == \"hover:list\"\n    assert str(list_row.md) == \"md:list-row\"\n    assert str(list_ui.dark) == \"dark:list\"\n\n# Run the tests\ntest_list_basic_examples()\n\n\n\nsource\n\n\ntest_list_modifiers_examples\n\n test_list_modifiers_examples ()\n\nTest list modifier utilities.\n\n\nExported source\ndef test_list_modifiers_examples():\n    \"\"\"Test list modifier utilities.\"\"\"\n    assert str(list_modifiers.col_wrap) == \"list-col-wrap\"\n    assert str(list_modifiers.col_grow) == \"list-col-grow\"\n    \n    # With responsive modifiers\n    assert str(list_modifiers.col_wrap.hover) == \"hover:list-col-wrap\"\n    assert str(list_modifiers.col_grow.md) == \"md:list-col-grow\"\n\n# Run the tests\ntest_list_modifiers_examples()\n\n\n\nsource\n\n\ntest_list_basic_fasthtml_examples\n\n test_list_basic_fasthtml_examples ()\n\nTest basic list example: second column grows (default behavior) from daisyUI v5 documentation.\n\n\nExported source\ndef test_list_basic_fasthtml_examples():\n    \"\"\"Test basic list example: second column grows (default behavior) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Img, Button\n    from fasthtml.svg import Svg, Path, G\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, tracking, uppercase\n    from cjm_fasthtml_tailwind.utilities.effects import opacity, shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_modifiers, btn_styles\n    \n    # Create SVG icons as reusable components\n    play_icon = Svg(\n        G(\n            Path(d=\"M6 3L20 12 6 21 6 3z\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=str(size_util(\"[1.2em]\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    heart_icon = Svg(\n        G(\n            Path(d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=str(size_util(\"[1.2em]\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # List with second column growing (default behavior)\n    list_second_column_grows = Ul(\n        Li(\"Most played songs this week\", cls=combine_classes(p._4, p.b._2, font_size.xs, opacity._60, tracking.wide)),\n        Li(\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/1@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Dio Lupa\"),\n                Div(\"Remaining Reason\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60))\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            Button(\n                heart_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        Li(\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Ellie Beilish\"),\n                Div(\"Bears of a fever\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60))\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            Button(\n                heart_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        Li(\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Sabrino Gardener\"),\n                Div(\"Cappuccino\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60))\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            Button(\n                heart_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        cls=combine_classes(list_ui, bg_dui.base_100, border_radius.box, shadow.md)\n    )\n    \n    # Verify list structure\n    assert \"list\" in list_second_column_grows.attrs['class']\n    assert \"bg-base-100\" in list_second_column_grows.attrs['class']\n    assert \"rounded-box\" in list_second_column_grows.attrs['class']\n    assert \"shadow-md\" in list_second_column_grows.attrs['class']\n    \n    # Verify header\n    header = list_second_column_grows.children[0]\n    assert header.tag == \"li\"\n    assert \"p-4\" in header.attrs['class']\n    assert \"pb-2\" in header.attrs['class']\n    assert \"text-xs\" in header.attrs['class']\n    assert \"opacity-60\" in header.attrs['class']\n    assert \"tracking-wide\" in header.attrs['class']\n    assert header.children[0] == \"Most played songs this week\"\n    \n    # Verify first song row\n    first_row = list_second_column_grows.children[1]\n    assert first_row.tag == \"li\"\n    assert \"list-row\" in first_row.attrs['class']\n    assert len(first_row.children) == 4  # Image, text content, play button, heart button\n    \n    # Verify image column\n    image_col = first_row.children[0]\n    assert image_col.tag == \"div\"\n    assert image_col.children[0].tag == \"img\"\n    assert \"size-10\" in image_col.children[0].attrs['class']\n    assert \"rounded-box\" in image_col.children[0].attrs['class']\n    assert image_col.children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/1@94.webp\"\n    \n    # Verify text column (second column that grows by default)\n    text_col = first_row.children[1]\n    assert text_col.tag == \"div\"\n    assert len(text_col.children) == 2\n    assert text_col.children[0].tag == \"div\"\n    assert text_col.children[0].children[0] == \"Dio Lupa\"\n    assert text_col.children[1].tag == \"div\"\n    assert text_col.children[1].children[0] == \"Remaining Reason\"\n    assert \"text-xs\" in text_col.children[1].attrs['class']\n    assert \"uppercase\" in text_col.children[1].attrs['class']\n    assert \"font-semibold\" in text_col.children[1].attrs['class']\n    assert \"opacity-60\" in text_col.children[1].attrs['class']\n    \n    # Verify play button\n    play_btn = first_row.children[2]\n    assert play_btn.tag == \"button\"\n    assert \"btn\" in play_btn.attrs['class']\n    assert \"btn-square\" in play_btn.attrs['class']\n    assert \"btn-ghost\" in play_btn.attrs['class']\n    assert play_btn.children[0].tag == \"svg\"\n    assert \"size-[1.2em]\" in play_btn.children[0].attrs['class']\n    \n    # Verify heart button\n    heart_btn = first_row.children[3]\n    assert heart_btn.tag == \"button\"\n    assert \"btn\" in heart_btn.attrs['class']\n    assert \"btn-square\" in heart_btn.attrs['class']\n    assert \"btn-ghost\" in heart_btn.attrs['class']\n    assert heart_btn.children[0].tag == \"svg\"\n    assert \"size-[1.2em]\" in heart_btn.children[0].attrs['class']\n    \n    # Verify second song row has different content\n    second_row = list_second_column_grows.children[2]\n    assert \"list-row\" in second_row.attrs['class']\n    assert second_row.children[1].children[0].children[0] == \"Ellie Beilish\"\n    assert second_row.children[1].children[1].children[0] == \"Bears of a fever\"\n    \n    # Verify third song row has different content  \n    third_row = list_second_column_grows.children[3]\n    assert \"list-row\" in third_row.attrs['class']\n    assert third_row.children[1].children[0].children[0] == \"Sabrino Gardener\"\n    assert third_row.children[1].children[1].children[0] == \"Cappuccino\"\n    \n    # Return the created element in a Div\n    return Div(list_second_column_grows)\n\n# Run the tests\ntest_list_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"list bg-base-100 rounded-box shadow-md\"&gt;\n    &lt;li class=\"p-4 pb-2 text-xs opacity-60 tracking-wide\"&gt;Most played songs this week&lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/1@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div&gt;Dio Lupa&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Remaining Reason&lt;/div&gt;\n      &lt;/div&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div&gt;Ellie Beilish&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Bears of a fever&lt;/div&gt;\n      &lt;/div&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div&gt;Sabrino Gardener&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Cappuccino&lt;/div&gt;\n      &lt;/div&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_list_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_list_column_grow_fasthtml_examples\n\n test_list_column_grow_fasthtml_examples ()\n\nTest list example: third column grows from daisyUI v5 documentation.\n\n\nExported source\ndef test_list_column_grow_fasthtml_examples():\n    \"\"\"Test list example: third column grows from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Img, Button\n    from fasthtml.svg import Svg, Path, G\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, tracking, tabular_nums, font_weight, uppercase\n    from cjm_fasthtml_tailwind.utilities.effects import opacity, shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_modifiers, btn_styles\n    \n    # Create reusable play icon\n    play_icon = Svg(\n        G(\n            Path(d=\"M6 3L20 12 6 21 6 3z\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=str(size_util(\"[1.2em]\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # List with third column growing using list-col-grow\n    list_third_column_grows = Ul(\n        Li(\"Most played songs this week\", cls=combine_classes(p._4, p.b._2, font_size.xs, opacity._60, tracking.wide)),\n        Li(\n            Div(\"01\", cls=combine_classes(font_size._4xl, font_weight.thin, opacity._30, tabular_nums)),\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/1@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Dio Lupa\"),\n                Div(\"Remaining Reason\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60)),\n                cls=str(list_modifiers.col_grow)\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        Li(\n            Div(\"02\", cls=combine_classes(font_size._4xl, font_weight.thin, opacity._30, tabular_nums)),\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Ellie Beilish\"),\n                Div(\"Bears of a fever\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60)),\n                cls=str(list_modifiers.col_grow)\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        Li(\n            Div(\"03\", cls=combine_classes(font_size._4xl, font_weight.thin, opacity._30, tabular_nums)),\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Sabrino Gardener\"),\n                Div(\"Cappuccino\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60)),\n                cls=str(list_modifiers.col_grow)\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        cls=combine_classes(list_ui, bg_dui.base_100, border_radius.box, shadow.md)\n    )\n    \n    # Verify list structure\n    assert \"list\" in list_third_column_grows.attrs['class']\n    assert \"bg-base-100\" in list_third_column_grows.attrs['class']\n    assert \"rounded-box\" in list_third_column_grows.attrs['class']\n    assert \"shadow-md\" in list_third_column_grows.attrs['class']\n    \n    # Verify header\n    header = list_third_column_grows.children[0]\n    assert header.tag == \"li\"\n    assert \"p-4\" in header.attrs['class']\n    assert \"pb-2\" in header.attrs['class']\n    assert \"text-xs\" in header.attrs['class']\n    assert \"opacity-60\" in header.attrs['class']\n    assert header.children[0] == \"Most played songs this week\"\n    \n    # Verify first song row\n    first_row = list_third_column_grows.children[1]\n    assert first_row.tag == \"li\"\n    assert \"list-row\" in first_row.attrs['class']\n    assert len(first_row.children) == 4  # Number, image, text content (with col-grow), play button\n    \n    # Verify number column (first column)\n    number_col = first_row.children[0]\n    assert number_col.tag == \"div\"\n    assert number_col.children[0] == \"01\"\n    assert \"text-4xl\" in number_col.attrs['class']\n    assert \"font-thin\" in number_col.attrs['class']\n    assert \"opacity-30\" in number_col.attrs['class']\n    assert \"tabular-nums\" in number_col.attrs['class']\n    \n    # Verify image column (second column)\n    image_col = first_row.children[1]\n    assert image_col.tag == \"div\"\n    assert image_col.children[0].tag == \"img\"\n    assert \"size-10\" in image_col.children[0].attrs['class']\n    assert \"rounded-box\" in image_col.children[0].attrs['class']\n    assert image_col.children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/1@94.webp\"\n    \n    # Verify text column (third column that grows with list-col-grow)\n    text_col = first_row.children[2]\n    assert text_col.tag == \"div\"\n    assert \"list-col-grow\" in text_col.attrs['class']\n    assert len(text_col.children) == 2\n    assert text_col.children[0].tag == \"div\"\n    assert text_col.children[0].children[0] == \"Dio Lupa\"\n    assert text_col.children[1].tag == \"div\"\n    assert text_col.children[1].children[0] == \"Remaining Reason\"\n    assert \"text-xs\" in text_col.children[1].attrs['class']\n    assert \"uppercase\" in text_col.children[1].attrs['class']\n    assert \"font-semibold\" in text_col.children[1].attrs['class']\n    assert \"opacity-60\" in text_col.children[1].attrs['class']\n    \n    # Verify play button (fourth column)\n    play_btn = first_row.children[3]\n    assert play_btn.tag == \"button\"\n    assert \"btn\" in play_btn.attrs['class']\n    assert \"btn-square\" in play_btn.attrs['class']\n    assert \"btn-ghost\" in play_btn.attrs['class']\n    assert play_btn.children[0].tag == \"svg\"\n    assert \"size-[1.2em]\" in play_btn.children[0].attrs['class']\n    \n    # Verify second song row structure\n    second_row = list_third_column_grows.children[2]\n    assert \"list-row\" in second_row.attrs['class']\n    assert second_row.children[0].children[0] == \"02\"\n    assert \"list-col-grow\" in second_row.children[2].attrs['class']\n    assert second_row.children[2].children[0].children[0] == \"Ellie Beilish\"\n    assert second_row.children[2].children[1].children[0] == \"Bears of a fever\"\n    \n    # Verify third song row structure\n    third_row = list_third_column_grows.children[3]\n    assert \"list-row\" in third_row.attrs['class']\n    assert third_row.children[0].children[0] == \"03\"\n    assert \"list-col-grow\" in third_row.children[2].attrs['class']\n    assert third_row.children[2].children[0].children[0] == \"Sabrino Gardener\"\n    assert third_row.children[2].children[1].children[0] == \"Cappuccino\"\n    \n    # Verify all rows have the col-grow modifier on the text column\n    for i in range(1, 4):  # Rows 1, 2, 3 (skip header)\n        row = list_third_column_grows.children[i]\n        text_column = row.children[2]  # Third column (index 2)\n        assert \"list-col-grow\" in text_column.attrs['class']\n    \n    # Return the created element in a Div\n    return Div(list_third_column_grows)\n\n# Run the tests\ntest_list_column_grow_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"list bg-base-100 rounded-box shadow-md\"&gt;\n    &lt;li class=\"p-4 pb-2 text-xs opacity-60 tracking-wide\"&gt;Most played songs this week&lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div class=\"text-4xl font-thin opacity-30 tabular-nums\"&gt;01&lt;/div&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/1@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div class=\"list-col-grow\"&gt;\n        &lt;div&gt;Dio Lupa&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Remaining Reason&lt;/div&gt;\n      &lt;/div&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div class=\"text-4xl font-thin opacity-30 tabular-nums\"&gt;02&lt;/div&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div class=\"list-col-grow\"&gt;\n        &lt;div&gt;Ellie Beilish&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Bears of a fever&lt;/div&gt;\n      &lt;/div&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div class=\"text-4xl font-thin opacity-30 tabular-nums\"&gt;03&lt;/div&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div class=\"list-col-grow\"&gt;\n        &lt;div&gt;Sabrino Gardener&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Cappuccino&lt;/div&gt;\n      &lt;/div&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_list_column_grow_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_list_column_wrap_fasthtml_examples\n\n test_list_column_wrap_fasthtml_examples ()\n\nTest list example: third column wraps to next row from daisyUI v5 documentation.\n\n\nExported source\ndef test_list_column_wrap_fasthtml_examples():\n    \"\"\"Test list example: third column wraps to next row from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Img, Button, P\n    from fasthtml.svg import Svg, Path, G\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, tracking, uppercase\n    from cjm_fasthtml_tailwind.utilities.effects import opacity, shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_modifiers, btn_styles\n    \n    # Create reusable SVG icons\n    play_icon = Svg(\n        G(\n            Path(d=\"M6 3L20 12 6 21 6 3z\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=str(size_util(\"[1.2em]\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    heart_icon = Svg(\n        G(\n            Path(d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=str(size_util(\"[1.2em]\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # List with third column wrapping to next row using list-col-wrap\n    list_column_wraps = Ul(\n        Li(\"Most played songs this week\", cls=combine_classes(p._4, p.b._2, font_size.xs, opacity._60, tracking.wide)),\n        Li(\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/1@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Dio Lupa\"),\n                Div(\"Remaining Reason\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60))\n            ),\n            P(\n                '\"Remaining Reason\" became an instant hit, praised for its haunting sound and emotional depth. A viral performance brought it widespread recognition, making it one of Dio Lupa\\'s most iconic tracks.',\n                cls=combine_classes(list_modifiers.col_wrap, font_size.xs)\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            Button(\n                heart_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        Li(\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Ellie Beilish\"),\n                Div(\"Bears of a fever\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60))\n            ),\n            P(\n                '\"Bears of a Fever\" captivated audiences with its intense energy and mysterious lyrics. Its popularity skyrocketed after fans shared it widely online, earning Ellie critical acclaim.',\n                cls=combine_classes(list_modifiers.col_wrap, font_size.xs)\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            Button(\n                heart_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        Li(\n            Div(\n                Img(\n                    src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\",\n                    cls=combine_classes(size_util(10), border_radius.box)\n                )\n            ),\n            Div(\n                Div(\"Sabrino Gardener\"),\n                Div(\"Cappuccino\", cls=combine_classes(font_size.xs, uppercase, font_weight.semibold, opacity._60))\n            ),\n            P(\n                '\"Cappuccino\" quickly gained attention for its smooth melody and relatable themes. The song\\'s success propelled Sabrino into the spotlight, solidifying their status as a rising star.',\n                cls=combine_classes(list_modifiers.col_wrap, font_size.xs)\n            ),\n            Button(\n                play_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            Button(\n                heart_icon,\n                cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n            ),\n            cls=str(list_row)\n        ),\n        cls=combine_classes(list_ui, bg_dui.base_100, border_radius.box, shadow.md)\n    )\n    \n    # Verify list structure\n    assert \"list\" in list_column_wraps.attrs['class']\n    assert \"bg-base-100\" in list_column_wraps.attrs['class']\n    assert \"rounded-box\" in list_column_wraps.attrs['class']\n    assert \"shadow-md\" in list_column_wraps.attrs['class']\n    \n    # Verify header\n    header = list_column_wraps.children[0]\n    assert header.tag == \"li\"\n    assert \"p-4\" in header.attrs['class']\n    assert \"pb-2\" in header.attrs['class']\n    assert \"text-xs\" in header.attrs['class']\n    assert \"opacity-60\" in header.attrs['class']\n    assert header.children[0] == \"Most played songs this week\"\n    \n    # Verify first song row\n    first_row = list_column_wraps.children[1]\n    assert first_row.tag == \"li\"\n    assert \"list-row\" in first_row.attrs['class']\n    assert len(first_row.children) == 5  # Image, text content, description (col-wrap), play button, heart button\n    \n    # Verify image column (first column)\n    image_col = first_row.children[0]\n    assert image_col.tag == \"div\"\n    assert image_col.children[0].tag == \"img\"\n    assert \"size-10\" in image_col.children[0].attrs['class']\n    assert \"rounded-box\" in image_col.children[0].attrs['class']\n    assert image_col.children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/1@94.webp\"\n    \n    # Verify text column (second column)\n    text_col = first_row.children[1]\n    assert text_col.tag == \"div\"\n    assert len(text_col.children) == 2\n    assert text_col.children[0].tag == \"div\"\n    assert text_col.children[0].children[0] == \"Dio Lupa\"\n    assert text_col.children[1].tag == \"div\"\n    assert text_col.children[1].children[0] == \"Remaining Reason\"\n    assert \"text-xs\" in text_col.children[1].attrs['class']\n    assert \"uppercase\" in text_col.children[1].attrs['class']\n    assert \"font-semibold\" in text_col.children[1].attrs['class']\n    assert \"opacity-60\" in text_col.children[1].attrs['class']\n    \n    # Verify description column (third column that wraps with list-col-wrap)\n    desc_col = first_row.children[2]\n    assert desc_col.tag == \"p\"\n    assert \"list-col-wrap\" in desc_col.attrs['class']\n    assert \"text-xs\" in desc_col.attrs['class']\n    assert '\"Remaining Reason\" became an instant hit' in desc_col.children[0]\n    assert \"making it one of Dio Lupa's most iconic tracks.\" in desc_col.children[0]\n    \n    # Verify play button (fourth column)\n    play_btn = first_row.children[3]\n    assert play_btn.tag == \"button\"\n    assert \"btn\" in play_btn.attrs['class']\n    assert \"btn-square\" in play_btn.attrs['class']\n    assert \"btn-ghost\" in play_btn.attrs['class']\n    assert play_btn.children[0].tag == \"svg\"\n    assert \"size-[1.2em]\" in play_btn.children[0].attrs['class']\n    \n    # Verify heart button (fifth column)\n    heart_btn = first_row.children[4]\n    assert heart_btn.tag == \"button\"\n    assert \"btn\" in heart_btn.attrs['class']\n    assert \"btn-square\" in heart_btn.attrs['class']\n    assert \"btn-ghost\" in heart_btn.attrs['class']\n    assert heart_btn.children[0].tag == \"svg\"\n    assert \"size-[1.2em]\" in heart_btn.children[0].attrs['class']\n    \n    # Verify second song row structure\n    second_row = list_column_wraps.children[2]\n    assert \"list-row\" in second_row.attrs['class']\n    assert second_row.children[1].children[0].children[0] == \"Ellie Beilish\"\n    assert second_row.children[1].children[1].children[0] == \"Bears of a fever\"\n    assert \"list-col-wrap\" in second_row.children[2].attrs['class']\n    assert '\"Bears of a Fever\" captivated audiences' in second_row.children[2].children[0]\n    assert \"earning Ellie critical acclaim.\" in second_row.children[2].children[0]\n    \n    # Verify third song row structure\n    third_row = list_column_wraps.children[3]\n    assert \"list-row\" in third_row.attrs['class']\n    assert third_row.children[1].children[0].children[0] == \"Sabrino Gardener\"\n    assert third_row.children[1].children[1].children[0] == \"Cappuccino\"\n    assert \"list-col-wrap\" in third_row.children[2].attrs['class']\n    assert '\"Cappuccino\" quickly gained attention' in third_row.children[2].children[0]\n    assert \"solidifying their status as a rising star.\" in third_row.children[2].children[0]\n    \n    # Verify all rows have the col-wrap modifier on the description column\n    for i in range(1, 4):  # Rows 1, 2, 3 (skip header)\n        row = list_column_wraps.children[i]\n        desc_column = row.children[2]  # Third column (index 2)\n        assert \"list-col-wrap\" in desc_column.attrs['class']\n        assert \"text-xs\" in desc_column.attrs['class']\n        assert desc_column.tag == \"p\"\n    \n    # Return the created element in a Div\n    return Div(list_column_wraps)\n\n# Run the tests\ntest_list_column_wrap_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"list bg-base-100 rounded-box shadow-md\"&gt;\n    &lt;li class=\"p-4 pb-2 text-xs opacity-60 tracking-wide\"&gt;Most played songs this week&lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/1@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div&gt;Dio Lupa&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Remaining Reason&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;p class=\"list-col-wrap text-xs\"&gt;\"Remaining Reason\" became an instant hit, praised for its haunting sound and emotional depth. A viral performance brought it widespread recognition, making it one of Dio Lupa's most iconic tracks.&lt;/p&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div&gt;Ellie Beilish&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Bears of a fever&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;p class=\"list-col-wrap text-xs\"&gt;\"Bears of a Fever\" captivated audiences with its intense energy and mysterious lyrics. Its popularity skyrocketed after fans shared it widely online, earning Ellie critical acclaim.&lt;/p&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n    &lt;li class=\"list-row\"&gt;\n      &lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\" class=\"size-10 rounded-box\"&gt;      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;div&gt;Sabrino Gardener&lt;/div&gt;\n        &lt;div class=\"text-xs uppercase font-semibold opacity-60\"&gt;Cappuccino&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;p class=\"list-col-wrap text-xs\"&gt;\"Cappuccino\" quickly gained attention for its smooth melody and relatable themes. The song's success propelled Sabrino into the spotlight, solidifying their status as a rising star.&lt;/p&gt;\n&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M6 3L20 12 6 21 6 3z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_list_column_wrap_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "list"
    ]
  },
  {
    "objectID": "components/data_display/card.html",
    "href": "components/data_display/card.html",
    "title": "card",
    "section": "",
    "text": "Base Card\nThe base card components:\n\n\nExported source\ncard = SingleValueFactory(\"card\", \"Card container component\") # Card container\ncard_title = SingleValueFactory(\"card-title\", \"Title part of card\") # Card title\ncard_body = SingleValueFactory(\"card-body\", \"Body part (content) of card\") # Card body\ncard_actions = SingleValueFactory(\"card-actions\", \"Actions part of card (buttons, etc.)\") # Card actions\n\n\n\n\nCard Styles\nDifferent card style variants:\n\n\nExported source\ncard_styles = enums_to_simple_factory(card, [BorderStyle, DashStyle], \"Card style variants (border, dash)\") # Card style variants\n\n\n\n\nCard Modifiers\nCard modifier utilities:\n\n\nExported source\ncard_modifiers = SimpleFactory(\n    {\n        \"side\": \"card-side\",\n        \"image_full\": \"image-full\"\n    },\n    \"Card modifiers (side image, full background image)\"\n) # Card modifiers\n\n\n\n\nCard Sizes\nCard size variants:\n\n\nExported source\ncard_sizes = enums_to_simple_factory(card, [DaisyUINamedSize], \"Card size variants from extra small to extra large\") # Card size variants\n\n\n\n\nCard Test Examples\n\nsource\n\n\ntest_card_basic_examples\n\n test_card_basic_examples ()\n\nTest basic card utilities.\n\n\nExported source\ndef test_card_basic_examples():\n    \"\"\"Test basic card utilities.\"\"\"\n    # Basic components\n    assert str(card) == \"card\"\n    assert str(card_title) == \"card-title\"\n    assert str(card_body) == \"card-body\"\n    assert str(card_actions) == \"card-actions\"\n    \n    # With modifiers\n    assert str(card.hover) == \"hover:card\"\n    assert str(card_title.md) == \"md:card-title\"\n    assert str(card_body.dark) == \"dark:card-body\"\n\n# Run the tests\ntest_card_basic_examples()\n\n\n\nsource\n\n\ntest_card_styles_examples\n\n test_card_styles_examples ()\n\nTest card style variants.\n\n\nExported source\ndef test_card_styles_examples():\n    \"\"\"Test card style variants.\"\"\"\n    assert str(card_styles.border) == \"card-border\"\n    assert str(card_styles.dash) == \"card-dash\"\n\n# Run the tests\ntest_card_styles_examples()\n\n\n\nsource\n\n\ntest_card_modifiers_examples\n\n test_card_modifiers_examples ()\n\nTest card modifier utilities.\n\n\nExported source\ndef test_card_modifiers_examples():\n    \"\"\"Test card modifier utilities.\"\"\"\n    assert str(card_modifiers.side) == \"card-side\"\n    assert str(card_modifiers.image_full) == \"image-full\"\n\n# Run the tests\ntest_card_modifiers_examples()\n\n\n\nsource\n\n\ntest_card_sizes_examples\n\n test_card_sizes_examples ()\n\nTest card size variants.\n\n\nExported source\ndef test_card_sizes_examples():\n    \"\"\"Test card size variants.\"\"\"\n    assert str(card_sizes.xs) == \"card-xs\"\n    assert str(card_sizes.sm) == \"card-sm\"\n    assert str(card_sizes.md) == \"card-md\"\n    assert str(card_sizes.lg) == \"card-lg\"\n    assert str(card_sizes.xl) == \"card-xl\"\n    \n    # With responsive modifiers\n    assert str(card_sizes.xs.sm) == \"sm:card-xs\"\n    assert str(card_sizes.lg.md) == \"md:card-lg\"\n\n# Run the tests\ntest_card_sizes_examples()\n\n\n\nsource\n\n\ntest_card_basic_fasthtml_examples\n\n test_card_basic_fasthtml_examples ()\n\nTest basic card examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_card_basic_fasthtml_examples():\n    \"\"\"Test basic card examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Figure, Img, H2, P, Button\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify, flex_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Basic card with figure\n    basic_card = Div(\n        Figure(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\",\n                alt=\"Shoes\"\n            )\n        ),\n        Div(\n            H2(\"Card Title\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, bg_dui.base_100, w._96, shadow.sm)\n    )\n    assert \"card\" in basic_card.attrs['class']\n    assert \"bg-base-100\" in basic_card.attrs['class']\n    assert \"w-96\" in basic_card.attrs['class']\n    assert \"shadow-sm\" in basic_card.attrs['class']\n    assert basic_card.children[0].tag == \"figure\"\n    assert basic_card.children[0].children[0].tag == \"img\"\n    assert basic_card.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\"\n    assert basic_card.children[0].children[0].attrs['alt'] == \"Shoes\"\n    assert basic_card.children[1].tag == \"div\"\n    assert \"card-body\" in basic_card.children[1].attrs['class']\n    assert basic_card.children[1].children[0].tag == \"h2\"\n    assert \"card-title\" in basic_card.children[1].children[0].attrs['class']\n    assert basic_card.children[1].children[0].children[0] == \"Card Title\"\n    assert basic_card.children[1].children[1].tag == \"p\"\n    assert basic_card.children[1].children[2].tag == \"div\"\n    assert \"card-actions\" in basic_card.children[1].children[2].attrs['class']\n    assert \"justify-end\" in basic_card.children[1].children[2].attrs['class']\n    assert basic_card.children[1].children[2].children[0].tag == \"button\"\n    assert \"btn\" in basic_card.children[1].children[2].children[0].attrs['class']\n    assert \"btn-primary\" in basic_card.children[1].children[2].children[0].attrs['class']\n    \n    # Card with no image\n    no_image_card = Div(\n        Div(\n            H2(\"Card title!\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, bg_dui.base_100, w._96, shadow.sm)\n    )\n    assert \"card\" in no_image_card.attrs['class']\n    assert len(no_image_card.children) == 1  # Only card-body, no figure\n    assert no_image_card.children[0].tag == \"div\"\n    assert \"card-body\" in no_image_card.children[0].attrs['class']\n    assert no_image_card.children[0].children[0].children[0] == \"Card title!\"\n    \n    # Card with bottom image\n    bottom_image_card = Div(\n        Div(\n            H2(\"Card Title\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            cls=str(card_body)\n        ),\n        Figure(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\",\n                alt=\"Shoes\"\n            )\n        ),\n        cls=combine_classes(card, bg_dui.base_100, w._96, shadow.sm)\n    )\n    assert bottom_image_card.children[0].tag == \"div\"\n    assert \"card-body\" in bottom_image_card.children[0].attrs['class']\n    assert bottom_image_card.children[1].tag == \"figure\"\n    assert bottom_image_card.children[1].children[0].tag == \"img\"\n    \n    # Return all examples in a Div\n    return Div(\n        basic_card,\n        no_image_card,\n        bottom_image_card\n    )\n\n# Run the tests\ntest_card_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card bg-base-100 w-96 shadow-sm\"&gt;\n&lt;figure&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\" alt=\"Shoes\"&gt;&lt;/figure&gt;    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card Title&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-base-100 w-96 shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card title!&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-base-100 w-96 shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card Title&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n    &lt;/div&gt;\n&lt;figure&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\" alt=\"Shoes\"&gt;&lt;/figure&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_card_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_card_pricing_fasthtml_examples\n\n test_card_pricing_fasthtml_examples ()\n\nTest pricing card example from daisyUI v5 documentation.\n\n\nExported source\ndef test_card_pricing_fasthtml_examples():\n    \"\"\"Test pricing card example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H2, Span, Ul, Li, Button\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import w, size_util\n    from cjm_fasthtml_tailwind.utilities.effects import shadow, opacity\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify, flex, gap, flex_display\n    from cjm_fasthtml_tailwind.utilities.spacing import m, me\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, line_through\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.svg import stroke, stroke_width, fill\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors, btn_modifiers\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors, badge_sizes, badge_styles\n    \n    # Create checkmark SVG icon\n    checkmark_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M5 13l4 4L19 7\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(size_util._4, me._2, display_tw.inline_block, text_dui.success),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Create disabled checkmark icon\n    disabled_checkmark = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M5 13l4 4L19 7\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        cls=combine_classes(size_util._4, me._2, display_tw.inline_block, text_dui.base_content.opacity(50)),\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke=\"currentColor\"\n    )\n    \n    # Pricing card\n    pricing_card = Div(\n        Div(\n            Span(\"Most Popular\", cls=combine_classes(badge, badge_sizes.xs, badge_colors.warning)),\n            Div(\n                H2(\"Premium\", cls=combine_classes(font_size._3xl, font_weight.bold)),\n                Span(\"29/mo\", cls=str(font_size.xl)),\n                cls=combine_classes(flex_display, justify.between)\n            ),\n            Ul(\n                Li(\n                    checkmark_icon,\n                    Span(\"High-resolution image generation\")\n                ),\n                Li(\n                    checkmark_icon,\n                    Span(\"Customizable style templates\")\n                ),\n                Li(\n                    checkmark_icon,\n                    Span(\"Batch processing capabilities\")\n                ),\n                Li(\n                    checkmark_icon,\n                    Span(\"AI-driven image enhancements\")\n                ),\n                Li(\n                    disabled_checkmark,\n                    Span(\"Seamless cloud integration\", cls=str(line_through)),\n                    cls=str(opacity._50)\n                ),\n                Li(\n                    disabled_checkmark,\n                    Span(\"Real-time collaboration tools\", cls=str(line_through)),\n                    cls=str(opacity._50)\n                ),\n                cls=combine_classes(m.t._6, flex_display, flex.col, gap._2, font_size.xs)\n            ),\n            Div(\n                Button(\"Subscribe\", cls=combine_classes(btn, btn_colors.primary, btn_modifiers.block)),\n                cls=str(m.t._6)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, w._96, bg_dui.base_100, shadow.sm)\n    )\n    \n    # Verify card structure\n    assert \"card\" in pricing_card.attrs['class']\n    assert \"w-96\" in pricing_card.attrs['class']\n    assert \"bg-base-100\" in pricing_card.attrs['class']\n    assert \"shadow-sm\" in pricing_card.attrs['class']\n    \n    # Verify card body\n    card_body_div = pricing_card.children[0]\n    assert \"card-body\" in card_body_div.attrs['class']\n    \n    # Verify badge\n    badge_span = card_body_div.children[0]\n    assert \"badge\" in badge_span.attrs['class']\n    assert \"badge-xs\" in badge_span.attrs['class']\n    assert \"badge-warning\" in badge_span.attrs['class']\n    assert badge_span.children[0] == \"Most Popular\"\n    \n    # Verify title section\n    title_section = card_body_div.children[1]\n    assert \"flex\" in title_section.attrs['class']\n    assert \"justify-between\" in title_section.attrs['class']\n    assert title_section.children[0].tag == \"h2\"\n    assert \"text-3xl\" in title_section.children[0].attrs['class']\n    assert \"font-bold\" in title_section.children[0].attrs['class']\n    assert title_section.children[0].children[0] == \"Premium\"\n    assert title_section.children[1].tag == \"span\"\n    assert \"text-xl\" in title_section.children[1].attrs['class']\n    assert title_section.children[1].children[0] == \"29/mo\"\n    \n    # Verify feature list\n    feature_list = card_body_div.children[2]\n    assert feature_list.tag == \"ul\"\n    assert \"mt-6\" in feature_list.attrs['class']\n    assert \"flex\" in feature_list.attrs['class']\n    assert \"flex-col\" in feature_list.attrs['class']\n    assert \"gap-2\" in feature_list.attrs['class']\n    assert \"text-xs\" in feature_list.attrs['class']\n    \n    # Verify enabled features\n    for i in range(4):\n        li = feature_list.children[i]\n        assert li.tag == \"li\"\n        assert li.children[0].tag == \"svg\"\n        assert \"text-success\" in li.children[0].attrs['class']\n        assert li.children[1].tag == \"span\"\n    \n    # Verify disabled features\n    for i in range(4, 6):\n        li = feature_list.children[i]\n        assert li.tag == \"li\"\n        assert \"opacity-50\" in li.attrs['class']\n        assert li.children[0].tag == \"svg\"\n        assert \"text-base-content/50\" in li.children[0].attrs['class']\n        assert li.children[1].tag == \"span\"\n        assert \"line-through\" in li.children[1].attrs['class']\n    \n    # Verify subscribe button\n    button_div = card_body_div.children[3]\n    assert \"mt-6\" in button_div.attrs['class']\n    assert button_div.children[0].tag == \"button\"\n    assert \"btn\" in button_div.children[0].attrs['class']\n    assert \"btn-primary\" in button_div.children[0].attrs['class']\n    assert \"btn-block\" in button_div.children[0].attrs['class']\n    assert button_div.children[0].children[0] == \"Subscribe\"\n    \n    # Return the pricing card in a Div\n    return Div(pricing_card)\n\n# Run the tests\ntest_card_pricing_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card w-96 bg-base-100 shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n&lt;span class=\"badge badge-xs badge-warning\"&gt;Most Popular&lt;/span&gt;      &lt;div class=\"flex justify-between\"&gt;\n        &lt;h2 class=\"text-3xl font-bold\"&gt;Premium&lt;/h2&gt;\n&lt;span class=\"text-xl\"&gt;29/mo&lt;/span&gt;      &lt;/div&gt;\n      &lt;ul class=\"mt-6 flex flex-col gap-2 text-xs\"&gt;\n        &lt;li&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"size-4 me-2 inline-block text-success\"&gt;&lt;path d=\"M5 13l4 4L19 7\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;High-resolution image generation&lt;/span&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"size-4 me-2 inline-block text-success\"&gt;&lt;path d=\"M5 13l4 4L19 7\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Customizable style templates&lt;/span&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"size-4 me-2 inline-block text-success\"&gt;&lt;path d=\"M5 13l4 4L19 7\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;Batch processing capabilities&lt;/span&gt;        &lt;/li&gt;\n        &lt;li&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"size-4 me-2 inline-block text-success\"&gt;&lt;path d=\"M5 13l4 4L19 7\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span&gt;AI-driven image enhancements&lt;/span&gt;        &lt;/li&gt;\n        &lt;li class=\"opacity-50\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"size-4 me-2 inline-block text-base-content/50\"&gt;&lt;path d=\"M5 13l4 4L19 7\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span class=\"line-through\"&gt;Seamless cloud integration&lt;/span&gt;        &lt;/li&gt;\n        &lt;li class=\"opacity-50\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"size-4 me-2 inline-block text-base-content/50\"&gt;&lt;path d=\"M5 13l4 4L19 7\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;span class=\"line-through\"&gt;Real-time collaboration tools&lt;/span&gt;        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;div class=\"mt-6\"&gt;\n&lt;button class=\"btn btn-primary btn-block\"&gt;Subscribe&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_card_pricing_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_card_style_fasthtml_examples\n\n test_card_style_fasthtml_examples ()\n\nTest card style variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_card_style_fasthtml_examples():\n    \"\"\"Test card style variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H2, P, Button\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Card sizes - Extra Small\n    xs_card = Div(\n        Div(\n            H2(\"Xsmall Card\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(justify.end, card_actions)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, w._96, bg_dui.base_100, card_sizes.xs, shadow.sm)\n    )\n    assert \"card\" in xs_card.attrs['class']\n    assert \"card-xs\" in xs_card.attrs['class']\n    assert \"w-96\" in xs_card.attrs['class']\n    assert xs_card.children[0].children[0].children[0] == \"Xsmall Card\"\n    \n    # Card sizes - Small\n    sm_card = Div(\n        Div(\n            H2(\"Small Card\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(justify.end, card_actions)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, w._96, bg_dui.base_100, card_sizes.sm, shadow.sm)\n    )\n    assert \"card-sm\" in sm_card.attrs['class']\n    assert sm_card.children[0].children[0].children[0] == \"Small Card\"\n    \n    # Card sizes - Medium\n    md_card = Div(\n        Div(\n            H2(\"Medium Card\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(justify.end, card_actions)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, w._96, bg_dui.base_100, card_sizes.md, shadow.sm)\n    )\n    assert \"card-md\" in md_card.attrs['class']\n    assert md_card.children[0].children[0].children[0] == \"Medium Card\"\n    \n    # Card sizes - Large\n    lg_card = Div(\n        Div(\n            H2(\"Large Card\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(justify.end, card_actions)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, w._96, bg_dui.base_100, card_sizes.lg, shadow.sm)\n    )\n    assert \"card-lg\" in lg_card.attrs['class']\n    assert lg_card.children[0].children[0].children[0] == \"Large Card\"\n    \n    # Card sizes - Extra Large\n    xl_card = Div(\n        Div(\n            H2(\"Xlarge Card\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(justify.end, card_actions)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, w._96, bg_dui.base_100, card_sizes.xl, shadow.sm)\n    )\n    assert \"card-xl\" in xl_card.attrs['class']\n    assert xl_card.children[0].children[0].children[0] == \"Xlarge Card\"\n    \n    # Card with border\n    border_card = Div(\n        Div(\n            H2(\"Card Title\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, card_styles.border, bg_dui.base_100, w._96)\n    )\n    assert \"card\" in border_card.attrs['class']\n    assert \"card-border\" in border_card.attrs['class']\n    assert \"shadow\" not in border_card.attrs['class']  # No shadow for border variant\n    \n    # Card with dash border\n    dash_card = Div(\n        Div(\n            H2(\"Card Title\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, card_styles.dash, bg_dui.base_100, w._96)\n    )\n    assert \"card\" in dash_card.attrs['class']\n    assert \"card-dash\" in dash_card.attrs['class']\n    assert \"shadow\" not in dash_card.attrs['class']  # No shadow for dash variant\n    \n    # Return all card style variations in a Div\n    return Div(\n        xs_card,\n        sm_card,\n        md_card,\n        lg_card,\n        xl_card,\n        border_card,\n        dash_card\n    )\n\n# Run the tests\ntest_card_style_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card w-96 bg-base-100 card-xs shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Xsmall Card&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"justify-end card-actions\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card w-96 bg-base-100 card-sm shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Small Card&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"justify-end card-actions\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card w-96 bg-base-100 card-md shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Medium Card&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"justify-end card-actions\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card w-96 bg-base-100 card-lg shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Large Card&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"justify-end card-actions\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card w-96 bg-base-100 card-xl shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Xlarge Card&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"justify-end card-actions\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card card-border bg-base-100 w-96\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card Title&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card card-dash bg-base-100 w-96\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card Title&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_card_style_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_card_layout_fasthtml_examples\n\n test_card_layout_fasthtml_examples ()\n\nTest card layout variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_card_layout_fasthtml_examples():\n    \"\"\"Test card layout variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Figure, Img, H2, P, Button\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify, items\n    from cjm_fasthtml_tailwind.utilities.typography import text_align\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_styles, badge_colors\n    \n    # Card with badge\n    badge_card = Div(\n        Figure(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\",\n                alt=\"Shoes\"\n            )\n        ),\n        Div(\n            H2(\n                \"Card Title\",\n                Div(\"NEW\", cls=combine_classes(badge, badge_colors.secondary)),\n                cls=str(card_title)\n            ),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Div(\"Fashion\", cls=combine_classes(badge, badge_styles.outline)),\n                Div(\"Products\", cls=combine_classes(badge, badge_styles.outline)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, bg_dui.base_100, w._96, shadow.sm)\n    )\n    assert \"card\" in badge_card.attrs['class']\n    assert badge_card.children[1].children[0].tag == \"h2\"\n    assert \"card-title\" in badge_card.children[1].children[0].attrs['class']\n    assert badge_card.children[1].children[0].children[1].tag == \"div\"\n    assert \"badge\" in badge_card.children[1].children[0].children[1].attrs['class']\n    assert \"badge-secondary\" in badge_card.children[1].children[0].children[1].attrs['class']\n    assert badge_card.children[1].children[0].children[1].children[0] == \"NEW\"\n    assert \"badge-outline\" in badge_card.children[1].children[2].children[0].attrs['class']\n    assert badge_card.children[1].children[2].children[0].children[0] == \"Fashion\"\n    assert \"badge-outline\" in badge_card.children[1].children[2].children[1].attrs['class']\n    assert badge_card.children[1].children[2].children[1].children[0] == \"Products\"\n    \n    # Card with centered content and paddings\n    centered_card = Div(\n        Figure(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\",\n                alt=\"Shoes\",\n                cls=str(rounded.xl)\n            ),\n            cls=combine_classes(p.x._10, p.t._10)\n        ),\n        Div(\n            H2(\"Card Title\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=str(card_actions)\n            ),\n            cls=combine_classes(card_body, items.center, text_align.center)\n        ),\n        cls=combine_classes(card, bg_dui.base_100, w._96, shadow.sm)\n    )\n    assert \"px-10\" in centered_card.children[0].attrs['class']\n    assert \"pt-10\" in centered_card.children[0].attrs['class']\n    assert \"rounded-xl\" in centered_card.children[0].children[0].attrs['class']\n    assert \"card-body\" in centered_card.children[1].attrs['class']\n    assert \"items-center\" in centered_card.children[1].attrs['class']\n    assert \"text-center\" in centered_card.children[1].attrs['class']\n    \n    # Card with image overlay\n    overlay_card = Div(\n        Figure(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\",\n                alt=\"Shoes\"\n            )\n        ),\n        Div(\n            H2(\"Card Title\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, bg_dui.base_100, card_modifiers.image_full, w._96, shadow.sm)\n    )\n    assert \"card\" in overlay_card.attrs['class']\n    assert \"image-full\" in overlay_card.attrs['class']\n    assert overlay_card.children[0].tag == \"figure\"\n    assert overlay_card.children[1].tag == \"div\"\n    assert \"card-body\" in overlay_card.children[1].attrs['class']\n    \n    # Card with image on side\n    side_card = Div(\n        Figure(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp\",\n                alt=\"Movie\"\n            )\n        ),\n        Div(\n            H2(\"New movie is released!\", cls=str(card_title)),\n            P(\"Click the button to watch on Jetflix app.\"),\n            Div(\n                Button(\"Watch\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, card_modifiers.side, bg_dui.base_100, shadow.sm)\n    )\n    assert \"card\" in side_card.attrs['class']\n    assert \"card-side\" in side_card.attrs['class']\n    assert side_card.children[0].tag == \"figure\"\n    assert side_card.children[1].children[0].children[0] == \"New movie is released!\"\n    assert side_card.children[1].children[1].children[0] == \"Click the button to watch on Jetflix app.\"\n    \n    # Responsive card (vertical on small screen, horizontal on large screen)\n    responsive_card = Div(\n        Figure(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1494232410401-ad00d5433cfa.webp\",\n                alt=\"Album\"\n            )\n        ),\n        Div(\n            H2(\"New album is released!\", cls=str(card_title)),\n            P(\"Click the button to listen on Spotiwhy app.\"),\n            Div(\n                Button(\"Listen\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, card_modifiers.side.lg, bg_dui.base_100, shadow.sm)\n    )\n    assert \"card\" in responsive_card.attrs['class']\n    assert \"lg:card-side\" in responsive_card.attrs['class']\n    assert responsive_card.children[1].children[0].children[0] == \"New album is released!\"\n    assert responsive_card.children[1].children[1].children[0] == \"Click the button to listen on Spotiwhy app.\"\n    \n    # Return all card layout variations in a Div\n    return Div(\n        badge_card,\n        centered_card,\n        overlay_card,\n        side_card,\n        responsive_card\n    )\n\n# Run the tests\ntest_card_layout_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card bg-base-100 w-96 shadow-sm\"&gt;\n&lt;figure&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\" alt=\"Shoes\"&gt;&lt;/figure&gt;    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;\nCard Title        &lt;div class=\"badge badge-secondary\"&gt;NEW&lt;/div&gt;\n      &lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n        &lt;div class=\"badge badge-outline\"&gt;Fashion&lt;/div&gt;\n        &lt;div class=\"badge badge-outline\"&gt;Products&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-base-100 w-96 shadow-sm\"&gt;\n&lt;figure class=\"px-10 pt-10\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\" alt=\"Shoes\" class=\"rounded-xl\"&gt;&lt;/figure&gt;    &lt;div class=\"card-body items-center text-center\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card Title&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-base-100 image-full w-96 shadow-sm\"&gt;\n&lt;figure&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1606107557195-0e29a4b5b4aa.webp\" alt=\"Shoes\"&gt;&lt;/figure&gt;    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card Title&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card card-side bg-base-100 shadow-sm\"&gt;\n&lt;figure&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp\" alt=\"Movie\"&gt;&lt;/figure&gt;    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;New movie is released!&lt;/h2&gt;\n      &lt;p&gt;Click the button to watch on Jetflix app.&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Watch&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card lg:card-side bg-base-100 shadow-sm\"&gt;\n&lt;figure&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1494232410401-ad00d5433cfa.webp\" alt=\"Album\"&gt;&lt;/figure&gt;    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;New album is released!&lt;/h2&gt;\n      &lt;p&gt;Click the button to listen on Spotiwhy app.&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Listen&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_card_layout_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_card_special_fasthtml_examples\n\n test_card_special_fasthtml_examples ()\n\nTest special card examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_card_special_fasthtml_examples():\n    \"\"\"Test special card examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H2, P, Button\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify, items\n    from cjm_fasthtml_tailwind.utilities.typography import text_align\n    from cjm_fasthtml_tailwind.utilities.svg import stroke, stroke_width, fill\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors, btn_modifiers, btn_sizes, btn_styles\n    \n    # Card with custom color\n    custom_color_card = Div(\n        Div(\n            H2(\"Card title!\", cls=str(card_title)),\n            P(\"A card component has a figure, a body part, and inside body there are title and actions parts\"),\n            Div(\n                Button(\"Buy Now\", cls=str(btn)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, bg_dui.primary, text_dui.primary_content, w._96)\n    )\n    assert \"card\" in custom_color_card.attrs['class']\n    assert \"bg-primary\" in custom_color_card.attrs['class']\n    assert \"text-primary-content\" in custom_color_card.attrs['class']\n    assert \"w-96\" in custom_color_card.attrs['class']\n    assert custom_color_card.children[0].children[0].children[0] == \"Card title!\"\n    # Button uses default style since card has custom background\n    assert custom_color_card.children[0].children[2].children[0].attrs['class'] == \"btn\"\n    \n    # Centered card with neutral color\n    centered_neutral_card = Div(\n        Div(\n            H2(\"Cookies!\", cls=str(card_title)),\n            P(\"We are using cookies for no reason.\"),\n            Div(\n                Button(\"Accept\", cls=combine_classes(btn, btn_colors.primary)),\n                Button(\"Deny\", cls=combine_classes(btn, btn_styles.ghost)),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            cls=combine_classes(card_body, items.center, text_align.center)\n        ),\n        cls=combine_classes(card, bg_dui.neutral, text_dui.neutral_content, w._96)\n    )\n    assert \"card\" in centered_neutral_card.attrs['class']\n    assert \"bg-neutral\" in centered_neutral_card.attrs['class']\n    assert \"text-neutral-content\" in centered_neutral_card.attrs['class']\n    assert \"card-body\" in centered_neutral_card.children[0].attrs['class']\n    assert \"items-center\" in centered_neutral_card.children[0].attrs['class']\n    assert \"text-center\" in centered_neutral_card.children[0].attrs['class']\n    assert centered_neutral_card.children[0].children[0].children[0] == \"Cookies!\"\n    assert centered_neutral_card.children[0].children[1].children[0] == \"We are using cookies for no reason.\"\n    # Check two action buttons\n    assert \"btn-primary\" in centered_neutral_card.children[0].children[2].children[0].attrs['class']\n    assert centered_neutral_card.children[0].children[2].children[0].children[0] == \"Accept\"\n    assert \"btn-ghost\" in centered_neutral_card.children[0].children[2].children[1].attrs['class']\n    assert centered_neutral_card.children[0].children[2].children[1].children[0] == \"Deny\"\n    \n    # Card with action on top\n    action_top_card = Div(\n        Div(\n            Div(\n                Button(\n                    Svg(\n                        Path(\n                            stroke_linecap=\"round\",\n                            stroke_linejoin=\"round\",\n                            stroke_width=\"2\",\n                            d=\"M6 18L18 6M6 6l12 12\"\n                        ),\n                        xmlns=\"http://www.w3.org/2000/svg\",\n                        cls=combine_classes(h._6, w._6),\n                        fill=\"none\",\n                        viewBox=\"0 0 24 24\",\n                        stroke=\"currentColor\"\n                    ),\n                    cls=combine_classes(btn, btn_modifiers.square, btn_sizes.sm)\n                ),\n                cls=combine_classes(card_actions, justify.end)\n            ),\n            P(\"We are using cookies for no reason.\"),\n            cls=str(card_body)\n        ),\n        cls=combine_classes(card, bg_dui.base_100, w._96, shadow.sm)\n    )\n    assert \"card\" in action_top_card.attrs['class']\n    assert \"bg-base-100\" in action_top_card.attrs['class']\n    assert \"w-96\" in action_top_card.attrs['class']\n    assert \"shadow-sm\" in action_top_card.attrs['class']\n    # Verify actions are first child of card body\n    card_body_div = action_top_card.children[0]\n    assert \"card-body\" in card_body_div.attrs['class']\n    assert card_body_div.children[0].tag == \"div\"\n    assert \"card-actions\" in card_body_div.children[0].attrs['class']\n    assert \"justify-end\" in card_body_div.children[0].attrs['class']\n    # Verify close button\n    close_button = card_body_div.children[0].children[0]\n    assert close_button.tag == \"button\"\n    assert \"btn\" in close_button.attrs['class']\n    assert \"btn-square\" in close_button.attrs['class']\n    assert \"btn-sm\" in close_button.attrs['class']\n    assert close_button.children[0].tag == \"svg\"\n    assert \"h-6\" in close_button.children[0].attrs['class']\n    assert \"w-6\" in close_button.children[0].attrs['class']\n    # Verify text comes after actions\n    assert card_body_div.children[1].tag == \"p\"\n    assert card_body_div.children[1].children[0] == \"We are using cookies for no reason.\"\n    \n    # Return all special card examples in a Div\n    return Div(\n        custom_color_card,\n        centered_neutral_card,\n        action_top_card\n    )\n\n# Run the tests\ntest_card_special_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card bg-primary text-primary-content w-96\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Card title!&lt;/h2&gt;\n      &lt;p&gt;A card component has a figure, a body part, and inside body there are title and actions parts&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn\"&gt;Buy Now&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-neutral text-neutral-content w-96\"&gt;\n    &lt;div class=\"card-body items-center text-center\"&gt;\n      &lt;h2 class=\"card-title\"&gt;Cookies!&lt;/h2&gt;\n      &lt;p&gt;We are using cookies for no reason.&lt;/p&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-primary\"&gt;Accept&lt;/button&gt;&lt;button class=\"btn btn-ghost\"&gt;Deny&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"card bg-base-100 w-96 shadow-sm\"&gt;\n    &lt;div class=\"card-body\"&gt;\n      &lt;div class=\"card-actions justify-end\"&gt;\n&lt;button class=\"btn btn-square btn-sm\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" class=\"h-6 w-6\"&gt;&lt;path d=\"M6 18L18 6M6 6l12 12\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/button&gt;      &lt;/div&gt;\n      &lt;p&gt;We are using cookies for no reason.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_card_special_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "card"
    ]
  },
  {
    "objectID": "components/data_display/table.html",
    "href": "components/data_display/table.html",
    "title": "table",
    "section": "",
    "text": "Base Table\nThe base table component:\n\n\nExported source\ntable = SingleValueFactory(\"table\", \"Table component for displaying data in rows and columns\") # Table component\n\n\n\n\nTable Modifiers\nTable modifier utilities:\n\n\nExported source\ntable_modifiers = SimpleFactory(\n    {\n        \"zebra\": \"table-zebra\",\n        \"pin_rows\": \"table-pin-rows\",\n        \"pin_cols\": \"table-pin-cols\"\n    },\n    \"Table modifiers (zebra stripes, sticky rows/columns)\"\n) # Table modifiers\n\n\n\n\nTable Sizes\nTable size variants:\n\n\nExported source\ntable_sizes = enums_to_simple_factory(table, [DaisyUINamedSize], \"Table size variants from extra small to extra large\") # Table size variants\n\n\n\n\nTable Test Examples\n\nsource\n\n\ntest_table_basic_examples\n\n test_table_basic_examples ()\n\nTest basic table utilities.\n\n\nExported source\ndef test_table_basic_examples():\n    \"\"\"Test basic table utilities.\"\"\"\n    # Basic component\n    assert str(table) == \"table\"\n    \n    # With modifiers\n    assert str(table.hover) == \"hover:table\"\n    assert str(table.md) == \"md:table\"\n    assert str(table.dark) == \"dark:table\"\n\n# Run the tests\ntest_table_basic_examples()\n\n\n\nsource\n\n\ntest_table_modifiers_examples\n\n test_table_modifiers_examples ()\n\nTest table modifier utilities.\n\n\nExported source\ndef test_table_modifiers_examples():\n    \"\"\"Test table modifier utilities.\"\"\"\n    assert str(table_modifiers.zebra) == \"table-zebra\"\n    assert str(table_modifiers.pin_rows) == \"table-pin-rows\"\n    assert str(table_modifiers.pin_cols) == \"table-pin-cols\"\n    \n    # With responsive modifiers\n    assert str(table_modifiers.zebra.hover) == \"hover:table-zebra\"\n    assert str(table_modifiers.pin_rows.md) == \"md:table-pin-rows\"\n\n# Run the tests\ntest_table_modifiers_examples()\n\n\n\nsource\n\n\ntest_table_sizes_examples\n\n test_table_sizes_examples ()\n\nTest table size variants.\n\n\nExported source\ndef test_table_sizes_examples():\n    \"\"\"Test table size variants.\"\"\"\n    assert str(table_sizes.xs) == \"table-xs\"\n    assert str(table_sizes.sm) == \"table-sm\"\n    assert str(table_sizes.md) == \"table-md\"\n    assert str(table_sizes.lg) == \"table-lg\"\n    assert str(table_sizes.xl) == \"table-xl\"\n    \n    # With responsive modifiers\n    assert str(table_sizes.xs.sm) == \"sm:table-xs\"\n    assert str(table_sizes.lg.md) == \"md:table-lg\"\n\n# Run the tests\ntest_table_sizes_examples()\n\n\n\nsource\n\n\ntest_table_basic_fasthtml_examples\n\n test_table_basic_fasthtml_examples ()\n\nTest basic table and table with border and background from daisyUI v5 documentation.\n\n\nExported source\ndef test_table_basic_fasthtml_examples():\n    \"\"\"Test basic table and table with border and background from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Table, Thead, Tbody, Tr, Th, Td\n    from cjm_fasthtml_tailwind.utilities.layout import overflow\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    \n    # Basic tablefrom cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui,\n    basic_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"Favorite Color\")\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\"1\"),\n                    Td(\"Cy Ganderton\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Blue\")\n                ),\n                Tr(\n                    Th(\"2\"),\n                    Td(\"Hart Hagerty\"),\n                    Td(\"Desktop Support Technician\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"3\"),\n                    Td(\"Brice Swyre\"),\n                    Td(\"Tax Accountant\"),\n                    Td(\"Red\")\n                )\n            ),\n            cls=str(table)\n        ),\n        cls=combine_classes(overflow.x.auto)\n    )\n    assert \"overflow-x-auto\" in basic_table.attrs['class']\n    assert basic_table.children[0].tag == \"table\"\n    assert \"table\" in basic_table.children[0].attrs['class']\n    # Verify table structure\n    thead = basic_table.children[0].children[0]\n    \n    assert thead.tag == \"thead\"\n    assert thead.children[0].tag == \"tr\"\n    assert len(thead.children[0].children) == 4  # 4 columns\n    assert thead.children[0].children[0].tag == \"th\"\n    assert thead.children[0].children[0].children == ()  # Empty first header\n    assert thead.children[0].children[1].tag == \"th\"\n    assert thead.children[0].children[1].children[0] == \"Name\"\n    # Verify tbody\n    tbody = basic_table.children[0].children[1]\n    assert tbody.tag == \"tbody\"\n    assert len(tbody.children) == 3  # 3 rows\n    assert tbody.children[0].tag == \"tr\"\n    assert tbody.children[0].children[0].tag == \"th\"\n    assert tbody.children[0].children[0].children[0] == \"1\"\n    assert tbody.children[0].children[1].tag == \"td\"\n    assert tbody.children[0].children[1].children[0] == \"Cy Ganderton\"\n    \n    # Table with border and background\n    bordered_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"Favorite Color\")\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\"1\"),\n                    Td(\"Cy Ganderton\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Blue\")\n                ),\n                Tr(\n                    Th(\"2\"),\n                    Td(\"Hart Hagerty\"),\n                    Td(\"Desktop Support Technician\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"3\"),\n                    Td(\"Brice Swyre\"),\n                    Td(\"Tax Accountant\"),\n                    Td(\"Red\")\n                )\n            ),\n            cls=str(table)\n        ),\n        cls=combine_classes(overflow.x.auto, border_radius.box, border(), border_dui.base_content.opacity(5), bg_dui.base_100)\n    )\n    assert \"overflow-x-auto\" in bordered_table.attrs['class']\n    assert \"rounded-box\" in bordered_table.attrs['class']\n    assert \"border\" in bordered_table.attrs['class']\n    assert \"border-base-content/5\" in bordered_table.attrs['class']\n    assert \"bg-base-100\" in bordered_table.attrs['class']\n    assert bordered_table.children[0].tag == \"table\"\n    assert \"table\" in bordered_table.children[0].attrs['class']\n    # Verify it has same content as basic table but with border styling\n    assert len(bordered_table.children[0].children[1].children) == 3  # 3 rows\n    \n    # Return all examples in a Div\n    return Div(\n        basic_table,\n        bordered_table\n    )\n\n# Run the tests\ntest_table_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"overflow-x-auto\"&gt;\n    &lt;table class=\"table\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;1&lt;/th&gt;\n          &lt;td&gt;Cy Ganderton&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;2&lt;/th&gt;\n          &lt;td&gt;Hart Hagerty&lt;/td&gt;\n          &lt;td&gt;Desktop Support Technician&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;3&lt;/th&gt;\n          &lt;td&gt;Brice Swyre&lt;/td&gt;\n          &lt;td&gt;Tax Accountant&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n  &lt;div class=\"overflow-x-auto rounded-box border border-base-content/5 bg-base-100\"&gt;\n    &lt;table class=\"table\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;1&lt;/th&gt;\n          &lt;td&gt;Cy Ganderton&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;2&lt;/th&gt;\n          &lt;td&gt;Hart Hagerty&lt;/td&gt;\n          &lt;td&gt;Desktop Support Technician&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;3&lt;/th&gt;\n          &lt;td&gt;Brice Swyre&lt;/td&gt;\n          &lt;td&gt;Tax Accountant&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_table_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_table_style_fasthtml_examples\n\n test_table_style_fasthtml_examples ()\n\nTest table with active row, hover row, and zebra stripes from daisyUI v5 documentation.\n\n\nExported source\ndef test_table_style_fasthtml_examples():\n    \"\"\"Test table with active row, hover row, and zebra stripes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Table, Thead, Tbody, Tr, Th, Td\n    from cjm_fasthtml_tailwind.utilities.layout import overflow\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Table with an active row\n    active_row_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"Favorite Color\")\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\"1\"),\n                    Td(\"Cy Ganderton\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Blue\"),\n                    cls=str(bg_dui.base_200)\n                ),\n                Tr(\n                    Th(\"2\"),\n                    Td(\"Hart Hagerty\"),\n                    Td(\"Desktop Support Technician\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"3\"),\n                    Td(\"Brice Swyre\"),\n                    Td(\"Tax Accountant\"),\n                    Td(\"Red\")\n                )\n            ),\n            cls=str(table)\n        ),\n        cls=combine_classes(overflow.x.auto)\n    )\n    assert \"overflow-x-auto\" in active_row_table.attrs['class']\n    assert active_row_table.children[0].tag == \"table\"\n    assert \"table\" in active_row_table.children[0].attrs['class']\n    # Verify active row has bg-base-200\n    tbody = active_row_table.children[0].children[1]\n    assert tbody.tag == \"tbody\"\n    assert \"bg-base-200\" in tbody.children[0].attrs['class']\n    assert tbody.children[0].children[1].children[0] == \"Cy Ganderton\"\n    # Other rows should not have bg-base-200\n    assert 'class' not in tbody.children[1].attrs or \"bg-base-200\" not in tbody.children[1].attrs.get('class', '')\n    assert 'class' not in tbody.children[2].attrs or \"bg-base-200\" not in tbody.children[2].attrs.get('class', '')\n    \n    # Table with a row that highlights on hover\n    hover_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"Favorite Color\")\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\"1\"),\n                    Td(\"Cy Ganderton\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Blue\")\n                ),\n                Tr(\n                    Th(\"2\"),\n                    Td(\"Hart Hagerty\"),\n                    Td(\"Desktop Support Technician\"),\n                    Td(\"Purple\"),\n                    cls=str(bg_dui.base_300.hover)\n                ),\n                Tr(\n                    Th(\"3\"),\n                    Td(\"Brice Swyre\"),\n                    Td(\"Tax Accountant\"),\n                    Td(\"Red\")\n                )\n            ),\n            cls=str(table)\n        ),\n        cls=combine_classes(overflow.x.auto)\n    )\n    assert \"overflow-x-auto\" in hover_table.attrs['class']\n    assert hover_table.children[0].tag == \"table\"\n    assert \"table\" in hover_table.children[0].attrs['class']\n    # Verify second row has hover:bg-base-300\n    tbody = hover_table.children[0].children[1]\n    assert tbody.tag == \"tbody\"\n    assert \"hover:bg-base-300\" in tbody.children[1].attrs['class']\n    assert tbody.children[1].children[1].children[0] == \"Hart Hagerty\"\n    # Other rows should not have hover styling\n    assert 'class' not in tbody.children[0].attrs or \"hover:bg-base-300\" not in tbody.children[0].attrs.get('class', '')\n    assert 'class' not in tbody.children[2].attrs or \"hover:bg-base-300\" not in tbody.children[2].attrs.get('class', '')\n    \n    # Zebra striped table\n    zebra_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"Favorite Color\")\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\"1\"),\n                    Td(\"Cy Ganderton\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Blue\")\n                ),\n                Tr(\n                    Th(\"2\"),\n                    Td(\"Hart Hagerty\"),\n                    Td(\"Desktop Support Technician\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"3\"),\n                    Td(\"Brice Swyre\"),\n                    Td(\"Tax Accountant\"),\n                    Td(\"Red\")\n                )\n            ),\n            cls=combine_classes(table, table_modifiers.zebra)\n        ),\n        cls=combine_classes(overflow.x.auto)\n    )\n    assert \"overflow-x-auto\" in zebra_table.attrs['class']\n    assert zebra_table.children[0].tag == \"table\"\n    assert \"table\" in zebra_table.children[0].attrs['class']\n    assert \"table-zebra\" in zebra_table.children[0].attrs['class']\n    # Verify all rows are present\n    tbody = zebra_table.children[0].children[1]\n    assert tbody.tag == \"tbody\"\n    assert len(tbody.children) == 3\n    assert tbody.children[0].children[1].children[0] == \"Cy Ganderton\"\n    assert tbody.children[1].children[1].children[0] == \"Hart Hagerty\"\n    assert tbody.children[2].children[1].children[0] == \"Brice Swyre\"\n    \n    # Return all examples in a Div\n    return Div(\n        active_row_table,\n        hover_table,\n        zebra_table\n    )\n\n# Run the tests\ntest_table_style_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"overflow-x-auto\"&gt;\n    &lt;table class=\"table\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr class=\"bg-base-200\"&gt;\n          &lt;th&gt;1&lt;/th&gt;\n          &lt;td&gt;Cy Ganderton&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;2&lt;/th&gt;\n          &lt;td&gt;Hart Hagerty&lt;/td&gt;\n          &lt;td&gt;Desktop Support Technician&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;3&lt;/th&gt;\n          &lt;td&gt;Brice Swyre&lt;/td&gt;\n          &lt;td&gt;Tax Accountant&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n  &lt;div class=\"overflow-x-auto\"&gt;\n    &lt;table class=\"table\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;1&lt;/th&gt;\n          &lt;td&gt;Cy Ganderton&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr class=\"hover:bg-base-300\"&gt;\n          &lt;th&gt;2&lt;/th&gt;\n          &lt;td&gt;Hart Hagerty&lt;/td&gt;\n          &lt;td&gt;Desktop Support Technician&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;3&lt;/th&gt;\n          &lt;td&gt;Brice Swyre&lt;/td&gt;\n          &lt;td&gt;Tax Accountant&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n  &lt;div class=\"overflow-x-auto\"&gt;\n    &lt;table class=\"table table-zebra\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;1&lt;/th&gt;\n          &lt;td&gt;Cy Ganderton&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;2&lt;/th&gt;\n          &lt;td&gt;Hart Hagerty&lt;/td&gt;\n          &lt;td&gt;Desktop Support Technician&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;3&lt;/th&gt;\n          &lt;td&gt;Brice Swyre&lt;/td&gt;\n          &lt;td&gt;Tax Accountant&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_table_style_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_table_visual_elements_fasthtml_examples\n\n test_table_visual_elements_fasthtml_examples ()\n\nTest table with visual elements from daisyUI v5 documentation.\n\n\nExported source\ndef test_table_visual_elements_fasthtml_examples():\n    \"\"\"Test table with visual elements from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Table, Thead, Tbody, Tr, Th, Td, Tfoot, Input, Button, Img, Span, Label, Br\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw, overflow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import items, gap, flex_display\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.effects import opacity\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_styles, btn_sizes\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_styles, badge_sizes\n    from cjm_fasthtml_daisyui.components.data_display.avatar import avatar\n    from cjm_fasthtml_daisyui.components.data_input.checkbox import checkbox as checkbox_factory\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles\n    \n    # Table with visual elements\n    visual_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(\n                        Label(\n                            Input(type=\"checkbox\", cls=str(checkbox_factory))\n                        )\n                    ),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"Favorite Color\"),\n                    Th()\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\n                        Label(\n                            Input(type=\"checkbox\", cls=str(checkbox_factory))\n                        )\n                    ),\n                    Td(\n                        Div(\n                            Div(\n                                Div(\n                                    Img(\n                                        src=\"https://img.daisyui.com/images/profile/demo/2@94.webp\",\n                                        alt=\"Avatar Tailwind CSS Component\"\n                                    ),\n                                    cls=combine_classes(mask, mask_styles.squircle, h._12, w._12)\n                                ),\n                                cls=str(avatar)\n                            ),\n                            Div(\n                                Div(\"Hart Hagerty\", cls=str(font_weight.bold)),\n                                Div(\"United States\", cls=combine_classes(font_size.sm, opacity._50))\n                            ),\n                            cls=combine_classes(flex_display, items.center, gap._3)\n                        )\n                    ),\n                    Td(\n                        \"Zemlak, Daniel and Leannon\",\n                        Br(),\n                        Span(\"Desktop Support Technician\", cls=combine_classes(badge, badge_styles.ghost, badge_sizes.sm))\n                    ),\n                    Td(\"Purple\"),\n                    Th(\n                        Button(\"details\", cls=combine_classes(btn, btn_styles.ghost, btn_sizes.xs))\n                    )\n                ),\n                Tr(\n                    Th(\n                        Label(\n                            Input(type=\"checkbox\", cls=str(checkbox_factory))\n                        )\n                    ),\n                    Td(\n                        Div(\n                            Div(\n                                Div(\n                                    Img(\n                                        src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\",\n                                        alt=\"Avatar Tailwind CSS Component\"\n                                    ),\n                                    cls=combine_classes(mask, mask_styles.squircle, h._12, w._12)\n                                ),\n                                cls=str(avatar)\n                            ),\n                            Div(\n                                Div(\"Brice Swyre\", cls=str(font_weight.bold)),\n                                Div(\"China\", cls=combine_classes(font_size.sm, opacity._50))\n                            ),\n                            cls=combine_classes(flex_display, items.center, gap._3)\n                        )\n                    ),\n                    Td(\n                        \"Carroll Group\",\n                        Br(),\n                        Span(\"Tax Accountant\", cls=combine_classes(badge, badge_styles.ghost, badge_sizes.sm))\n                    ),\n                    Td(\"Red\"),\n                    Th(\n                        Button(\"details\", cls=combine_classes(btn, btn_styles.ghost, btn_sizes.xs))\n                    )\n                ),\n                Tr(\n                    Th(\n                        Label(\n                            Input(type=\"checkbox\", cls=str(checkbox_factory))\n                        )\n                    ),\n                    Td(\n                        Div(\n                            Div(\n                                Div(\n                                    Img(\n                                        src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\",\n                                        alt=\"Avatar Tailwind CSS Component\"\n                                    ),\n                                    cls=combine_classes(mask, mask_styles.squircle, h._12, w._12)\n                                ),\n                                cls=str(avatar)\n                            ),\n                            Div(\n                                Div(\"Marjy Ferencz\", cls=str(font_weight.bold)),\n                                Div(\"Russia\", cls=combine_classes(font_size.sm, opacity._50))\n                            ),\n                            cls=combine_classes(flex_display, items.center, gap._3)\n                        )\n                    ),\n                    Td(\n                        \"Rowe-Schoen\",\n                        Br(),\n                        Span(\"Office Assistant I\", cls=combine_classes(badge, badge_styles.ghost, badge_sizes.sm))\n                    ),\n                    Td(\"Crimson\"),\n                    Th(\n                        Button(\"details\", cls=combine_classes(btn, btn_styles.ghost, btn_sizes.xs))\n                    )\n                ),\n                Tr(\n                    Th(\n                        Label(\n                            Input(type=\"checkbox\", cls=str(checkbox_factory))\n                        )\n                    ),\n                    Td(\n                        Div(\n                            Div(\n                                Div(\n                                    Img(\n                                        src=\"https://img.daisyui.com/images/profile/demo/5@94.webp\",\n                                        alt=\"Avatar Tailwind CSS Component\"\n                                    ),\n                                    cls=combine_classes(mask, mask_styles.squircle, h._12, w._12)\n                                ),\n                                cls=str(avatar)\n                            ),\n                            Div(\n                                Div(\"Yancy Tear\", cls=str(font_weight.bold)),\n                                Div(\"Brazil\", cls=combine_classes(font_size.sm, opacity._50))\n                            ),\n                            cls=combine_classes(flex_display, items.center, gap._3)\n                        )\n                    ),\n                    Td(\n                        \"Wyman-Ledner\",\n                        Br(),\n                        Span(\"Community Outreach Specialist\", cls=combine_classes(badge, badge_styles.ghost, badge_sizes.sm))\n                    ),\n                    Td(\"Indigo\"),\n                    Th(\n                        Button(\"details\", cls=combine_classes(btn, btn_styles.ghost, btn_sizes.xs))\n                    )\n                )\n            ),\n            Tfoot(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"Favorite Color\"),\n                    Th()\n                )\n            ),\n            cls=str(table)\n        ),\n        cls=combine_classes(overflow.x.auto)\n    )\n    \n    # Verify table structure\n    assert \"overflow-x-auto\" in visual_table.attrs['class']\n    assert visual_table.children[0].tag == \"table\"\n    assert \"table\" in visual_table.children[0].attrs['class']\n    \n    # Verify thead\n    thead = visual_table.children[0].children[0]\n    assert thead.tag == \"thead\"\n    assert thead.children[0].tag == \"tr\"\n    assert len(thead.children[0].children) == 5  # 5 columns\n    # First column has checkbox\n    assert thead.children[0].children[0].tag == \"th\"\n    assert thead.children[0].children[0].children[0].tag == \"label\"\n    assert thead.children[0].children[0].children[0].children[0].tag == \"input\"\n    assert thead.children[0].children[0].children[0].children[0].attrs['type'] == \"checkbox\"\n    assert \"checkbox\" in thead.children[0].children[0].children[0].children[0].attrs['class']\n    \n    # Verify tbody\n    tbody = visual_table.children[0].children[1]\n    assert tbody.tag == \"tbody\"\n    assert len(tbody.children) == 4  # 4 rows\n    \n    # Verify first row structure\n    first_row = tbody.children[0]\n    assert first_row.tag == \"tr\"\n    assert len(first_row.children) == 5\n    \n    # Checkbox column\n    assert first_row.children[0].tag == \"th\"\n    assert first_row.children[0].children[0].tag == \"label\"\n    assert first_row.children[0].children[0].children[0].tag == \"input\"\n    assert \"checkbox\" in first_row.children[0].children[0].children[0].attrs['class']\n    \n    # Name column with avatar\n    name_td = first_row.children[1]\n    assert name_td.tag == \"td\"\n    flex_container = name_td.children[0]\n    assert \"flex\" in flex_container.attrs['class']\n    assert \"items-center\" in flex_container.attrs['class']\n    assert \"gap-3\" in flex_container.attrs['class']\n    # Avatar\n    avatar_div = flex_container.children[0]\n    assert \"avatar\" in avatar_div.attrs['class']\n    mask_div = avatar_div.children[0]\n    assert \"mask\" in mask_div.attrs['class']\n    assert \"mask-squircle\" in mask_div.attrs['class']\n    assert \"h-12\" in mask_div.attrs['class']\n    assert \"w-12\" in mask_div.attrs['class']\n    assert mask_div.children[0].tag == \"img\"\n    assert mask_div.children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/2@94.webp\"\n    # Name text\n    name_div = flex_container.children[1]\n    assert name_div.children[0].children[0] == \"Hart Hagerty\"\n    assert \"font-bold\" in name_div.children[0].attrs['class']\n    assert name_div.children[1].children[0] == \"United States\"\n    assert \"text-sm\" in name_div.children[1].attrs['class']\n    assert \"opacity-50\" in name_div.children[1].attrs['class']\n    \n    # Job column with badge\n    job_td = first_row.children[2]\n    assert job_td.tag == \"td\"\n    assert job_td.children[0] == \"Zemlak, Daniel and Leannon\"\n    assert job_td.children[1].tag == \"br\"\n    assert job_td.children[2].tag == \"span\"\n    assert \"badge\" in job_td.children[2].attrs['class']\n    assert \"badge-ghost\" in job_td.children[2].attrs['class']\n    assert \"badge-sm\" in job_td.children[2].attrs['class']\n    assert job_td.children[2].children[0] == \"Desktop Support Technician\"\n    \n    # Color column\n    assert first_row.children[3].tag == \"td\"\n    assert first_row.children[3].children[0] == \"Purple\"\n    \n    # Details button column\n    assert first_row.children[4].tag == \"th\"\n    assert first_row.children[4].children[0].tag == \"button\"\n    assert \"btn\" in first_row.children[4].children[0].attrs['class']\n    assert \"btn-ghost\" in first_row.children[4].children[0].attrs['class']\n    assert \"btn-xs\" in first_row.children[4].children[0].attrs['class']\n    assert first_row.children[4].children[0].children[0] == \"details\"\n    \n    # Verify second row has different data\n    second_row = tbody.children[1]\n    assert second_row.children[1].children[0].children[1].children[0].children[0] == \"Brice Swyre\"\n    assert second_row.children[1].children[0].children[1].children[1].children[0] == \"China\"\n    assert second_row.children[2].children[0] == \"Carroll Group\"\n    assert second_row.children[2].children[2].children[0] == \"Tax Accountant\"\n    \n    # Verify tfoot\n    tfoot = visual_table.children[0].children[2]\n    assert tfoot.tag == \"tfoot\"\n    assert tfoot.children[0].tag == \"tr\"\n    assert len(tfoot.children[0].children) == 5  # 5 columns\n    assert tfoot.children[0].children[1].children[0] == \"Name\"\n    assert tfoot.children[0].children[2].children[0] == \"Job\"\n    \n    # Return the example in a Div\n    return Div(visual_table)\n\n# Run the tests\ntest_table_visual_elements_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"overflow-x-auto\"&gt;\n    &lt;table class=\"table\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;\n&lt;label&gt;              &lt;input type=\"checkbox\" class=\"checkbox\"&gt;\n&lt;/label&gt;          &lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n          &lt;th&gt;&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;\n&lt;label&gt;              &lt;input type=\"checkbox\" class=\"checkbox\"&gt;\n&lt;/label&gt;          &lt;/th&gt;\n          &lt;td&gt;\n            &lt;div class=\"flex items-center gap-3\"&gt;\n              &lt;div class=\"avatar\"&gt;\n                &lt;div class=\"mask mask-squircle h-12 w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/2@94.webp\" alt=\"Avatar Tailwind CSS Component\"&gt;                &lt;/div&gt;\n              &lt;/div&gt;\n              &lt;div&gt;\n                &lt;div class=\"font-bold\"&gt;Hart Hagerty&lt;/div&gt;\n                &lt;div class=\"text-sm opacity-50\"&gt;United States&lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/td&gt;\n          &lt;td&gt;\nZemlak, Daniel and Leannon&lt;br&gt;&lt;span class=\"badge badge-ghost badge-sm\"&gt;Desktop Support Technician&lt;/span&gt;          &lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n          &lt;th&gt;\n&lt;button class=\"btn btn-ghost btn-xs\"&gt;details&lt;/button&gt;          &lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;\n&lt;label&gt;              &lt;input type=\"checkbox\" class=\"checkbox\"&gt;\n&lt;/label&gt;          &lt;/th&gt;\n          &lt;td&gt;\n            &lt;div class=\"flex items-center gap-3\"&gt;\n              &lt;div class=\"avatar\"&gt;\n                &lt;div class=\"mask mask-squircle h-12 w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/3@94.webp\" alt=\"Avatar Tailwind CSS Component\"&gt;                &lt;/div&gt;\n              &lt;/div&gt;\n              &lt;div&gt;\n                &lt;div class=\"font-bold\"&gt;Brice Swyre&lt;/div&gt;\n                &lt;div class=\"text-sm opacity-50\"&gt;China&lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/td&gt;\n          &lt;td&gt;\nCarroll Group&lt;br&gt;&lt;span class=\"badge badge-ghost badge-sm\"&gt;Tax Accountant&lt;/span&gt;          &lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n          &lt;th&gt;\n&lt;button class=\"btn btn-ghost btn-xs\"&gt;details&lt;/button&gt;          &lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;\n&lt;label&gt;              &lt;input type=\"checkbox\" class=\"checkbox\"&gt;\n&lt;/label&gt;          &lt;/th&gt;\n          &lt;td&gt;\n            &lt;div class=\"flex items-center gap-3\"&gt;\n              &lt;div class=\"avatar\"&gt;\n                &lt;div class=\"mask mask-squircle h-12 w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/4@94.webp\" alt=\"Avatar Tailwind CSS Component\"&gt;                &lt;/div&gt;\n              &lt;/div&gt;\n              &lt;div&gt;\n                &lt;div class=\"font-bold\"&gt;Marjy Ferencz&lt;/div&gt;\n                &lt;div class=\"text-sm opacity-50\"&gt;Russia&lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/td&gt;\n          &lt;td&gt;\nRowe-Schoen&lt;br&gt;&lt;span class=\"badge badge-ghost badge-sm\"&gt;Office Assistant I&lt;/span&gt;          &lt;/td&gt;\n          &lt;td&gt;Crimson&lt;/td&gt;\n          &lt;th&gt;\n&lt;button class=\"btn btn-ghost btn-xs\"&gt;details&lt;/button&gt;          &lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;\n&lt;label&gt;              &lt;input type=\"checkbox\" class=\"checkbox\"&gt;\n&lt;/label&gt;          &lt;/th&gt;\n          &lt;td&gt;\n            &lt;div class=\"flex items-center gap-3\"&gt;\n              &lt;div class=\"avatar\"&gt;\n                &lt;div class=\"mask mask-squircle h-12 w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/5@94.webp\" alt=\"Avatar Tailwind CSS Component\"&gt;                &lt;/div&gt;\n              &lt;/div&gt;\n              &lt;div&gt;\n                &lt;div class=\"font-bold\"&gt;Yancy Tear&lt;/div&gt;\n                &lt;div class=\"text-sm opacity-50\"&gt;Brazil&lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/td&gt;\n          &lt;td&gt;\nWyman-Ledner&lt;br&gt;&lt;span class=\"badge badge-ghost badge-sm\"&gt;Community Outreach Specialist&lt;/span&gt;          &lt;/td&gt;\n          &lt;td&gt;Indigo&lt;/td&gt;\n          &lt;th&gt;\n&lt;button class=\"btn btn-ghost btn-xs\"&gt;details&lt;/button&gt;          &lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;tfoot&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n          &lt;th&gt;&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/tfoot&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_table_visual_elements_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_table_sizes_fasthtml_examples\n\n test_table_sizes_fasthtml_examples ()\n\nTest table xs size from daisyUI v5 documentation.\n\n\nExported source\ndef test_table_sizes_fasthtml_examples():\n    \"\"\"Test table xs size from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Table, Thead, Tbody, Tr, Th, Td, Tfoot\n    from cjm_fasthtml_tailwind.utilities.layout import overflow\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Table xs (extra small)\n    xs_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"company\"),\n                    Th(\"location\"),\n                    Th(\"Last Login\"),\n                    Th(\"Favorite Color\")\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\"1\"),\n                    Td(\"Cy Ganderton\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Littel, Schaden and Vandervort\"),\n                    Td(\"Canada\"),\n                    Td(\"12/16/2020\"),\n                    Td(\"Blue\")\n                ),\n                Tr(\n                    Th(\"2\"),\n                    Td(\"Hart Hagerty\"),\n                    Td(\"Desktop Support Technician\"),\n                    Td(\"Zemlak, Daniel and Leannon\"),\n                    Td(\"United States\"),\n                    Td(\"12/5/2020\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"3\"),\n                    Td(\"Brice Swyre\"),\n                    Td(\"Tax Accountant\"),\n                    Td(\"Carroll Group\"),\n                    Td(\"China\"),\n                    Td(\"8/15/2020\"),\n                    Td(\"Red\")\n                ),\n                Tr(\n                    Th(\"4\"),\n                    Td(\"Marjy Ferencz\"),\n                    Td(\"Office Assistant I\"),\n                    Td(\"Rowe-Schoen\"),\n                    Td(\"Russia\"),\n                    Td(\"3/25/2021\"),\n                    Td(\"Crimson\")\n                ),\n                Tr(\n                    Th(\"5\"),\n                    Td(\"Yancy Tear\"),\n                    Td(\"Community Outreach Specialist\"),\n                    Td(\"Wyman-Ledner\"),\n                    Td(\"Brazil\"),\n                    Td(\"5/22/2020\"),\n                    Td(\"Indigo\")\n                ),\n                Tr(\n                    Th(\"6\"),\n                    Td(\"Irma Vasilik\"),\n                    Td(\"Editor\"),\n                    Td(\"Wiza, Bins and Emard\"),\n                    Td(\"Venezuela\"),\n                    Td(\"12/8/2020\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"7\"),\n                    Td(\"Meghann Durtnal\"),\n                    Td(\"Staff Accountant IV\"),\n                    Td(\"Schuster-Schimmel\"),\n                    Td(\"Philippines\"),\n                    Td(\"2/17/2021\"),\n                    Td(\"Yellow\")\n                ),\n                Tr(\n                    Th(\"8\"),\n                    Td(\"Sammy Seston\"),\n                    Td(\"Accountant I\"),\n                    Td(\"O'Hara, Welch and Keebler\"),\n                    Td(\"Indonesia\"),\n                    Td(\"5/23/2020\"),\n                    Td(\"Crimson\")\n                ),\n                Tr(\n                    Th(\"9\"),\n                    Td(\"Lesya Tinham\"),\n                    Td(\"Safety Technician IV\"),\n                    Td(\"Turner-Kuhlman\"),\n                    Td(\"Philippines\"),\n                    Td(\"2/21/2021\"),\n                    Td(\"Maroon\")\n                ),\n                Tr(\n                    Th(\"10\"),\n                    Td(\"Zaneta Tewkesbury\"),\n                    Td(\"VP Marketing\"),\n                    Td(\"Sauer LLC\"),\n                    Td(\"Chad\"),\n                    Td(\"6/23/2020\"),\n                    Td(\"Green\")\n                ),\n                Tr(\n                    Th(\"11\"),\n                    Td(\"Andy Tipple\"),\n                    Td(\"Librarian\"),\n                    Td(\"Hilpert Group\"),\n                    Td(\"Poland\"),\n                    Td(\"7/9/2020\"),\n                    Td(\"Indigo\")\n                ),\n                Tr(\n                    Th(\"12\"),\n                    Td(\"Sophi Biles\"),\n                    Td(\"Recruiting Manager\"),\n                    Td(\"Gutmann Inc\"),\n                    Td(\"Indonesia\"),\n                    Td(\"2/12/2021\"),\n                    Td(\"Maroon\")\n                ),\n                Tr(\n                    Th(\"13\"),\n                    Td(\"Florida Garces\"),\n                    Td(\"Web Developer IV\"),\n                    Td(\"Gaylord, Pacocha and Baumbach\"),\n                    Td(\"Poland\"),\n                    Td(\"5/31/2020\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"14\"),\n                    Td(\"Maribeth Popping\"),\n                    Td(\"Analyst Programmer\"),\n                    Td(\"Deckow-Pouros\"),\n                    Td(\"Portugal\"),\n                    Td(\"4/27/2021\"),\n                    Td(\"Aquamarine\")\n                ),\n                Tr(\n                    Th(\"15\"),\n                    Td(\"Moritz Dryburgh\"),\n                    Td(\"Dental Hygienist\"),\n                    Td(\"Schiller, Cole and Hackett\"),\n                    Td(\"Sri Lanka\"),\n                    Td(\"8/8/2020\"),\n                    Td(\"Crimson\")\n                ),\n                Tr(\n                    Th(\"16\"),\n                    Td(\"Reid Semiras\"),\n                    Td(\"Teacher\"),\n                    Td(\"Sporer, Sipes and Rogahn\"),\n                    Td(\"Poland\"),\n                    Td(\"7/30/2020\"),\n                    Td(\"Green\")\n                ),\n                Tr(\n                    Th(\"17\"),\n                    Td(\"Alec Lethby\"),\n                    Td(\"Teacher\"),\n                    Td(\"Reichel, Glover and Hamill\"),\n                    Td(\"China\"),\n                    Td(\"2/28/2021\"),\n                    Td(\"Khaki\")\n                ),\n                Tr(\n                    Th(\"18\"),\n                    Td(\"Aland Wilber\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Kshlerin, Rogahn and Swaniawski\"),\n                    Td(\"Czech Republic\"),\n                    Td(\"9/29/2020\"),\n                    Td(\"Purple\")\n                ),\n                Tr(\n                    Th(\"19\"),\n                    Td(\"Teddie Duerden\"),\n                    Td(\"Staff Accountant III\"),\n                    Td(\"Pouros, Ullrich and Windler\"),\n                    Td(\"France\"),\n                    Td(\"10/27/2020\"),\n                    Td(\"Aquamarine\")\n                ),\n                Tr(\n                    Th(\"20\"),\n                    Td(\"Lorelei Blackstone\"),\n                    Td(\"Data Coordinator\"),\n                    Td(\"Witting, Kutch and Greenfelder\"),\n                    Td(\"Kazakhstan\"),\n                    Td(\"6/3/2020\"),\n                    Td(\"Red\")\n                )\n            ),\n            Tfoot(\n                Tr(\n                    Th(),\n                    Th(\"Name\"),\n                    Th(\"Job\"),\n                    Th(\"company\"),\n                    Th(\"location\"),\n                    Th(\"Last Login\"),\n                    Th(\"Favorite Color\")\n                )\n            ),\n            cls=combine_classes(table, table_sizes.xs)\n        ),\n        cls=combine_classes(overflow.x.auto)\n    )\n    \n    # Verify table structure\n    assert \"overflow-x-auto\" in xs_table.attrs['class']\n    assert xs_table.children[0].tag == \"table\"\n    assert \"table\" in xs_table.children[0].attrs['class']\n    assert \"table-xs\" in xs_table.children[0].attrs['class']\n    \n    # Verify thead\n    thead = xs_table.children[0].children[0]\n    assert thead.tag == \"thead\"\n    assert thead.children[0].tag == \"tr\"\n    assert len(thead.children[0].children) == 7  # 7 columns\n    assert thead.children[0].children[3].children[0] == \"company\"  # lowercase as in docs\n    assert thead.children[0].children[4].children[0] == \"location\"  # lowercase as in docs\n    \n    # Verify tbody\n    tbody = xs_table.children[0].children[1]\n    assert tbody.tag == \"tbody\"\n    assert len(tbody.children) == 20  # 20 rows\n    \n    # Verify first row\n    first_row = tbody.children[0]\n    assert first_row.tag == \"tr\"\n    assert first_row.children[0].tag == \"th\"\n    assert first_row.children[0].children[0] == \"1\"\n    assert first_row.children[1].tag == \"td\"\n    assert first_row.children[1].children[0] == \"Cy Ganderton\"\n    assert first_row.children[2].children[0] == \"Quality Control Specialist\"\n    assert first_row.children[3].children[0] == \"Littel, Schaden and Vandervort\"\n    assert first_row.children[4].children[0] == \"Canada\"\n    assert first_row.children[5].children[0] == \"12/16/2020\"\n    assert first_row.children[6].children[0] == \"Blue\"\n    \n    # Verify last row\n    last_row = tbody.children[19]\n    assert last_row.tag == \"tr\"\n    assert last_row.children[0].tag == \"th\"\n    assert last_row.children[0].children[0] == \"20\"\n    assert last_row.children[1].children[0] == \"Lorelei Blackstone\"\n    assert last_row.children[2].children[0] == \"Data Coordinator\"\n    assert last_row.children[3].children[0] == \"Witting, Kutch and Greenfelder\"\n    assert last_row.children[4].children[0] == \"Kazakhstan\"\n    assert last_row.children[5].children[0] == \"6/3/2020\"\n    assert last_row.children[6].children[0] == \"Red\"\n    \n    # Verify tfoot\n    tfoot = xs_table.children[0].children[2]\n    assert tfoot.tag == \"tfoot\"\n    assert tfoot.children[0].tag == \"tr\"\n    assert len(tfoot.children[0].children) == 7  # 7 columns\n    assert tfoot.children[0].children[1].children[0] == \"Name\"\n    assert tfoot.children[0].children[2].children[0] == \"Job\"\n    assert tfoot.children[0].children[3].children[0] == \"company\"  # lowercase as in docs\n    assert tfoot.children[0].children[4].children[0] == \"location\"  # lowercase as in docs\n    \n    # Return the example in a Div\n    return Div(xs_table)\n\n# Run the tests\ntest_table_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"overflow-x-auto\"&gt;\n    &lt;table class=\"table table-xs\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;company&lt;/th&gt;\n          &lt;th&gt;location&lt;/th&gt;\n          &lt;th&gt;Last Login&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;1&lt;/th&gt;\n          &lt;td&gt;Cy Ganderton&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Littel, Schaden and Vandervort&lt;/td&gt;\n          &lt;td&gt;Canada&lt;/td&gt;\n          &lt;td&gt;12/16/2020&lt;/td&gt;\n          &lt;td&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;2&lt;/th&gt;\n          &lt;td&gt;Hart Hagerty&lt;/td&gt;\n          &lt;td&gt;Desktop Support Technician&lt;/td&gt;\n          &lt;td&gt;Zemlak, Daniel and Leannon&lt;/td&gt;\n          &lt;td&gt;United States&lt;/td&gt;\n          &lt;td&gt;12/5/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;3&lt;/th&gt;\n          &lt;td&gt;Brice Swyre&lt;/td&gt;\n          &lt;td&gt;Tax Accountant&lt;/td&gt;\n          &lt;td&gt;Carroll Group&lt;/td&gt;\n          &lt;td&gt;China&lt;/td&gt;\n          &lt;td&gt;8/15/2020&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;4&lt;/th&gt;\n          &lt;td&gt;Marjy Ferencz&lt;/td&gt;\n          &lt;td&gt;Office Assistant I&lt;/td&gt;\n          &lt;td&gt;Rowe-Schoen&lt;/td&gt;\n          &lt;td&gt;Russia&lt;/td&gt;\n          &lt;td&gt;3/25/2021&lt;/td&gt;\n          &lt;td&gt;Crimson&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;5&lt;/th&gt;\n          &lt;td&gt;Yancy Tear&lt;/td&gt;\n          &lt;td&gt;Community Outreach Specialist&lt;/td&gt;\n          &lt;td&gt;Wyman-Ledner&lt;/td&gt;\n          &lt;td&gt;Brazil&lt;/td&gt;\n          &lt;td&gt;5/22/2020&lt;/td&gt;\n          &lt;td&gt;Indigo&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;6&lt;/th&gt;\n          &lt;td&gt;Irma Vasilik&lt;/td&gt;\n          &lt;td&gt;Editor&lt;/td&gt;\n          &lt;td&gt;Wiza, Bins and Emard&lt;/td&gt;\n          &lt;td&gt;Venezuela&lt;/td&gt;\n          &lt;td&gt;12/8/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;7&lt;/th&gt;\n          &lt;td&gt;Meghann Durtnal&lt;/td&gt;\n          &lt;td&gt;Staff Accountant IV&lt;/td&gt;\n          &lt;td&gt;Schuster-Schimmel&lt;/td&gt;\n          &lt;td&gt;Philippines&lt;/td&gt;\n          &lt;td&gt;2/17/2021&lt;/td&gt;\n          &lt;td&gt;Yellow&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;8&lt;/th&gt;\n          &lt;td&gt;Sammy Seston&lt;/td&gt;\n          &lt;td&gt;Accountant I&lt;/td&gt;\n          &lt;td&gt;O'Hara, Welch and Keebler&lt;/td&gt;\n          &lt;td&gt;Indonesia&lt;/td&gt;\n          &lt;td&gt;5/23/2020&lt;/td&gt;\n          &lt;td&gt;Crimson&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;9&lt;/th&gt;\n          &lt;td&gt;Lesya Tinham&lt;/td&gt;\n          &lt;td&gt;Safety Technician IV&lt;/td&gt;\n          &lt;td&gt;Turner-Kuhlman&lt;/td&gt;\n          &lt;td&gt;Philippines&lt;/td&gt;\n          &lt;td&gt;2/21/2021&lt;/td&gt;\n          &lt;td&gt;Maroon&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;10&lt;/th&gt;\n          &lt;td&gt;Zaneta Tewkesbury&lt;/td&gt;\n          &lt;td&gt;VP Marketing&lt;/td&gt;\n          &lt;td&gt;Sauer LLC&lt;/td&gt;\n          &lt;td&gt;Chad&lt;/td&gt;\n          &lt;td&gt;6/23/2020&lt;/td&gt;\n          &lt;td&gt;Green&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;11&lt;/th&gt;\n          &lt;td&gt;Andy Tipple&lt;/td&gt;\n          &lt;td&gt;Librarian&lt;/td&gt;\n          &lt;td&gt;Hilpert Group&lt;/td&gt;\n          &lt;td&gt;Poland&lt;/td&gt;\n          &lt;td&gt;7/9/2020&lt;/td&gt;\n          &lt;td&gt;Indigo&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;12&lt;/th&gt;\n          &lt;td&gt;Sophi Biles&lt;/td&gt;\n          &lt;td&gt;Recruiting Manager&lt;/td&gt;\n          &lt;td&gt;Gutmann Inc&lt;/td&gt;\n          &lt;td&gt;Indonesia&lt;/td&gt;\n          &lt;td&gt;2/12/2021&lt;/td&gt;\n          &lt;td&gt;Maroon&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;13&lt;/th&gt;\n          &lt;td&gt;Florida Garces&lt;/td&gt;\n          &lt;td&gt;Web Developer IV&lt;/td&gt;\n          &lt;td&gt;Gaylord, Pacocha and Baumbach&lt;/td&gt;\n          &lt;td&gt;Poland&lt;/td&gt;\n          &lt;td&gt;5/31/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;14&lt;/th&gt;\n          &lt;td&gt;Maribeth Popping&lt;/td&gt;\n          &lt;td&gt;Analyst Programmer&lt;/td&gt;\n          &lt;td&gt;Deckow-Pouros&lt;/td&gt;\n          &lt;td&gt;Portugal&lt;/td&gt;\n          &lt;td&gt;4/27/2021&lt;/td&gt;\n          &lt;td&gt;Aquamarine&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;15&lt;/th&gt;\n          &lt;td&gt;Moritz Dryburgh&lt;/td&gt;\n          &lt;td&gt;Dental Hygienist&lt;/td&gt;\n          &lt;td&gt;Schiller, Cole and Hackett&lt;/td&gt;\n          &lt;td&gt;Sri Lanka&lt;/td&gt;\n          &lt;td&gt;8/8/2020&lt;/td&gt;\n          &lt;td&gt;Crimson&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;16&lt;/th&gt;\n          &lt;td&gt;Reid Semiras&lt;/td&gt;\n          &lt;td&gt;Teacher&lt;/td&gt;\n          &lt;td&gt;Sporer, Sipes and Rogahn&lt;/td&gt;\n          &lt;td&gt;Poland&lt;/td&gt;\n          &lt;td&gt;7/30/2020&lt;/td&gt;\n          &lt;td&gt;Green&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;17&lt;/th&gt;\n          &lt;td&gt;Alec Lethby&lt;/td&gt;\n          &lt;td&gt;Teacher&lt;/td&gt;\n          &lt;td&gt;Reichel, Glover and Hamill&lt;/td&gt;\n          &lt;td&gt;China&lt;/td&gt;\n          &lt;td&gt;2/28/2021&lt;/td&gt;\n          &lt;td&gt;Khaki&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;18&lt;/th&gt;\n          &lt;td&gt;Aland Wilber&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Kshlerin, Rogahn and Swaniawski&lt;/td&gt;\n          &lt;td&gt;Czech Republic&lt;/td&gt;\n          &lt;td&gt;9/29/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;19&lt;/th&gt;\n          &lt;td&gt;Teddie Duerden&lt;/td&gt;\n          &lt;td&gt;Staff Accountant III&lt;/td&gt;\n          &lt;td&gt;Pouros, Ullrich and Windler&lt;/td&gt;\n          &lt;td&gt;France&lt;/td&gt;\n          &lt;td&gt;10/27/2020&lt;/td&gt;\n          &lt;td&gt;Aquamarine&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;20&lt;/th&gt;\n          &lt;td&gt;Lorelei Blackstone&lt;/td&gt;\n          &lt;td&gt;Data Coordinator&lt;/td&gt;\n          &lt;td&gt;Witting, Kutch and Greenfelder&lt;/td&gt;\n          &lt;td&gt;Kazakhstan&lt;/td&gt;\n          &lt;td&gt;6/3/2020&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;tfoot&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;th&gt;Name&lt;/th&gt;\n          &lt;th&gt;Job&lt;/th&gt;\n          &lt;th&gt;company&lt;/th&gt;\n          &lt;th&gt;location&lt;/th&gt;\n          &lt;th&gt;Last Login&lt;/th&gt;\n          &lt;th&gt;Favorite Color&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/tfoot&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_table_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_table_pinned_fasthtml_examples\n\n test_table_pinned_fasthtml_examples ()\n\nTest table with pinned rows and pinned rows+columns from daisyUI v5 documentation.\n\n\nExported source\ndef test_table_pinned_fasthtml_examples():\n    \"\"\"Test table with pinned rows and pinned rows+columns from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Table, Thead, Tbody, Tr, Th, Td, Tfoot\n    from cjm_fasthtml_tailwind.utilities.layout import overflow\n    from cjm_fasthtml_tailwind.utilities.sizing import h\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Table with pinned rows\n    pinned_rows_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(\"A\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Ant-Man\")),\n                Tr(Td(\"Aquaman\")),\n                Tr(Td(\"Asterix\")),\n                Tr(Td(\"The Atom\")),\n                Tr(Td(\"The Avengers\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"B\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Batgirl\")),\n                Tr(Td(\"Batman\")),\n                Tr(Td(\"Batwoman\")),\n                Tr(Td(\"Black Canary\")),\n                Tr(Td(\"Black Panther\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"C\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Captain America\")),\n                Tr(Td(\"Captain Marvel\")),\n                Tr(Td(\"Catwoman\")),\n                Tr(Td(\"Conan the Barbarian\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"D\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Daredevil\")),\n                Tr(Td(\"The Defenders\")),\n                Tr(Td(\"Doc Savage\")),\n                Tr(Td(\"Doctor Strange\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"E\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Elektra\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"F\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Fantastic Four\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"G\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Ghost Rider\")),\n                Tr(Td(\"Green Arrow\")),\n                Tr(Td(\"Green Lantern\")),\n                Tr(Td(\"Guardians of the Galaxy\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"H\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Hawkeye\")),\n                Tr(Td(\"Hellboy\")),\n                Tr(Td(\"Incredible Hulk\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"I\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Iron Fist\")),\n                Tr(Td(\"Iron Man\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"M\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Marvelman\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"R\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Robin\")),\n                Tr(Td(\"The Rocketeer\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"S\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"The Shadow\")),\n                Tr(Td(\"Spider-Man\")),\n                Tr(Td(\"Sub-Mariner\")),\n                Tr(Td(\"Supergirl\")),\n                Tr(Td(\"Superman\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"T\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Teenage Mutant Ninja Turtles\")),\n                Tr(Td(\"Thor\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"W\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"The Wasp\")),\n                Tr(Td(\"Watchmen\")),\n                Tr(Td(\"Wolverine\")),\n                Tr(Td(\"Wonder Woman\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"X\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"X-Men\"))\n            ),\n            Thead(\n                Tr(\n                    Th(\"Z\")\n                )\n            ),\n            Tbody(\n                Tr(Td(\"Zatanna\")),\n                Tr(Td(\"Zatara\"))\n            ),\n            cls=combine_classes(table, table_modifiers.pin_rows, bg_dui.base_200)\n        ),\n        cls=combine_classes(h._96, overflow.x.auto)\n    )\n    \n    # Verify table structure\n    assert \"h-96\" in pinned_rows_table.attrs['class']\n    assert \"overflow-x-auto\" in pinned_rows_table.attrs['class']\n    assert pinned_rows_table.children[0].tag == \"table\"\n    assert \"table\" in pinned_rows_table.children[0].attrs['class']\n    assert \"table-pin-rows\" in pinned_rows_table.children[0].attrs['class']\n    assert \"bg-base-200\" in pinned_rows_table.children[0].attrs['class']\n    \n    # Verify alternating thead/tbody structure\n    table_elem = pinned_rows_table.children[0]\n    # First group - A\n    assert table_elem.children[0].tag == \"thead\"\n    assert table_elem.children[0].children[0].children[0].children[0] == \"A\"\n    assert table_elem.children[1].tag == \"tbody\"\n    assert table_elem.children[1].children[0].children[0].children[0] == \"Ant-Man\"\n    assert table_elem.children[1].children[1].children[0].children[0] == \"Aquaman\"\n    # Second group - B\n    assert table_elem.children[2].tag == \"thead\"\n    assert table_elem.children[2].children[0].children[0].children[0] == \"B\"\n    assert table_elem.children[3].tag == \"tbody\"\n    assert table_elem.children[3].children[0].children[0].children[0] == \"Batgirl\"\n    # Last group - Z\n    assert table_elem.children[-2].tag == \"thead\"\n    assert table_elem.children[-2].children[0].children[0].children[0] == \"Z\"\n    assert table_elem.children[-1].tag == \"tbody\"\n    assert table_elem.children[-1].children[0].children[0].children[0] == \"Zatanna\"\n    assert table_elem.children[-1].children[1].children[0].children[0] == \"Zatara\"\n    \n    # Table with pinned rows and columns\n    pinned_both_table = Div(\n        Table(\n            Thead(\n                Tr(\n                    Th(),\n                    Td(\"Name\"),\n                    Td(\"Job\"),\n                    Td(\"company\"),\n                    Td(\"location\"),\n                    Td(\"Last Login\"),\n                    Td(\"Favorite Color\"),\n                    Th()\n                )\n            ),\n            Tbody(\n                Tr(\n                    Th(\"1\"),\n                    Td(\"Cy Ganderton\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Littel, Schaden and Vandervort\"),\n                    Td(\"Canada\"),\n                    Td(\"12/16/2020\"),\n                    Td(\"Blue\"),\n                    Th(\"1\")\n                ),\n                Tr(\n                    Th(\"2\"),\n                    Td(\"Hart Hagerty\"),\n                    Td(\"Desktop Support Technician\"),\n                    Td(\"Zemlak, Daniel and Leannon\"),\n                    Td(\"United States\"),\n                    Td(\"12/5/2020\"),\n                    Td(\"Purple\"),\n                    Th(\"2\")\n                ),\n                Tr(\n                    Th(\"3\"),\n                    Td(\"Brice Swyre\"),\n                    Td(\"Tax Accountant\"),\n                    Td(\"Carroll Group\"),\n                    Td(\"China\"),\n                    Td(\"8/15/2020\"),\n                    Td(\"Red\"),\n                    Th(\"3\")\n                ),\n                Tr(\n                    Th(\"4\"),\n                    Td(\"Marjy Ferencz\"),\n                    Td(\"Office Assistant I\"),\n                    Td(\"Rowe-Schoen\"),\n                    Td(\"Russia\"),\n                    Td(\"3/25/2021\"),\n                    Td(\"Crimson\"),\n                    Th(\"4\")\n                ),\n                Tr(\n                    Th(\"5\"),\n                    Td(\"Yancy Tear\"),\n                    Td(\"Community Outreach Specialist\"),\n                    Td(\"Wyman-Ledner\"),\n                    Td(\"Brazil\"),\n                    Td(\"5/22/2020\"),\n                    Td(\"Indigo\"),\n                    Th(\"5\")\n                ),\n                Tr(\n                    Th(\"6\"),\n                    Td(\"Irma Vasilik\"),\n                    Td(\"Editor\"),\n                    Td(\"Wiza, Bins and Emard\"),\n                    Td(\"Venezuela\"),\n                    Td(\"12/8/2020\"),\n                    Td(\"Purple\"),\n                    Th(\"6\")\n                ),\n                Tr(\n                    Th(\"7\"),\n                    Td(\"Meghann Durtnal\"),\n                    Td(\"Staff Accountant IV\"),\n                    Td(\"Schuster-Schimmel\"),\n                    Td(\"Philippines\"),\n                    Td(\"2/17/2021\"),\n                    Td(\"Yellow\"),\n                    Th(\"7\")\n                ),\n                Tr(\n                    Th(\"8\"),\n                    Td(\"Sammy Seston\"),\n                    Td(\"Accountant I\"),\n                    Td(\"O'Hara, Welch and Keebler\"),\n                    Td(\"Indonesia\"),\n                    Td(\"5/23/2020\"),\n                    Td(\"Crimson\"),\n                    Th(\"8\")\n                ),\n                Tr(\n                    Th(\"9\"),\n                    Td(\"Lesya Tinham\"),\n                    Td(\"Safety Technician IV\"),\n                    Td(\"Turner-Kuhlman\"),\n                    Td(\"Philippines\"),\n                    Td(\"2/21/2021\"),\n                    Td(\"Maroon\"),\n                    Th(\"9\")\n                ),\n                Tr(\n                    Th(\"10\"),\n                    Td(\"Zaneta Tewkesbury\"),\n                    Td(\"VP Marketing\"),\n                    Td(\"Sauer LLC\"),\n                    Td(\"Chad\"),\n                    Td(\"6/23/2020\"),\n                    Td(\"Green\"),\n                    Th(\"10\")\n                ),\n                Tr(\n                    Th(\"11\"),\n                    Td(\"Andy Tipple\"),\n                    Td(\"Librarian\"),\n                    Td(\"Hilpert Group\"),\n                    Td(\"Poland\"),\n                    Td(\"7/9/2020\"),\n                    Td(\"Indigo\"),\n                    Th(\"11\")\n                ),\n                Tr(\n                    Th(\"12\"),\n                    Td(\"Sophi Biles\"),\n                    Td(\"Recruiting Manager\"),\n                    Td(\"Gutmann Inc\"),\n                    Td(\"Indonesia\"),\n                    Td(\"2/12/2021\"),\n                    Td(\"Maroon\"),\n                    Th(\"12\")\n                ),\n                Tr(\n                    Th(\"13\"),\n                    Td(\"Florida Garces\"),\n                    Td(\"Web Developer IV\"),\n                    Td(\"Gaylord, Pacocha and Baumbach\"),\n                    Td(\"Poland\"),\n                    Td(\"5/31/2020\"),\n                    Td(\"Purple\"),\n                    Th(\"13\")\n                ),\n                Tr(\n                    Th(\"14\"),\n                    Td(\"Maribeth Popping\"),\n                    Td(\"Analyst Programmer\"),\n                    Td(\"Deckow-Pouros\"),\n                    Td(\"Portugal\"),\n                    Td(\"4/27/2021\"),\n                    Td(\"Aquamarine\"),\n                    Th(\"14\")\n                ),\n                Tr(\n                    Th(\"15\"),\n                    Td(\"Moritz Dryburgh\"),\n                    Td(\"Dental Hygienist\"),\n                    Td(\"Schiller, Cole and Hackett\"),\n                    Td(\"Sri Lanka\"),\n                    Td(\"8/8/2020\"),\n                    Td(\"Crimson\"),\n                    Th(\"15\")\n                ),\n                Tr(\n                    Th(\"16\"),\n                    Td(\"Reid Semiras\"),\n                    Td(\"Teacher\"),\n                    Td(\"Sporer, Sipes and Rogahn\"),\n                    Td(\"Poland\"),\n                    Td(\"7/30/2020\"),\n                    Td(\"Green\"),\n                    Th(\"16\")\n                ),\n                Tr(\n                    Th(\"17\"),\n                    Td(\"Alec Lethby\"),\n                    Td(\"Teacher\"),\n                    Td(\"Reichel, Glover and Hamill\"),\n                    Td(\"China\"),\n                    Td(\"2/28/2021\"),\n                    Td(\"Khaki\"),\n                    Th(\"17\")\n                ),\n                Tr(\n                    Th(\"18\"),\n                    Td(\"Aland Wilber\"),\n                    Td(\"Quality Control Specialist\"),\n                    Td(\"Kshlerin, Rogahn and Swaniawski\"),\n                    Td(\"Czech Republic\"),\n                    Td(\"9/29/2020\"),\n                    Td(\"Purple\"),\n                    Th(\"18\")\n                ),\n                Tr(\n                    Th(\"19\"),\n                    Td(\"Teddie Duerden\"),\n                    Td(\"Staff Accountant III\"),\n                    Td(\"Pouros, Ullrich and Windler\"),\n                    Td(\"France\"),\n                    Td(\"10/27/2020\"),\n                    Td(\"Aquamarine\"),\n                    Th(\"19\")\n                ),\n                Tr(\n                    Th(\"20\"),\n                    Td(\"Lorelei Blackstone\"),\n                    Td(\"Data Coordinator\"),\n                    Td(\"Witting, Kutch and Greenfelder\"),\n                    Td(\"Kazakhstan\"),\n                    Td(\"6/3/2020\"),\n                    Td(\"Red\"),\n                    Th(\"20\")\n                )\n            ),\n            Tfoot(\n                Tr(\n                    Th(),\n                    Td(\"Name\"),\n                    Td(\"Job\"),\n                    Td(\"company\"),\n                    Td(\"location\"),\n                    Td(\"Last Login\"),\n                    Td(\"Favorite Color\"),\n                    Th()\n                )\n            ),\n            cls=combine_classes(table, table_sizes.xs, table_modifiers.pin_rows, table_modifiers.pin_cols)\n        ),\n        cls=combine_classes(overflow.x.auto)\n    )\n    \n    # Verify table structure\n    assert \"overflow-x-auto\" in pinned_both_table.attrs['class']\n    assert pinned_both_table.children[0].tag == \"table\"\n    assert \"table\" in pinned_both_table.children[0].attrs['class']\n    assert \"table-xs\" in pinned_both_table.children[0].attrs['class']\n    assert \"table-pin-rows\" in pinned_both_table.children[0].attrs['class']\n    assert \"table-pin-cols\" in pinned_both_table.children[0].attrs['class']\n    \n    # Verify thead uses td instead of th for column headers (except first and last)\n    thead = pinned_both_table.children[0].children[0]\n    assert thead.tag == \"thead\"\n    tr = thead.children[0]\n    assert tr.children[0].tag == \"th\"  # First column is th\n    assert tr.children[0].children == ()  # Empty\n    assert tr.children[1].tag == \"td\"  # Column headers are td\n    assert tr.children[1].children[0] == \"Name\"\n    assert tr.children[2].tag == \"td\"\n    assert tr.children[2].children[0] == \"Job\"\n    assert tr.children[-1].tag == \"th\"  # Last column is th\n    assert tr.children[-1].children == ()  # Empty\n    \n    # Verify tbody rows have th at both ends\n    tbody = pinned_both_table.children[0].children[1]\n    assert tbody.tag == \"tbody\"\n    first_row = tbody.children[0]\n    assert first_row.children[0].tag == \"th\"\n    assert first_row.children[0].children[0] == \"1\"\n    assert first_row.children[1].tag == \"td\"\n    assert first_row.children[1].children[0] == \"Cy Ganderton\"\n    assert first_row.children[-1].tag == \"th\"\n    assert first_row.children[-1].children[0] == \"1\"  # Same number on both sides\n    \n    # Verify last row\n    last_row = tbody.children[19]\n    assert last_row.children[0].tag == \"th\"\n    assert last_row.children[0].children[0] == \"20\"\n    assert last_row.children[1].children[0] == \"Lorelei Blackstone\"\n    assert last_row.children[-1].tag == \"th\"\n    assert last_row.children[-1].children[0] == \"20\"  # Same number on both sides\n    \n    # Verify tfoot structure\n    tfoot = pinned_both_table.children[0].children[2]\n    assert tfoot.tag == \"tfoot\"\n    tfoot_tr = tfoot.children[0]\n    assert tfoot_tr.children[0].tag == \"th\"  # First column is th\n    assert tfoot_tr.children[1].tag == \"td\"  # Column footers are td\n    assert tfoot_tr.children[1].children[0] == \"Name\"\n    assert tfoot_tr.children[-1].tag == \"th\"  # Last column is th\n    \n    # Return all examples in a Div\n    return Div(\n        pinned_rows_table,\n        pinned_both_table\n    )\n\n# Run the tests\ntest_table_pinned_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"h-96 overflow-x-auto\"&gt;\n    &lt;table class=\"table table-pin-rows bg-base-200\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;A&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Ant-Man&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Aquaman&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Asterix&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;The Atom&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;The Avengers&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;B&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Batgirl&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Batman&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Batwoman&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Black Canary&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Black Panther&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;C&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Captain America&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Captain Marvel&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Catwoman&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Conan the Barbarian&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;D&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Daredevil&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;The Defenders&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Doc Savage&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Doctor Strange&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;E&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Elektra&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;F&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Fantastic Four&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;G&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Ghost Rider&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Green Arrow&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Green Lantern&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Guardians of the Galaxy&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;H&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Hawkeye&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Hellboy&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Incredible Hulk&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;I&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Iron Fist&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Iron Man&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;M&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Marvelman&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;R&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Robin&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;The Rocketeer&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;S&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;The Shadow&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Spider-Man&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Sub-Mariner&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Supergirl&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Superman&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;T&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Teenage Mutant Ninja Turtles&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Thor&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;W&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;The Wasp&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Watchmen&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Wolverine&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Wonder Woman&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;X&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;X-Men&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;Z&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Zatanna&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;Zatara&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n  &lt;div class=\"overflow-x-auto\"&gt;\n    &lt;table class=\"table table-xs table-pin-rows table-pin-cols\"&gt;\n      &lt;thead&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;td&gt;Name&lt;/td&gt;\n          &lt;td&gt;Job&lt;/td&gt;\n          &lt;td&gt;company&lt;/td&gt;\n          &lt;td&gt;location&lt;/td&gt;\n          &lt;td&gt;Last Login&lt;/td&gt;\n          &lt;td&gt;Favorite Color&lt;/td&gt;\n          &lt;th&gt;&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;th&gt;1&lt;/th&gt;\n          &lt;td&gt;Cy Ganderton&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Littel, Schaden and Vandervort&lt;/td&gt;\n          &lt;td&gt;Canada&lt;/td&gt;\n          &lt;td&gt;12/16/2020&lt;/td&gt;\n          &lt;td&gt;Blue&lt;/td&gt;\n          &lt;th&gt;1&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;2&lt;/th&gt;\n          &lt;td&gt;Hart Hagerty&lt;/td&gt;\n          &lt;td&gt;Desktop Support Technician&lt;/td&gt;\n          &lt;td&gt;Zemlak, Daniel and Leannon&lt;/td&gt;\n          &lt;td&gt;United States&lt;/td&gt;\n          &lt;td&gt;12/5/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n          &lt;th&gt;2&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;3&lt;/th&gt;\n          &lt;td&gt;Brice Swyre&lt;/td&gt;\n          &lt;td&gt;Tax Accountant&lt;/td&gt;\n          &lt;td&gt;Carroll Group&lt;/td&gt;\n          &lt;td&gt;China&lt;/td&gt;\n          &lt;td&gt;8/15/2020&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n          &lt;th&gt;3&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;4&lt;/th&gt;\n          &lt;td&gt;Marjy Ferencz&lt;/td&gt;\n          &lt;td&gt;Office Assistant I&lt;/td&gt;\n          &lt;td&gt;Rowe-Schoen&lt;/td&gt;\n          &lt;td&gt;Russia&lt;/td&gt;\n          &lt;td&gt;3/25/2021&lt;/td&gt;\n          &lt;td&gt;Crimson&lt;/td&gt;\n          &lt;th&gt;4&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;5&lt;/th&gt;\n          &lt;td&gt;Yancy Tear&lt;/td&gt;\n          &lt;td&gt;Community Outreach Specialist&lt;/td&gt;\n          &lt;td&gt;Wyman-Ledner&lt;/td&gt;\n          &lt;td&gt;Brazil&lt;/td&gt;\n          &lt;td&gt;5/22/2020&lt;/td&gt;\n          &lt;td&gt;Indigo&lt;/td&gt;\n          &lt;th&gt;5&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;6&lt;/th&gt;\n          &lt;td&gt;Irma Vasilik&lt;/td&gt;\n          &lt;td&gt;Editor&lt;/td&gt;\n          &lt;td&gt;Wiza, Bins and Emard&lt;/td&gt;\n          &lt;td&gt;Venezuela&lt;/td&gt;\n          &lt;td&gt;12/8/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n          &lt;th&gt;6&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;7&lt;/th&gt;\n          &lt;td&gt;Meghann Durtnal&lt;/td&gt;\n          &lt;td&gt;Staff Accountant IV&lt;/td&gt;\n          &lt;td&gt;Schuster-Schimmel&lt;/td&gt;\n          &lt;td&gt;Philippines&lt;/td&gt;\n          &lt;td&gt;2/17/2021&lt;/td&gt;\n          &lt;td&gt;Yellow&lt;/td&gt;\n          &lt;th&gt;7&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;8&lt;/th&gt;\n          &lt;td&gt;Sammy Seston&lt;/td&gt;\n          &lt;td&gt;Accountant I&lt;/td&gt;\n          &lt;td&gt;O'Hara, Welch and Keebler&lt;/td&gt;\n          &lt;td&gt;Indonesia&lt;/td&gt;\n          &lt;td&gt;5/23/2020&lt;/td&gt;\n          &lt;td&gt;Crimson&lt;/td&gt;\n          &lt;th&gt;8&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;9&lt;/th&gt;\n          &lt;td&gt;Lesya Tinham&lt;/td&gt;\n          &lt;td&gt;Safety Technician IV&lt;/td&gt;\n          &lt;td&gt;Turner-Kuhlman&lt;/td&gt;\n          &lt;td&gt;Philippines&lt;/td&gt;\n          &lt;td&gt;2/21/2021&lt;/td&gt;\n          &lt;td&gt;Maroon&lt;/td&gt;\n          &lt;th&gt;9&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;10&lt;/th&gt;\n          &lt;td&gt;Zaneta Tewkesbury&lt;/td&gt;\n          &lt;td&gt;VP Marketing&lt;/td&gt;\n          &lt;td&gt;Sauer LLC&lt;/td&gt;\n          &lt;td&gt;Chad&lt;/td&gt;\n          &lt;td&gt;6/23/2020&lt;/td&gt;\n          &lt;td&gt;Green&lt;/td&gt;\n          &lt;th&gt;10&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;11&lt;/th&gt;\n          &lt;td&gt;Andy Tipple&lt;/td&gt;\n          &lt;td&gt;Librarian&lt;/td&gt;\n          &lt;td&gt;Hilpert Group&lt;/td&gt;\n          &lt;td&gt;Poland&lt;/td&gt;\n          &lt;td&gt;7/9/2020&lt;/td&gt;\n          &lt;td&gt;Indigo&lt;/td&gt;\n          &lt;th&gt;11&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;12&lt;/th&gt;\n          &lt;td&gt;Sophi Biles&lt;/td&gt;\n          &lt;td&gt;Recruiting Manager&lt;/td&gt;\n          &lt;td&gt;Gutmann Inc&lt;/td&gt;\n          &lt;td&gt;Indonesia&lt;/td&gt;\n          &lt;td&gt;2/12/2021&lt;/td&gt;\n          &lt;td&gt;Maroon&lt;/td&gt;\n          &lt;th&gt;12&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;13&lt;/th&gt;\n          &lt;td&gt;Florida Garces&lt;/td&gt;\n          &lt;td&gt;Web Developer IV&lt;/td&gt;\n          &lt;td&gt;Gaylord, Pacocha and Baumbach&lt;/td&gt;\n          &lt;td&gt;Poland&lt;/td&gt;\n          &lt;td&gt;5/31/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n          &lt;th&gt;13&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;14&lt;/th&gt;\n          &lt;td&gt;Maribeth Popping&lt;/td&gt;\n          &lt;td&gt;Analyst Programmer&lt;/td&gt;\n          &lt;td&gt;Deckow-Pouros&lt;/td&gt;\n          &lt;td&gt;Portugal&lt;/td&gt;\n          &lt;td&gt;4/27/2021&lt;/td&gt;\n          &lt;td&gt;Aquamarine&lt;/td&gt;\n          &lt;th&gt;14&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;15&lt;/th&gt;\n          &lt;td&gt;Moritz Dryburgh&lt;/td&gt;\n          &lt;td&gt;Dental Hygienist&lt;/td&gt;\n          &lt;td&gt;Schiller, Cole and Hackett&lt;/td&gt;\n          &lt;td&gt;Sri Lanka&lt;/td&gt;\n          &lt;td&gt;8/8/2020&lt;/td&gt;\n          &lt;td&gt;Crimson&lt;/td&gt;\n          &lt;th&gt;15&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;16&lt;/th&gt;\n          &lt;td&gt;Reid Semiras&lt;/td&gt;\n          &lt;td&gt;Teacher&lt;/td&gt;\n          &lt;td&gt;Sporer, Sipes and Rogahn&lt;/td&gt;\n          &lt;td&gt;Poland&lt;/td&gt;\n          &lt;td&gt;7/30/2020&lt;/td&gt;\n          &lt;td&gt;Green&lt;/td&gt;\n          &lt;th&gt;16&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;17&lt;/th&gt;\n          &lt;td&gt;Alec Lethby&lt;/td&gt;\n          &lt;td&gt;Teacher&lt;/td&gt;\n          &lt;td&gt;Reichel, Glover and Hamill&lt;/td&gt;\n          &lt;td&gt;China&lt;/td&gt;\n          &lt;td&gt;2/28/2021&lt;/td&gt;\n          &lt;td&gt;Khaki&lt;/td&gt;\n          &lt;th&gt;17&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;18&lt;/th&gt;\n          &lt;td&gt;Aland Wilber&lt;/td&gt;\n          &lt;td&gt;Quality Control Specialist&lt;/td&gt;\n          &lt;td&gt;Kshlerin, Rogahn and Swaniawski&lt;/td&gt;\n          &lt;td&gt;Czech Republic&lt;/td&gt;\n          &lt;td&gt;9/29/2020&lt;/td&gt;\n          &lt;td&gt;Purple&lt;/td&gt;\n          &lt;th&gt;18&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;19&lt;/th&gt;\n          &lt;td&gt;Teddie Duerden&lt;/td&gt;\n          &lt;td&gt;Staff Accountant III&lt;/td&gt;\n          &lt;td&gt;Pouros, Ullrich and Windler&lt;/td&gt;\n          &lt;td&gt;France&lt;/td&gt;\n          &lt;td&gt;10/27/2020&lt;/td&gt;\n          &lt;td&gt;Aquamarine&lt;/td&gt;\n          &lt;th&gt;19&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;th&gt;20&lt;/th&gt;\n          &lt;td&gt;Lorelei Blackstone&lt;/td&gt;\n          &lt;td&gt;Data Coordinator&lt;/td&gt;\n          &lt;td&gt;Witting, Kutch and Greenfelder&lt;/td&gt;\n          &lt;td&gt;Kazakhstan&lt;/td&gt;\n          &lt;td&gt;6/3/2020&lt;/td&gt;\n          &lt;td&gt;Red&lt;/td&gt;\n          &lt;th&gt;20&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n      &lt;tfoot&gt;\n        &lt;tr&gt;\n          &lt;th&gt;&lt;/th&gt;\n          &lt;td&gt;Name&lt;/td&gt;\n          &lt;td&gt;Job&lt;/td&gt;\n          &lt;td&gt;company&lt;/td&gt;\n          &lt;td&gt;location&lt;/td&gt;\n          &lt;td&gt;Last Login&lt;/td&gt;\n          &lt;td&gt;Favorite Color&lt;/td&gt;\n          &lt;th&gt;&lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/tfoot&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_table_pinned_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "table"
    ]
  },
  {
    "objectID": "components/data_input/filter.html",
    "href": "components/data_input/filter.html",
    "title": "filter",
    "section": "",
    "text": "Base Filter\n\n\nExported source\nfilter_dui = SingleValueFactory(\"filter\", \"Base filter component for a HTML &lt;form&gt; or a &lt;div&gt; element that includes radio buttons for filtering items\") # Base filter component\nfilter_dui_reset = SingleValueFactory(\"filter-reset\", \"Filter reset part as an alternative to the reset button if you can't use a HTML form\") # Filter reset part\n\n\n\n\nFilter Test Examples\n\nsource\n\n\ntest_filter_basic_examples\n\n test_filter_basic_examples ()\n\nTest basic filter utilities.\n\n\nExported source\ndef test_filter_basic_examples():\n    \"\"\"Test basic filter utilities.\"\"\"\n    # Basic filter\n    assert str(filter_dui) == \"filter\"\n    assert str(filter_dui_reset) == \"filter-reset\"\n    \n    # Test with modifiers\n    assert str(filter_dui.hover) == \"hover:filter\"\n    assert str(filter_dui.md) == \"md:filter\"\n    assert str(filter_dui.dark) == \"dark:filter\"\n\n# Run the tests\ntest_filter_basic_examples()\n\n\n\nsource\n\n\ntest_filter_with_form_fasthtml_examples\n\n test_filter_with_form_fasthtml_examples ()\n\nTest filter using HTML form, radio buttons and reset button from daisyUI v5 documentation.\n\n\nExported source\ndef test_filter_with_form_fasthtml_examples():\n    \"\"\"Test filter using HTML form, radio buttons and reset button from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Form, Input\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_modifiers\n    \n    # Filter using HTML form, radio buttons and reset button\n    filter_form = Form(\n        Input(type=\"reset\", value=\"×\", cls=combine_classes(btn, btn_modifiers.square)),\n        Input(type=\"radio\", name=\"frameworks\", aria_label=\"Svelte\", cls=str(btn)),\n        Input(type=\"radio\", name=\"frameworks\", aria_label=\"Vue\", cls=str(btn)),\n        Input(type=\"radio\", name=\"frameworks\", aria_label=\"React\", cls=str(btn)),\n        cls=str(filter_dui)\n    )\n    \n    # Verify structure\n    assert filter_form.tag == \"form\"\n    assert filter_form.attrs['class'] == \"filter\"\n    \n    # Verify reset button\n    reset_btn = filter_form.children[0]\n    assert reset_btn.tag == \"input\"\n    assert reset_btn.attrs['type'] == \"reset\"\n    assert reset_btn.attrs['value'] == \"×\"\n    assert \"btn\" in reset_btn.attrs['class']\n    assert \"btn-square\" in reset_btn.attrs['class']\n    \n    # Verify radio buttons\n    radio_buttons = filter_form.children[1:4]\n    \n    # Svelte radio\n    assert radio_buttons[0].tag == \"input\"\n    assert radio_buttons[0].attrs['type'] == \"radio\"\n    assert radio_buttons[0].attrs['name'] == \"frameworks\"\n    assert radio_buttons[0].attrs['aria-label'] == \"Svelte\"\n    assert radio_buttons[0].attrs['class'] == \"btn\"\n    \n    # Vue radio\n    assert radio_buttons[1].tag == \"input\"\n    assert radio_buttons[1].attrs['type'] == \"radio\"\n    assert radio_buttons[1].attrs['name'] == \"frameworks\"\n    assert radio_buttons[1].attrs['aria-label'] == \"Vue\"\n    assert radio_buttons[1].attrs['class'] == \"btn\"\n    \n    # React radio\n    assert radio_buttons[2].tag == \"input\"\n    assert radio_buttons[2].attrs['type'] == \"radio\"\n    assert radio_buttons[2].attrs['name'] == \"frameworks\"\n    assert radio_buttons[2].attrs['aria-label'] == \"React\"\n    assert radio_buttons[2].attrs['class'] == \"btn\"\n    \n    return filter_form\n\n# Run the tests\ntest_filter_with_form_fasthtml_examples()\n\n\n&lt;form enctype=\"multipart/form-data\" class=\"filter\"&gt;  &lt;input type=\"reset\" value=\"×\" class=\"btn btn-square\"&gt;\n  &lt;input type=\"radio\" name=\"frameworks\" aria-label=\"Svelte\" class=\"btn\"&gt;\n  &lt;input type=\"radio\" name=\"frameworks\" aria-label=\"Vue\" class=\"btn\"&gt;\n  &lt;input type=\"radio\" name=\"frameworks\" aria-label=\"React\" class=\"btn\"&gt;\n&lt;/form&gt;\n\n\n\ntest_func = test_filter_with_form_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_filter_without_form_fasthtml_examples\n\n test_filter_without_form_fasthtml_examples ()\n\nTest filter without HTML form from daisyUI v5 documentation.\n\n\nExported source\ndef test_filter_without_form_fasthtml_examples():\n    \"\"\"Test filter without HTML form from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Filter without HTML form\n    filter_div = Div(\n        Input(type=\"radio\", name=\"metaframeworks\", aria_label=\"All\", cls=combine_classes(btn, filter_dui_reset)),\n        Input(type=\"radio\", name=\"metaframeworks\", aria_label=\"Sveltekit\", cls=str(btn)),\n        Input(type=\"radio\", name=\"metaframeworks\", aria_label=\"Nuxt\", cls=str(btn)),\n        Input(type=\"radio\", name=\"metaframeworks\", aria_label=\"Next.js\", cls=str(btn)),\n        cls=str(filter_dui)\n    )\n    \n    # Verify structure\n    assert filter_div.tag == \"div\"\n    assert filter_div.attrs['class'] == \"filter\"\n    \n    # Verify \"All\" radio button with filter-reset\n    all_radio = filter_div.children[0]\n    assert all_radio.tag == \"input\"\n    assert all_radio.attrs['type'] == \"radio\"\n    assert all_radio.attrs['name'] == \"metaframeworks\"\n    assert all_radio.attrs['aria-label'] == \"All\"\n    assert \"btn\" in all_radio.attrs['class']\n    assert \"filter-reset\" in all_radio.attrs['class']\n    \n    # Verify other radio buttons\n    radio_buttons = filter_div.children[1:4]\n    \n    # Sveltekit radio\n    assert radio_buttons[0].tag == \"input\"\n    assert radio_buttons[0].attrs['type'] == \"radio\"\n    assert radio_buttons[0].attrs['name'] == \"metaframeworks\"\n    assert radio_buttons[0].attrs['aria-label'] == \"Sveltekit\"\n    assert radio_buttons[0].attrs['class'] == \"btn\"\n    \n    # Nuxt radio\n    assert radio_buttons[1].tag == \"input\"\n    assert radio_buttons[1].attrs['type'] == \"radio\"\n    assert radio_buttons[1].attrs['name'] == \"metaframeworks\"\n    assert radio_buttons[1].attrs['aria-label'] == \"Nuxt\"\n    assert radio_buttons[1].attrs['class'] == \"btn\"\n    \n    # Next.js radio\n    assert radio_buttons[2].tag == \"input\"\n    assert radio_buttons[2].attrs['type'] == \"radio\"\n    assert radio_buttons[2].attrs['name'] == \"metaframeworks\"\n    assert radio_buttons[2].attrs['aria-label'] == \"Next.js\"\n    assert radio_buttons[2].attrs['class'] == \"btn\"\n    \n    return filter_div\n\n# Run the tests\ntest_filter_without_form_fasthtml_examples()\n\n\n&lt;div class=\"filter\"&gt;\n  &lt;input type=\"radio\" name=\"metaframeworks\" aria-label=\"All\" class=\"btn filter-reset\"&gt;\n  &lt;input type=\"radio\" name=\"metaframeworks\" aria-label=\"Sveltekit\" class=\"btn\"&gt;\n  &lt;input type=\"radio\" name=\"metaframeworks\" aria-label=\"Nuxt\" class=\"btn\"&gt;\n  &lt;input type=\"radio\" name=\"metaframeworks\" aria-label=\"Next.js\" class=\"btn\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_filter_without_form_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "filter"
    ]
  },
  {
    "objectID": "components/data_input/toggle.html",
    "href": "components/data_input/toggle.html",
    "title": "toggle",
    "section": "",
    "text": "Base Toggle\n\n\nExported source\ntoggle = SingleValueFactory(\"toggle\", \"Base toggle component for &lt;input type=\\\"checkbox\\\"&gt; element\") # Base toggle component\n\n\n\n\nToggle Colors\n\n\nExported source\ntoggle_colors = enums_to_simple_factory(toggle, [SemanticColorBrand, SemanticColorStatus], \"toggle color variants using daisyUI semantic colors\") # toggle color variants\n\n\n\n\nToggle Sizes\n\n\nExported source\ntoggle_sizes = enums_to_simple_factory(toggle, [DaisyUINamedSize], \"toggle size variants from extra small to extra large\") # toggle size variants\n\n\n\n\nToggle Test Examples\n\nsource\n\n\ntest_toggle_basic_examples\n\n test_toggle_basic_examples ()\n\nTest basic toggle utilities.\n\n\nExported source\ndef test_toggle_basic_examples():\n    \"\"\"Test basic toggle utilities.\"\"\"\n    # Basic toggle\n    assert str(toggle) == \"toggle\"\n    \n    # Test with modifiers\n    assert str(toggle.hover) == \"hover:toggle\"\n    assert str(toggle.md) == \"md:toggle\"\n    assert str(toggle.dark) == \"dark:toggle\"\n\n# Run the tests\ntest_toggle_basic_examples()\n\n\n\nsource\n\n\ntest_toggle_colors_examples\n\n test_toggle_colors_examples ()\n\nTest toggle color variants.\n\n\nExported source\ndef test_toggle_colors_examples():\n    \"\"\"Test toggle color variants.\"\"\"\n    # All color variants\n    assert str(toggle_colors.neutral) == \"toggle-neutral\"\n    assert str(toggle_colors.primary) == \"toggle-primary\"\n    assert str(toggle_colors.secondary) == \"toggle-secondary\"\n    assert str(toggle_colors.accent) == \"toggle-accent\"\n    assert str(toggle_colors.info) == \"toggle-info\"\n    assert str(toggle_colors.success) == \"toggle-success\"\n    assert str(toggle_colors.warning) == \"toggle-warning\"\n    assert str(toggle_colors.error) == \"toggle-error\"\n    \n    # With modifiers\n    assert str(toggle_colors.primary.hover) == \"hover:toggle-primary\"\n    assert str(toggle_colors.success.focus) == \"focus:toggle-success\"\n\n# Run the tests\ntest_toggle_colors_examples()\n\n\n\nsource\n\n\ntest_toggle_sizes_examples\n\n test_toggle_sizes_examples ()\n\nTest toggle size variants.\n\n\nExported source\ndef test_toggle_sizes_examples():\n    \"\"\"Test toggle size variants.\"\"\"\n    assert str(toggle_sizes.xs) == \"toggle-xs\"\n    assert str(toggle_sizes.sm) == \"toggle-sm\"\n    assert str(toggle_sizes.md) == \"toggle-md\"\n    assert str(toggle_sizes.lg) == \"toggle-lg\"\n    assert str(toggle_sizes.xl) == \"toggle-xl\"\n    \n    # With responsive modifiers\n    assert str(toggle_sizes.xs.sm) == \"sm:toggle-xs\"\n    assert str(toggle_sizes.lg.md) == \"md:toggle-lg\"\n\n# Run the tests\ntest_toggle_sizes_examples()\n\n\n\nsource\n\n\ntest_toggle_basic_fasthtml_examples\n\n test_toggle_basic_fasthtml_examples ()\n\nTest basic toggle example from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_basic_fasthtml_examples():\n    \"\"\"Test basic toggle example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Basic toggle\n    basic_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=str(toggle))\n    \n    # Verify structure\n    assert basic_toggle.tag == \"input\"\n    assert basic_toggle.attrs['type'] == \"checkbox\"\n    assert basic_toggle.attrs['checked'] == \"checked\"\n    assert basic_toggle.attrs['class'] == \"toggle\"\n    \n    return Div(basic_toggle)\n\n# Run the tests\ntest_toggle_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toggle_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toggle_with_fieldset_fasthtml_examples\n\n test_toggle_with_fieldset_fasthtml_examples ()\n\nTest toggle with fieldset and label from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_with_fieldset_fasthtml_examples():\n    \"\"\"Test toggle with fieldset and label from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Label, Input, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import border, rounded\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset, fieldset_legend\n    from cjm_fasthtml_daisyui.components.data_input.label import label\n    \n    # Toggle with fieldset and label\n    toggle_fieldset = Fieldset(\n        Legend(\"Login options\", cls=str(fieldset_legend)),\n        Label(\n            Input(type=\"checkbox\", checked=\"checked\", cls=str(toggle)),\n            \"Remember me\",\n            cls=str(label)\n        ),\n        cls=combine_classes(fieldset, bg_dui.base_100, border_dui.base_300, rounded.box, w._64, border, p._4)\n    )\n    \n    # Verify fieldset structure\n    assert toggle_fieldset.tag == \"fieldset\"\n    assert \"fieldset\" in toggle_fieldset.attrs['class']\n    assert \"bg-base-100\" in toggle_fieldset.attrs['class']\n    assert \"border-base-300\" in toggle_fieldset.attrs['class']\n    assert \"rounded-box\" in toggle_fieldset.attrs['class']\n    assert \"w-64\" in toggle_fieldset.attrs['class']\n    assert \"border\" in toggle_fieldset.attrs['class']\n    assert \"p-4\" in toggle_fieldset.attrs['class']\n    \n    # Verify legend\n    legend_el = toggle_fieldset.children[0]\n    assert legend_el.tag == \"legend\"\n    assert \"fieldset-legend\" in legend_el.attrs['class']\n    assert legend_el.children[0] == \"Login options\"\n    \n    # Verify label\n    label_el = toggle_fieldset.children[1]\n    assert label_el.tag == \"label\"\n    assert \"label\" in label_el.attrs['class']\n    \n    # Verify input inside label\n    input_el = label_el.children[0]\n    assert input_el.tag == \"input\"\n    assert input_el.attrs['type'] == \"checkbox\"\n    assert input_el.attrs['checked'] == \"checked\"\n    assert \"toggle\" in input_el.attrs['class']\n    \n    # Verify label text\n    assert label_el.children[1] == \"Remember me\"\n    \n    return Div(toggle_fieldset)\n\n# Run the tests\ntest_toggle_with_fieldset_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;fieldset class=\"fieldset bg-base-100 border-base-300 rounded-box w-64 &lt;cjm_fasthtml_tailwind.utilities.borders.BorderWidthFactory object at 0x7f99fd6a9290&gt; p-4\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Login options&lt;/legend&gt;&lt;label class=\"label\"&gt;      &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle\"&gt;\nRemember me&lt;/label&gt;&lt;/fieldset&gt;&lt;/div&gt;\n\n\n\ntest_func = test_toggle_with_fieldset_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toggle_sizes_fasthtml_examples\n\n test_toggle_sizes_fasthtml_examples ()\n\nTest toggle size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_sizes_fasthtml_examples():\n    \"\"\"Test toggle size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Toggle sizes\n    xs_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_sizes.xs))\n    assert xs_toggle.tag == \"input\"\n    assert xs_toggle.attrs['type'] == \"checkbox\"\n    assert xs_toggle.attrs['checked'] == \"checked\"\n    assert \"toggle\" in xs_toggle.attrs['class']\n    assert \"toggle-xs\" in xs_toggle.attrs['class']\n    \n    sm_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_sizes.sm))\n    assert \"toggle\" in sm_toggle.attrs['class']\n    assert \"toggle-sm\" in sm_toggle.attrs['class']\n    \n    md_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_sizes.md))\n    assert \"toggle\" in md_toggle.attrs['class']\n    assert \"toggle-md\" in md_toggle.attrs['class']\n    \n    lg_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_sizes.lg))\n    assert \"toggle\" in lg_toggle.attrs['class']\n    assert \"toggle-lg\" in lg_toggle.attrs['class']\n    \n    xl_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_sizes.xl))\n    assert \"toggle\" in xl_toggle.attrs['class']\n    assert \"toggle-xl\" in xl_toggle.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        xs_toggle,\n        sm_toggle,\n        md_toggle,\n        lg_toggle,\n        xl_toggle\n    )\n\n# Run the tests\ntest_toggle_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-xs\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-sm\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-md\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-lg\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-xl\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toggle_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toggle_colors_fasthtml_examples\n\n test_toggle_colors_fasthtml_examples ()\n\nTest toggle color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_colors_fasthtml_examples():\n    \"\"\"Test toggle color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Toggle colors\n    primary_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.primary))\n    assert \"toggle\" in primary_toggle.attrs['class']\n    assert \"toggle-primary\" in primary_toggle.attrs['class']\n    \n    secondary_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.secondary))\n    assert \"toggle\" in secondary_toggle.attrs['class']\n    assert \"toggle-secondary\" in secondary_toggle.attrs['class']\n    \n    accent_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.accent))\n    assert \"toggle\" in accent_toggle.attrs['class']\n    assert \"toggle-accent\" in accent_toggle.attrs['class']\n    \n    neutral_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.neutral))\n    assert \"toggle\" in neutral_toggle.attrs['class']\n    assert \"toggle-neutral\" in neutral_toggle.attrs['class']\n    \n    info_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.info))\n    assert \"toggle\" in info_toggle.attrs['class']\n    assert \"toggle-info\" in info_toggle.attrs['class']\n    \n    success_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.success))\n    assert \"toggle\" in success_toggle.attrs['class']\n    assert \"toggle-success\" in success_toggle.attrs['class']\n    \n    warning_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.warning))\n    assert \"toggle\" in warning_toggle.attrs['class']\n    assert \"toggle-warning\" in warning_toggle.attrs['class']\n    \n    error_toggle = Input(type=\"checkbox\", checked=\"checked\", cls=combine_classes(toggle, toggle_colors.error))\n    assert \"toggle\" in error_toggle.attrs['class']\n    assert \"toggle-error\" in error_toggle.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        primary_toggle,\n        secondary_toggle,\n        accent_toggle,\n        neutral_toggle,\n        info_toggle,\n        success_toggle,\n        warning_toggle,\n        error_toggle\n    )\n\n# Run the tests\ntest_toggle_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-primary\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-secondary\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-accent\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-neutral\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-info\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-success\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-warning\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle toggle-error\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toggle_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toggle_disabled_fasthtml_examples\n\n test_toggle_disabled_fasthtml_examples ()\n\nTest disabled toggle states from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_disabled_fasthtml_examples():\n    \"\"\"Test disabled toggle states from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Disabled toggle (unchecked)\n    disabled_unchecked = Input(type=\"checkbox\", cls=str(toggle), disabled=\"disabled\")\n    assert disabled_unchecked.tag == \"input\"\n    assert disabled_unchecked.attrs['type'] == \"checkbox\"\n    assert disabled_unchecked.attrs['class'] == \"toggle\"\n    assert disabled_unchecked.attrs['disabled'] == \"disabled\"\n    assert 'checked' not in disabled_unchecked.attrs\n    \n    # Disabled toggle (checked)\n    disabled_checked = Input(type=\"checkbox\", cls=str(toggle), disabled=\"disabled\", checked=\"checked\")\n    assert disabled_checked.tag == \"input\"\n    assert disabled_checked.attrs['type'] == \"checkbox\"\n    assert disabled_checked.attrs['class'] == \"toggle\"\n    assert disabled_checked.attrs['disabled'] == \"disabled\"\n    assert disabled_checked.attrs['checked'] == \"checked\"\n    \n    # Return all elements in a Div\n    return Div(\n        disabled_unchecked,\n        disabled_checked\n    )\n\n# Run the tests\ntest_toggle_disabled_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" disabled=\"disabled\" class=\"toggle\"&gt;\n  &lt;input type=\"checkbox\" disabled=\"disabled\" checked=\"checked\" class=\"toggle\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toggle_disabled_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toggle_with_icons_fasthtml_examples\n\n test_toggle_with_icons_fasthtml_examples ()\n\nTest toggle with icons inside from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_with_icons_fasthtml_examples():\n    \"\"\"Test toggle with icons inside from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Input, Div\n    from fasthtml.svg import Svg, G, Path\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    \n    # Create checkmark icon for enabled state\n    checkmark_icon = Svg(\n        G(\n            Path(d=\"M20 6 9 17l-5-5\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"4\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        aria_label=\"enabled\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create X icon for disabled state\n    x_icon = Svg(\n        Path(d=\"M18 6 6 18\"),\n        Path(d=\"m6 6 12 12\"),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\",\n        fill=\"none\",\n        stroke=\"currentColor\",\n        stroke_width=\"4\",\n        stroke_linecap=\"round\",\n        stroke_linejoin=\"round\",\n        aria_label=\"disabled\"\n    )\n    \n    # Toggle with icons inside\n    toggle_with_icons = Label(\n        Input(type=\"checkbox\"),\n        checkmark_icon,\n        x_icon,\n        cls=combine_classes(toggle, text_dui.base_content)\n    )\n    \n    # Verify structure\n    assert toggle_with_icons.tag == \"label\"\n    assert \"toggle\" in toggle_with_icons.attrs['class']\n    assert \"text-base-content\" in toggle_with_icons.attrs['class']\n    \n    # Verify input\n    input_el = toggle_with_icons.children[0]\n    assert input_el.tag == \"input\"\n    assert input_el.attrs['type'] == \"checkbox\"\n    \n    # Verify checkmark icon (enabled state)\n    checkmark_svg = toggle_with_icons.children[1]\n    assert checkmark_svg.tag == \"svg\"\n    assert checkmark_svg.attrs['aria-label'] == \"enabled\"\n    assert checkmark_svg.attrs['viewbox'] == \"0 0 24 24\"\n    \n    # Verify X icon (disabled state)\n    x_svg = toggle_with_icons.children[2]\n    assert x_svg.tag == \"svg\"\n    assert x_svg.attrs['aria-label'] == \"disabled\"\n    assert x_svg.attrs['viewbox'] == \"0 0 24 24\"\n    \n    return Div(toggle_with_icons)\n\n# Run the tests\ntest_toggle_with_icons_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"toggle text-base-content\"&gt;    &lt;input type=\"checkbox\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"enabled\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"4\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M20 6 9 17l-5-5\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" aria-label=\"disabled\"&gt;&lt;path d=\"M18 6 6 18\"&gt;&lt;/path&gt;&lt;path d=\"m6 6 12 12\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_toggle_with_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toggle_custom_colors_fasthtml_examples\n\n test_toggle_custom_colors_fasthtml_examples ()\n\nTest toggle with custom colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_custom_colors_fasthtml_examples():\n    \"\"\"Test toggle with custom colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    from cjm_fasthtml_tailwind.utilities.borders import border_color\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Toggle with custom colors\n    custom_toggle = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(\n            toggle,\n            border_color.indigo_600,\n            bg.indigo_500,\n            border_color.orange_500.checked,\n            bg.orange_400.checked,\n            text_color.orange_800.checked\n        )\n    )\n    \n    # Verify structure\n    assert custom_toggle.tag == \"input\"\n    assert custom_toggle.attrs['type'] == \"checkbox\"\n    assert custom_toggle.attrs['checked'] == \"checked\"\n    assert \"toggle\" in custom_toggle.attrs['class']\n    assert \"border-indigo-600\" in custom_toggle.attrs['class']\n    assert \"bg-indigo-500\" in custom_toggle.attrs['class']\n    assert \"checked:border-orange-500\" in custom_toggle.attrs['class']\n    assert \"checked:bg-orange-400\" in custom_toggle.attrs['class']\n    assert \"checked:text-orange-800\" in custom_toggle.attrs['class']\n    \n    return Div(custom_toggle)\n\n# Run the tests\ntest_toggle_custom_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"toggle border-indigo-600 bg-indigo-500 checked:border-orange-500 checked:bg-orange-400 checked:text-orange-800\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_toggle_custom_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_toggle_indeterminate_fasthtml_examples\n\n test_toggle_indeterminate_fasthtml_examples ()\n\nTest indeterminate toggle state from daisyUI v5 documentation.\n\n\nExported source\ndef test_toggle_indeterminate_fasthtml_examples():\n    \"\"\"Test indeterminate toggle state from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Script, Div\n    \n    # Indeterminate toggle\n    # Note: The indeterminate state must be set via JavaScript\n    indeterminate_toggle = Input(type=\"checkbox\", cls=str(toggle), id=\"my-toggle\")\n    \n    # JavaScript to set indeterminate state\n    # In a real application, this would be in a script tag or external JS file\n    indeterminate_script = Script(\"\"\"\n        document.getElementById(\"my-toggle\").indeterminate = true\n    \"\"\")\n    \n    # Verify structure\n    assert indeterminate_toggle.tag == \"input\"\n    assert indeterminate_toggle.attrs['type'] == \"checkbox\"\n    assert indeterminate_toggle.attrs['class'] == \"toggle\"\n    assert indeterminate_toggle.attrs['id'] == \"my-toggle\"\n    \n    assert indeterminate_script.tag == \"script\"\n    assert 'document.getElementById(\"my-toggle\").indeterminate = true' in indeterminate_script.children[0]\n    \n    return Div(\n        indeterminate_toggle,\n        indeterminate_script\n    )\n\n# Run the tests\ntest_toggle_indeterminate_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" id=\"my-toggle\" class=\"toggle\" name=\"my-toggle\"&gt;\n&lt;script&gt;\n        document.getElementById(\"my-toggle\").indeterminate = true\n    &lt;/script&gt;&lt;/div&gt;\n\n\n\ntest_func = test_toggle_indeterminate_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "toggle"
    ]
  },
  {
    "objectID": "components/data_input/textarea.html",
    "href": "components/data_input/textarea.html",
    "title": "textarea",
    "section": "",
    "text": "Base Text Area\n\n\nExported source\ntextarea = SingleValueFactory(\"textarea\", \"Base textarea component for &lt;textarea&gt; element\") # Base textarea component\n\n\n\n\nText Area Styles\n\n\nExported source\ntextarea_styles = enums_to_simple_factory(textarea, [GhostStyle]) # textarea style variants\n\n\n\n\nText Area Colors\n\n\nExported source\ntextarea_colors = enums_to_simple_factory(textarea, [SemanticColorBrand, SemanticColorStatus], \"textarea color variants using daisyUI semantic colors\") # textarea color variants\n\n\n\n\nText Area Sizes\n\n\nExported source\ntextarea_sizes = enums_to_simple_factory(textarea, [DaisyUINamedSize], \"textarea size variants from extra small to extra large\") # textarea size variants\n\n\n\n\nText Area Test Examples\n\nsource\n\n\ntest_textarea_basic_examples\n\n test_textarea_basic_examples ()\n\nTest basic textarea utilities.\n\n\nExported source\ndef test_textarea_basic_examples():\n    \"\"\"Test basic textarea utilities.\"\"\"\n    # Basic textarea\n    assert str(textarea) == \"textarea\"\n    \n    # Test with modifiers\n    assert str(textarea.hover) == \"hover:textarea\"\n    assert str(textarea.md) == \"md:textarea\"\n    assert str(textarea.dark) == \"dark:textarea\"\n\n# Run the tests\ntest_textarea_basic_examples()\n\n\n\nsource\n\n\ntest_textarea_styles_examples\n\n test_textarea_styles_examples ()\n\nTest textarea style variants.\n\n\nExported source\ndef test_textarea_styles_examples():\n    \"\"\"Test textarea style variants.\"\"\"\n    assert str(textarea_styles.ghost) == \"textarea-ghost\"\n\n# Run the tests\ntest_textarea_styles_examples()\n\n\n\nsource\n\n\ntest_textarea_colors_examples\n\n test_textarea_colors_examples ()\n\nTest textarea color variants.\n\n\nExported source\ndef test_textarea_colors_examples():\n    \"\"\"Test textarea color variants.\"\"\"\n    # All color variants\n    assert str(textarea_colors.neutral) == \"textarea-neutral\"\n    assert str(textarea_colors.primary) == \"textarea-primary\"\n    assert str(textarea_colors.secondary) == \"textarea-secondary\"\n    assert str(textarea_colors.accent) == \"textarea-accent\"\n    assert str(textarea_colors.info) == \"textarea-info\"\n    assert str(textarea_colors.success) == \"textarea-success\"\n    assert str(textarea_colors.warning) == \"textarea-warning\"\n    assert str(textarea_colors.error) == \"textarea-error\"\n    \n    # With modifiers\n    assert str(textarea_colors.primary.hover) == \"hover:textarea-primary\"\n    assert str(textarea_colors.success.focus) == \"focus:textarea-success\"\n\n# Run the tests\ntest_textarea_colors_examples()\n\n\n\nsource\n\n\ntest_textarea_sizes_examples\n\n test_textarea_sizes_examples ()\n\nTest textarea size variants.\n\n\nExported source\ndef test_textarea_sizes_examples():\n    \"\"\"Test textarea size variants.\"\"\"\n    assert str(textarea_sizes.xs) == \"textarea-xs\"\n    assert str(textarea_sizes.sm) == \"textarea-sm\"\n    assert str(textarea_sizes.md) == \"textarea-md\"\n    assert str(textarea_sizes.lg) == \"textarea-lg\"\n    assert str(textarea_sizes.xl) == \"textarea-xl\"\n    \n    # With responsive modifiers\n    assert str(textarea_sizes.xs.sm) == \"sm:textarea-xs\"\n    assert str(textarea_sizes.lg.md) == \"md:textarea-lg\"\n\n# Run the tests\ntest_textarea_sizes_examples()\n\n\n\nsource\n\n\ntest_textarea_basic_fasthtml_examples\n\n test_textarea_basic_fasthtml_examples ()\n\nTest basic textarea example from daisyUI v5 documentation.\n\n\nExported source\ndef test_textarea_basic_fasthtml_examples():\n    \"\"\"Test basic textarea example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Textarea\n    \n    # Basic textarea\n    basic_textarea = Textarea(placeholder=\"Bio\", cls=str(textarea))\n    \n    # Verify structure\n    assert basic_textarea.tag == \"textarea\"\n    assert basic_textarea.attrs['class'] == \"textarea\"\n    assert basic_textarea.attrs['placeholder'] == \"Bio\"\n    \n    return basic_textarea\n\n# Run the tests\ntest_textarea_basic_fasthtml_examples()\n\n\n&lt;textarea placeholder=\"Bio\" class=\"textarea\"&gt;&lt;/textarea&gt;\n\n\n\ntest_func = test_textarea_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_textarea_ghost_fasthtml_examples\n\n test_textarea_ghost_fasthtml_examples ()\n\nTest ghost textarea (no background) from daisyUI v5 documentation.\n\n\nExported source\ndef test_textarea_ghost_fasthtml_examples():\n    \"\"\"Test ghost textarea (no background) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Textarea\n    \n    # Ghost textarea (no background)\n    ghost_textarea = Textarea(\n        placeholder=\"Bio\",\n        cls=combine_classes(textarea, textarea_styles.ghost)\n    )\n    \n    # Verify structure\n    assert ghost_textarea.tag == \"textarea\"\n    assert \"textarea\" in ghost_textarea.attrs['class']\n    assert \"textarea-ghost\" in ghost_textarea.attrs['class']\n    assert ghost_textarea.attrs['placeholder'] == \"Bio\"\n    \n    return ghost_textarea\n\n# Run the tests\ntest_textarea_ghost_fasthtml_examples()\n\n\n&lt;textarea placeholder=\"Bio\" class=\"textarea textarea-ghost\"&gt;&lt;/textarea&gt;\n\n\n\ntest_func = test_textarea_ghost_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_textarea_with_form_control_fasthtml_examples\n\n test_textarea_with_form_control_fasthtml_examples ()\n\nTest textarea with form control and labels from daisyUI v5 documentation.\n\n\nExported source\ndef test_textarea_with_form_control_fasthtml_examples():\n    \"\"\"Test textarea with form control and labels from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Textarea, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import h\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset, fieldset_legend\n    from cjm_fasthtml_daisyui.components.data_input.label import label\n    \n    # Textarea with form control and labels\n    form_control_textarea = Fieldset(\n        Legend(\"Your bio\", cls=str(fieldset_legend)),\n        Textarea(\n            placeholder=\"Bio\",\n            cls=combine_classes(textarea, h._24)\n        ),\n        Div(\"Optional\", cls=str(label)),\n        cls=str(fieldset)\n    )\n    \n    # Verify structure\n    assert form_control_textarea.tag == \"fieldset\"\n    assert form_control_textarea.attrs['class'] == \"fieldset\"\n    \n    # Verify legend\n    legend_element = form_control_textarea.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Your bio\"\n    \n    # Verify textarea\n    textarea_element = form_control_textarea.children[1]\n    assert textarea_element.tag == \"textarea\"\n    assert \"textarea\" in textarea_element.attrs['class']\n    assert \"h-24\" in textarea_element.attrs['class']\n    assert textarea_element.attrs['placeholder'] == \"Bio\"\n    \n    # Verify label\n    label_element = form_control_textarea.children[2]\n    assert label_element.tag == \"div\"\n    assert label_element.attrs['class'] == \"label\"\n    assert label_element.children[0] == \"Optional\"\n    \n    return form_control_textarea\n\n# Run the tests\ntest_textarea_with_form_control_fasthtml_examples()\n\n\n&lt;fieldset class=\"fieldset\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Your bio&lt;/legend&gt;&lt;textarea placeholder=\"Bio\" class=\"textarea h-24\"&gt;&lt;/textarea&gt;  &lt;div class=\"label\"&gt;Optional&lt;/div&gt;\n&lt;/fieldset&gt;\n\n\n\ntest_func = test_textarea_with_form_control_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_textarea_colors_fasthtml_examples\n\n test_textarea_colors_fasthtml_examples ()\n\nTest textarea color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_textarea_colors_fasthtml_examples():\n    \"\"\"Test textarea color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Textarea, Div\n    \n    # Textarea colors\n    primary_textarea = Textarea(\n        placeholder=\"Primary\",\n        cls=combine_classes(textarea, textarea_colors.primary)\n    )\n    assert \"textarea\" in primary_textarea.attrs['class']\n    assert \"textarea-primary\" in primary_textarea.attrs['class']\n    assert primary_textarea.attrs['placeholder'] == \"Primary\"\n    \n    secondary_textarea = Textarea(\n        placeholder=\"Secondary\",\n        cls=combine_classes(textarea, textarea_colors.secondary)\n    )\n    assert \"textarea-secondary\" in secondary_textarea.attrs['class']\n    assert secondary_textarea.attrs['placeholder'] == \"Secondary\"\n    \n    accent_textarea = Textarea(\n        placeholder=\"Accent\",\n        cls=combine_classes(textarea, textarea_colors.accent)\n    )\n    assert \"textarea-accent\" in accent_textarea.attrs['class']\n    assert accent_textarea.attrs['placeholder'] == \"Accent\"\n    \n    neutral_textarea = Textarea(\n        placeholder=\"Neutral\",\n        cls=combine_classes(textarea, textarea_colors.neutral)\n    )\n    assert \"textarea-neutral\" in neutral_textarea.attrs['class']\n    assert neutral_textarea.attrs['placeholder'] == \"Neutral\"\n    \n    info_textarea = Textarea(\n        placeholder=\"Info\",\n        cls=combine_classes(textarea, textarea_colors.info)\n    )\n    assert \"textarea-info\" in info_textarea.attrs['class']\n    assert info_textarea.attrs['placeholder'] == \"Info\"\n    \n    success_textarea = Textarea(\n        placeholder=\"Success\",\n        cls=combine_classes(textarea, textarea_colors.success)\n    )\n    assert \"textarea-success\" in success_textarea.attrs['class']\n    assert success_textarea.attrs['placeholder'] == \"Success\"\n    \n    warning_textarea = Textarea(\n        placeholder=\"Warning\",\n        cls=combine_classes(textarea, textarea_colors.warning)\n    )\n    assert \"textarea-warning\" in warning_textarea.attrs['class']\n    assert warning_textarea.attrs['placeholder'] == \"Warning\"\n    \n    error_textarea = Textarea(\n        placeholder=\"Error\",\n        cls=combine_classes(textarea, textarea_colors.error)\n    )\n    assert \"textarea-error\" in error_textarea.attrs['class']\n    assert error_textarea.attrs['placeholder'] == \"Error\"\n    \n    # Return all color variations\n    return Div(\n        primary_textarea,\n        secondary_textarea,\n        accent_textarea,\n        neutral_textarea,\n        info_textarea,\n        success_textarea,\n        warning_textarea,\n        error_textarea\n    )\n\n# Run the tests\ntest_textarea_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;textarea placeholder=\"Primary\" class=\"textarea textarea-primary\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Secondary\" class=\"textarea textarea-secondary\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Accent\" class=\"textarea textarea-accent\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Neutral\" class=\"textarea textarea-neutral\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Info\" class=\"textarea textarea-info\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Success\" class=\"textarea textarea-success\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Warning\" class=\"textarea textarea-warning\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Error\" class=\"textarea textarea-error\"&gt;&lt;/textarea&gt;&lt;/div&gt;\n\n\n\ntest_func = test_textarea_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_textarea_sizes_fasthtml_examples\n\n test_textarea_sizes_fasthtml_examples ()\n\nTest textarea size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_textarea_sizes_fasthtml_examples():\n    \"\"\"Test textarea size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Textarea, Div\n    \n    # Textarea sizes\n    xs_textarea = Textarea(\n        placeholder=\"Bio\",\n        cls=combine_classes(textarea, textarea_sizes.xs)\n    )\n    assert \"textarea\" in xs_textarea.attrs['class']\n    assert \"textarea-xs\" in xs_textarea.attrs['class']\n    assert xs_textarea.attrs['placeholder'] == \"Bio\"\n    \n    sm_textarea = Textarea(\n        placeholder=\"Bio\",\n        cls=combine_classes(textarea, textarea_sizes.sm)\n    )\n    assert \"textarea-sm\" in sm_textarea.attrs['class']\n    \n    md_textarea = Textarea(\n        placeholder=\"Bio\",\n        cls=combine_classes(textarea, textarea_sizes.md)\n    )\n    assert \"textarea-md\" in md_textarea.attrs['class']\n    \n    lg_textarea = Textarea(\n        placeholder=\"Bio\",\n        cls=combine_classes(textarea, textarea_sizes.lg)\n    )\n    assert \"textarea-lg\" in lg_textarea.attrs['class']\n    \n    xl_textarea = Textarea(\n        placeholder=\"Bio\",\n        cls=combine_classes(textarea, textarea_sizes.xl)\n    )\n    assert \"textarea-xl\" in xl_textarea.attrs['class']\n    \n    # Return all size variations\n    return Div(\n        xs_textarea,\n        sm_textarea,\n        md_textarea,\n        lg_textarea,\n        xl_textarea\n    )\n\n# Run the tests\ntest_textarea_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;textarea placeholder=\"Bio\" class=\"textarea textarea-xs\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Bio\" class=\"textarea textarea-sm\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Bio\" class=\"textarea textarea-md\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Bio\" class=\"textarea textarea-lg\"&gt;&lt;/textarea&gt;&lt;textarea placeholder=\"Bio\" class=\"textarea textarea-xl\"&gt;&lt;/textarea&gt;&lt;/div&gt;\n\n\n\ntest_func = test_textarea_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_textarea_disabled_fasthtml_examples\n\n test_textarea_disabled_fasthtml_examples ()\n\nTest disabled textarea from daisyUI v5 documentation.\n\n\nExported source\ndef test_textarea_disabled_fasthtml_examples():\n    \"\"\"Test disabled textarea from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Textarea\n    \n    # Disabled textarea\n    disabled_textarea = Textarea(\n        placeholder=\"Bio\",\n        cls=str(textarea),\n        disabled=True\n    )\n    \n    # Verify structure\n    assert disabled_textarea.tag == \"textarea\"\n    assert disabled_textarea.attrs['class'] == \"textarea\"\n    assert disabled_textarea.attrs['placeholder'] == \"Bio\"\n    assert disabled_textarea.attrs['disabled'] == True\n    \n    return disabled_textarea\n\n# Run the tests\ntest_textarea_disabled_fasthtml_examples()\n\n\n&lt;textarea placeholder=\"Bio\" disabled class=\"textarea\"&gt;&lt;/textarea&gt;\n\n\n\ntest_func = test_textarea_disabled_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "textarea"
    ]
  },
  {
    "objectID": "components/data_input/fieldset.html",
    "href": "components/data_input/fieldset.html",
    "title": "fieldset",
    "section": "",
    "text": "Base Fieldset\n\n\nExported source\nfieldset = SingleValueFactory(\"fieldset\", \"Base fieldset component for the fieldset container\") # Base fieldset component\nlabel = SingleValueFactory(\"label\", \"Base label component for inputs\") # Base label component\nfieldset_legend = SingleValueFactory(\"fieldset-legend\", \"fieldset legend part for the title of the fieldset\") # fieldset legend part\n\n\n\n\nFieldset Test Examples\n\nsource\n\n\ntest_fieldset_basic_examples\n\n test_fieldset_basic_examples ()\n\nTest basic fieldset utilities.\n\n\nExported source\ndef test_fieldset_basic_examples():\n    \"\"\"Test basic fieldset utilities.\"\"\"\n    # Basic fieldset\n    assert str(fieldset) == \"fieldset\"\n    assert str(label) == \"label\"\n    assert str(fieldset_legend) == \"fieldset-legend\"\n    \n    # Test with modifiers\n    assert str(fieldset.hover) == \"hover:fieldset\"\n    assert str(fieldset.md) == \"md:fieldset\"\n    assert str(fieldset.dark) == \"dark:fieldset\"\n\n    assert str(label.hover) == \"hover:label\"\n    assert str(label.md) == \"md:label\"\n    assert str(label.dark) == \"dark:label\"\n\n    assert str(fieldset_legend.hover) == \"hover:fieldset-legend\"\n    assert str(fieldset_legend.md) == \"md:fieldset-legend\"\n    assert str(fieldset_legend.dark) == \"dark:fieldset-legend\"\n\n# Run the tests\ntest_fieldset_basic_examples()\n\n\n\nsource\n\n\ntest_fieldset_basic_fasthtml_examples\n\n test_fieldset_basic_fasthtml_examples ()\n\nTest basic fieldset with legend and label from daisyUI v5 documentation.\n\n\nExported source\ndef test_fieldset_basic_fasthtml_examples():\n    \"\"\"Test basic fieldset with legend and label from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Input, P\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Fieldset with legend and label\n    basic_fieldset = Fieldset(\n        Legend(\"Page title\", cls=str(fieldset_legend)),\n        Input(type=\"text\", placeholder=\"My awesome page\", cls=str(text_input)),\n        P(\"You can edit page title later on from settings\", cls=str(label)),\n        cls=str(fieldset)\n    )\n    \n    # Verify structure\n    assert basic_fieldset.tag == \"fieldset\"\n    assert basic_fieldset.attrs['class'] == \"fieldset\"\n    \n    # Verify legend\n    legend_element = basic_fieldset.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Page title\"\n    \n    # Verify input\n    input_element = basic_fieldset.children[1]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['type'] == \"text\"\n    assert input_element.attrs['placeholder'] == \"My awesome page\"\n    assert input_element.attrs['class'] == \"input\"\n    \n    # Verify label\n    label_element = basic_fieldset.children[2]\n    assert label_element.tag == \"p\"\n    assert label_element.attrs['class'] == \"label\"\n    assert label_element.children[0] == \"You can edit page title later on from settings\"\n    \n    return basic_fieldset\n\n# Run the tests\ntest_fieldset_basic_fasthtml_examples()\n\n\n&lt;fieldset class=\"fieldset\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Page title&lt;/legend&gt;  &lt;input type=\"text\" placeholder=\"My awesome page\" class=\"input\"&gt;\n  &lt;p class=\"label\"&gt;You can edit page title later on from settings&lt;/p&gt;\n&lt;/fieldset&gt;\n\n\n\ntest_func = test_fieldset_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fieldset_with_background_fasthtml_examples\n\n test_fieldset_with_background_fasthtml_examples ()\n\nTest fieldset with background and border from daisyUI v5 documentation.\n\n\nExported source\ndef test_fieldset_with_background_fasthtml_examples():\n    \"\"\"Test fieldset with background and border from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Input, P\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Fieldset with background and border\n    styled_fieldset = Fieldset(\n        Legend(\"Page title\", cls=str(fieldset_legend)),\n        Input(type=\"text\", placeholder=\"My awesome page\", cls=str(text_input)),\n        P(\"You can edit page title later on from settings\", cls=str(label)),\n        cls=combine_classes(\n            fieldset,\n            bg_dui.base_200,\n            border_dui.base_300,\n            border_radius.box,\n            w.xs,\n            border,\n            p._4\n        )\n    )\n    \n    # Verify structure\n    assert styled_fieldset.tag == \"fieldset\"\n    assert \"fieldset\" in styled_fieldset.attrs['class']\n    assert \"bg-base-200\" in styled_fieldset.attrs['class']\n    assert \"border-base-300\" in styled_fieldset.attrs['class']\n    assert \"rounded-box\" in styled_fieldset.attrs['class']\n    assert \"w-xs\" in styled_fieldset.attrs['class']\n    assert \"border\" in styled_fieldset.attrs['class']\n    assert \"p-4\" in styled_fieldset.attrs['class']\n    \n    # Verify legend\n    legend_element = styled_fieldset.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Page title\"\n    \n    # Verify input\n    input_element = styled_fieldset.children[1]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['type'] == \"text\"\n    assert input_element.attrs['placeholder'] == \"My awesome page\"\n    assert input_element.attrs['class'] == \"input\"\n    \n    # Verify label\n    label_element = styled_fieldset.children[2]\n    assert label_element.tag == \"p\"\n    assert label_element.attrs['class'] == \"label\"\n    assert label_element.children[0] == \"You can edit page title later on from settings\"\n    \n    return styled_fieldset\n\n# Run the tests\ntest_fieldset_with_background_fasthtml_examples()\n\n\n&lt;fieldset class=\"fieldset bg-base-200 border-base-300 rounded-box w-xs &lt;cjm_fasthtml_tailwind.utilities.borders.BorderWidthFactory object at 0x7f99fd6a9290&gt; p-4\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Page title&lt;/legend&gt;  &lt;input type=\"text\" placeholder=\"My awesome page\" class=\"input\"&gt;\n  &lt;p class=\"label\"&gt;You can edit page title later on from settings&lt;/p&gt;\n&lt;/fieldset&gt;\n\n\n\ntest_func = test_fieldset_with_background_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fieldset_multiple_inputs_fasthtml_examples\n\n test_fieldset_multiple_inputs_fasthtml_examples ()\n\nTest fieldset with multiple inputs from daisyUI v5 documentation.\n\n\nExported source\ndef test_fieldset_multiple_inputs_fasthtml_examples():\n    \"\"\"Test fieldset with multiple inputs from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Input, Label\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Fieldset with multiple inputs\n    multiple_inputs_fieldset = Fieldset(\n        Legend(\"Page details\", cls=str(fieldset_legend)),\n        Label(\"Title\", cls=str(label)),\n        Input(type=\"text\", placeholder=\"My awesome page\", cls=str(text_input)),\n        Label(\"Slug\", cls=str(label)),\n        Input(type=\"text\", placeholder=\"my-awesome-page\", cls=str(text_input)),\n        Label(\"Author\", cls=str(label)),\n        Input(type=\"text\", placeholder=\"Name\", cls=str(text_input)),\n        cls=combine_classes(\n            fieldset,\n            bg_dui.base_200,\n            border_dui.base_300,\n            border_radius.box,\n            w.xs,\n            border,\n            p._4\n        )\n    )\n    \n    # Verify structure\n    assert multiple_inputs_fieldset.tag == \"fieldset\"\n    assert \"fieldset\" in multiple_inputs_fieldset.attrs['class']\n    assert \"bg-base-200\" in multiple_inputs_fieldset.attrs['class']\n    assert \"border-base-300\" in multiple_inputs_fieldset.attrs['class']\n    assert \"rounded-box\" in multiple_inputs_fieldset.attrs['class']\n    assert \"w-xs\" in multiple_inputs_fieldset.attrs['class']\n    assert \"border\" in multiple_inputs_fieldset.attrs['class']\n    assert \"p-4\" in multiple_inputs_fieldset.attrs['class']\n    \n    # Verify legend\n    legend_element = multiple_inputs_fieldset.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Page details\"\n    \n    # Verify first label and input\n    label1 = multiple_inputs_fieldset.children[1]\n    assert label1.tag == \"label\"\n    assert label1.attrs['class'] == \"label\"\n    assert label1.children[0] == \"Title\"\n    \n    input1 = multiple_inputs_fieldset.children[2]\n    assert input1.tag == \"input\"\n    assert input1.attrs['type'] == \"text\"\n    assert input1.attrs['placeholder'] == \"My awesome page\"\n    assert input1.attrs['class'] == \"input\"\n    \n    # Verify second label and input\n    label2 = multiple_inputs_fieldset.children[3]\n    assert label2.tag == \"label\"\n    assert label2.attrs['class'] == \"label\"\n    assert label2.children[0] == \"Slug\"\n    \n    input2 = multiple_inputs_fieldset.children[4]\n    assert input2.tag == \"input\"\n    assert input2.attrs['type'] == \"text\"\n    assert input2.attrs['placeholder'] == \"my-awesome-page\"\n    assert input2.attrs['class'] == \"input\"\n    \n    # Verify third label and input\n    label3 = multiple_inputs_fieldset.children[5]\n    assert label3.tag == \"label\"\n    assert label3.attrs['class'] == \"label\"\n    assert label3.children[0] == \"Author\"\n    \n    input3 = multiple_inputs_fieldset.children[6]\n    assert input3.tag == \"input\"\n    assert input3.attrs['type'] == \"text\"\n    assert input3.attrs['placeholder'] == \"Name\"\n    assert input3.attrs['class'] == \"input\"\n    \n    return multiple_inputs_fieldset\n\n# Run the tests\ntest_fieldset_multiple_inputs_fasthtml_examples()\n\n\n&lt;fieldset class=\"fieldset bg-base-200 border-base-300 rounded-box w-xs &lt;cjm_fasthtml_tailwind.utilities.borders.BorderWidthFactory object at 0x7f99fd6a9290&gt; p-4\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Page details&lt;/legend&gt;&lt;label class=\"label\"&gt;Title&lt;/label&gt;  &lt;input type=\"text\" placeholder=\"My awesome page\" class=\"input\"&gt;\n&lt;label class=\"label\"&gt;Slug&lt;/label&gt;  &lt;input type=\"text\" placeholder=\"my-awesome-page\" class=\"input\"&gt;\n&lt;label class=\"label\"&gt;Author&lt;/label&gt;  &lt;input type=\"text\" placeholder=\"Name\" class=\"input\"&gt;\n&lt;/fieldset&gt;\n\n\n\ntest_func = test_fieldset_multiple_inputs_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fieldset_join_items_fasthtml_examples\n\n test_fieldset_join_items_fasthtml_examples ()\n\nTest fieldset with multiple join items from daisyUI v5 documentation.\n\n\nExported source\ndef test_fieldset_join_items_fasthtml_examples():\n    \"\"\"Test fieldset with multiple join items from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Input, Button, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.layout.join import join, join_item\n    \n    # Fieldset with join items\n    join_fieldset = Fieldset(\n        Legend(\"Settings\", cls=str(fieldset_legend)),\n        Div(\n            Input(type=\"text\", placeholder=\"Product name\", cls=combine_classes(text_input, join_item)),\n            Button(\"save\", cls=combine_classes(btn, join_item)),\n            cls=str(join)\n        ),\n        cls=combine_classes(\n            fieldset,\n            bg_dui.base_200,\n            border_dui.base_300,\n            border_radius.box,\n            w.xs,\n            border,\n            p._4\n        )\n    )\n    \n    # Verify structure\n    assert join_fieldset.tag == \"fieldset\"\n    assert \"fieldset\" in join_fieldset.attrs['class']\n    assert \"bg-base-200\" in join_fieldset.attrs['class']\n    assert \"border-base-300\" in join_fieldset.attrs['class']\n    assert \"rounded-box\" in join_fieldset.attrs['class']\n    assert \"w-xs\" in join_fieldset.attrs['class']\n    assert \"border\" in join_fieldset.attrs['class']\n    assert \"p-4\" in join_fieldset.attrs['class']\n    \n    # Verify legend\n    legend_element = join_fieldset.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Settings\"\n    \n    # Verify join container\n    join_container = join_fieldset.children[1]\n    assert join_container.tag == \"div\"\n    assert join_container.attrs['class'] == \"join\"\n    \n    # Verify input in join\n    join_input = join_container.children[0]\n    assert join_input.tag == \"input\"\n    assert join_input.attrs['type'] == \"text\"\n    assert join_input.attrs['placeholder'] == \"Product name\"\n    assert \"input\" in join_input.attrs['class']\n    assert \"join-item\" in join_input.attrs['class']\n    \n    # Verify button in join\n    join_button = join_container.children[1]\n    assert join_button.tag == \"button\"\n    assert join_button.children[0] == \"save\"\n    assert \"btn\" in join_button.attrs['class']\n    assert \"join-item\" in join_button.attrs['class']\n    \n    return join_fieldset\n\n# Run the tests\ntest_fieldset_join_items_fasthtml_examples()\n\n\n&lt;fieldset class=\"fieldset bg-base-200 border-base-300 rounded-box w-xs &lt;cjm_fasthtml_tailwind.utilities.borders.BorderWidthFactory object at 0x7f99fd6a9290&gt; p-4\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Settings&lt;/legend&gt;  &lt;div class=\"join\"&gt;\n    &lt;input type=\"text\" placeholder=\"Product name\" class=\"input join-item\"&gt;\n&lt;button class=\"btn join-item\"&gt;save&lt;/button&gt;  &lt;/div&gt;\n&lt;/fieldset&gt;\n\n\n\ntest_func = test_fieldset_join_items_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_fieldset_login_form_fasthtml_examples\n\n test_fieldset_login_form_fasthtml_examples ()\n\nTest login form with fieldset from daisyUI v5 documentation.\n\n\nExported source\ndef test_fieldset_login_form_fasthtml_examples():\n    \"\"\"Test login form with fieldset from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Input, Label, Button\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.spacing import p, m\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Login form with fieldset\n    login_fieldset = Fieldset(\n        Legend(\"Login\", cls=str(fieldset_legend)),\n        Label(\"Email\", cls=str(label)),\n        Input(type=\"email\", placeholder=\"Email\", cls=str(text_input)),\n        Label(\"Password\", cls=str(label)),\n        Input(type=\"password\", placeholder=\"Password\", cls=str(text_input)),\n        Button(\"Login\", cls=combine_classes(btn, btn_colors.neutral, m.t._4)),\n        cls=combine_classes(\n            fieldset,\n            bg_dui.base_200,\n            border_dui.base_300,\n            border_radius.box,\n            w.xs,\n            border,\n            p._4\n        )\n    )\n    \n    # Verify structure\n    assert login_fieldset.tag == \"fieldset\"\n    assert \"fieldset\" in login_fieldset.attrs['class']\n    assert \"bg-base-200\" in login_fieldset.attrs['class']\n    assert \"border-base-300\" in login_fieldset.attrs['class']\n    assert \"rounded-box\" in login_fieldset.attrs['class']\n    assert \"w-xs\" in login_fieldset.attrs['class']\n    assert \"border\" in login_fieldset.attrs['class']\n    assert \"p-4\" in login_fieldset.attrs['class']\n    \n    # Verify legend\n    legend_element = login_fieldset.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Login\"\n    \n    # Verify email label and input\n    email_label = login_fieldset.children[1]\n    assert email_label.tag == \"label\"\n    assert email_label.attrs['class'] == \"label\"\n    assert email_label.children[0] == \"Email\"\n    \n    email_input = login_fieldset.children[2]\n    assert email_input.tag == \"input\"\n    assert email_input.attrs['type'] == \"email\"\n    assert email_input.attrs['placeholder'] == \"Email\"\n    assert email_input.attrs['class'] == \"input\"\n    \n    # Verify password label and input\n    password_label = login_fieldset.children[3]\n    assert password_label.tag == \"label\"\n    assert password_label.attrs['class'] == \"label\"\n    assert password_label.children[0] == \"Password\"\n    \n    password_input = login_fieldset.children[4]\n    assert password_input.tag == \"input\"\n    assert password_input.attrs['type'] == \"password\"\n    assert password_input.attrs['placeholder'] == \"Password\"\n    assert password_input.attrs['class'] == \"input\"\n    \n    # Verify login button\n    login_button = login_fieldset.children[5]\n    assert login_button.tag == \"button\"\n    assert login_button.children[0] == \"Login\"\n    assert \"btn\" in login_button.attrs['class']\n    assert \"btn-neutral\" in login_button.attrs['class']\n    assert \"mt-4\" in login_button.attrs['class']\n    \n    return login_fieldset\n\n# Run the tests\ntest_fieldset_login_form_fasthtml_examples()\n\n\n&lt;fieldset class=\"fieldset bg-base-200 border-base-300 rounded-box w-xs &lt;cjm_fasthtml_tailwind.utilities.borders.BorderWidthFactory object at 0x7f99fd6a9290&gt; p-4\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Login&lt;/legend&gt;&lt;label class=\"label\"&gt;Email&lt;/label&gt;  &lt;input type=\"email\" placeholder=\"Email\" class=\"input\"&gt;\n&lt;label class=\"label\"&gt;Password&lt;/label&gt;  &lt;input type=\"password\" placeholder=\"Password\" class=\"input\"&gt;\n&lt;button class=\"btn btn-neutral mt-4\"&gt;Login&lt;/button&gt;&lt;/fieldset&gt;\n\n\n\ntest_func = test_fieldset_login_form_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "fieldset"
    ]
  },
  {
    "objectID": "components/data_input/file_input.html",
    "href": "components/data_input/file_input.html",
    "title": "file input",
    "section": "",
    "text": "Base File Input\n\n\nExported source\nfile_input = SingleValueFactory(\"file-input\", \"Base file input component for &lt;input type=\\\"file\\\"&gt; element\") # Base file input component\n\n\n\n\nFile Input Styles\n\n\nExported source\nfile_input_styles = enums_to_simple_factory(file_input, [GhostStyle]) # File input style variants\n\n\n\n\nFile Input Colors\n\n\nExported source\nfile_input_colors = enums_to_simple_factory(file_input, [SemanticColorBrand, SemanticColorStatus], \"File input color variants using daisyUI semantic colors\") # File input color variants\n\n\n\n\nFile Input Sizes\n\n\nExported source\nfile_input_sizes = enums_to_simple_factory(file_input, [DaisyUINamedSize], \"File input size variants from extra small to extra large\") # File input size variants\n\n\n\n\nFile Input Test Examples\n\nsource\n\n\ntest_file_input_basic_examples\n\n test_file_input_basic_examples ()\n\nTest basic file_input utilities.\n\n\nExported source\ndef test_file_input_basic_examples():\n    \"\"\"Test basic file_input utilities.\"\"\"\n    # Basic file_input\n    assert str(file_input) == \"file-input\"\n    \n    # Test with modifiers\n    assert str(file_input.hover) == \"hover:file-input\"\n    assert str(file_input.md) == \"md:file-input\"\n    assert str(file_input.dark) == \"dark:file-input\"\n\n# Run the tests\ntest_file_input_basic_examples()\n\n\n\nsource\n\n\ntest_file_input_styles_examples\n\n test_file_input_styles_examples ()\n\nTest file_input style variants.\n\n\nExported source\ndef test_file_input_styles_examples():\n    \"\"\"Test file_input style variants.\"\"\"\n    assert str(file_input_styles.ghost) == \"file-input-ghost\"\n\n# Run the tests\ntest_file_input_styles_examples()\n\n\n\nsource\n\n\ntest_file_input_colors_examples\n\n test_file_input_colors_examples ()\n\nTest file_input color variants.\n\n\nExported source\ndef test_file_input_colors_examples():\n    \"\"\"Test file_input color variants.\"\"\"\n    # All color variants\n    assert str(file_input_colors.neutral) == \"file-input-neutral\"\n    assert str(file_input_colors.primary) == \"file-input-primary\"\n    assert str(file_input_colors.secondary) == \"file-input-secondary\"\n    assert str(file_input_colors.accent) == \"file-input-accent\"\n    assert str(file_input_colors.info) == \"file-input-info\"\n    assert str(file_input_colors.success) == \"file-input-success\"\n    assert str(file_input_colors.warning) == \"file-input-warning\"\n    assert str(file_input_colors.error) == \"file-input-error\"\n    \n    # With modifiers\n    assert str(file_input_colors.primary.hover) == \"hover:file-input-primary\"\n    assert str(file_input_colors.success.focus) == \"focus:file-input-success\"\n\n# Run the tests\ntest_file_input_colors_examples()\n\n\n\nsource\n\n\ntest_file_input_sizes_examples\n\n test_file_input_sizes_examples ()\n\nTest file_input size variants.\n\n\nExported source\ndef test_file_input_sizes_examples():\n    \"\"\"Test file_input size variants.\"\"\"\n    assert str(file_input_sizes.xs) == \"file-input-xs\"\n    assert str(file_input_sizes.sm) == \"file-input-sm\"\n    assert str(file_input_sizes.md) == \"file-input-md\"\n    assert str(file_input_sizes.lg) == \"file-input-lg\"\n    assert str(file_input_sizes.xl) == \"file-input-xl\"\n    \n    # With responsive modifiers\n    assert str(file_input_sizes.xs.sm) == \"sm:file-input-xs\"\n    assert str(file_input_sizes.lg.md) == \"md:file-input-lg\"\n\n# Run the tests\ntest_file_input_sizes_examples()\n\n\n\nsource\n\n\ntest_file_input_basic_fasthtml_examples\n\n test_file_input_basic_fasthtml_examples ()\n\nTest basic file input and ghost style from daisyUI v5 documentation.\n\n\nExported source\ndef test_file_input_basic_fasthtml_examples():\n    \"\"\"Test basic file input and ghost style from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Basic file input\n    basic_file_input = Input(type=\"file\", cls=str(file_input))\n    assert basic_file_input.tag == \"input\"\n    assert basic_file_input.attrs['type'] == \"file\"\n    assert basic_file_input.attrs['class'] == \"file-input\"\n    \n    # File input ghost\n    ghost_file_input = Input(\n        type=\"file\", \n        cls=combine_classes(file_input, file_input_styles.ghost)\n    )\n    assert ghost_file_input.tag == \"input\"\n    assert ghost_file_input.attrs['type'] == \"file\"\n    assert \"file-input\" in ghost_file_input.attrs['class']\n    assert \"file-input-ghost\" in ghost_file_input.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        basic_file_input,\n        ghost_file_input\n    )\n\n# Run the tests\ntest_file_input_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"file\" class=\"file-input\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-ghost\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_file_input_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_file_input_with_fieldset_fasthtml_examples\n\n test_file_input_with_fieldset_fasthtml_examples ()\n\nTest file input with fieldset and label from daisyUI v5 documentation.\n\n\nExported source\ndef test_file_input_with_fieldset_fasthtml_examples():\n    \"\"\"Test file input with fieldset and label from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Input, Label, Div\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset, fieldset_legend, label\n    \n    # File input with fieldset and label\n    fieldset_file_input = Fieldset(\n        Legend(\"Pick a file\", cls=str(fieldset_legend)),\n        Input(type=\"file\", cls=str(file_input)),\n        Label(\"Max size 2MB\", cls=str(label)),\n        cls=str(fieldset)\n    )\n    \n    # Verify structure\n    assert fieldset_file_input.tag == \"fieldset\"\n    assert fieldset_file_input.attrs['class'] == \"fieldset\"\n    \n    # Verify legend\n    legend_element = fieldset_file_input.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Pick a file\"\n    \n    # Verify file input\n    file_input_element = fieldset_file_input.children[1]\n    assert file_input_element.tag == \"input\"\n    assert file_input_element.attrs['type'] == \"file\"\n    assert file_input_element.attrs['class'] == \"file-input\"\n    \n    # Verify label\n    label_element = fieldset_file_input.children[2]\n    assert label_element.tag == \"label\"\n    assert label_element.attrs['class'] == \"label\"\n    assert label_element.children[0] == \"Max size 2MB\"\n    \n    return Div(fieldset_file_input)\n\n# Run the tests\ntest_file_input_with_fieldset_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;fieldset class=\"fieldset\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Pick a file&lt;/legend&gt;    &lt;input type=\"file\" class=\"file-input\"&gt;\n&lt;label class=\"label\"&gt;Max size 2MB&lt;/label&gt;&lt;/fieldset&gt;&lt;/div&gt;\n\n\n\ntest_func = test_file_input_with_fieldset_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_file_input_sizes_fasthtml_examples\n\n test_file_input_sizes_fasthtml_examples ()\n\nTest file input size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_file_input_sizes_fasthtml_examples():\n    \"\"\"Test file input size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Extra small file input\n    xs_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_sizes.xs)\n    )\n    assert xs_file_input.tag == \"input\"\n    assert xs_file_input.attrs['type'] == \"file\"\n    assert \"file-input\" in xs_file_input.attrs['class']\n    assert \"file-input-xs\" in xs_file_input.attrs['class']\n    \n    # Small file input\n    sm_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_sizes.sm)\n    )\n    assert \"file-input\" in sm_file_input.attrs['class']\n    assert \"file-input-sm\" in sm_file_input.attrs['class']\n    \n    # Medium file input\n    md_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_sizes.md)\n    )\n    assert \"file-input\" in md_file_input.attrs['class']\n    assert \"file-input-md\" in md_file_input.attrs['class']\n    \n    # Large file input\n    lg_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_sizes.lg)\n    )\n    assert \"file-input\" in lg_file_input.attrs['class']\n    assert \"file-input-lg\" in lg_file_input.attrs['class']\n    \n    # Extra large file input\n    xl_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_sizes.xl)\n    )\n    assert \"file-input\" in xl_file_input.attrs['class']\n    assert \"file-input-xl\" in xl_file_input.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        xs_file_input,\n        sm_file_input,\n        md_file_input,\n        lg_file_input,\n        xl_file_input\n    )\n\n# Run the tests\ntest_file_input_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-xs\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-sm\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-md\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-lg\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-xl\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_file_input_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_file_input_colors_fasthtml_examples\n\n test_file_input_colors_fasthtml_examples ()\n\nTest file input color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_file_input_colors_fasthtml_examples():\n    \"\"\"Test file input color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Primary color file input\n    primary_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.primary)\n    )\n    assert primary_file_input.tag == \"input\"\n    assert primary_file_input.attrs['type'] == \"file\"\n    assert \"file-input\" in primary_file_input.attrs['class']\n    assert \"file-input-primary\" in primary_file_input.attrs['class']\n    \n    # Secondary color file input\n    secondary_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.secondary)\n    )\n    assert \"file-input\" in secondary_file_input.attrs['class']\n    assert \"file-input-secondary\" in secondary_file_input.attrs['class']\n    \n    # Accent color file input\n    accent_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.accent)\n    )\n    assert \"file-input\" in accent_file_input.attrs['class']\n    assert \"file-input-accent\" in accent_file_input.attrs['class']\n    \n    # Neutral color file input\n    neutral_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.neutral)\n    )\n    assert \"file-input\" in neutral_file_input.attrs['class']\n    assert \"file-input-neutral\" in neutral_file_input.attrs['class']\n    \n    # Info color file input\n    info_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.info)\n    )\n    assert \"file-input\" in info_file_input.attrs['class']\n    assert \"file-input-info\" in info_file_input.attrs['class']\n    \n    # Success color file input\n    success_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.success)\n    )\n    assert \"file-input\" in success_file_input.attrs['class']\n    assert \"file-input-success\" in success_file_input.attrs['class']\n    \n    # Warning color file input\n    warning_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.warning)\n    )\n    assert \"file-input\" in warning_file_input.attrs['class']\n    assert \"file-input-warning\" in warning_file_input.attrs['class']\n    \n    # Error color file input\n    error_file_input = Input(\n        type=\"file\",\n        cls=combine_classes(file_input, file_input_colors.error)\n    )\n    assert \"file-input\" in error_file_input.attrs['class']\n    assert \"file-input-error\" in error_file_input.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        primary_file_input,\n        secondary_file_input,\n        accent_file_input,\n        neutral_file_input,\n        info_file_input,\n        success_file_input,\n        warning_file_input,\n        error_file_input\n    )\n\n# Run the tests\ntest_file_input_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-primary\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-secondary\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-accent\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-neutral\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-info\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-success\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-warning\"&gt;\n  &lt;input type=\"file\" class=\"file-input file-input-error\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_file_input_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_file_input_states_fasthtml_examples\n\n test_file_input_states_fasthtml_examples ()\n\nTest disabled file input from daisyUI v5 documentation.\n\n\nExported source\ndef test_file_input_states_fasthtml_examples():\n    \"\"\"Test disabled file input from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Disabled file input\n    disabled_file_input = Input(\n        type=\"file\",\n        placeholder=\"You can't touch this\",\n        cls=str(file_input),\n        disabled=True\n    )\n    \n    # Verify structure\n    assert disabled_file_input.tag == \"input\"\n    assert disabled_file_input.attrs['type'] == \"file\"\n    assert disabled_file_input.attrs['placeholder'] == \"You can't touch this\"\n    assert disabled_file_input.attrs['class'] == \"file-input\"\n    assert disabled_file_input.attrs['disabled'] == True\n    \n    # Return element in a Div\n    return Div(disabled_file_input)\n\n# Run the tests\ntest_file_input_states_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"file\" placeholder=\"You can't touch this\" disabled class=\"file-input\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_file_input_states_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "file input"
    ]
  },
  {
    "objectID": "components/data_input/select.html",
    "href": "components/data_input/select.html",
    "title": "select",
    "section": "",
    "text": "Base Select\n\n\nExported source\nselect = SingleValueFactory(\"select\", \"Base select component for &lt;select&gt; element\") # Base select component\n\n\n\n\nSelect Styles\n\n\nExported source\nselect_styles = enums_to_simple_factory(select, [GhostStyle]) # select style variants\n\n\n\n\nSelect Colors\n\n\nExported source\nselect_colors = enums_to_simple_factory(select, [SemanticColorBrand, SemanticColorStatus], \"select color variants using daisyUI semantic colors\") # select color variants\n\n\n\n\nSelect Sizes\n\n\nExported source\nselect_sizes = enums_to_simple_factory(select, [DaisyUINamedSize], \"select size variants from extra small to extra large\") # select size variants\n\n\n\n\nSelect Test Examples\n\nsource\n\n\ntest_select_basic_examples\n\n test_select_basic_examples ()\n\nTest basic select utilities.\n\n\nExported source\ndef test_select_basic_examples():\n    \"\"\"Test basic select utilities.\"\"\"\n    # Basic select\n    assert str(select) == \"select\"\n    \n    # Test with modifiers\n    assert str(select.hover) == \"hover:select\"\n    assert str(select.md) == \"md:select\"\n    assert str(select.dark) == \"dark:select\"\n\n# Run the tests\ntest_select_basic_examples()\n\n\n\nsource\n\n\ntest_select_styles_examples\n\n test_select_styles_examples ()\n\nTest select style variants.\n\n\nExported source\ndef test_select_styles_examples():\n    \"\"\"Test select style variants.\"\"\"\n    assert str(select_styles.ghost) == \"select-ghost\"\n\n# Run the tests\ntest_select_styles_examples()\n\n\n\nsource\n\n\ntest_select_colors_examples\n\n test_select_colors_examples ()\n\nTest select color variants.\n\n\nExported source\ndef test_select_colors_examples():\n    \"\"\"Test select color variants.\"\"\"\n    # All color variants\n    assert str(select_colors.neutral) == \"select-neutral\"\n    assert str(select_colors.primary) == \"select-primary\"\n    assert str(select_colors.secondary) == \"select-secondary\"\n    assert str(select_colors.accent) == \"select-accent\"\n    assert str(select_colors.info) == \"select-info\"\n    assert str(select_colors.success) == \"select-success\"\n    assert str(select_colors.warning) == \"select-warning\"\n    assert str(select_colors.error) == \"select-error\"\n    \n    # With modifiers\n    assert str(select_colors.primary.hover) == \"hover:select-primary\"\n    assert str(select_colors.success.focus) == \"focus:select-success\"\n\n# Run the tests\ntest_select_colors_examples()\n\n\n\nsource\n\n\ntest_select_sizes_examples\n\n test_select_sizes_examples ()\n\nTest select size variants.\n\n\nExported source\ndef test_select_sizes_examples():\n    \"\"\"Test select size variants.\"\"\"\n    assert str(select_sizes.xs) == \"select-xs\"\n    assert str(select_sizes.sm) == \"select-sm\"\n    assert str(select_sizes.md) == \"select-md\"\n    assert str(select_sizes.lg) == \"select-lg\"\n    assert str(select_sizes.xl) == \"select-xl\"\n    \n    # With responsive modifiers\n    assert str(select_sizes.xs.sm) == \"sm:select-xs\"\n    assert str(select_sizes.lg.md) == \"md:select-lg\"\n\n# Run the tests\ntest_select_sizes_examples()\n\n\n\nsource\n\n\ntest_select_basic_fasthtml_examples\n\n test_select_basic_fasthtml_examples ()\n\nTest basic select example from daisyUI v5 documentation.\n\n\nExported source\ndef test_select_basic_fasthtml_examples():\n    \"\"\"Test basic select example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Select, Option, Div\n    \n    # Basic select\n    basic_select = Select(\n        Option(\"Pick a color\", disabled=True, selected=True),\n        Option(\"Crimson\"),\n        Option(\"Amber\"),\n        Option(\"Velvet\"),\n        cls=str(select)\n    )\n    \n    # Verify structure\n    assert basic_select.tag == \"select\"\n    assert basic_select.attrs['class'] == \"select\"\n    \n    # Verify options\n    assert len(basic_select.children) == 4\n    \n    # First option (disabled and selected)\n    first_option = basic_select.children[0]\n    assert first_option.tag == \"option\"\n    assert first_option.attrs.get('disabled') is True\n    assert first_option.attrs.get('selected') is True\n    assert first_option.children[0] == \"Pick a color\"\n    \n    # Other options\n    assert basic_select.children[1].children[0] == \"Crimson\"\n    assert basic_select.children[2].children[0] == \"Amber\"\n    assert basic_select.children[3].children[0] == \"Velvet\"\n    \n    return basic_select\n\n# Run the tests\ntest_select_basic_fasthtml_examples()\n\n\n&lt;select class=\"select\"&gt;&lt;option disabled selected&gt;Pick a color&lt;/option&gt;&lt;option&gt;Crimson&lt;/option&gt;&lt;option&gt;Amber&lt;/option&gt;&lt;option&gt;Velvet&lt;/option&gt;&lt;/select&gt;\n\n\n\ntest_func = test_select_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_select_colors_fasthtml_examples\n\n test_select_colors_fasthtml_examples ()\n\nTest select with different color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_select_colors_fasthtml_examples():\n    \"\"\"Test select with different color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Select, Option, Div\n    \n    # Primary color\n    primary_select = Select(\n        Option(\"Pick a text editor\", disabled=True, selected=True),\n        Option(\"VScode\"),\n        Option(\"VScode fork\"),\n        Option(\"Another VScode fork\"),\n        cls=combine_classes(select, select_colors.primary)\n    )\n    assert \"select\" in primary_select.attrs['class']\n    assert \"select-primary\" in primary_select.attrs['class']\n    assert primary_select.children[0].children[0] == \"Pick a text editor\"\n    \n    # Secondary color\n    secondary_select = Select(\n        Option(\"Pick a language\", disabled=True, selected=True),\n        Option(\"Zig\"),\n        Option(\"Go\"),\n        Option(\"Rust\"),\n        cls=combine_classes(select, select_colors.secondary)\n    )\n    assert \"select-secondary\" in secondary_select.attrs['class']\n    assert secondary_select.children[0].children[0] == \"Pick a language\"\n    \n    # Accent color\n    accent_select = Select(\n        Option(\"Color scheme\", selected=True, disabled=True),\n        Option(\"Light mode\"),\n        Option(\"Dark mode\"),\n        Option(\"System\"),\n        cls=combine_classes(select, select_colors.accent)\n    )\n    assert \"select-accent\" in accent_select.attrs['class']\n    assert accent_select.children[0].children[0] == \"Color scheme\"\n    \n    # Neutral color\n    neutral_select = Select(\n        Option(\"Server location\", disabled=True, selected=True),\n        Option(\"North America\"),\n        Option(\"EU west\"),\n        Option(\"South East Asia\"),\n        cls=combine_classes(select, select_colors.neutral)\n    )\n    assert \"select-neutral\" in neutral_select.attrs['class']\n    assert neutral_select.children[0].children[0] == \"Server location\"\n    \n    # Info color\n    info_select = Select(\n        Option(\"Pick a Framework\", disabled=True, selected=True),\n        Option(\"React\"),\n        Option(\"Vue\"),\n        Option(\"Angular\"),\n        cls=combine_classes(select, select_colors.info)\n    )\n    assert \"select-info\" in info_select.attrs['class']\n    assert info_select.children[0].children[0] == \"Pick a Framework\"\n    \n    # Success color\n    success_select = Select(\n        Option(\"Pick a Runtime\", disabled=True, selected=True),\n        Option(\"npm\"),\n        Option(\"Bun\"),\n        Option(\"yarn\"),\n        cls=combine_classes(select, select_colors.success)\n    )\n    assert \"select-success\" in success_select.attrs['class']\n    assert success_select.children[0].children[0] == \"Pick a Runtime\"\n    \n    # Warning color\n    warning_select = Select(\n        Option(\"Pick an OS\", disabled=True, selected=True),\n        Option(\"Windows\"),\n        Option(\"MacOS\"),\n        Option(\"Linux\"),\n        cls=combine_classes(select, select_colors.warning)\n    )\n    assert \"select-warning\" in warning_select.attrs['class']\n    assert warning_select.children[0].children[0] == \"Pick an OS\"\n    \n    # Error color\n    error_select = Select(\n        Option(\"Pick an AI Model\", disabled=True, selected=True),\n        Option(\"GPT-4\"),\n        Option(\"Claude\"),\n        Option(\"Llama\"),\n        cls=combine_classes(select, select_colors.error)\n    )\n    assert \"select-error\" in error_select.attrs['class']\n    assert error_select.children[0].children[0] == \"Pick an AI Model\"\n    \n    # Return all elements in a Div\n    return Div(\n        primary_select,\n        secondary_select,\n        accent_select,\n        neutral_select,\n        info_select,\n        success_select,\n        warning_select,\n        error_select\n    )\n\n# Run the tests\ntest_select_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;select class=\"select select-primary\"&gt;&lt;option disabled selected&gt;Pick a text editor&lt;/option&gt;&lt;option&gt;VScode&lt;/option&gt;&lt;option&gt;VScode fork&lt;/option&gt;&lt;option&gt;Another VScode fork&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-secondary\"&gt;&lt;option disabled selected&gt;Pick a language&lt;/option&gt;&lt;option&gt;Zig&lt;/option&gt;&lt;option&gt;Go&lt;/option&gt;&lt;option&gt;Rust&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-accent\"&gt;&lt;option selected disabled&gt;Color scheme&lt;/option&gt;&lt;option&gt;Light mode&lt;/option&gt;&lt;option&gt;Dark mode&lt;/option&gt;&lt;option&gt;System&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-neutral\"&gt;&lt;option disabled selected&gt;Server location&lt;/option&gt;&lt;option&gt;North America&lt;/option&gt;&lt;option&gt;EU west&lt;/option&gt;&lt;option&gt;South East Asia&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-info\"&gt;&lt;option disabled selected&gt;Pick a Framework&lt;/option&gt;&lt;option&gt;React&lt;/option&gt;&lt;option&gt;Vue&lt;/option&gt;&lt;option&gt;Angular&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-success\"&gt;&lt;option disabled selected&gt;Pick a Runtime&lt;/option&gt;&lt;option&gt;npm&lt;/option&gt;&lt;option&gt;Bun&lt;/option&gt;&lt;option&gt;yarn&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-warning\"&gt;&lt;option disabled selected&gt;Pick an OS&lt;/option&gt;&lt;option&gt;Windows&lt;/option&gt;&lt;option&gt;MacOS&lt;/option&gt;&lt;option&gt;Linux&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-error\"&gt;&lt;option disabled selected&gt;Pick an AI Model&lt;/option&gt;&lt;option&gt;GPT-4&lt;/option&gt;&lt;option&gt;Claude&lt;/option&gt;&lt;option&gt;Llama&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;\n\n\n\ntest_func = test_select_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_select_sizes_fasthtml_examples\n\n test_select_sizes_fasthtml_examples ()\n\nTest select with different sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_select_sizes_fasthtml_examples():\n    \"\"\"Test select with different sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Select, Option, Div\n    \n    # Extra small size\n    xs_select = Select(\n        Option(\"Xsmall\", disabled=True, selected=True),\n        Option(\"Xsmall Apple\"),\n        Option(\"Xsmall Orange\"),\n        Option(\"Xsmall Tomato\"),\n        cls=combine_classes(select, select_sizes.xs)\n    )\n    assert \"select\" in xs_select.attrs['class']\n    assert \"select-xs\" in xs_select.attrs['class']\n    assert xs_select.children[0].children[0] == \"Xsmall\"\n    \n    # Small size\n    sm_select = Select(\n        Option(\"Small\", disabled=True, selected=True),\n        Option(\"Small Apple\"),\n        Option(\"Small Orange\"),\n        Option(\"Small Tomato\"),\n        cls=combine_classes(select, select_sizes.sm)\n    )\n    assert \"select-sm\" in sm_select.attrs['class']\n    assert sm_select.children[0].children[0] == \"Small\"\n    \n    # Medium size\n    md_select = Select(\n        Option(\"Medium\", disabled=True, selected=True),\n        Option(\"Medium Apple\"),\n        Option(\"Medium Orange\"),\n        Option(\"Medium Tomato\"),\n        cls=combine_classes(select, select_sizes.md)\n    )\n    assert \"select-md\" in md_select.attrs['class']\n    assert md_select.children[0].children[0] == \"Medium\"\n    \n    # Large size\n    lg_select = Select(\n        Option(\"Large\", disabled=True, selected=True),\n        Option(\"Large Apple\"),\n        Option(\"Large Orange\"),\n        Option(\"Large Tomato\"),\n        cls=combine_classes(select, select_sizes.lg)\n    )\n    assert \"select-lg\" in lg_select.attrs['class']\n    assert lg_select.children[0].children[0] == \"Large\"\n    \n    # Extra large size\n    xl_select = Select(\n        Option(\"Xlarge\", disabled=True, selected=True),\n        Option(\"Xlarge Apple\"),\n        Option(\"Xlarge Orange\"),\n        Option(\"Xlarge Tomato\"),\n        cls=combine_classes(select, select_sizes.xl)\n    )\n    assert \"select-xl\" in xl_select.attrs['class']\n    assert xl_select.children[0].children[0] == \"Xlarge\"\n    \n    # Return all elements in a Div\n    return Div(\n        xs_select,\n        sm_select,\n        md_select,\n        lg_select,\n        xl_select\n    )\n\n# Run the tests\ntest_select_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;select class=\"select select-xs\"&gt;&lt;option disabled selected&gt;Xsmall&lt;/option&gt;&lt;option&gt;Xsmall Apple&lt;/option&gt;&lt;option&gt;Xsmall Orange&lt;/option&gt;&lt;option&gt;Xsmall Tomato&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-sm\"&gt;&lt;option disabled selected&gt;Small&lt;/option&gt;&lt;option&gt;Small Apple&lt;/option&gt;&lt;option&gt;Small Orange&lt;/option&gt;&lt;option&gt;Small Tomato&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-md\"&gt;&lt;option disabled selected&gt;Medium&lt;/option&gt;&lt;option&gt;Medium Apple&lt;/option&gt;&lt;option&gt;Medium Orange&lt;/option&gt;&lt;option&gt;Medium Tomato&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-lg\"&gt;&lt;option disabled selected&gt;Large&lt;/option&gt;&lt;option&gt;Large Apple&lt;/option&gt;&lt;option&gt;Large Orange&lt;/option&gt;&lt;option&gt;Large Tomato&lt;/option&gt;&lt;/select&gt;&lt;select class=\"select select-xl\"&gt;&lt;option disabled selected&gt;Xlarge&lt;/option&gt;&lt;option&gt;Xlarge Apple&lt;/option&gt;&lt;option&gt;Xlarge Orange&lt;/option&gt;&lt;option&gt;Xlarge Tomato&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;\n\n\n\ntest_func = test_select_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_select_special_fasthtml_examples\n\n test_select_special_fasthtml_examples ()\n\nTest select with special styles (ghost, fieldset, disabled) from daisyUI v5 documentation.\n\n\nExported source\ndef test_select_special_fasthtml_examples():\n    \"\"\"Test select with special styles (ghost, fieldset, disabled) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Select, Option, Div, Fieldset, Legend, Span\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset, fieldset_legend\n    from cjm_fasthtml_daisyui.components.data_input.label import label\n    \n    # Ghost style (no background)\n    ghost_select = Select(\n        Option(\"Pick a font\", disabled=True, selected=True),\n        Option(\"Inter\"),\n        Option(\"Poppins\"),\n        Option(\"Raleway\"),\n        cls=combine_classes(select, select_styles.ghost)\n    )\n    assert \"select\" in ghost_select.attrs['class']\n    assert \"select-ghost\" in ghost_select.attrs['class']\n    assert ghost_select.children[0].children[0] == \"Pick a font\"\n    assert ghost_select.children[1].children[0] == \"Inter\"\n    assert ghost_select.children[2].children[0] == \"Poppins\"\n    assert ghost_select.children[3].children[0] == \"Raleway\"\n    \n    # With fieldset and labels\n    fieldset_select = Fieldset(\n        Legend(\"Browsers\", cls=str(fieldset_legend)),\n        Select(\n            Option(\"Pick a browser\", disabled=True, selected=True),\n            Option(\"Chrome\"),\n            Option(\"FireFox\"),\n            Option(\"Safari\"),\n            cls=str(select)\n        ),\n        Span(\"Optional\", cls=str(label)),\n        cls=str(fieldset)\n    )\n    assert fieldset_select.tag == \"fieldset\"\n    assert fieldset_select.attrs['class'] == \"fieldset\"\n    assert fieldset_select.children[0].tag == \"legend\"\n    assert \"fieldset-legend\" in fieldset_select.children[0].attrs['class']\n    assert fieldset_select.children[0].children[0] == \"Browsers\"\n    assert fieldset_select.children[1].tag == \"select\"\n    assert fieldset_select.children[1].attrs['class'] == \"select\"\n    assert fieldset_select.children[1].children[0].children[0] == \"Pick a browser\"\n    assert fieldset_select.children[2].tag == \"span\"\n    assert fieldset_select.children[2].attrs['class'] == \"label\"\n    assert fieldset_select.children[2].children[0] == \"Optional\"\n    \n    # Disabled select\n    disabled_select = Select(\n        Option(\"You can't touch this\"),\n        cls=str(select),\n        disabled=True\n    )\n    assert disabled_select.tag == \"select\"\n    assert disabled_select.attrs['class'] == \"select\"\n    assert disabled_select.attrs.get('disabled') is True\n    assert disabled_select.children[0].children[0] == \"You can't touch this\"\n    \n    # Return all elements in a Div\n    return Div(\n        ghost_select,\n        fieldset_select,\n        disabled_select\n    )\n\n# Run the tests\ntest_select_special_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;select class=\"select select-ghost\"&gt;&lt;option disabled selected&gt;Pick a font&lt;/option&gt;&lt;option&gt;Inter&lt;/option&gt;&lt;option&gt;Poppins&lt;/option&gt;&lt;option&gt;Raleway&lt;/option&gt;&lt;/select&gt;&lt;fieldset class=\"fieldset\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Browsers&lt;/legend&gt;&lt;select class=\"select\"&gt;&lt;option disabled selected&gt;Pick a browser&lt;/option&gt;&lt;option&gt;Chrome&lt;/option&gt;&lt;option&gt;FireFox&lt;/option&gt;&lt;option&gt;Safari&lt;/option&gt;&lt;/select&gt;&lt;span class=\"label\"&gt;Optional&lt;/span&gt;&lt;/fieldset&gt;&lt;select disabled class=\"select\"&gt;&lt;option&gt;You can't touch this&lt;/option&gt;&lt;/select&gt;&lt;/div&gt;\n\n\n\ntest_func = test_select_special_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "select"
    ]
  },
  {
    "objectID": "components/data_input/calendar.html",
    "href": "components/data_input/calendar.html",
    "title": "calendar",
    "section": "",
    "text": "Base Calendars\n\n\nExported source\ncally = SingleValueFactory(\"cally\", \"Base calendar component for Cally web component\") # Base Cally calendar component\npika_single = SingleValueFactory(\"pika-single\", \"Base calendar component for the input field that opens Pikaday calendar\") # Base Pikaday calender component\nreact_day_picker = SingleValueFactory(\"react-day-picker\", \"Base calendar component for the DayPicker component\") # Base DayPicker calendar component\n\n\n\n\nCalendary Test Examples\n\nsource\n\n\ntest_calendar_basic_examples\n\n test_calendar_basic_examples ()\n\nTest basic calendar utilities.\n\n\nExported source\ndef test_calendar_basic_examples():\n    \"\"\"Test basic calendar utilities.\"\"\"\n    # Basic calendar\n    assert str(cally) == \"cally\"\n    assert str(pika_single) == \"pika-single\"\n    assert str(react_day_picker) == \"react-day-picker\"\n    \n    # Test with modifiers\n    assert str(cally.hover) == \"hover:cally\"\n    assert str(pika_single.md) == \"md:pika-single\"\n    assert str(react_day_picker.dark) == \"dark:react-day-picker\"\n\n# Run the tests\ntest_calendar_basic_examples()\n\n\n\nsource\n\n\ntest_calendar_cally_basic_fasthtml_examples\n\n test_calendar_cally_basic_fasthtml_examples ()\n\nTest Cally calendar example from daisyUI v5 documentation.\n\n\nExported source\ndef test_calendar_cally_basic_fasthtml_examples():\n    \"\"\"Test Cally calendar example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Script\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.core.base import SingleValueFactory\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n\n    from fasthtml.components import Calendar_date, Calendar_month # Automatic creation of custom FT components\n    \n    \n    # Create navigation icons\n    prev_icon = Svg(\n        Path(\n            fill=\"currentColor\",\n            d=\"M15.75 19.5 8.25 12l7.5-7.5\"\n        ),\n        aria_label=\"Previous\",\n        cls=combine_classes(fill.current, size_util._4),\n        slot=\"previous\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    next_icon = Svg(\n        Path(\n            fill=\"currentColor\",\n            d=\"m8.25 4.5 7.5 7.5-7.5 7.5\"\n        ),\n        aria_label=\"Next\",\n        cls=combine_classes(fill.current, size_util._4),\n        slot=\"next\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create Cally calendar\n    calendar = Calendar_date(\n        prev_icon,\n        next_icon,\n        Calendar_month(),\n        cls=combine_classes(cally, bg_dui.base_100, border(), border_dui.base_300, shadow.lg, border_radius.box)\n    )\n    \n    # Add script to import Cally web component\n    script = Script(\n        type=\"module\",\n        src=\"https://unpkg.com/cally\"\n    )\n    \n    # Verify structure\n    assert calendar.tag == \"calendar-date\"\n    assert \"cally\" in calendar.attrs['class']\n    assert \"bg-base-100\" in calendar.attrs['class']\n    assert \"border\" in calendar.attrs['class']\n    assert \"border-base-300\" in calendar.attrs['class']\n    assert \"shadow-lg\" in calendar.attrs['class']\n    assert \"rounded-box\" in calendar.attrs['class']\n    \n    # Check children\n    assert len(calendar.children) == 3  # prev icon, next icon, calendar-month\n    \n    # Check prev icon\n    assert calendar.children[0].tag == \"svg\"\n    assert calendar.children[0].attrs['aria-label'] == \"Previous\"\n    assert calendar.children[0].attrs['slot'] == \"previous\"\n    assert \"fill-current\" in calendar.children[0].attrs['class']\n    assert \"size-4\" in calendar.children[0].attrs['class']\n    \n    # Check next icon\n    assert calendar.children[1].tag == \"svg\"\n    assert calendar.children[1].attrs['aria-label'] == \"Next\"\n    assert calendar.children[1].attrs['slot'] == \"next\"\n    \n    # Check calendar-month\n    assert calendar.children[2].tag == \"calendar-month\"\n    \n    # Return the calendar with script\n    return Div(\n        script,\n        calendar\n    )\n\n# Run the tests\ntest_calendar_cally_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;script type=\"module\" src=\"https://unpkg.com/cally\"&gt;&lt;/script&gt;&lt;calendar-date class=\"cally bg-base-100 border border-base-300 shadow-lg rounded-box\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"Previous\" slot=\"previous\" class=\"fill-current size-4\"&gt;&lt;path d=\"M15.75 19.5 8.25 12l7.5-7.5\" fill=\"currentColor\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"Next\" slot=\"next\" class=\"fill-current size-4\"&gt;&lt;path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\" fill=\"currentColor\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;calendar-month&gt;&lt;/calendar-month&gt;&lt;/calendar-date&gt;&lt;/div&gt;\n\n\n\ntest_func = test_calendar_cally_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_cally_date_picker_fasthtml_examples\n\n test_cally_date_picker_fasthtml_examples ()\n\nTest Cally date picker example from daisyUI v5 documentation.\n\n\nExported source\ndef test_cally_date_picker_fasthtml_examples():\n    \"\"\"Test Cally date picker example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div, Script\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input, text_input_styles\n    from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    \n    from fasthtml.components import Calendar_date, Calendar_month  # Automatic creation of custom FT components\n    \n    # Create navigation icons\n    prev_icon = Svg(\n        Path(\n            d=\"M15.75 19.5 8.25 12l7.5-7.5\"\n        ),\n        aria_label=\"Previous\",\n        cls=combine_classes(fill.current, size_util._4),\n        slot=\"previous\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    next_icon = Svg(\n        Path(\n            d=\"m8.25 4.5 7.5 7.5-7.5 7.5\"\n        ),\n        aria_label=\"Next\",\n        cls=combine_classes(fill.current, size_util._4),\n        slot=\"next\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create date picker button\n    picker_button = Button(\n        \"Pick a date\",\n        popovertarget=\"cally-popover1\",\n        cls=combine_classes(text_input),\n        id=\"cally1\",\n        style=\"anchor-name:--cally1\"\n    )\n    \n    # Create popover with calendar\n    popover = Div(\n        Calendar_date(\n            prev_icon,\n            next_icon,\n            Calendar_month(),\n            cls=str(cally),\n            onchange=\"{document.getElementById('cally1').innerText = this.value}\"\n        ),\n        popover=True,\n        id=\"cally-popover1\",\n        cls=combine_classes(dropdown, bg_dui.base_100, border_radius.box, shadow.lg),\n        style=\"position-anchor:--cally1\"\n    )\n    \n    # Add script to import Cally web component\n    script = Script(\n        type=\"module\",\n        src=\"https://unpkg.com/cally\"\n    )\n    \n    # Verify button structure\n    assert picker_button.tag == \"button\"\n    assert picker_button.attrs['popovertarget'] == \"cally-popover1\"\n    assert \"input\" in picker_button.attrs['class']\n    assert picker_button.attrs['id'] == \"cally1\"\n    assert picker_button.attrs['style'] == \"anchor-name:--cally1\"\n    assert picker_button.children[0] == \"Pick a date\"\n    \n    # Verify popover structure\n    assert popover.tag == \"div\"\n    assert popover.attrs['popover'] == True\n    assert popover.attrs['id'] == \"cally-popover1\"\n    assert \"dropdown\" in popover.attrs['class']\n    assert \"bg-base-100\" in popover.attrs['class']\n    assert \"rounded-box\" in popover.attrs['class']\n    assert \"shadow-lg\" in popover.attrs['class']\n    assert popover.attrs['style'] == \"position-anchor:--cally1\"\n    \n    # Verify calendar-date inside popover\n    calendar_date = popover.children[0]\n    assert calendar_date.tag == \"calendar-date\"\n    assert calendar_date.attrs['class'] == \"cally\"\n    assert calendar_date.attrs['onchange'] == \"{document.getElementById('cally1').innerText = this.value}\"\n    assert len(calendar_date.children) == 3  # prev icon, next icon, calendar-month\n    \n    # Return the complete date picker setup\n    return Div(\n        script,\n        picker_button,\n        popover\n    )\n\n# Run the tests\ntest_cally_date_picker_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;script type=\"module\" src=\"https://unpkg.com/cally\"&gt;&lt;/script&gt;&lt;button popovertarget=\"cally-popover1\" id=\"cally1\" class=\"input\" style=\"anchor-name:--cally1\" name=\"cally1\"&gt;Pick a date&lt;/button&gt;  &lt;div popover id=\"cally-popover1\" class=\"dropdown bg-base-100 rounded-box shadow-lg\" style=\"position-anchor:--cally1\"&gt;\n&lt;calendar-date onchange=\"{document.getElementById('cally1').innerText = this.value}\" class=\"cally\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"Previous\" slot=\"previous\" class=\"fill-current size-4\"&gt;&lt;path d=\"M15.75 19.5 8.25 12l7.5-7.5\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" aria-label=\"Next\" slot=\"next\" class=\"fill-current size-4\"&gt;&lt;path d=\"m8.25 4.5 7.5 7.5-7.5 7.5\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;calendar-month&gt;&lt;/calendar-month&gt;&lt;/calendar-date&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_cally_date_picker_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_pikaday_calendar_fasthtml_examples\n\n test_pikaday_calendar_fasthtml_examples ()\n\nTest Pikaday calendar CDN example from daisyUI v5 documentation.\n\n\nExported source\ndef test_pikaday_calendar_fasthtml_examples():\n    \"\"\"Test Pikaday calendar CDN example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Script, Div\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Create input field for Pikaday\n    date_input = Input(\n        type=\"text\",\n        cls=combine_classes(text_input, pika_single),\n        id=\"myDatepicker\"\n    )\n    \n    # Create script to load Pikaday from CDN\n    pikaday_cdn = Script(\n        src=\"https://cdn.jsdelivr.net/npm/pikaday/pikaday.js\"\n    )\n    \n    # Create script to initialize Pikaday\n    pikaday_init = Script(\n        \"var picker = new Pikaday({ field: document.getElementById('myDatepicker') });\"\n    )\n    \n    # Verify input structure\n    assert date_input.tag == \"input\"\n    assert date_input.attrs['type'] == \"text\"\n    assert \"input\" in date_input.attrs['class']\n    assert \"pika-single\" in date_input.attrs['class']\n    assert date_input.attrs['id'] == \"myDatepicker\"\n    \n    # Verify CDN script\n    assert pikaday_cdn.tag == \"script\"\n    assert pikaday_cdn.attrs['src'] == \"https://cdn.jsdelivr.net/npm/pikaday/pikaday.js\"\n    \n    # Verify initialization script\n    assert pikaday_init.tag == \"script\"\n    assert pikaday_init.children[0] == \"var picker = new Pikaday({ field: document.getElementById('myDatepicker') });\"\n    \n    # Return the complete Pikaday setup\n    return Div(\n        pikaday_cdn,\n        date_input,\n        pikaday_init\n    )\n\n# Run the tests\ntest_pikaday_calendar_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/pikaday/pikaday.js\"&gt;&lt;/script&gt;  &lt;input type=\"text\" id=\"myDatepicker\" class=\"input pika-single\" name=\"myDatepicker\"&gt;\n&lt;script&gt;var picker = new Pikaday({ field: document.getElementById('myDatepicker') });&lt;/script&gt;&lt;/div&gt;\n\n\n\ntest_func = test_pikaday_calendar_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "calendar"
    ]
  },
  {
    "objectID": "builders/colors.html",
    "href": "builders/colors.html",
    "title": "colors",
    "section": "",
    "text": "Define enums for the semantic color names used by daisyUI:\n\nsource\n\n\n\n SemanticColorBrand (value, names=None, module=None, qualname=None,\n                     type=None, start=1, boundary=None)\n\ndaisyUI semantic brand color names.\n\nsource\n\n\n\n\n SemanticColorStatus (value, names=None, module=None, qualname=None,\n                      type=None, start=1, boundary=None)\n\ndaisyUI semantic status color names.\n\nsource\n\n\n\n\n SemanticColorBase (value, names=None, module=None, qualname=None,\n                    type=None, start=1, boundary=None)\n\ndaisyUI semantic base color names.\n\nsource\n\n\n\n\n SemanticColorContent (value, names=None, module=None, qualname=None,\n                       type=None, start=1, boundary=None)\n\ndaisyUI semantic content color names.\n\nsource\n\n\n\n\n SemanticColor (value, names=None, module=None, qualname=None, type=None,\n                start=1, boundary=None)\n\ndaisyUI semantic color names.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#semantic-color-enums",
    "href": "builders/colors.html#semantic-color-enums",
    "title": "colors",
    "section": "",
    "text": "Define enums for the semantic color names used by daisyUI:\n\nsource\n\n\n\n SemanticColorBrand (value, names=None, module=None, qualname=None,\n                     type=None, start=1, boundary=None)\n\ndaisyUI semantic brand color names.\n\nsource\n\n\n\n\n SemanticColorStatus (value, names=None, module=None, qualname=None,\n                      type=None, start=1, boundary=None)\n\ndaisyUI semantic status color names.\n\nsource\n\n\n\n\n SemanticColorBase (value, names=None, module=None, qualname=None,\n                    type=None, start=1, boundary=None)\n\ndaisyUI semantic base color names.\n\nsource\n\n\n\n\n SemanticColorContent (value, names=None, module=None, qualname=None,\n                       type=None, start=1, boundary=None)\n\ndaisyUI semantic content color names.\n\nsource\n\n\n\n\n SemanticColor (value, names=None, module=None, qualname=None, type=None,\n                start=1, boundary=None)\n\ndaisyUI semantic color names.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#color-value-types",
    "href": "builders/colors.html#color-value-types",
    "title": "colors",
    "section": "Color Value Types",
    "text": "Color Value Types\nDefine types for semantic color values:",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#color-validation",
    "href": "builders/colors.html#color-validation",
    "title": "colors",
    "section": "Color Validation",
    "text": "Color Validation\nFunctions to validate semantic color values:\n\nsource\n\nis_valid_semantic_color\n\n is_valid_semantic_color (value:str)\n\nCheck if a value is a valid daisyUI semantic color.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nvalue\nstr\nThe value to check\n\n\nReturns\nbool\nTrue if value is a valid daisyUI semantic color",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#colored-utility-class-for-daisyui",
    "href": "builders/colors.html#colored-utility-class-for-daisyui",
    "title": "colors",
    "section": "Colored Utility Class for daisyUI",
    "text": "Colored Utility Class for daisyUI\nA utility class that supports daisyUI semantic colors with opacity:\n\nsource\n\nColoredUtilityDaisyUI\n\n ColoredUtilityDaisyUI (prefix:str,\n                        color:Union[__main__.SemanticColor,str,NoneType]=N\n                        one, opacity:Union[int,str,NoneType]=None)\n\nUtility class with daisyUI semantic color and opacity support.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe utility prefix (e.g., ‘bg’, ‘text’, ‘border’)\n\n\ncolor\nUnion\nNone\nThe semantic color value\n\n\nopacity\nUnion\nNone\nOptional opacity value (0-100 or arbitrary)",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#colored-factory-for-daisyui",
    "href": "builders/colors.html#colored-factory-for-daisyui",
    "title": "colors",
    "section": "Colored Factory for daisyUI",
    "text": "Colored Factory for daisyUI\nFactory for creating semantic color-based utilities with convenient API:\n\nsource\n\nColoredFactoryDaisyUI\n\n ColoredFactoryDaisyUI (prefix:str, doc:Optional[str]=None)\n\nFactory for creating daisyUI semantic color-based utilities.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nprefix\nstr\n\nThe utility prefix (e.g., ‘bg’, ‘text’, ‘border’)\n\n\ndoc\nOptional\nNone\nOptional documentation string",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#examples",
    "href": "builders/colors.html#examples",
    "title": "colors",
    "section": "Examples",
    "text": "Examples\nTest the semantic color system with various use cases:\n\n# Test basic semantic color usage\nbg_dui = ColoredFactoryDaisyUI(\"bg\", \"Background color utilities for daisyUI semantic colors\")\n\n# Test semantic colors\nassert str(bg_dui.primary) == \"bg-primary\"\nassert str(bg_dui.secondary) == \"bg-secondary\"\nassert str(bg_dui.accent) == \"bg-accent\"\nassert str(bg_dui.neutral) == \"bg-neutral\"\n\n\n# Test base colors\nassert str(bg_dui.base_100) == \"bg-base-100\"\nassert str(bg_dui.base_200) == \"bg-base-200\"\nassert str(bg_dui.base_300) == \"bg-base-300\"\nassert str(bg_dui.base_content) == \"bg-base-content\"\n\n\n# Test status colors\nassert str(bg_dui.info) == \"bg-info\"\nassert str(bg_dui.success) == \"bg-success\"\nassert str(bg_dui.warning) == \"bg-warning\"\nassert str(bg_dui.error) == \"bg-error\"\n\n\n# Test content colors\nassert str(bg_dui.primary_content) == \"bg-primary-content\"\nassert str(bg_dui.secondary_content) == \"bg-secondary-content\"\nassert str(bg_dui.accent_content) == \"bg-accent-content\"\nassert str(bg_dui.neutral_content) == \"bg-neutral-content\"\n\n\nSemantic Color Opacity\nControl the opacity of semantic colors:\n\n# Test opacity modifiers\nassert str(bg_dui.primary.opacity(50)) == \"bg-primary/50\"\nassert str(bg_dui.secondary.opacity(75)) == \"bg-secondary/75\"\nassert str(bg_dui.base_100.opacity(10)) == \"bg-base-100/10\"\nassert str(bg_dui.base_content.opacity(70)) == \"bg-base-content/70\"\n\n# Test arbitrary opacity values\nassert str(bg_dui.success.opacity(\"[0.87]\")) == \"bg-success/[0.87]\"\nassert str(bg_dui.error.opacity(\"(--my-opacity)\")) == \"bg-error/(--my-opacity)\"\n\n\n\nArbitrary Color Values\nSupport for custom colors alongside semantic colors:\n\n# Test arbitrary color values\nassert str(bg_dui(\"#ff0000\")) == \"bg-[#ff0000]\"\nassert str(bg_dui(\"rgb(255, 0, 0)\")) == \"bg-[rgb(255, 0, 0)]\"\nassert str(bg_dui(\"hsl(0, 100%, 50%)\")) == \"bg-[hsl(0, 100%, 50%)]\"\n\n# Test CSS custom properties\nassert str(bg_dui(\"--custom-bg\")) == \"bg-(--custom-bg)\"\nassert str(bg_dui(\"--theme-primary\")) == \"bg-(--theme-primary)\"\n\n# Test with opacity\nassert str(bg_dui(\"--custom-bg\", opacity=50)) == \"bg-(--custom-bg)/50\"\n\n\n\nFactory Call Syntax\nTest using the factory with call syntax:\n\n# Test factory call syntax\nassert str(bg_dui(\"primary\")) == \"bg-primary\"\nassert str(bg_dui(\"secondary\", opacity=75)) == \"bg-secondary/75\"\nassert str(bg_dui(SemanticColor.ACCENT)) == \"bg-accent\"\nassert str(bg_dui(SemanticColor.BASE_100, opacity=50)) == \"bg-base-100/50\"",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#test-functions",
    "href": "builders/colors.html#test-functions",
    "title": "colors",
    "section": "Test Functions",
    "text": "Test Functions\nComprehensive test functions following the project’s naming convention:\n\nsource\n\ntest_colors_semantic_enum_examples\n\n test_colors_semantic_enum_examples ()\n\nTest semantic color enum.\n\nsource\n\n\ntest_colors_validation_examples\n\n test_colors_validation_examples ()\n\nTest semantic color validation functions.\n\nsource\n\n\ntest_colors_factory_examples\n\n test_colors_factory_examples ()\n\nTest ColoredFactoryDaisyUI with various semantic color specifications.\n\nsource\n\n\ntest_colors_opacity_examples\n\n test_colors_opacity_examples ()\n\nTest opacity modifiers with semantic color utilities.\n\nsource\n\n\ntest_colors_arbitrary_examples\n\n test_colors_arbitrary_examples ()\n\nTest arbitrary color values and custom properties.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#practical-examples",
    "href": "builders/colors.html#practical-examples",
    "title": "colors",
    "section": "Practical Examples",
    "text": "Practical Examples\nTest with multiple utility prefixes to show the semantic color system is reusable:\n\nsource\n\ntest_colors_multiple_utilities_examples\n\n test_colors_multiple_utilities_examples ()\n\nTest semantic color system with multiple utility types.\n\nsource\n\n\ntest_colors_practical_usage_examples\n\n test_colors_practical_usage_examples ()\n\nTest practical usage patterns with FastHTML components.\n\nsource\n\n\ntest_colors_modifier_examples\n\n test_colors_modifier_examples ()\n\nTest semantic color utilities with modifiers for conditional styling.",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/colors.html#helper-functions",
    "href": "builders/colors.html#helper-functions",
    "title": "colors",
    "section": "Helper Functions",
    "text": "Helper Functions\nUtility functions for working with semantic colors:\n\nsource\n\nget_all_semantic_colors\n\n get_all_semantic_colors ()\n\nGet list of all daisyUI semantic color names.\n\nsource\n\n\nget_brand_colors\n\n get_brand_colors ()\n\nGet list of brand semantic colors.\n\nsource\n\n\nget_base_colors\n\n get_base_colors ()\n\nGet list of base semantic colors.\n\nsource\n\n\nget_status_colors\n\n get_status_colors ()\n\nGet list of status semantic colors.\n\n# Test helper functions\ncolors = get_all_semantic_colors()\nassert len(colors) == 20\nassert \"primary\" in colors\nassert \"base-100\" in colors\nassert \"error-content\" in colors\n\nbrand = get_brand_colors()\nassert len(brand) == 4\nassert brand == [\"primary\", \"secondary\", \"accent\", \"neutral\"]\n\nbase = get_base_colors()\nassert len(base) == 4\nassert base == [\"base-100\", \"base-200\", \"base-300\", \"base-content\"]\n\nstatus = get_status_colors()\nassert len(status) == 4\nassert status == [\"info\", \"success\", \"warning\", \"error\"]\n\nprint(\"✅ All semantic color helper functions work correctly!\")\n\n✅ All semantic color helper functions work correctly!",
    "crumbs": [
      "builders",
      "colors"
    ]
  },
  {
    "objectID": "builders/sizes.html",
    "href": "builders/sizes.html",
    "title": "sizes",
    "section": "",
    "text": "source\n\nDaisyUINamedSize\n\n DaisyUINamedSize (value, names=None, module=None, qualname=None,\n                   type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\nfrom cjm_fasthtml_tailwind.builders.scales import enums_to_simple_factory\n\nbtn_sizes = enums_to_simple_factory(\"btn\", [DaisyUINamedSize], \"Button size variants from extra small to extra large\")\n\nassert str(btn_sizes.xs) == \"btn-xs\"\nassert str(btn_sizes.sm) == \"btn-sm\"\nassert str(btn_sizes.md) == \"btn-md\"\nassert str(btn_sizes.lg) == \"btn-lg\"\nassert str(btn_sizes.xl) == \"btn-xl\"\n\nassert str(btn_sizes.md.hover) == \"hover:btn-md\"",
    "crumbs": [
      "builders",
      "sizes"
    ]
  },
  {
    "objectID": "builders/styles.html",
    "href": "builders/styles.html",
    "title": "styles",
    "section": "",
    "text": "Define enum for the style names used by daisyUI:\n\nsource\n\n\n\n OutlineStyle (value, names=None, module=None, qualname=None, type=None,\n               start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n DashStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n SoftStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n GhostStyle (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n BorderStyle (value, names=None, module=None, qualname=None, type=None,\n              start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n HoverStyle (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\ndaisyUI style names.\n\nfrom cjm_fasthtml_tailwind.builders.scales import enums_to_simple_factory\nbadge_styles = enums_to_simple_factory(\"badge\", [OutlineStyle, DashStyle, SoftStyle, GhostStyle])\n\nassert str(badge_styles.outline) == \"badge-outline\"\nassert str(badge_styles.dash) == \"badge-dash\"\nassert str(badge_styles.soft) == \"badge-soft\"\nassert str(badge_styles.ghost) == \"badge-ghost\"\n\nassert str(badge_styles.ghost.hover) == \"hover:badge-ghost\"",
    "crumbs": [
      "builders",
      "styles"
    ]
  },
  {
    "objectID": "builders/styles.html#named-style-enum",
    "href": "builders/styles.html#named-style-enum",
    "title": "styles",
    "section": "",
    "text": "Define enum for the style names used by daisyUI:\n\nsource\n\n\n\n OutlineStyle (value, names=None, module=None, qualname=None, type=None,\n               start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n DashStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n SoftStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n GhostStyle (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n BorderStyle (value, names=None, module=None, qualname=None, type=None,\n              start=1, boundary=None)\n\ndaisyUI style names.\n\nsource\n\n\n\n\n HoverStyle (value, names=None, module=None, qualname=None, type=None,\n             start=1, boundary=None)\n\ndaisyUI style names.\n\nfrom cjm_fasthtml_tailwind.builders.scales import enums_to_simple_factory\nbadge_styles = enums_to_simple_factory(\"badge\", [OutlineStyle, DashStyle, SoftStyle, GhostStyle])\n\nassert str(badge_styles.outline) == \"badge-outline\"\nassert str(badge_styles.dash) == \"badge-dash\"\nassert str(badge_styles.soft) == \"badge-soft\"\nassert str(badge_styles.ghost) == \"badge-ghost\"\n\nassert str(badge_styles.ghost.hover) == \"hover:badge-ghost\"",
    "crumbs": [
      "builders",
      "styles"
    ]
  },
  {
    "objectID": "components/data_input/radio.html",
    "href": "components/data_input/radio.html",
    "title": "radio",
    "section": "",
    "text": "Base Radio\n\n\nExported source\nradio = SingleValueFactory(\"radio\", \"Base radio button component for radio input\") # Base radio component\n\n\n\n\nRadio Colors\n\n\nExported source\nradio_colors = enums_to_simple_factory(radio, [SemanticColorBrand, SemanticColorStatus], \"Radio color variants using daisyUI semantic colors\") # Radio color variants\n\n\n\n\nRadio Sizes\n\n\nExported source\nradio_sizes = enums_to_simple_factory(radio, [DaisyUINamedSize], \"Radio size variants from extra small to extra large\") # Radio size variants\n\n\n\n\nRadio Test Examples\n\nsource\n\n\ntest_radio_basic_examples\n\n test_radio_basic_examples ()\n\nTest basic radio utilities.\n\n\nExported source\ndef test_radio_basic_examples():\n    \"\"\"Test basic radio utilities.\"\"\"\n    # Basic radio\n    assert str(radio) == \"radio\"\n    \n    # Test with modifiers\n    assert str(radio.hover) == \"hover:radio\"\n    assert str(radio.md) == \"md:radio\"\n    assert str(radio.dark) == \"dark:radio\"\n\n# Run the tests\ntest_radio_basic_examples()\n\n\n\nsource\n\n\ntest_radio_colors_examples\n\n test_radio_colors_examples ()\n\nTest radio color variants.\n\n\nExported source\ndef test_radio_colors_examples():\n    \"\"\"Test radio color variants.\"\"\"\n    # All color variants\n    assert str(radio_colors.neutral) == \"radio-neutral\"\n    assert str(radio_colors.primary) == \"radio-primary\"\n    assert str(radio_colors.secondary) == \"radio-secondary\"\n    assert str(radio_colors.accent) == \"radio-accent\"\n    assert str(radio_colors.info) == \"radio-info\"\n    assert str(radio_colors.success) == \"radio-success\"\n    assert str(radio_colors.warning) == \"radio-warning\"\n    assert str(radio_colors.error) == \"radio-error\"\n    \n    # With modifiers\n    assert str(radio_colors.primary.hover) == \"hover:radio-primary\"\n    assert str(radio_colors.success.focus) == \"focus:radio-success\"\n\n# Run the tests\ntest_radio_colors_examples()\n\n\n\nsource\n\n\ntest_radio_sizes_examples\n\n test_radio_sizes_examples ()\n\nTest radio size variants.\n\n\nExported source\ndef test_radio_sizes_examples():\n    \"\"\"Test radio size variants.\"\"\"\n    assert str(radio_sizes.xs) == \"radio-xs\"\n    assert str(radio_sizes.sm) == \"radio-sm\"\n    assert str(radio_sizes.md) == \"radio-md\"\n    assert str(radio_sizes.lg) == \"radio-lg\"\n    assert str(radio_sizes.xl) == \"radio-xl\"\n    \n    # With responsive modifiers\n    assert str(radio_sizes.xs.sm) == \"sm:radio-xs\"\n    assert str(radio_sizes.lg.md) == \"md:radio-lg\"\n\n# Run the tests\ntest_radio_sizes_examples()\n\n\n\nsource\n\n\ntest_radio_basic_fasthtml_examples\n\n test_radio_basic_fasthtml_examples ()\n\nTest basic radio button examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_radio_basic_fasthtml_examples():\n    \"\"\"Test basic radio button examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Basic radio buttons\n    radio1_checked = Input(\n        type=\"radio\",\n        name=\"radio-1\",\n        cls=str(radio),\n        checked=\"checked\"\n    )\n    assert radio1_checked.tag == \"input\"\n    assert radio1_checked.attrs['type'] == \"radio\"\n    assert radio1_checked.attrs['name'] == \"radio-1\"\n    assert radio1_checked.attrs['class'] == \"radio\"\n    assert radio1_checked.attrs['checked'] == \"checked\"\n    \n    radio1_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-1\",\n        cls=str(radio)\n    )\n    assert radio1_unchecked.tag == \"input\"\n    assert radio1_unchecked.attrs['type'] == \"radio\"\n    assert radio1_unchecked.attrs['name'] == \"radio-1\"\n    assert radio1_unchecked.attrs['class'] == \"radio\"\n    assert 'checked' not in radio1_unchecked.attrs\n    \n    # Return both radio buttons in a Div\n    return Div(\n        radio1_checked,\n        radio1_unchecked\n    )\n\n# Run the tests\ntest_radio_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"radio-1\" checked=\"checked\" class=\"radio\"&gt;\n  &lt;input type=\"radio\" name=\"radio-1\" class=\"radio\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radio_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_radio_sizes_fasthtml_examples\n\n test_radio_sizes_fasthtml_examples ()\n\nTest radio button size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_radio_sizes_fasthtml_examples():\n    \"\"\"Test radio button size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Radio sizes\n    xs_radio = Input(\n        type=\"radio\",\n        name=\"radio-2\",\n        cls=combine_classes(radio, radio_sizes.xs),\n        checked=\"checked\"\n    )\n    assert xs_radio.tag == \"input\"\n    assert \"radio\" in xs_radio.attrs['class']\n    assert \"radio-xs\" in xs_radio.attrs['class']\n    assert xs_radio.attrs['checked'] == \"checked\"\n    \n    sm_radio = Input(\n        type=\"radio\",\n        name=\"radio-2\",\n        cls=combine_classes(radio, radio_sizes.sm),\n        checked=\"checked\"\n    )\n    assert \"radio\" in sm_radio.attrs['class']\n    assert \"radio-sm\" in sm_radio.attrs['class']\n    \n    md_radio = Input(\n        type=\"radio\",\n        name=\"radio-2\",\n        cls=combine_classes(radio, radio_sizes.md),\n        checked=\"checked\"\n    )\n    assert \"radio\" in md_radio.attrs['class']\n    assert \"radio-md\" in md_radio.attrs['class']\n    \n    lg_radio = Input(\n        type=\"radio\",\n        name=\"radio-2\",\n        cls=combine_classes(radio, radio_sizes.lg),\n        checked=\"checked\"\n    )\n    assert \"radio\" in lg_radio.attrs['class']\n    assert \"radio-lg\" in lg_radio.attrs['class']\n    \n    xl_radio = Input(\n        type=\"radio\",\n        name=\"radio-2\",\n        cls=combine_classes(radio, radio_sizes.xl),\n        checked=\"checked\"\n    )\n    assert \"radio\" in xl_radio.attrs['class']\n    assert \"radio-xl\" in xl_radio.attrs['class']\n    \n    # Return all size variations in a Div\n    return Div(\n        xs_radio,\n        sm_radio,\n        md_radio,\n        lg_radio,\n        xl_radio\n    )\n\n# Run the tests\ntest_radio_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"radio-2\" checked=\"checked\" class=\"radio radio-xs\"&gt;\n  &lt;input type=\"radio\" name=\"radio-2\" checked=\"checked\" class=\"radio radio-sm\"&gt;\n  &lt;input type=\"radio\" name=\"radio-2\" checked=\"checked\" class=\"radio radio-md\"&gt;\n  &lt;input type=\"radio\" name=\"radio-2\" checked=\"checked\" class=\"radio radio-lg\"&gt;\n  &lt;input type=\"radio\" name=\"radio-2\" checked=\"checked\" class=\"radio radio-xl\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radio_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_radio_colors_fasthtml_examples\n\n test_radio_colors_fasthtml_examples ()\n\nTest radio button color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_radio_colors_fasthtml_examples():\n    \"\"\"Test radio button color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Neutral color\n    neutral_checked = Input(\n        type=\"radio\",\n        name=\"radio-3\",\n        cls=combine_classes(radio, radio_colors.neutral),\n        checked=\"checked\"\n    )\n    assert \"radio\" in neutral_checked.attrs['class']\n    assert \"radio-neutral\" in neutral_checked.attrs['class']\n    assert neutral_checked.attrs['name'] == \"radio-3\"\n    assert neutral_checked.attrs['checked'] == \"checked\"\n    \n    neutral_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-3\",\n        cls=combine_classes(radio, radio_colors.neutral)\n    )\n    assert \"radio-neutral\" in neutral_unchecked.attrs['class']\n    assert 'checked' not in neutral_unchecked.attrs\n    \n    # Primary color\n    primary_checked = Input(\n        type=\"radio\",\n        name=\"radio-4\",\n        cls=combine_classes(radio, radio_colors.primary),\n        checked=\"checked\"\n    )\n    assert \"radio-primary\" in primary_checked.attrs['class']\n    assert primary_checked.attrs['name'] == \"radio-4\"\n    \n    primary_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-4\",\n        cls=combine_classes(radio, radio_colors.primary)\n    )\n    assert \"radio-primary\" in primary_unchecked.attrs['class']\n    \n    # Secondary color\n    secondary_checked = Input(\n        type=\"radio\",\n        name=\"radio-5\",\n        cls=combine_classes(radio, radio_colors.secondary),\n        checked=\"checked\"\n    )\n    assert \"radio-secondary\" in secondary_checked.attrs['class']\n    assert secondary_checked.attrs['name'] == \"radio-5\"\n    \n    secondary_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-5\",\n        cls=combine_classes(radio, radio_colors.secondary)\n    )\n    assert \"radio-secondary\" in secondary_unchecked.attrs['class']\n    \n    # Accent color\n    accent_checked = Input(\n        type=\"radio\",\n        name=\"radio-6\",\n        cls=combine_classes(radio, radio_colors.accent),\n        checked=\"checked\"\n    )\n    assert \"radio-accent\" in accent_checked.attrs['class']\n    assert accent_checked.attrs['name'] == \"radio-6\"\n    \n    accent_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-6\",\n        cls=combine_classes(radio, radio_colors.accent)\n    )\n    assert \"radio-accent\" in accent_unchecked.attrs['class']\n    \n    # Success color\n    success_checked = Input(\n        type=\"radio\",\n        name=\"radio-7\",\n        cls=combine_classes(radio, radio_colors.success),\n        checked=\"checked\"\n    )\n    assert \"radio-success\" in success_checked.attrs['class']\n    assert success_checked.attrs['name'] == \"radio-7\"\n    \n    success_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-7\",\n        cls=combine_classes(radio, radio_colors.success)\n    )\n    assert \"radio-success\" in success_unchecked.attrs['class']\n    \n    # Warning color\n    warning_checked = Input(\n        type=\"radio\",\n        name=\"radio-8\",\n        cls=combine_classes(radio, radio_colors.warning),\n        checked=\"checked\"\n    )\n    assert \"radio-warning\" in warning_checked.attrs['class']\n    assert warning_checked.attrs['name'] == \"radio-8\"\n    \n    warning_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-8\",\n        cls=combine_classes(radio, radio_colors.warning)\n    )\n    assert \"radio-warning\" in warning_unchecked.attrs['class']\n    \n    # Info color\n    info_checked = Input(\n        type=\"radio\",\n        name=\"radio-9\",\n        cls=combine_classes(radio, radio_colors.info),\n        checked=\"checked\"\n    )\n    assert \"radio-info\" in info_checked.attrs['class']\n    assert info_checked.attrs['name'] == \"radio-9\"\n    \n    info_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-9\",\n        cls=combine_classes(radio, radio_colors.info)\n    )\n    assert \"radio-info\" in info_unchecked.attrs['class']\n    \n    # Error color\n    error_checked = Input(\n        type=\"radio\",\n        name=\"radio-10\",\n        cls=combine_classes(radio, radio_colors.error),\n        checked=\"checked\"\n    )\n    assert \"radio-error\" in error_checked.attrs['class']\n    assert error_checked.attrs['name'] == \"radio-10\"\n    \n    error_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-10\",\n        cls=combine_classes(radio, radio_colors.error)\n    )\n    assert \"radio-error\" in error_unchecked.attrs['class']\n    \n    # Return all color variations in grouped Divs\n    return Div(\n        Div(neutral_checked, neutral_unchecked),\n        Div(primary_checked, primary_unchecked),\n        Div(secondary_checked, secondary_unchecked),\n        Div(accent_checked, accent_unchecked),\n        Div(success_checked, success_unchecked),\n        Div(warning_checked, warning_unchecked),\n        Div(info_checked, info_unchecked),\n        Div(error_checked, error_unchecked)\n    )\n\n# Run the tests\ntest_radio_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-3\" checked=\"checked\" class=\"radio radio-neutral\"&gt;\n    &lt;input type=\"radio\" name=\"radio-3\" class=\"radio radio-neutral\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-4\" checked=\"checked\" class=\"radio radio-primary\"&gt;\n    &lt;input type=\"radio\" name=\"radio-4\" class=\"radio radio-primary\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-5\" checked=\"checked\" class=\"radio radio-secondary\"&gt;\n    &lt;input type=\"radio\" name=\"radio-5\" class=\"radio radio-secondary\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-6\" checked=\"checked\" class=\"radio radio-accent\"&gt;\n    &lt;input type=\"radio\" name=\"radio-6\" class=\"radio radio-accent\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-7\" checked=\"checked\" class=\"radio radio-success\"&gt;\n    &lt;input type=\"radio\" name=\"radio-7\" class=\"radio radio-success\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-8\" checked=\"checked\" class=\"radio radio-warning\"&gt;\n    &lt;input type=\"radio\" name=\"radio-8\" class=\"radio radio-warning\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-9\" checked=\"checked\" class=\"radio radio-info\"&gt;\n    &lt;input type=\"radio\" name=\"radio-9\" class=\"radio radio-info\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"radio-10\" checked=\"checked\" class=\"radio radio-error\"&gt;\n    &lt;input type=\"radio\" name=\"radio-10\" class=\"radio radio-error\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radio_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_radio_disabled_fasthtml_examples\n\n test_radio_disabled_fasthtml_examples ()\n\nTest disabled radio button examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_radio_disabled_fasthtml_examples():\n    \"\"\"Test disabled radio button examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Disabled radio buttons\n    disabled_checked = Input(\n        type=\"radio\",\n        name=\"radio-11\",\n        cls=str(radio),\n        disabled=True,\n        checked=\"checked\"\n    )\n    assert disabled_checked.tag == \"input\"\n    assert disabled_checked.attrs['type'] == \"radio\"\n    assert disabled_checked.attrs['name'] == \"radio-11\"\n    assert disabled_checked.attrs['class'] == \"radio\"\n    assert disabled_checked.attrs['disabled'] == True\n    assert disabled_checked.attrs['checked'] == \"checked\"\n    \n    disabled_unchecked = Input(\n        type=\"radio\",\n        name=\"radio-11\",\n        cls=str(radio),\n        disabled=True\n    )\n    assert disabled_unchecked.tag == \"input\"\n    assert disabled_unchecked.attrs['type'] == \"radio\"\n    assert disabled_unchecked.attrs['name'] == \"radio-11\"\n    assert disabled_unchecked.attrs['class'] == \"radio\"\n    assert disabled_unchecked.attrs['disabled'] == True\n    assert 'checked' not in disabled_unchecked.attrs\n    \n    # Return both disabled radio buttons in a Div\n    return Div(\n        disabled_checked,\n        disabled_unchecked\n    )\n\n# Run the tests\ntest_radio_disabled_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"radio-11\" disabled checked=\"checked\" class=\"radio\"&gt;\n  &lt;input type=\"radio\" name=\"radio-11\" disabled class=\"radio\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radio_disabled_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_radio_custom_colors_fasthtml_examples\n\n test_radio_custom_colors_fasthtml_examples ()\n\nTest radio buttons with custom colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_radio_custom_colors_fasthtml_examples():\n    \"\"\"Test radio buttons with custom colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.borders import border_color\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Radio with custom red colors\n    red_radio = Input(\n        type=\"radio\",\n        name=\"radio-12\",\n        checked=\"checked\",\n        cls=combine_classes(\n            radio,\n            bg.red_100,\n            border_color.red_300,\n            bg.red_200.checked,\n            text_color.red_600.checked,\n            border_color.red_600.checked\n        )\n    )\n    assert red_radio.tag == \"input\"\n    assert red_radio.attrs['type'] == \"radio\"\n    assert red_radio.attrs['name'] == \"radio-12\"\n    assert red_radio.attrs['checked'] == \"checked\"\n    assert \"radio\" in red_radio.attrs['class']\n    assert \"bg-red-100\" in red_radio.attrs['class']\n    assert \"border-red-300\" in red_radio.attrs['class']\n    assert \"checked:bg-red-200\" in red_radio.attrs['class']\n    assert \"checked:text-red-600\" in red_radio.attrs['class']\n    assert \"checked:border-red-600\" in red_radio.attrs['class']\n    \n    # Radio with custom blue colors\n    blue_radio = Input(\n        type=\"radio\",\n        name=\"radio-12\",\n        checked=\"checked\",\n        cls=combine_classes(\n            radio,\n            bg.blue_100,\n            border_color.blue_300,\n            bg.blue_200.checked,\n            text_color.blue_600.checked,\n            border_color.blue_600.checked\n        )\n    )\n    assert blue_radio.tag == \"input\"\n    assert blue_radio.attrs['type'] == \"radio\"\n    assert blue_radio.attrs['name'] == \"radio-12\"\n    assert blue_radio.attrs['checked'] == \"checked\"\n    assert \"radio\" in blue_radio.attrs['class']\n    assert \"bg-blue-100\" in blue_radio.attrs['class']\n    assert \"border-blue-300\" in blue_radio.attrs['class']\n    assert \"checked:bg-blue-200\" in blue_radio.attrs['class']\n    assert \"checked:text-blue-600\" in blue_radio.attrs['class']\n    assert \"checked:border-blue-600\" in blue_radio.attrs['class']\n    \n    # Return both custom colored radio buttons in a Div\n    return Div(\n        red_radio,\n        blue_radio\n    )\n\n# Run the tests\ntest_radio_custom_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"radio-12\" checked=\"checked\" class=\"radio bg-red-100 border-red-300 checked:bg-red-200 checked:text-red-600 checked:border-red-600\"&gt;\n  &lt;input type=\"radio\" name=\"radio-12\" checked=\"checked\" class=\"radio bg-blue-100 border-blue-300 checked:bg-blue-200 checked:text-blue-600 checked:border-blue-600\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radio_custom_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "radio"
    ]
  },
  {
    "objectID": "components/data_input/text_input.html",
    "href": "components/data_input/text_input.html",
    "title": "text input",
    "section": "",
    "text": "Base Text Input\n\n\nExported source\ntext_input = SingleValueFactory(\"input\", \"Base text_input component for &lt;input type=\\\"text\\\"&gt; tag or a wrapper of &lt;input type=\\\"text\\\"&gt; tag\") # Base text_input component\n\n\n\n\nText Input Styles\n\n\nExported source\ntext_input_styles = enums_to_simple_factory(text_input, [GhostStyle]) # text_input style variants\n\n\n\n\nText Input Colors\n\n\nExported source\ntext_input_colors = enums_to_simple_factory(text_input, [SemanticColorBrand, SemanticColorStatus], \"text_input color variants using daisyUI semantic colors\") # text_input color variants\n\n\n\n\nText Input Sizes\n\n\nExported source\ntext_input_sizes = enums_to_simple_factory(text_input, [DaisyUINamedSize], \"text_input size variants from extra small to extra large\") # text_input size variants\n\n\n\n\nText Input Test Examples\n\nsource\n\n\ntest_text_input_basic_examples\n\n test_text_input_basic_examples ()\n\nTest basic text_input utilities.\n\n\nExported source\ndef test_text_input_basic_examples():\n    \"\"\"Test basic text_input utilities.\"\"\"\n    # Basic text_input\n    assert str(text_input) == \"input\"\n    \n    # Test with modifiers\n    assert str(text_input.hover) == \"hover:input\"\n    assert str(text_input.md) == \"md:input\"\n    assert str(text_input.dark) == \"dark:input\"\n\n# Run the tests\ntest_text_input_basic_examples()\n\n\n\nsource\n\n\ntest_text_input_styles_examples\n\n test_text_input_styles_examples ()\n\nTest text_input style variants.\n\n\nExported source\ndef test_text_input_styles_examples():\n    \"\"\"Test text_input style variants.\"\"\"\n    assert str(text_input_styles.ghost) == \"input-ghost\"\n\n# Run the tests\ntest_text_input_styles_examples()\n\n\n\nsource\n\n\ntest_text_input_colors_examples\n\n test_text_input_colors_examples ()\n\nTest text_input color variants.\n\n\nExported source\ndef test_text_input_colors_examples():\n    \"\"\"Test text_input color variants.\"\"\"\n    # All color variants\n    assert str(text_input_colors.neutral) == \"input-neutral\"\n    assert str(text_input_colors.primary) == \"input-primary\"\n    assert str(text_input_colors.secondary) == \"input-secondary\"\n    assert str(text_input_colors.accent) == \"input-accent\"\n    assert str(text_input_colors.info) == \"input-info\"\n    assert str(text_input_colors.success) == \"input-success\"\n    assert str(text_input_colors.warning) == \"input-warning\"\n    assert str(text_input_colors.error) == \"input-error\"\n    \n    # With modifiers\n    assert str(text_input_colors.primary.hover) == \"hover:input-primary\"\n    assert str(text_input_colors.success.focus) == \"focus:input-success\"\n\n# Run the tests\ntest_text_input_colors_examples()\n\n\n\nsource\n\n\ntest_text_input_sizes_examples\n\n test_text_input_sizes_examples ()\n\nTest text_input size variants.\n\n\nExported source\ndef test_text_input_sizes_examples():\n    \"\"\"Test text_input size variants.\"\"\"\n    assert str(text_input_sizes.xs) == \"input-xs\"\n    assert str(text_input_sizes.sm) == \"input-sm\"\n    assert str(text_input_sizes.md) == \"input-md\"\n    assert str(text_input_sizes.lg) == \"input-lg\"\n    assert str(text_input_sizes.xl) == \"input-xl\"\n    \n    # With responsive modifiers\n    assert str(text_input_sizes.xs.sm) == \"sm:input-xs\"\n    assert str(text_input_sizes.lg.md) == \"md:input-lg\"\n\n# Run the tests\ntest_text_input_sizes_examples()\n\n\n\nsource\n\n\ntest_text_input_basic_fasthtml_examples\n\n test_text_input_basic_fasthtml_examples ()\n\nTest basic text input examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_basic_fasthtml_examples():\n    \"\"\"Test basic text input examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Basic text input\n    basic_input = Input(\n        type=\"text\",\n        placeholder=\"Type here\",\n        cls=str(text_input)\n    )\n    assert basic_input.tag == \"input\"\n    assert basic_input.attrs['type'] == \"text\"\n    assert basic_input.attrs['placeholder'] == \"Type here\"\n    assert basic_input.attrs['class'] == \"input\"\n    \n    # Disabled input\n    disabled_input = Input(\n        type=\"text\",\n        placeholder=\"You can't touch this\",\n        cls=str(text_input),\n        disabled=True\n    )\n    assert disabled_input.tag == \"input\"\n    assert disabled_input.attrs['disabled'] == True\n    assert disabled_input.attrs['placeholder'] == \"You can't touch this\"\n    assert disabled_input.attrs['class'] == \"input\"\n    \n    # Return all elements in a Div\n    return Div(\n        basic_input,\n        disabled_input\n    )\n\n# Run the tests\ntest_text_input_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"text\" placeholder=\"Type here\" class=\"input\"&gt;\n  &lt;input type=\"text\" placeholder=\"You can't touch this\" disabled class=\"input\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_text_input_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_text_input_with_labels_fasthtml_examples\n\n test_text_input_with_labels_fasthtml_examples ()\n\nTest text input with labels from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_with_labels_fasthtml_examples():\n    \"\"\"Test text input with labels from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Input, Span, Kbd, Div\n    from fasthtml.svg import Svg, G, Circle, Path, Rect\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util, h\n    from cjm_fasthtml_tailwind.utilities.effects import opacity\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grow\n    from cjm_fasthtml_daisyui.components.data_display.kbd import kbd, kbd_sizes\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors, badge_sizes\n    \n    # Create search icon SVG\n    search_icon = Svg(\n        G(\n            Circle(cx=\"11\", cy=\"11\", r=\"8\"),\n            Path(d=\"m21 21-4.3-4.3\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2.5\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create file icon SVG\n    file_icon = Svg(\n        G(\n            Path(d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\"),\n            Path(d=\"M14 2v4a2 2 0 0 0 2 2h4\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2.5\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Search input with icon and keyboard shortcuts\n    search_input = Label(\n        search_icon,\n        Input(\n            type=\"search\",\n            cls=str(grow(1)),\n            placeholder=\"Search\"\n        ),\n        Kbd(\"⌘\", cls=combine_classes(kbd, kbd_sizes.sm)),\n        Kbd(\"K\", cls=combine_classes(kbd, kbd_sizes.sm)),\n        cls=str(text_input)\n    )\n    assert search_input.tag == \"label\"\n    assert search_input.attrs['class'] == \"input\"\n    assert search_input.children[0].tag == \"svg\"  # Search icon\n    assert search_input.children[1].tag == \"input\"\n    assert search_input.children[1].attrs['type'] == \"search\"\n    assert search_input.children[1].attrs['class'] == \"grow-1\"\n    assert search_input.children[2].tag == \"kbd\"\n    assert \"kbd\" in search_input.children[2].attrs['class']\n    assert \"kbd-sm\" in search_input.children[2].attrs['class']\n    assert search_input.children[2].children[0] == \"⌘\"\n    assert search_input.children[3].children[0] == \"K\"\n    \n    # File input with icon\n    file_input = Label(\n        file_icon,\n        Input(\n            type=\"text\",\n            cls=str(grow),\n            placeholder=\"index.php\"\n        ),\n        cls=str(text_input)\n    )\n    assert file_input.tag == \"label\"\n    assert file_input.attrs['class'] == \"input\"\n    assert file_input.children[0].tag == \"svg\"  # File icon\n    assert file_input.children[1].tag == \"input\"\n    assert file_input.children[1].attrs['placeholder'] == \"index.php\"\n    \n    # Path input with text label and badge\n    path_input = Label(\n        \"Path\",\n        Input(\n            type=\"text\",\n            cls=str(grow),\n            placeholder=\"src/app/\"\n        ),\n        Span(\"Optional\", cls=combine_classes(badge, badge_colors.neutral, badge_sizes.xs)),\n        cls=str(text_input)\n    )\n    assert path_input.tag == \"label\"\n    assert path_input.attrs['class'] == \"input\"\n    assert path_input.children[0] == \"Path\"\n    assert path_input.children[1].tag == \"input\"\n    assert path_input.children[1].attrs['placeholder'] == \"src/app/\"\n    assert path_input.children[2].tag == \"span\"\n    assert \"badge\" in path_input.children[2].attrs['class']\n    assert \"badge-neutral\" in path_input.children[2].attrs['class']\n    assert \"badge-xs\" in path_input.children[2].attrs['class']\n    assert path_input.children[2].children[0] == \"Optional\"\n    \n    # Return all elements in a Div\n    return Div(\n        search_input,\n        file_input,\n        path_input\n    )\n\n# Run the tests\ntest_text_input_with_labels_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"input\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;circle r=\"8\" cx=\"11\" cy=\"11\"&gt;&lt;/circle&gt;&lt;path d=\"m21 21-4.3-4.3\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"search\" placeholder=\"Search\" class=\"grow-1\"&gt;\n&lt;kbd class=\"kbd kbd-sm\"&gt;⌘&lt;/kbd&gt;&lt;kbd class=\"kbd kbd-sm\"&gt;K&lt;/kbd&gt;&lt;/label&gt;&lt;label class=\"input\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z\"&gt;&lt;/path&gt;&lt;path d=\"M14 2v4a2 2 0 0 0 2 2h4\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"text\" placeholder=\"index.php\" class=\"&lt;cjm_fasthtml_tailwind.utilities.flexbox_and_grid.GrowFactory object at 0x7feee9cb8990&gt;\"&gt;\n&lt;/label&gt;&lt;label class=\"input\"&gt;Path    &lt;input type=\"text\" placeholder=\"src/app/\" class=\"&lt;cjm_fasthtml_tailwind.utilities.flexbox_and_grid.GrowFactory object at 0x7feee9cb8990&gt;\"&gt;\n&lt;span class=\"badge badge-neutral badge-xs\"&gt;Optional&lt;/span&gt;&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_text_input_with_labels_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_text_input_styles_and_fieldset_fasthtml_examples\n\n test_text_input_styles_and_fieldset_fasthtml_examples ()\n\nTest text input styles and fieldset from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_styles_and_fieldset_fasthtml_examples():\n    \"\"\"Test text input styles and fieldset from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Fieldset, Legend, P, Div\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset, fieldset_legend\n    from cjm_fasthtml_daisyui.components.data_input.label import label\n    \n    # Ghost style input\n    ghost_input = Input(\n        type=\"text\",\n        placeholder=\"Type here\",\n        cls=combine_classes(text_input, text_input_styles.ghost)\n    )\n    assert ghost_input.tag == \"input\"\n    assert \"input\" in ghost_input.attrs['class']\n    assert \"input-ghost\" in ghost_input.attrs['class']\n    assert ghost_input.attrs['placeholder'] == \"Type here\"\n    \n    # With fieldset and fieldset-legend\n    fieldset_example = Fieldset(\n        Legend(\"What is your name?\", cls=str(fieldset_legend)),\n        Input(\n            type=\"text\",\n            cls=str(text_input),\n            placeholder=\"Type here\"\n        ),\n        P(\"Optional\", cls=str(label)),\n        cls=str(fieldset)\n    )\n    assert fieldset_example.tag == \"fieldset\"\n    assert fieldset_example.attrs['class'] == \"fieldset\"\n    assert fieldset_example.children[0].tag == \"legend\"\n    assert fieldset_example.children[0].attrs['class'] == \"fieldset-legend\"\n    assert fieldset_example.children[0].children[0] == \"What is your name?\"\n    assert fieldset_example.children[1].tag == \"input\"\n    assert fieldset_example.children[1].attrs['class'] == \"input\"\n    assert fieldset_example.children[2].tag == \"p\"\n    assert fieldset_example.children[2].attrs['class'] == \"label\"\n    assert fieldset_example.children[2].children[0] == \"Optional\"\n    \n    # Return all elements in a Div\n    return Div(\n        ghost_input,\n        fieldset_example\n    )\n\n# Run the tests\ntest_text_input_styles_and_fieldset_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"text\" placeholder=\"Type here\" class=\"input input-ghost\"&gt;\n&lt;fieldset class=\"fieldset\"&gt;&lt;legend class=\"fieldset-legend\"&gt;What is your name?&lt;/legend&gt;    &lt;input type=\"text\" placeholder=\"Type here\" class=\"input\"&gt;\n    &lt;p class=\"label\"&gt;Optional&lt;/p&gt;\n&lt;/fieldset&gt;&lt;/div&gt;\n\n\n\ntest_func = test_text_input_styles_and_fieldset_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_text_input_colors_fasthtml_examples\n\n test_text_input_colors_fasthtml_examples ()\n\nTest text input color variants from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_colors_fasthtml_examples():\n    \"\"\"Test text input color variants from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Neutral color\n    neutral_input = Input(\n        type=\"text\",\n        placeholder=\"neutral\",\n        cls=combine_classes(text_input, text_input_colors.neutral)\n    )\n    assert \"input\" in neutral_input.attrs['class']\n    assert \"input-neutral\" in neutral_input.attrs['class']\n    assert neutral_input.attrs['placeholder'] == \"neutral\"\n    \n    # Primary color\n    primary_input = Input(\n        type=\"text\",\n        placeholder=\"Primary\",\n        cls=combine_classes(text_input, text_input_colors.primary)\n    )\n    assert \"input-primary\" in primary_input.attrs['class']\n    assert primary_input.attrs['placeholder'] == \"Primary\"\n    \n    # Secondary color\n    secondary_input = Input(\n        type=\"text\",\n        placeholder=\"Secondary\",\n        cls=combine_classes(text_input, text_input_colors.secondary)\n    )\n    assert \"input-secondary\" in secondary_input.attrs['class']\n    assert secondary_input.attrs['placeholder'] == \"Secondary\"\n    \n    # Accent color\n    accent_input = Input(\n        type=\"text\",\n        placeholder=\"Accent\",\n        cls=combine_classes(text_input, text_input_colors.accent)\n    )\n    assert \"input-accent\" in accent_input.attrs['class']\n    assert accent_input.attrs['placeholder'] == \"Accent\"\n    \n    # Info color\n    info_input = Input(\n        type=\"text\",\n        placeholder=\"Info\",\n        cls=combine_classes(text_input, text_input_colors.info)\n    )\n    assert \"input-info\" in info_input.attrs['class']\n    assert info_input.attrs['placeholder'] == \"Info\"\n    \n    # Success color\n    success_input = Input(\n        type=\"text\",\n        placeholder=\"Success\",\n        cls=combine_classes(text_input, text_input_colors.success)\n    )\n    assert \"input-success\" in success_input.attrs['class']\n    assert success_input.attrs['placeholder'] == \"Success\"\n    \n    # Warning color\n    warning_input = Input(\n        type=\"text\",\n        placeholder=\"Warning\",\n        cls=combine_classes(text_input, text_input_colors.warning)\n    )\n    assert \"input-warning\" in warning_input.attrs['class']\n    assert warning_input.attrs['placeholder'] == \"Warning\"\n    \n    # Error color\n    error_input = Input(\n        type=\"text\",\n        placeholder=\"Error\",\n        cls=combine_classes(text_input, text_input_colors.error)\n    )\n    assert \"input-error\" in error_input.attrs['class']\n    assert error_input.attrs['placeholder'] == \"Error\"\n    \n    # Return all elements in a Div\n    return Div(\n        neutral_input,\n        primary_input,\n        secondary_input,\n        accent_input,\n        info_input,\n        success_input,\n        warning_input,\n        error_input\n    )\n\n# Run the tests\ntest_text_input_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"text\" placeholder=\"neutral\" class=\"input input-neutral\"&gt;\n  &lt;input type=\"text\" placeholder=\"Primary\" class=\"input input-primary\"&gt;\n  &lt;input type=\"text\" placeholder=\"Secondary\" class=\"input input-secondary\"&gt;\n  &lt;input type=\"text\" placeholder=\"Accent\" class=\"input input-accent\"&gt;\n  &lt;input type=\"text\" placeholder=\"Info\" class=\"input input-info\"&gt;\n  &lt;input type=\"text\" placeholder=\"Success\" class=\"input input-success\"&gt;\n  &lt;input type=\"text\" placeholder=\"Warning\" class=\"input input-warning\"&gt;\n  &lt;input type=\"text\" placeholder=\"Error\" class=\"input input-error\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_text_input_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_text_input_sizes_fasthtml_examples\n\n test_text_input_sizes_fasthtml_examples ()\n\nTest text input size variants from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_sizes_fasthtml_examples():\n    \"\"\"Test text input size variants from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Xsmall size\n    xs_input = Input(\n        type=\"text\",\n        placeholder=\"Xsmall\",\n        cls=combine_classes(text_input, text_input_sizes.xs)\n    )\n    assert \"input\" in xs_input.attrs['class']\n    assert \"input-xs\" in xs_input.attrs['class']\n    assert xs_input.attrs['placeholder'] == \"Xsmall\"\n    \n    # Small size\n    sm_input = Input(\n        type=\"text\",\n        placeholder=\"Small\",\n        cls=combine_classes(text_input, text_input_sizes.sm)\n    )\n    assert \"input-sm\" in sm_input.attrs['class']\n    assert sm_input.attrs['placeholder'] == \"Small\"\n    \n    # Medium size\n    md_input = Input(\n        type=\"text\",\n        placeholder=\"Medium\",\n        cls=combine_classes(text_input, text_input_sizes.md)\n    )\n    assert \"input-md\" in md_input.attrs['class']\n    assert md_input.attrs['placeholder'] == \"Medium\"\n    \n    # Large size\n    lg_input = Input(\n        type=\"text\",\n        placeholder=\"Large\",\n        cls=combine_classes(text_input, text_input_sizes.lg)\n    )\n    assert \"input-lg\" in lg_input.attrs['class']\n    assert lg_input.attrs['placeholder'] == \"Large\"\n    \n    # Xlarge size\n    xl_input = Input(\n        type=\"text\",\n        placeholder=\"Xlarge\",\n        cls=combine_classes(text_input, text_input_sizes.xl)\n    )\n    assert \"input-xl\" in xl_input.attrs['class']\n    assert xl_input.attrs['placeholder'] == \"Xlarge\"\n    \n    # Return all elements in a Div\n    return Div(\n        xs_input,\n        sm_input,\n        md_input,\n        lg_input,\n        xl_input\n    )\n\n# Run the tests\ntest_text_input_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"text\" placeholder=\"Xsmall\" class=\"input input-xs\"&gt;\n  &lt;input type=\"text\" placeholder=\"Small\" class=\"input input-sm\"&gt;\n  &lt;input type=\"text\" placeholder=\"Medium\" class=\"input input-md\"&gt;\n  &lt;input type=\"text\" placeholder=\"Large\" class=\"input input-lg\"&gt;\n  &lt;input type=\"text\" placeholder=\"Xlarge\" class=\"input input-xl\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_text_input_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_text_input_special_types_fasthtml_examples\n\n test_text_input_special_types_fasthtml_examples ()\n\nTest special input types from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_special_types_fasthtml_examples():\n    \"\"\"Test special input types from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Datalist, Option, Div\n    \n    # Text input with data list suggestion\n    datalist_input = Input(\n        type=\"text\",\n        cls=str(text_input),\n        placeholder=\"Which browser do you use\",\n        list=\"browsers\"\n    )\n    datalist = Datalist(\n        Option(value=\"Chrome\"),\n        Option(value=\"Firefox\"),\n        Option(value=\"Safari\"),\n        Option(value=\"Opera\"),\n        Option(value=\"Edge\"),\n        id=\"browsers\"\n    )\n    assert datalist_input.tag == \"input\"\n    assert datalist_input.attrs['type'] == \"text\"\n    assert datalist_input.attrs['class'] == \"input\"\n    assert datalist_input.attrs['list'] == \"browsers\"\n    assert datalist_input.attrs['placeholder'] == \"Which browser do you use\"\n    assert datalist.tag == \"datalist\"\n    assert datalist.attrs['id'] == \"browsers\"\n    assert len(datalist.children) == 5\n    assert datalist.children[0].attrs['value'] == \"Chrome\"\n    assert datalist.children[1].attrs['value'] == \"Firefox\"\n    assert datalist.children[2].attrs['value'] == \"Safari\"\n    assert datalist.children[3].attrs['value'] == \"Opera\"\n    assert datalist.children[4].attrs['value'] == \"Edge\"\n    \n    # Date input\n    date_input = Input(\n        type=\"date\",\n        cls=str(text_input)\n    )\n    assert date_input.tag == \"input\"\n    assert date_input.attrs['type'] == \"date\"\n    assert date_input.attrs['class'] == \"input\"\n    \n    # Time input\n    time_input = Input(\n        type=\"time\",\n        cls=str(text_input)\n    )\n    assert time_input.tag == \"input\"\n    assert time_input.attrs['type'] == \"time\"\n    assert time_input.attrs['class'] == \"input\"\n    \n    # Datetime-local input\n    datetime_input = Input(\n        type=\"datetime-local\",\n        cls=str(text_input)\n    )\n    assert datetime_input.tag == \"input\"\n    assert datetime_input.attrs['type'] == \"datetime-local\"\n    assert datetime_input.attrs['class'] == \"input\"\n    \n    # Return all elements in a Div\n    return Div(\n        datalist_input,\n        datalist,\n        date_input,\n        time_input,\n        datetime_input\n    )\n\n# Run the tests\ntest_text_input_special_types_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"text\" placeholder=\"Which browser do you use\" list=\"browsers\" class=\"input\"&gt;\n&lt;datalist id=\"browsers\"&gt;&lt;option value=\"Chrome\"&gt;&lt;/option&gt;&lt;option value=\"Firefox\"&gt;&lt;/option&gt;&lt;option value=\"Safari\"&gt;&lt;/option&gt;&lt;option value=\"Opera\"&gt;&lt;/option&gt;&lt;option value=\"Edge\"&gt;&lt;/option&gt;&lt;/datalist&gt;  &lt;input type=\"date\" class=\"input\"&gt;\n  &lt;input type=\"time\" class=\"input\"&gt;\n  &lt;input type=\"datetime-local\" class=\"input\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_text_input_special_types_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_text_input_validators_part1_fasthtml_examples\n\n test_text_input_validators_part1_fasthtml_examples ()\n\nTest text input validators part 1: username, search, email from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_validators_part1_fasthtml_examples():\n    \"\"\"Test text input validators part 1: username, search, email from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Input, P, Div, Button\n    from fasthtml.svg import Svg, G, Circle, Path, Rect\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util, h\n    from cjm_fasthtml_tailwind.utilities.effects import opacity\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_daisyui.components.data_input.validator import validator, validator_hint\n    from cjm_fasthtml_daisyui.components.layout.join import join, join_item\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # User icon SVG\n    user_icon = Svg(\n        G(\n            Path(d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\"),\n            Circle(cx=\"12\", cy=\"7\", r=\"4\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2.5\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Search icon SVG\n    search_icon = Svg(\n        G(\n            Circle(cx=\"11\", cy=\"11\", r=\"8\"),\n            Path(d=\"m21 21-4.3-4.3\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2.5\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Email icon SVG\n    email_icon = Svg(\n        G(\n            Rect(width=\"20\", height=\"16\", x=\"2\", y=\"4\", rx=\"2\"),\n            Path(d=\"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2.5\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Username text input with icon and validator\n    username_input = Label(\n        user_icon,\n        Input(\n            type=\"text\",\n            required=True,\n            placeholder=\"Username\",\n            pattern=\"[A-Za-z][A-Za-z0-9\\\\-]*\",\n            minlength=\"3\",\n            maxlength=\"30\",\n            title=\"Only letters, numbers or dash\"\n        ),\n        cls=combine_classes(text_input, validator)\n    )\n    username_hint = P(\n        \"Must be 3 to 30 characters\",\n        Br(),\n        \"containing only letters, numbers or dash\",\n        cls=str(validator_hint)\n    )\n    assert username_input.tag == \"label\"\n    assert \"input\" in username_input.attrs['class']\n    assert \"validator\" in username_input.attrs['class']\n    assert username_input.children[1].attrs['required'] == True\n    assert username_input.children[1].attrs['pattern'] == \"[A-Za-z][A-Za-z0-9\\\\-]*\"\n    assert username_hint.attrs['class'] == \"validator-hint\"\n    \n    # Search input with icon\n    search_input = Label(\n        search_icon,\n        Input(\n            type=\"search\",\n            required=True,\n            placeholder=\"Search\"\n        ),\n        cls=str(text_input)\n    )\n    assert search_input.tag == \"label\"\n    assert search_input.attrs['class'] == \"input\"\n    assert search_input.children[1].attrs['type'] == \"search\"\n    assert search_input.children[1].attrs['required'] == True\n    \n    # Email input with icon and validator\n    email_input = Label(\n        email_icon,\n        Input(\n            type=\"email\",\n            placeholder=\"[email protected]\",\n            required=True\n        ),\n        cls=combine_classes(text_input, validator)\n    )\n    email_hint = Div(\n        \"Enter valid email address\",\n        cls=combine_classes(validator_hint, display_tw.hidden)\n    )\n    assert email_input.tag == \"label\"\n    assert \"validator\" in email_input.attrs['class']\n    assert email_input.children[1].attrs['type'] == \"email\"\n    assert email_input.children[1].attrs['required'] == True\n    assert \"hidden\" in email_hint.attrs['class']\n    \n    # Email input with icon, validator, button, join\n    email_join = Div(\n        Div(\n            Label(\n                email_icon,\n                Input(\n                    type=\"email\",\n                    placeholder=\"[email protected]\",\n                    required=True\n                ),\n                cls=combine_classes(text_input, validator, join_item)\n            ),\n            Div(\n                \"Enter valid email address\",\n                cls=combine_classes(validator_hint, display_tw.hidden)\n            )\n        ),\n        Button(\"Join\", cls=combine_classes(btn, btn_colors.neutral, join_item)),\n        cls=str(join)\n    )\n    assert email_join.tag == \"div\"\n    assert email_join.attrs['class'] == \"join\"\n    assert \"join-item\" in email_join.children[0].children[0].attrs['class']\n    assert \"join-item\" in email_join.children[1].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        username_input,\n        username_hint,\n        search_input,\n        email_input,\n        email_hint,\n        email_join\n    )\n\n# Fix missing import\nfrom fasthtml.common import Br\n# Run the tests\ntest_text_input_validators_part1_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"input validator\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2\"&gt;&lt;/path&gt;&lt;circle r=\"4\" cx=\"12\" cy=\"7\"&gt;&lt;/circle&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"text\" required placeholder=\"Username\" pattern=\"[A-Za-z][A-Za-z0-9\\-]*\" minlength=\"3\" maxlength=\"30\" title=\"Only letters, numbers or dash\"&gt;\n&lt;/label&gt;  &lt;p class=\"validator-hint\"&gt;\nMust be 3 to 30 characters&lt;br&gt;containing only letters, numbers or dash  &lt;/p&gt;\n&lt;label class=\"input\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;circle r=\"8\" cx=\"11\" cy=\"11\"&gt;&lt;/circle&gt;&lt;path d=\"m21 21-4.3-4.3\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"search\" required placeholder=\"Search\"&gt;\n&lt;/label&gt;&lt;label class=\"input validator\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;rect width=\"20\" height=\"16\" x=\"2\" y=\"4\" rx=\"2\"&gt;&lt;/rect&gt;&lt;path d=\"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"email\" placeholder=\"[email protected]\" required&gt;\n&lt;/label&gt;  &lt;div class=\"validator-hint hidden\"&gt;Enter valid email address&lt;/div&gt;\n  &lt;div class=\"join\"&gt;\n    &lt;div&gt;\n&lt;label class=\"input validator join-item\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;rect width=\"20\" height=\"16\" x=\"2\" y=\"4\" rx=\"2\"&gt;&lt;/rect&gt;&lt;path d=\"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;        &lt;input type=\"email\" placeholder=\"[email protected]\" required&gt;\n&lt;/label&gt;      &lt;div class=\"validator-hint hidden\"&gt;Enter valid email address&lt;/div&gt;\n    &lt;/div&gt;\n&lt;button class=\"btn btn-neutral join-item\"&gt;Join&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_text_input_validators_part1_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_text_input_validators_part2_fasthtml_examples\n\n test_text_input_validators_part2_fasthtml_examples ()\n\nTest text input validators part 2: password, number, phone, URL from daisyUI v5 documentation.\n\n\nExported source\ndef test_text_input_validators_part2_fasthtml_examples():\n    \"\"\"Test text input validators part 2: password, number, phone, URL from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Input, P, Div, Br\n    from fasthtml.svg import Svg, G, Circle, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util, h\n    from cjm_fasthtml_tailwind.utilities.effects import opacity\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.typography import tabular_nums\n    from cjm_fasthtml_daisyui.components.data_input.validator import validator, validator_hint\n    \n    # Password icon SVG\n    password_icon = Svg(\n        G(\n            Path(\n                d=\"M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z\"\n            ),\n            Circle(cx=\"16.5\", cy=\"7.5\", r=\".5\", fill=\"currentColor\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2.5\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Phone icon SVG (using 16x16 viewBox as per the HTML)\n    phone_icon = Svg(\n        G(\n            Path(\n                d=\"M7.25 11.5C6.83579 11.5 6.5 11.8358 6.5 12.25C6.5 12.6642 6.83579 13 7.25 13H8.75C9.16421 13 9.5 12.6642 9.5 12.25C9.5 11.8358 9.16421 11.5 8.75 11.5H7.25Z\",\n                fill=\"currentColor\"\n            ),\n            Path(\n                fill_rule=\"evenodd\",\n                clip_rule=\"evenodd\",\n                d=\"M6 1C4.61929 1 3.5 2.11929 3.5 3.5V12.5C3.5 13.8807 4.61929 15 6 15H10C11.3807 15 12.5 13.8807 12.5 12.5V3.5C12.5 2.11929 11.3807 1 10 1H6ZM10 2.5H9.5V3C9.5 3.27614 9.27614 3.5 9 3.5H7C6.72386 3.5 6.5 3.27614 6.5 3V2.5H6C5.44771 2.5 5 2.94772 5 3.5V12.5C5 13.0523 5.44772 13.5 6 13.5H10C10.5523 13.5 11 13.0523 11 12.5V3.5C11 2.94772 10.5523 2.5 10 2.5Z\",\n                fill=\"currentColor\"\n            ),\n            fill=\"none\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 16 16\"\n    )\n    \n    # URL icon SVG\n    url_icon = Svg(\n        G(\n            Path(d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"),\n            Path(d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"),\n            stroke_linejoin=\"round\",\n            stroke_linecap=\"round\",\n            stroke_width=\"2.5\",\n            fill=\"none\",\n            stroke=\"currentColor\"\n        ),\n        cls=combine_classes(h(\"[1em]\"), opacity._50),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Password input with icon and validator\n    password_input = Label(\n        password_icon,\n        Input(\n            type=\"password\",\n            required=True,\n            placeholder=\"Password\",\n            minlength=\"8\",\n            pattern=\"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\",\n            title=\"Must be more than 8 characters, including number, lowercase letter, uppercase letter\"\n        ),\n        cls=combine_classes(text_input, validator)\n    )\n    password_hint = P(\n        \"Must be more than 8 characters, including\",\n        Br(),\n        \"At least one number \",\n        Br(),\n        \"At least one lowercase letter \",\n        Br(),\n        \"At least one uppercase letter\",\n        cls=combine_classes(validator_hint, display_tw.hidden)\n    )\n    assert password_input.tag == \"label\"\n    assert \"validator\" in password_input.attrs['class']\n    assert password_input.children[1].attrs['type'] == \"password\"\n    assert password_input.children[1].attrs['minlength'] == \"8\"\n    assert \"hidden\" in password_hint.attrs['class']\n    \n    # Number input with validator\n    number_input = Input(\n        type=\"number\",\n        cls=combine_classes(text_input, validator),\n        required=True,\n        placeholder=\"Type a number between 1 to 10\",\n        min=\"1\",\n        max=\"10\",\n        title=\"Must be between be 1 to 10\"\n    )\n    number_hint = P(\n        \"Must be between be 1 to 10\",\n        cls=str(validator_hint)\n    )\n    assert number_input.tag == \"input\"\n    assert number_input.attrs['type'] == \"number\"\n    assert \"validator\" in number_input.attrs['class']\n    assert number_input.attrs['min'] == \"1\"\n    assert number_input.attrs['max'] == \"10\"\n    \n    # Telephone number input with icon and validator\n    tel_input = Label(\n        phone_icon,\n        Input(\n            type=\"tel\",\n            cls=str(tabular_nums),\n            required=True,\n            placeholder=\"Phone\",\n            pattern=\"[0-9]*\",\n            minlength=\"10\",\n            maxlength=\"10\",\n            title=\"Must be 10 digits\"\n        ),\n        cls=combine_classes(text_input, validator)\n    )\n    tel_hint = P(\n        \"Must be 10 digits\",\n        cls=str(validator_hint)\n    )\n    assert tel_input.tag == \"label\"\n    assert \"validator\" in tel_input.attrs['class']\n    assert tel_input.children[1].attrs['type'] == \"tel\"\n    assert tel_input.children[1].attrs['class'] == \"tabular-nums\"\n    assert tel_input.children[1].attrs['pattern'] == \"[0-9]*\"\n    \n    # URL with icon and validator\n    url_input = Label(\n        url_icon,\n        Input(\n            type=\"url\",\n            required=True,\n            placeholder=\"https://\",\n            value=\"https://\",\n            pattern=\"^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\\\\-].*[a-zA-Z0-9])?\\\\.)+[a-zA-Z].*\",\n            title=\"Must be valid URL\"\n        ),\n        cls=combine_classes(text_input, validator)\n    )\n    url_hint = P(\n        \"Must be valid URL\",\n        cls=str(validator_hint)\n    )\n    assert url_input.tag == \"label\"\n    assert \"validator\" in url_input.attrs['class']\n    assert url_input.children[1].attrs['type'] == \"url\"\n    assert url_input.children[1].attrs['value'] == \"https://\"\n    \n    # Return all elements in a Div\n    return Div(\n        password_input,\n        password_hint,\n        number_input,\n        number_hint,\n        tel_input,\n        tel_hint,\n        url_input,\n        url_hint\n    )\n\n# Run the tests\ntest_text_input_validators_part2_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"input validator\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z\"&gt;&lt;/path&gt;&lt;circle r=\".5\" cx=\"16.5\" cy=\"7.5\" fill=\"currentColor\"&gt;&lt;/circle&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"password\" required placeholder=\"Password\" minlength=\"8\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" title=\"Must be more than 8 characters, including number, lowercase letter, uppercase letter\"&gt;\n&lt;/label&gt;  &lt;p class=\"validator-hint hidden\"&gt;\nMust be more than 8 characters, including&lt;br&gt;At least one number &lt;br&gt;At least one lowercase letter &lt;br&gt;At least one uppercase letter  &lt;/p&gt;\n  &lt;input type=\"number\" required placeholder=\"Type a number between 1 to 10\" min=\"1\" max=\"10\" class=\"input validator\" title=\"Must be between be 1 to 10\"&gt;\n  &lt;p class=\"validator-hint\"&gt;Must be between be 1 to 10&lt;/p&gt;\n&lt;label class=\"input validator\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 16 16\" class=\"h-[1em] opacity-50\"&gt;&lt;g fill=\"none\"&gt;&lt;path d=\"M7.25 11.5C6.83579 11.5 6.5 11.8358 6.5 12.25C6.5 12.6642 6.83579 13 7.25 13H8.75C9.16421 13 9.5 12.6642 9.5 12.25C9.5 11.8358 9.16421 11.5 8.75 11.5H7.25Z\" fill=\"currentColor\"&gt;&lt;/path&gt;&lt;path d=\"M6 1C4.61929 1 3.5 2.11929 3.5 3.5V12.5C3.5 13.8807 4.61929 15 6 15H10C11.3807 15 12.5 13.8807 12.5 12.5V3.5C12.5 2.11929 11.3807 1 10 1H6ZM10 2.5H9.5V3C9.5 3.27614 9.27614 3.5 9 3.5H7C6.72386 3.5 6.5 3.27614 6.5 3V2.5H6C5.44771 2.5 5 2.94772 5 3.5V12.5C5 13.0523 5.44772 13.5 6 13.5H10C10.5523 13.5 11 13.0523 11 12.5V3.5C11 2.94772 10.5523 2.5 10 2.5Z\" fill=\"currentColor\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"tel\" required placeholder=\"Phone\" pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\" class=\"tabular-nums\" title=\"Must be 10 digits\"&gt;\n&lt;/label&gt;  &lt;p class=\"validator-hint\"&gt;Must be 10 digits&lt;/p&gt;\n&lt;label class=\"input validator\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"h-[1em] opacity-50\"&gt;&lt;g stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-width=\"2.5\" fill=\"none\" stroke=\"currentColor\"&gt;&lt;path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"&gt;&lt;/path&gt;&lt;path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;    &lt;input type=\"url\" required placeholder=\"https://\" value=\"https://\" pattern=\"^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\\-].*[a-zA-Z0-9])?\\.)+[a-zA-Z].*\" title=\"Must be valid URL\"&gt;\n&lt;/label&gt;  &lt;p class=\"validator-hint\"&gt;Must be valid URL&lt;/p&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_text_input_validators_part2_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "text input"
    ]
  },
  {
    "objectID": "components/data_input/validator.html",
    "href": "components/data_input/validator.html",
    "title": "validator",
    "section": "",
    "text": "Base Validator\n\n\nExported source\nvalidator = SingleValueFactory(\"validator\", \"Base validator component for input, select, textarea\") # Base validator component\nvalidator_hint = SingleValueFactory(\"validator-hint\", \"Base validator hint part for the hint text that appears after the input if it's invalid\") # validator_hint component\n\n\n\n\nValidator Test Examples\n\nsource\n\n\ntest_validator_basic_examples\n\n test_validator_basic_examples ()\n\nTest basic validator utilities.\n\n\nExported source\ndef test_validator_basic_examples():\n    \"\"\"Test basic validator utilities.\"\"\"\n    # Basic validator\n    assert str(validator) == \"validator\"\n    assert str(validator_hint) == \"validator-hint\"\n    \n    # Test with modifiers\n    assert str(validator.hover) == \"hover:validator\"\n    assert str(validator.md) == \"md:validator\"\n    assert str(validator.dark) == \"dark:validator\"\n\n    assert str(validator_hint.hover) == \"hover:validator-hint\"\n    assert str(validator_hint.md) == \"md:validator-hint\"\n    assert str(validator_hint.dark) == \"dark:validator-hint\"\n\n# Run the tests\ntest_validator_basic_examples()\n\n\n\nsource\n\n\ntest_validator_basic_fasthtml_examples\n\n test_validator_basic_fasthtml_examples ()\n\nTest basic validator example from daisyUI v5 documentation.\n\n\nExported source\ndef test_validator_basic_fasthtml_examples():\n    \"\"\"Test basic validator example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Basic validator\n    basic_validator = Input(\n        type=\"email\",\n        required=True,\n        placeholder=\"[email protected]\",\n        cls=combine_classes(text_input, validator)\n    )\n    \n    # Verify structure\n    assert basic_validator.tag == \"input\"\n    assert basic_validator.attrs['type'] == \"email\"\n    assert basic_validator.attrs['required'] == True\n    assert basic_validator.attrs['placeholder'] == \"[email protected]\"\n    assert \"input\" in basic_validator.attrs['class']\n    assert \"validator\" in basic_validator.attrs['class']\n    \n    return basic_validator\n\n# Run the tests\ntest_validator_basic_fasthtml_examples()\n\n\n&lt;input type=\"email\" required placeholder=\"[email protected]\" class=\"input validator\"&gt;\n\n\n\ntest_func = test_validator_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_validator_with_hint_fasthtml_examples\n\n test_validator_with_hint_fasthtml_examples ()\n\nTest validator with hint from daisyUI v5 documentation.\n\n\nExported source\ndef test_validator_with_hint_fasthtml_examples():\n    \"\"\"Test validator with hint from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Validator with validator-hint\n    email_with_hint = Div(\n        Input(\n            type=\"email\",\n            required=True,\n            placeholder=\"[email protected]\",\n            cls=combine_classes(text_input, validator)\n        ),\n        Div(\n            \"Enter valid email address\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Verify structure\n    container = email_with_hint\n    assert container.tag == \"div\"\n    assert len(container.children) == 2\n    \n    # Verify input\n    input_elem = container.children[0]\n    assert input_elem.tag == \"input\"\n    assert input_elem.attrs['type'] == \"email\"\n    assert input_elem.attrs['required'] == True\n    assert input_elem.attrs['placeholder'] == \"[email protected]\"\n    assert \"input\" in input_elem.attrs['class']\n    assert \"validator\" in input_elem.attrs['class']\n    \n    # Verify hint\n    hint_elem = container.children[1]\n    assert hint_elem.tag == \"div\"\n    assert hint_elem.attrs['class'] == \"validator-hint\"\n    assert hint_elem.children[0] == \"Enter valid email address\"\n    \n    return email_with_hint\n\n# Run the tests\ntest_validator_with_hint_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"email\" required placeholder=\"[email protected]\" class=\"input validator\"&gt;\n  &lt;div class=\"validator-hint\"&gt;Enter valid email address&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_validator_with_hint_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_validator_password_fasthtml_examples\n\n test_validator_password_fasthtml_examples ()\n\nTest password requirement validator from daisyUI v5 documentation.\n\n\nExported source\ndef test_validator_password_fasthtml_examples():\n    \"\"\"Test password requirement validator from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, P, Br, Div\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Password requirement validator\n    password_validator = Div(\n        Input(\n            type=\"password\",\n            required=True,\n            placeholder=\"Password\",\n            minlength=\"8\",\n            pattern=\"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\",\n            title=\"Must be more than 8 characters, including number, lowercase letter, uppercase letter\",\n            cls=combine_classes(text_input, validator)\n        ),\n        P(\n            \"Must be more than 8 characters, including\",\n            Br(),\n            \"At least one number\",\n            Br(),\n            \"At least one lowercase letter\",\n            Br(),\n            \"At least one uppercase letter\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Verify structure\n    container = password_validator\n    assert container.tag == \"div\"\n    assert len(container.children) == 2\n    \n    # Verify password input\n    password_input = container.children[0]\n    assert password_input.tag == \"input\"\n    assert password_input.attrs['type'] == \"password\"\n    assert password_input.attrs['required'] == True\n    assert password_input.attrs['placeholder'] == \"Password\"\n    assert password_input.attrs['minlength'] == \"8\"\n    assert password_input.attrs['pattern'] == \"(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\"\n    assert password_input.attrs['title'] == \"Must be more than 8 characters, including number, lowercase letter, uppercase letter\"\n    assert \"input\" in password_input.attrs['class']\n    assert \"validator\" in password_input.attrs['class']\n    \n    # Verify hint\n    hint = container.children[1]\n    assert hint.tag == \"p\"\n    assert hint.attrs['class'] == \"validator-hint\"\n    assert hint.children[0] == \"Must be more than 8 characters, including\"\n    assert hint.children[1].tag == \"br\"\n    assert hint.children[2] == \"At least one number\"\n    assert hint.children[3].tag == \"br\"\n    assert hint.children[4] == \"At least one lowercase letter\"\n    assert hint.children[5].tag == \"br\"\n    assert hint.children[6] == \"At least one uppercase letter\"\n    \n    return password_validator\n\n# Run the tests\ntest_validator_password_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"password\" required placeholder=\"Password\" minlength=\"8\" pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,}\" class=\"input validator\" title=\"Must be more than 8 characters, including number, lowercase letter, uppercase letter\"&gt;\n  &lt;p class=\"validator-hint\"&gt;\nMust be more than 8 characters, including&lt;br&gt;At least one number&lt;br&gt;At least one lowercase letter&lt;br&gt;At least one uppercase letter  &lt;/p&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_validator_password_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_validator_username_phone_fasthtml_examples\n\n test_validator_username_phone_fasthtml_examples ()\n\nTest username and phone requirement validators from daisyUI v5 documentation.\n\n\nExported source\ndef test_validator_username_phone_fasthtml_examples():\n    \"\"\"Test username and phone requirement validators from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, P, Br, Div\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    from cjm_fasthtml_tailwind.utilities.typography import tabular_nums\n    \n    # Username requirement validator\n    username_validator = Div(\n        Input(\n            type=\"text\",\n            required=True,\n            placeholder=\"Username\",\n            pattern=\"[A-Za-z][A-Za-z0-9\\\\-]*\",\n            minlength=\"3\",\n            maxlength=\"30\",\n            title=\"Only letters, numbers or dash\",\n            cls=combine_classes(text_input, validator)\n        ),\n        P(\n            \"Must be 3 to 30 characters\",\n            Br(),\n            \"containing only letters, numbers or dash\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Phone Number requirement validator\n    phone_validator = Div(\n        Input(\n            type=\"tel\",\n            required=True,\n            placeholder=\"Phone\",\n            pattern=\"[0-9]*\",\n            minlength=\"10\",\n            maxlength=\"10\",\n            title=\"Must be 10 digits\",\n            cls=combine_classes(text_input, validator, tabular_nums)\n        ),\n        P(\n            \"Must be 10 digits\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Verify username validator structure\n    assert username_validator.tag == \"div\"\n    assert len(username_validator.children) == 2\n    \n    username_input = username_validator.children[0]\n    assert username_input.tag == \"input\"\n    assert username_input.attrs['type'] == \"text\"\n    assert username_input.attrs['required'] == True\n    assert username_input.attrs['placeholder'] == \"Username\"\n    assert username_input.attrs['pattern'] == \"[A-Za-z][A-Za-z0-9\\\\-]*\"\n    assert username_input.attrs['minlength'] == \"3\"\n    assert username_input.attrs['maxlength'] == \"30\"\n    assert username_input.attrs['title'] == \"Only letters, numbers or dash\"\n    assert \"input\" in username_input.attrs['class']\n    assert \"validator\" in username_input.attrs['class']\n    \n    username_hint = username_validator.children[1]\n    assert username_hint.tag == \"p\"\n    assert username_hint.attrs['class'] == \"validator-hint\"\n    assert username_hint.children[0] == \"Must be 3 to 30 characters\"\n    assert username_hint.children[1].tag == \"br\"\n    assert username_hint.children[2] == \"containing only letters, numbers or dash\"\n    \n    # Verify phone validator structure\n    assert phone_validator.tag == \"div\"\n    assert len(phone_validator.children) == 2\n    \n    phone_input = phone_validator.children[0]\n    assert phone_input.tag == \"input\"\n    assert phone_input.attrs['type'] == \"tel\"\n    assert phone_input.attrs['required'] == True\n    assert phone_input.attrs['placeholder'] == \"Phone\"\n    assert phone_input.attrs['pattern'] == \"[0-9]*\"\n    assert phone_input.attrs['minlength'] == \"10\"\n    assert phone_input.attrs['maxlength'] == \"10\"\n    assert phone_input.attrs['title'] == \"Must be 10 digits\"\n    assert \"input\" in phone_input.attrs['class']\n    assert \"validator\" in phone_input.attrs['class']\n    assert \"tabular-nums\" in phone_input.attrs['class']\n    \n    phone_hint = phone_validator.children[1]\n    assert phone_hint.tag == \"p\"\n    assert phone_hint.attrs['class'] == \"validator-hint\"\n    assert phone_hint.children[0] == \"Must be 10 digits\"\n    \n    return Div(username_validator, phone_validator)\n\n# Run the tests\ntest_validator_username_phone_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;input type=\"text\" required placeholder=\"Username\" pattern=\"[A-Za-z][A-Za-z0-9\\-]*\" minlength=\"3\" maxlength=\"30\" class=\"input validator\" title=\"Only letters, numbers or dash\"&gt;\n    &lt;p class=\"validator-hint\"&gt;\nMust be 3 to 30 characters&lt;br&gt;containing only letters, numbers or dash    &lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"tel\" required placeholder=\"Phone\" pattern=\"[0-9]*\" minlength=\"10\" maxlength=\"10\" class=\"input validator tabular-nums\" title=\"Must be 10 digits\"&gt;\n    &lt;p class=\"validator-hint\"&gt;Must be 10 digits&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_validator_username_phone_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_validator_url_date_number_fasthtml_examples\n\n test_validator_url_date_number_fasthtml_examples ()\n\nTest URL, date, and number requirement validators from daisyUI v5 documentation.\n\n\nExported source\ndef test_validator_url_date_number_fasthtml_examples():\n    \"\"\"Test URL, date, and number requirement validators from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, P, Div\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # URL input requirement validator\n    url_validator = Div(\n        Input(\n            type=\"url\",\n            required=True,\n            placeholder=\"https://\",\n            value=\"https://\",\n            pattern=\"^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9-].*[a-zA-Z0-9])?.)+[a-zA-Z].*\",\n            title=\"Must be valid URL\",\n            cls=combine_classes(text_input, validator)\n        ),\n        P(\n            \"Must be valid URL\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Date input requirement validator\n    date_validator = Div(\n        Input(\n            type=\"date\",\n            required=True,\n            placeholder=\"Pick a date in 2025\",\n            min=\"2025-01-01\",\n            max=\"2025-12-31\",\n            title=\"Must be valid URL\",\n            cls=combine_classes(text_input, validator)\n        ),\n        P(\n            \"Must be 2025\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Number input requirement validator\n    number_validator = Div(\n        Input(\n            type=\"number\",\n            required=True,\n            placeholder=\"Type a number between 1 to 10\",\n            min=\"1\",\n            max=\"10\",\n            title=\"Must be between be 1 to 10\",\n            cls=combine_classes(text_input, validator)\n        ),\n        P(\n            \"Must be between be 1 to 10\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Verify URL validator\n    assert url_validator.tag == \"div\"\n    assert len(url_validator.children) == 2\n    \n    url_input = url_validator.children[0]\n    assert url_input.tag == \"input\"\n    assert url_input.attrs['type'] == \"url\"\n    assert url_input.attrs['required'] == True\n    assert url_input.attrs['placeholder'] == \"https://\"\n    assert url_input.attrs['value'] == \"https://\"\n    assert url_input.attrs['pattern'] == \"^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9-].*[a-zA-Z0-9])?.)+[a-zA-Z].*\"\n    assert url_input.attrs['title'] == \"Must be valid URL\"\n    assert \"input\" in url_input.attrs['class']\n    assert \"validator\" in url_input.attrs['class']\n    \n    url_hint = url_validator.children[1]\n    assert url_hint.tag == \"p\"\n    assert url_hint.attrs['class'] == \"validator-hint\"\n    assert url_hint.children[0] == \"Must be valid URL\"\n    \n    # Verify Date validator\n    assert date_validator.tag == \"div\"\n    assert len(date_validator.children) == 2\n    \n    date_input = date_validator.children[0]\n    assert date_input.tag == \"input\"\n    assert date_input.attrs['type'] == \"date\"\n    assert date_input.attrs['required'] == True\n    assert date_input.attrs['placeholder'] == \"Pick a date in 2025\"\n    assert date_input.attrs['min'] == \"2025-01-01\"\n    assert date_input.attrs['max'] == \"2025-12-31\"\n    assert date_input.attrs['title'] == \"Must be valid URL\"\n    assert \"input\" in date_input.attrs['class']\n    assert \"validator\" in date_input.attrs['class']\n    \n    date_hint = date_validator.children[1]\n    assert date_hint.tag == \"p\"\n    assert date_hint.attrs['class'] == \"validator-hint\"\n    assert date_hint.children[0] == \"Must be 2025\"\n    \n    # Verify Number validator\n    assert number_validator.tag == \"div\"\n    assert len(number_validator.children) == 2\n    \n    number_input = number_validator.children[0]\n    assert number_input.tag == \"input\"\n    assert number_input.attrs['type'] == \"number\"\n    assert number_input.attrs['required'] == True\n    assert number_input.attrs['placeholder'] == \"Type a number between 1 to 10\"\n    assert number_input.attrs['min'] == \"1\"\n    assert number_input.attrs['max'] == \"10\"\n    assert number_input.attrs['title'] == \"Must be between be 1 to 10\"\n    assert \"input\" in number_input.attrs['class']\n    assert \"validator\" in number_input.attrs['class']\n    \n    number_hint = number_validator.children[1]\n    assert number_hint.tag == \"p\"\n    assert number_hint.attrs['class'] == \"validator-hint\"\n    assert number_hint.children[0] == \"Must be between be 1 to 10\"\n    \n    return Div(url_validator, date_validator, number_validator)\n\n# Run the tests\ntest_validator_url_date_number_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;input type=\"url\" required placeholder=\"https://\" value=\"https://\" pattern=\"^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9-].*[a-zA-Z0-9])?.)+[a-zA-Z].*\" class=\"input validator\" title=\"Must be valid URL\"&gt;\n    &lt;p class=\"validator-hint\"&gt;Must be valid URL&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"date\" required placeholder=\"Pick a date in 2025\" min=\"2025-01-01\" max=\"2025-12-31\" class=\"input validator\" title=\"Must be valid URL\"&gt;\n    &lt;p class=\"validator-hint\"&gt;Must be 2025&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"number\" required placeholder=\"Type a number between 1 to 10\" min=\"1\" max=\"10\" class=\"input validator\" title=\"Must be between be 1 to 10\"&gt;\n    &lt;p class=\"validator-hint\"&gt;Must be between be 1 to 10&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_validator_url_date_number_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_validator_checkbox_toggle_select_fasthtml_examples\n\n test_validator_checkbox_toggle_select_fasthtml_examples ()\n\nTest checkbox, toggle, and select requirement validators from daisyUI v5 documentation.\n\n\nExported source\ndef test_validator_checkbox_toggle_select_fasthtml_examples():\n    \"\"\"Test checkbox, toggle, and select requirement validators from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, P, Div, Form, Select, Option, Button\n    from cjm_fasthtml_daisyui.components.data_input.checkbox import checkbox\n    from cjm_fasthtml_daisyui.components.data_input.toggle import toggle\n    from cjm_fasthtml_daisyui.components.data_input.select import select\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Checkbox requirement validator\n    checkbox_validator = Div(\n        Input(\n            type=\"checkbox\",\n            required=True,\n            title=\"Required\",\n            cls=combine_classes(checkbox, validator)\n        ),\n        P(\n            \"Required\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Toggle requirement validator\n    toggle_validator = Div(\n        Input(\n            type=\"checkbox\",\n            required=True,\n            title=\"Required\",\n            cls=combine_classes(toggle, validator)\n        ),\n        P(\n            \"Required\",\n            cls=str(validator_hint)\n        )\n    )\n    \n    # Select requirement validator\n    select_validator = Form(\n        Select(\n            Option(\"Choose:\", disabled=True, selected=True, value=\"\"),\n            Option(\"Tabs\"),\n            Option(\"Spaces\"),\n            required=True,\n            cls=combine_classes(select, validator)\n        ),\n        P(\n            \"Required\",\n            cls=str(validator_hint)\n        ),\n        Button(\n            \"Submit form\",\n            type=\"submit\",\n            cls=str(btn)\n        )\n    )\n    \n    # Verify checkbox validator\n    assert checkbox_validator.tag == \"div\"\n    assert len(checkbox_validator.children) == 2\n    \n    checkbox_input = checkbox_validator.children[0]\n    assert checkbox_input.tag == \"input\"\n    assert checkbox_input.attrs['type'] == \"checkbox\"\n    assert checkbox_input.attrs['required'] == True\n    assert checkbox_input.attrs['title'] == \"Required\"\n    assert \"checkbox\" in checkbox_input.attrs['class']\n    assert \"validator\" in checkbox_input.attrs['class']\n    \n    checkbox_hint = checkbox_validator.children[1]\n    assert checkbox_hint.tag == \"p\"\n    assert checkbox_hint.attrs['class'] == \"validator-hint\"\n    assert checkbox_hint.children[0] == \"Required\"\n    \n    # Verify toggle validator\n    assert toggle_validator.tag == \"div\"\n    assert len(toggle_validator.children) == 2\n    \n    toggle_input = toggle_validator.children[0]\n    assert toggle_input.tag == \"input\"\n    assert toggle_input.attrs['type'] == \"checkbox\"\n    assert toggle_input.attrs['required'] == True\n    assert toggle_input.attrs['title'] == \"Required\"\n    assert \"toggle\" in toggle_input.attrs['class']\n    assert \"validator\" in toggle_input.attrs['class']\n    \n    toggle_hint = toggle_validator.children[1]\n    assert toggle_hint.tag == \"p\"\n    assert toggle_hint.attrs['class'] == \"validator-hint\"\n    assert toggle_hint.children[0] == \"Required\"\n    \n    # Verify select validator\n    assert select_validator.tag == \"form\"\n    assert len(select_validator.children) == 3\n    \n    select_elem = select_validator.children[0]\n    assert select_elem.tag == \"select\"\n    assert select_elem.attrs['required'] == True\n    assert \"select\" in select_elem.attrs['class']\n    assert \"validator\" in select_elem.attrs['class']\n    \n    # Check select options\n    assert len(select_elem.children) == 3\n    option1 = select_elem.children[0]\n    assert option1.tag == \"option\"\n    assert option1.attrs['disabled'] == True\n    assert option1.attrs['selected'] == True\n    assert option1.attrs['value'] == \"\"\n    assert option1.children[0] == \"Choose:\"\n    \n    option2 = select_elem.children[1]\n    assert option2.tag == \"option\"\n    assert option2.children[0] == \"Tabs\"\n    \n    option3 = select_elem.children[2]\n    assert option3.tag == \"option\"\n    assert option3.children[0] == \"Spaces\"\n    \n    select_hint = select_validator.children[1]\n    assert select_hint.tag == \"p\"\n    assert select_hint.attrs['class'] == \"validator-hint\"\n    assert select_hint.children[0] == \"Required\"\n    \n    submit_button = select_validator.children[2]\n    assert submit_button.tag == \"button\"\n    assert submit_button.attrs['type'] == \"submit\"\n    assert submit_button.attrs['class'] == \"btn\"\n    assert submit_button.children[0] == \"Submit form\"\n    \n    return Div(checkbox_validator, toggle_validator, select_validator)\n\n# Run the tests\ntest_validator_checkbox_toggle_select_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;input type=\"checkbox\" required class=\"checkbox validator\" title=\"Required\"&gt;\n    &lt;p class=\"validator-hint\"&gt;Required&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"checkbox\" required class=\"toggle validator\" title=\"Required\"&gt;\n    &lt;p class=\"validator-hint\"&gt;Required&lt;/p&gt;\n  &lt;/div&gt;\n&lt;form enctype=\"multipart/form-data\"&gt;&lt;select required class=\"select validator\"&gt;&lt;option disabled selected&gt;Choose:&lt;/option&gt;&lt;option&gt;Tabs&lt;/option&gt;&lt;option&gt;Spaces&lt;/option&gt;&lt;/select&gt;    &lt;p class=\"validator-hint\"&gt;Required&lt;/p&gt;\n&lt;button type=\"submit\" class=\"btn\"&gt;Submit form&lt;/button&gt;&lt;/form&gt;&lt;/div&gt;\n\n\n\ntest_func = test_validator_checkbox_toggle_select_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "validator"
    ]
  },
  {
    "objectID": "components/data_input/rating.html",
    "href": "components/data_input/rating.html",
    "title": "rating",
    "section": "",
    "text": "Base Rating\n\n\nExported source\nrating = SingleValueFactory(\"rating\", \"Base rating component for a div containing radio inputs\") # Base rating component\n\n\n\n\nRating Modifiers\n\nsource\n\n\nRatingModifier\n\n RatingModifier (value, names=None, module=None, qualname=None, type=None,\n                 start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass RatingModifier(str, Enum):\n    HALF = \"half\"\n    HIDDEN = \"hidden\"\n\nrating_modifiers = enums_to_simple_factory(rating, [RatingModifier], \"rating modifiers\") # rating modifiers\n\n\n\n\nRating Sizes\n\n\nExported source\nrating_sizes = enums_to_simple_factory(rating, [DaisyUINamedSize], \"rating size variants from extra small to extra large\") # rating size variants\n\n\n\n\nRating Test Examples\n\nsource\n\n\ntest_rating_basic_examples\n\n test_rating_basic_examples ()\n\nTest basic rating utilities.\n\n\nExported source\ndef test_rating_basic_examples():\n    \"\"\"Test basic rating utilities.\"\"\"\n    # Basic rating\n    assert str(rating) == \"rating\"\n    \n    # Test with modifiers\n    assert str(rating.hover) == \"hover:rating\"\n    assert str(rating.md) == \"md:rating\"\n    assert str(rating.dark) == \"dark:rating\"\n\n# Run the tests\ntest_rating_basic_examples()\n\n\n\nsource\n\n\ntest_rating_modifiers_examples\n\n test_rating_modifiers_examples ()\n\nTest rating modifier utilities.\n\n\nExported source\ndef test_rating_modifiers_examples():\n    \"\"\"Test rating modifier utilities.\"\"\"\n    assert str(rating_modifiers.half) == \"rating-half\"\n    assert str(rating_modifiers.hidden) == \"rating-hidden\"\n\n# Run the tests\ntest_rating_modifiers_examples()\n\n\n\nsource\n\n\ntest_rating_sizes_examples\n\n test_rating_sizes_examples ()\n\nTest rating size variants.\n\n\nExported source\ndef test_rating_sizes_examples():\n    \"\"\"Test rating size variants.\"\"\"\n    assert str(rating_sizes.xs) == \"rating-xs\"\n    assert str(rating_sizes.sm) == \"rating-sm\"\n    assert str(rating_sizes.md) == \"rating-md\"\n    assert str(rating_sizes.lg) == \"rating-lg\"\n    assert str(rating_sizes.xl) == \"rating-xl\"\n    \n    # With responsive modifiers\n    assert str(rating_sizes.xs.sm) == \"sm:rating-xs\"\n    assert str(rating_sizes.lg.md) == \"md:rating-lg\"\n\n# Run the tests\ntest_rating_sizes_examples()\n\n\n\nsource\n\n\ntest_rating_basic_fasthtml_examples\n\n test_rating_basic_fasthtml_examples ()\n\nTest basic rating example from daisyUI v5 documentation.\n\n\nExported source\ndef test_rating_basic_fasthtml_examples():\n    \"\"\"Test basic rating example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles\n    \n    # Basic rating with 5 stars\n    basic_rating = Div(\n        Input(type=\"radio\", name=\"rating-1\", cls=combine_classes(mask, mask_styles.star), aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-1\", cls=combine_classes(mask, mask_styles.star), aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-1\", cls=combine_classes(mask, mask_styles.star), aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-1\", cls=combine_classes(mask, mask_styles.star), aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-1\", cls=combine_classes(mask, mask_styles.star), aria_label=\"5 star\"),\n        cls=str(rating)\n    )\n    \n    # Verify structure\n    assert basic_rating.tag == \"div\"\n    assert basic_rating.attrs['class'] == \"rating\"\n    assert len(basic_rating.children) == 5\n    \n    # Verify each input\n    for i, input_elem in enumerate(basic_rating.children, 1):\n        assert input_elem.tag == \"input\"\n        assert input_elem.attrs['type'] == \"radio\"\n        assert input_elem.attrs['name'] == \"rating-1\"\n        assert \"mask\" in input_elem.attrs['class']\n        assert \"mask-star\" in input_elem.attrs['class']\n        assert input_elem.attrs['aria-label'] == f\"{i} star\"\n        if i == 2:\n            assert input_elem.attrs.get('checked') == \"checked\"\n        else:\n            assert 'checked' not in input_elem.attrs\n    \n    return basic_rating\n\n# Run the tests\ntest_rating_basic_fasthtml_examples()\n\n\n&lt;div class=\"rating\"&gt;\n  &lt;input type=\"radio\" name=\"rating-1\" aria-label=\"1 star\" class=\"mask mask-star\"&gt;\n  &lt;input type=\"radio\" name=\"rating-1\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star\"&gt;\n  &lt;input type=\"radio\" name=\"rating-1\" aria-label=\"3 star\" class=\"mask mask-star\"&gt;\n  &lt;input type=\"radio\" name=\"rating-1\" aria-label=\"4 star\" class=\"mask mask-star\"&gt;\n  &lt;input type=\"radio\" name=\"rating-1\" aria-label=\"5 star\" class=\"mask mask-star\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_rating_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_rating_readonly_fasthtml_examples\n\n test_rating_readonly_fasthtml_examples ()\n\nTest read-only rating from daisyUI v5 documentation.\n\n\nExported source\ndef test_rating_readonly_fasthtml_examples():\n    \"\"\"Test read-only rating from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles\n    \n    # Read-only rating with 3 stars selected\n    readonly_rating = Div(\n        Div(cls=combine_classes(mask, mask_styles.star), aria_label=\"1 star\"),\n        Div(cls=combine_classes(mask, mask_styles.star), aria_label=\"2 star\"),\n        Div(cls=combine_classes(mask, mask_styles.star), aria_label=\"3 star\", aria_current=\"true\"),\n        Div(cls=combine_classes(mask, mask_styles.star), aria_label=\"4 star\"),\n        Div(cls=combine_classes(mask, mask_styles.star), aria_label=\"5 star\"),\n        cls=str(rating)\n    )\n    \n    # Verify structure\n    assert readonly_rating.tag == \"div\"\n    assert readonly_rating.attrs['class'] == \"rating\"\n    assert len(readonly_rating.children) == 5\n    \n    # Verify each div\n    for i, div_elem in enumerate(readonly_rating.children, 1):\n        assert div_elem.tag == \"div\"\n        assert \"mask\" in div_elem.attrs['class']\n        assert \"mask-star\" in div_elem.attrs['class']\n        assert div_elem.attrs['aria-label'] == f\"{i} star\"\n        if i == 3:\n            assert div_elem.attrs.get('aria-current') == \"true\"\n        else:\n            assert 'aria-current' not in div_elem.attrs\n    \n    return readonly_rating\n\n# Run the tests\ntest_rating_readonly_fasthtml_examples()\n\n\n&lt;div class=\"rating\"&gt;\n  &lt;div aria-label=\"1 star\" class=\"mask mask-star\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"2 star\" class=\"mask mask-star\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"3 star\" aria-current=\"true\" class=\"mask mask-star\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"4 star\" class=\"mask mask-star\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"5 star\" class=\"mask mask-star\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_rating_readonly_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_rating_with_colors_fasthtml_examples\n\n test_rating_with_colors_fasthtml_examples ()\n\nTest rating with different colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_rating_with_colors_fasthtml_examples():\n    \"\"\"Test rating with different colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles\n    \n    # mask-star-2 with orange-400 color\n    star2_orange_rating = Div(\n        Input(type=\"radio\", name=\"rating-2\", cls=combine_classes(mask, mask_styles.star_2, bg.orange._400), aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-2\", cls=combine_classes(mask, mask_styles.star_2, bg.orange._400), aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-2\", cls=combine_classes(mask, mask_styles.star_2, bg.orange._400), aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-2\", cls=combine_classes(mask, mask_styles.star_2, bg.orange._400), aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-2\", cls=combine_classes(mask, mask_styles.star_2, bg.orange._400), aria_label=\"5 star\"),\n        cls=str(rating)\n    )\n    \n    # Verify star2_orange_rating\n    assert star2_orange_rating.tag == \"div\"\n    assert star2_orange_rating.attrs['class'] == \"rating\"\n    for i, input_elem in enumerate(star2_orange_rating.children, 1):\n        assert input_elem.attrs['name'] == \"rating-2\"\n        assert \"mask-star-2\" in input_elem.attrs['class']\n        assert \"bg-orange-400\" in input_elem.attrs['class']\n        if i == 2:\n            assert input_elem.attrs.get('checked') == \"checked\"\n    \n    # mask-heart with multiple colors\n    heart_multi_color_rating = Div(\n        Input(type=\"radio\", name=\"rating-3\", cls=combine_classes(mask, mask_styles.heart, bg.red._400), aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-3\", cls=combine_classes(mask, mask_styles.heart, bg.orange._400), aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-3\", cls=combine_classes(mask, mask_styles.heart, bg.yellow._400), aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-3\", cls=combine_classes(mask, mask_styles.heart, bg.lime._400), aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-3\", cls=combine_classes(mask, mask_styles.heart, bg.green._400), aria_label=\"5 star\"),\n        cls=combine_classes(rating, gap._1)\n    )\n    \n    # Verify heart_multi_color_rating\n    assert heart_multi_color_rating.tag == \"div\"\n    assert \"rating\" in heart_multi_color_rating.attrs['class']\n    assert \"gap-1\" in heart_multi_color_rating.attrs['class']\n    \n    colors = [\"bg-red-400\", \"bg-orange-400\", \"bg-yellow-400\", \"bg-lime-400\", \"bg-green-400\"]\n    for i, (input_elem, color) in enumerate(zip(heart_multi_color_rating.children, colors), 1):\n        assert input_elem.attrs['name'] == \"rating-3\"\n        assert \"mask-heart\" in input_elem.attrs['class']\n        assert color in input_elem.attrs['class']\n        if i == 2:\n            assert input_elem.attrs.get('checked') == \"checked\"\n    \n    # mask-star-2 with green-500 color\n    star2_green_rating = Div(\n        Input(type=\"radio\", name=\"rating-4\", cls=combine_classes(mask, mask_styles.star_2, bg.green._500), aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-4\", cls=combine_classes(mask, mask_styles.star_2, bg.green._500), aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-4\", cls=combine_classes(mask, mask_styles.star_2, bg.green._500), aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-4\", cls=combine_classes(mask, mask_styles.star_2, bg.green._500), aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-4\", cls=combine_classes(mask, mask_styles.star_2, bg.green._500), aria_label=\"5 star\"),\n        cls=str(rating)\n    )\n    \n    # Verify star2_green_rating\n    assert star2_green_rating.tag == \"div\"\n    assert star2_green_rating.attrs['class'] == \"rating\"\n    for i, input_elem in enumerate(star2_green_rating.children, 1):\n        assert input_elem.attrs['name'] == \"rating-4\"\n        assert \"mask-star-2\" in input_elem.attrs['class']\n        assert \"bg-green-500\" in input_elem.attrs['class']\n        if i == 2:\n            assert input_elem.attrs.get('checked') == \"checked\"\n    \n    return Div(star2_orange_rating, heart_multi_color_rating, star2_green_rating)\n\n# Run the tests\ntest_rating_with_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"rating\"&gt;\n    &lt;input type=\"radio\" name=\"rating-2\" aria-label=\"1 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-2\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-2\" aria-label=\"3 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-2\" aria-label=\"4 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-2\" aria-label=\"5 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"rating gap-1\"&gt;\n    &lt;input type=\"radio\" name=\"rating-3\" aria-label=\"1 star\" class=\"mask mask-heart bg-red-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-3\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-heart bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-3\" aria-label=\"3 star\" class=\"mask mask-heart bg-yellow-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-3\" aria-label=\"4 star\" class=\"mask mask-heart bg-lime-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-3\" aria-label=\"5 star\" class=\"mask mask-heart bg-green-400\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"rating\"&gt;\n    &lt;input type=\"radio\" name=\"rating-4\" aria-label=\"1 star\" class=\"mask mask-star-2 bg-green-500\"&gt;\n    &lt;input type=\"radio\" name=\"rating-4\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2 bg-green-500\"&gt;\n    &lt;input type=\"radio\" name=\"rating-4\" aria-label=\"3 star\" class=\"mask mask-star-2 bg-green-500\"&gt;\n    &lt;input type=\"radio\" name=\"rating-4\" aria-label=\"4 star\" class=\"mask mask-star-2 bg-green-500\"&gt;\n    &lt;input type=\"radio\" name=\"rating-4\" aria-label=\"5 star\" class=\"mask mask-star-2 bg-green-500\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_rating_with_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_rating_sizes_fasthtml_examples\n\n test_rating_sizes_fasthtml_examples ()\n\nTest rating size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_rating_sizes_fasthtml_examples():\n    \"\"\"Test rating size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles\n    \n    # Common mask and background classes\n    mask_star2_orange = combine_classes(mask, mask_styles.star_2, bg.orange._400)\n    \n    # Extra small rating\n    xs_rating = Div(\n        Input(type=\"radio\", name=\"rating-5\", cls=mask_star2_orange, aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-5\", cls=mask_star2_orange, aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-5\", cls=mask_star2_orange, aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-5\", cls=mask_star2_orange, aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-5\", cls=mask_star2_orange, aria_label=\"5 star\"),\n        cls=combine_classes(rating, rating_sizes.xs)\n    )\n    \n    # Small rating\n    sm_rating = Div(\n        Input(type=\"radio\", name=\"rating-6\", cls=mask_star2_orange, aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-6\", cls=mask_star2_orange, aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-6\", cls=mask_star2_orange, aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-6\", cls=mask_star2_orange, aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-6\", cls=mask_star2_orange, aria_label=\"5 star\"),\n        cls=combine_classes(rating, rating_sizes.sm)\n    )\n    \n    # Medium rating\n    md_rating = Div(\n        Input(type=\"radio\", name=\"rating-7\", cls=mask_star2_orange, aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-7\", cls=mask_star2_orange, aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-7\", cls=mask_star2_orange, aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-7\", cls=mask_star2_orange, aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-7\", cls=mask_star2_orange, aria_label=\"5 star\"),\n        cls=combine_classes(rating, rating_sizes.md)\n    )\n    \n    # Large rating\n    lg_rating = Div(\n        Input(type=\"radio\", name=\"rating-8\", cls=mask_star2_orange, aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-8\", cls=mask_star2_orange, aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-8\", cls=mask_star2_orange, aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-8\", cls=mask_star2_orange, aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-8\", cls=mask_star2_orange, aria_label=\"5 star\"),\n        cls=combine_classes(rating, rating_sizes.lg)\n    )\n    \n    # Extra large rating\n    xl_rating = Div(\n        Input(type=\"radio\", name=\"rating-9\", cls=mask_star2_orange, aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-9\", cls=mask_star2_orange, aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-9\", cls=mask_star2_orange, aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-9\", cls=mask_star2_orange, aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-9\", cls=mask_star2_orange, aria_label=\"5 star\"),\n        cls=combine_classes(rating, rating_sizes.xl)\n    )\n    \n    # Verify all sizes\n    sizes = [\n        (xs_rating, \"rating-xs\", \"rating-5\"),\n        (sm_rating, \"rating-sm\", \"rating-6\"),\n        (md_rating, \"rating-md\", \"rating-7\"),\n        (lg_rating, \"rating-lg\", \"rating-8\"),\n        (xl_rating, \"rating-xl\", \"rating-9\")\n    ]\n    \n    for rating_elem, size_class, name in sizes:\n        assert rating_elem.tag == \"div\"\n        assert \"rating\" in rating_elem.attrs['class']\n        assert size_class in rating_elem.attrs['class']\n        assert len(rating_elem.children) == 5\n        \n        for i, input_elem in enumerate(rating_elem.children, 1):\n            assert input_elem.attrs['name'] == name\n            assert \"mask\" in input_elem.attrs['class']\n            assert \"mask-star-2\" in input_elem.attrs['class']\n            assert \"bg-orange-400\" in input_elem.attrs['class']\n            if i == 2:\n                assert input_elem.attrs.get('checked') == \"checked\"\n    \n    return Div(xs_rating, sm_rating, md_rating, lg_rating, xl_rating)\n\n# Run the tests\ntest_rating_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"rating rating-xs\"&gt;\n    &lt;input type=\"radio\" name=\"rating-5\" aria-label=\"1 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-5\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-5\" aria-label=\"3 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-5\" aria-label=\"4 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-5\" aria-label=\"5 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"rating rating-sm\"&gt;\n    &lt;input type=\"radio\" name=\"rating-6\" aria-label=\"1 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-6\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-6\" aria-label=\"3 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-6\" aria-label=\"4 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-6\" aria-label=\"5 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"rating rating-md\"&gt;\n    &lt;input type=\"radio\" name=\"rating-7\" aria-label=\"1 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-7\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-7\" aria-label=\"3 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-7\" aria-label=\"4 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-7\" aria-label=\"5 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"rating rating-lg\"&gt;\n    &lt;input type=\"radio\" name=\"rating-8\" aria-label=\"1 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-8\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-8\" aria-label=\"3 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-8\" aria-label=\"4 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-8\" aria-label=\"5 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"rating rating-xl\"&gt;\n    &lt;input type=\"radio\" name=\"rating-9\" aria-label=\"1 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-9\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-9\" aria-label=\"3 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-9\" aria-label=\"4 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n    &lt;input type=\"radio\" name=\"rating-9\" aria-label=\"5 star\" class=\"mask mask-star-2 bg-orange-400\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_rating_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_rating_with_hidden_fasthtml_examples\n\n test_rating_with_hidden_fasthtml_examples ()\n\nTest rating with hidden clear option from daisyUI v5 documentation.\n\n\nExported source\ndef test_rating_with_hidden_fasthtml_examples():\n    \"\"\"Test rating with hidden clear option from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles\n    \n    # Rating with hidden clear option\n    rating_with_hidden = Div(\n        Input(type=\"radio\", name=\"rating-10\", cls=str(rating_modifiers.hidden), aria_label=\"clear\"),\n        Input(type=\"radio\", name=\"rating-10\", cls=combine_classes(mask, mask_styles.star_2), aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-10\", cls=combine_classes(mask, mask_styles.star_2), aria_label=\"2 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-10\", cls=combine_classes(mask, mask_styles.star_2), aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-10\", cls=combine_classes(mask, mask_styles.star_2), aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-10\", cls=combine_classes(mask, mask_styles.star_2), aria_label=\"5 star\"),\n        cls=combine_classes(rating, rating_sizes.lg)\n    )\n    \n    # Verify structure\n    assert rating_with_hidden.tag == \"div\"\n    assert \"rating\" in rating_with_hidden.attrs['class']\n    assert \"rating-lg\" in rating_with_hidden.attrs['class']\n    assert len(rating_with_hidden.children) == 6  # One hidden + 5 stars\n    \n    # Verify hidden clear input\n    hidden_input = rating_with_hidden.children[0]\n    assert hidden_input.tag == \"input\"\n    assert hidden_input.attrs['type'] == \"radio\"\n    assert hidden_input.attrs['name'] == \"rating-10\"\n    assert hidden_input.attrs['class'] == \"rating-hidden\"\n    assert hidden_input.attrs['aria-label'] == \"clear\"\n    \n    # Verify star inputs\n    for i, input_elem in enumerate(rating_with_hidden.children[1:], 1):\n        assert input_elem.tag == \"input\"\n        assert input_elem.attrs['type'] == \"radio\"\n        assert input_elem.attrs['name'] == \"rating-10\"\n        assert \"mask\" in input_elem.attrs['class']\n        assert \"mask-star-2\" in input_elem.attrs['class']\n        assert input_elem.attrs['aria-label'] == f\"{i} star\"\n        if i == 2:\n            assert input_elem.attrs.get('checked') == \"checked\"\n        else:\n            assert 'checked' not in input_elem.attrs\n    \n    return rating_with_hidden\n\n# Run the tests\ntest_rating_with_hidden_fasthtml_examples()\n\n\n&lt;div class=\"rating rating-lg\"&gt;\n  &lt;input type=\"radio\" name=\"rating-10\" aria-label=\"clear\" class=\"rating-hidden\"&gt;\n  &lt;input type=\"radio\" name=\"rating-10\" aria-label=\"1 star\" class=\"mask mask-star-2\"&gt;\n  &lt;input type=\"radio\" name=\"rating-10\" aria-label=\"2 star\" checked=\"checked\" class=\"mask mask-star-2\"&gt;\n  &lt;input type=\"radio\" name=\"rating-10\" aria-label=\"3 star\" class=\"mask mask-star-2\"&gt;\n  &lt;input type=\"radio\" name=\"rating-10\" aria-label=\"4 star\" class=\"mask mask-star-2\"&gt;\n  &lt;input type=\"radio\" name=\"rating-10\" aria-label=\"5 star\" class=\"mask mask-star-2\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_rating_with_hidden_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_rating_half_stars_fasthtml_examples\n\n test_rating_half_stars_fasthtml_examples ()\n\nTest rating with half stars from daisyUI v5 documentation.\n\n\nExported source\ndef test_rating_half_stars_fasthtml_examples():\n    \"\"\"Test rating with half stars from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles, mask_modifiers\n    \n    # Half stars rating\n    half_stars_rating = Div(\n        Input(type=\"radio\", name=\"rating-11\", cls=str(rating_modifiers.hidden)),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_1, bg.green._500), aria_label=\"0.5 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_2, bg.green._500), aria_label=\"1 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_1, bg.green._500), aria_label=\"1.5 star\", checked=\"checked\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_2, bg.green._500), aria_label=\"2 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_1, bg.green._500), aria_label=\"2.5 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_2, bg.green._500), aria_label=\"3 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_1, bg.green._500), aria_label=\"3.5 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_2, bg.green._500), aria_label=\"4 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_1, bg.green._500), aria_label=\"4.5 star\"),\n        Input(type=\"radio\", name=\"rating-11\", cls=combine_classes(mask, mask_styles.star_2, mask_modifiers.half_2, bg.green._500), aria_label=\"5 star\"),\n        cls=combine_classes(rating, rating_sizes.lg, rating_modifiers.half)\n    )\n    \n    # Verify structure\n    assert half_stars_rating.tag == \"div\"\n    assert \"rating\" in half_stars_rating.attrs['class']\n    assert \"rating-lg\" in half_stars_rating.attrs['class']\n    assert \"rating-half\" in half_stars_rating.attrs['class']\n    assert len(half_stars_rating.children) == 11  # 1 hidden + 10 halves\n    \n    # Verify hidden input\n    hidden_input = half_stars_rating.children[0]\n    assert hidden_input.tag == \"input\"\n    assert hidden_input.attrs['type'] == \"radio\"\n    assert hidden_input.attrs['name'] == \"rating-11\"\n    assert hidden_input.attrs['class'] == \"rating-hidden\"\n    \n    # Verify half star inputs\n    expected_labels = [\n        \"0.5 star\", \"1 star\", \"1.5 star\", \"2 star\", \"2.5 star\",\n        \"3 star\", \"3.5 star\", \"4 star\", \"4.5 star\", \"5 star\"\n    ]\n    \n    for i, (input_elem, label) in enumerate(zip(half_stars_rating.children[1:], expected_labels)):\n        assert input_elem.tag == \"input\"\n        assert input_elem.attrs['type'] == \"radio\"\n        assert input_elem.attrs['name'] == \"rating-11\"\n        assert \"mask\" in input_elem.attrs['class']\n        assert \"mask-star-2\" in input_elem.attrs['class']\n        assert \"bg-green-500\" in input_elem.attrs['class']\n        assert input_elem.attrs['aria-label'] == label\n        \n        # Check for half-1 or half-2\n        if i % 2 == 0:  # Even indices (0, 2, 4, 6, 8) should have half-1\n            assert \"mask-half-1\" in input_elem.attrs['class']\n        else:  # Odd indices (1, 3, 5, 7, 9) should have half-2\n            assert \"mask-half-2\" in input_elem.attrs['class']\n        \n        # Check if 1.5 star is checked (index 2 in 0-based)\n        if i == 2:\n            assert input_elem.attrs.get('checked') == \"checked\"\n        else:\n            assert 'checked' not in input_elem.attrs\n    \n    return half_stars_rating\n\n# Run the tests\ntest_rating_half_stars_fasthtml_examples()\n\n\n&lt;div class=\"rating rating-lg rating-half\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" class=\"rating-hidden\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"0.5 star\" class=\"mask mask-star-2 mask-half-1 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"1 star\" class=\"mask mask-star-2 mask-half-2 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"1.5 star\" checked=\"checked\" class=\"mask mask-star-2 mask-half-1 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"2 star\" class=\"mask mask-star-2 mask-half-2 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"2.5 star\" class=\"mask mask-star-2 mask-half-1 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"3 star\" class=\"mask mask-star-2 mask-half-2 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"3.5 star\" class=\"mask mask-star-2 mask-half-1 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"4 star\" class=\"mask mask-star-2 mask-half-2 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"4.5 star\" class=\"mask mask-star-2 mask-half-1 bg-green-500\"&gt;\n  &lt;input type=\"radio\" name=\"rating-11\" aria-label=\"5 star\" class=\"mask mask-star-2 mask-half-2 bg-green-500\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_rating_half_stars_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "rating"
    ]
  },
  {
    "objectID": "components/data_input/checkbox.html",
    "href": "components/data_input/checkbox.html",
    "title": "checkbox",
    "section": "",
    "text": "Base Checkbox\n\n\nExported source\ncheckbox = SingleValueFactory(\"checkbox\", \"Base checkbox component\") # Base checkbox component\n\n\n\n\nCheckbox Colors\n\n\nExported source\ncheckbox_colors = enums_to_simple_factory(checkbox, [SemanticColorBrand, SemanticColorStatus], \"Checkbox color variants using daisyUI semantic colors\") # Checkbox color variants\n\n\n\n\nCheckbox Sizes\n\n\nExported source\ncheckbox_sizes = enums_to_simple_factory(checkbox, [DaisyUINamedSize], \"Checkbox size variants from extra small to extra large\") # Checkbox size variants\n\n\n\n\nCheckbox Test Examples\n\nsource\n\n\ntest_checkbox_basic_examples\n\n test_checkbox_basic_examples ()\n\nTest basic checkbox utilities.\n\n\nExported source\ndef test_checkbox_basic_examples():\n    \"\"\"Test basic checkbox utilities.\"\"\"\n    # Basic checkbox\n    assert str(checkbox) == \"checkbox\"\n    \n    # Test with modifiers\n    assert str(checkbox.hover) == \"hover:checkbox\"\n    assert str(checkbox.md) == \"md:checkbox\"\n    assert str(checkbox.dark) == \"dark:checkbox\"\n\n# Run the tests\ntest_checkbox_basic_examples()\n\n\n\nsource\n\n\ntest_checkbox_colors_examples\n\n test_checkbox_colors_examples ()\n\nTest checkbox color variants.\n\n\nExported source\ndef test_checkbox_colors_examples():\n    \"\"\"Test checkbox color variants.\"\"\"\n    # All color variants\n    assert str(checkbox_colors.neutral) == \"checkbox-neutral\"\n    assert str(checkbox_colors.primary) == \"checkbox-primary\"\n    assert str(checkbox_colors.secondary) == \"checkbox-secondary\"\n    assert str(checkbox_colors.accent) == \"checkbox-accent\"\n    assert str(checkbox_colors.info) == \"checkbox-info\"\n    assert str(checkbox_colors.success) == \"checkbox-success\"\n    assert str(checkbox_colors.warning) == \"checkbox-warning\"\n    assert str(checkbox_colors.error) == \"checkbox-error\"\n    \n    # With modifiers\n    assert str(checkbox_colors.primary.hover) == \"hover:checkbox-primary\"\n    assert str(checkbox_colors.success.focus) == \"focus:checkbox-success\"\n\n# Run the tests\ntest_checkbox_colors_examples()\n\n\n\nsource\n\n\ntest_checkbox_sizes_examples\n\n test_checkbox_sizes_examples ()\n\nTest checkbox size variants.\n\n\nExported source\ndef test_checkbox_sizes_examples():\n    \"\"\"Test checkbox size variants.\"\"\"\n    assert str(checkbox_sizes.xs) == \"checkbox-xs\"\n    assert str(checkbox_sizes.sm) == \"checkbox-sm\"\n    assert str(checkbox_sizes.md) == \"checkbox-md\"\n    assert str(checkbox_sizes.lg) == \"checkbox-lg\"\n    assert str(checkbox_sizes.xl) == \"checkbox-xl\"\n    \n    # With responsive modifiers\n    assert str(checkbox_sizes.xs.sm) == \"sm:checkbox-xs\"\n    assert str(checkbox_sizes.lg.md) == \"md:checkbox-lg\"\n\n# Run the tests\ntest_checkbox_sizes_examples()\n\n\n\nsource\n\n\ntest_checkbox_basic_fasthtml_examples\n\n test_checkbox_basic_fasthtml_examples ()\n\nTest basic checkbox example from daisyUI v5 documentation.\n\n\nExported source\ndef test_checkbox_basic_fasthtml_examples():\n    \"\"\"Test basic checkbox example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Basic checkbox\n    basic_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=str(checkbox)\n    )\n    \n    # Verify attributes\n    assert basic_checkbox.tag == \"input\"\n    assert basic_checkbox.attrs['type'] == \"checkbox\"\n    assert basic_checkbox.attrs['checked'] == \"checked\"\n    assert basic_checkbox.attrs['class'] == \"checkbox\"\n    \n    return Div(basic_checkbox)\n\n# Run the tests\ntest_checkbox_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_checkbox_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_checkbox_with_fieldset_fasthtml_examples\n\n test_checkbox_with_fieldset_fasthtml_examples ()\n\nTest checkbox with fieldset and label from daisyUI v5 documentation.\n\n\nExported source\ndef test_checkbox_with_fieldset_fasthtml_examples():\n    \"\"\"Test checkbox with fieldset and label from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Fieldset, Legend, Label, Input, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import border, rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset, fieldset_legend, label\n    \n    # Checkbox with fieldset and label\n    fieldset_checkbox = Fieldset(\n        Legend(\"Login options\", cls=str(fieldset_legend)),\n        Label(\n            Input(\n                type=\"checkbox\",\n                checked=\"checked\",\n                cls=str(checkbox)\n            ),\n            \"Remember me\",\n            cls=str(label)\n        ),\n        cls=combine_classes(\n            fieldset,\n            bg_dui.base_100,\n            border_dui.base_300,\n            rounded.box,\n            w._64,\n            border,\n            p._4\n        )\n    )\n    \n    # Verify fieldset structure\n    assert fieldset_checkbox.tag == \"fieldset\"\n    assert \"fieldset\" in fieldset_checkbox.attrs['class']\n    assert \"bg-base-100\" in fieldset_checkbox.attrs['class']\n    assert \"border-base-300\" in fieldset_checkbox.attrs['class']\n    assert \"rounded-box\" in fieldset_checkbox.attrs['class']\n    assert \"w-64\" in fieldset_checkbox.attrs['class']\n    assert \"border\" in fieldset_checkbox.attrs['class']\n    assert \"p-4\" in fieldset_checkbox.attrs['class']\n    \n    # Verify legend\n    legend_element = fieldset_checkbox.children[0]\n    assert legend_element.tag == \"legend\"\n    assert legend_element.attrs['class'] == \"fieldset-legend\"\n    assert legend_element.children[0] == \"Login options\"\n    \n    # Verify label\n    label_element = fieldset_checkbox.children[1]\n    assert label_element.tag == \"label\"\n    assert label_element.attrs['class'] == \"label\"\n    \n    # Verify checkbox inside label\n    checkbox_input = label_element.children[0]\n    assert checkbox_input.tag == \"input\"\n    assert checkbox_input.attrs['type'] == \"checkbox\"\n    assert checkbox_input.attrs['checked'] == \"checked\"\n    assert checkbox_input.attrs['class'] == \"checkbox\"\n    \n    # Verify label text\n    assert label_element.children[1] == \"Remember me\"\n    \n    return Div(fieldset_checkbox)\n\n# Run the tests\ntest_checkbox_with_fieldset_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;fieldset class=\"fieldset bg-base-100 border-base-300 rounded-box w-64 &lt;cjm_fasthtml_tailwind.utilities.borders.BorderWidthFactory object at 0x7f3f56856390&gt; p-4\"&gt;&lt;legend class=\"fieldset-legend\"&gt;Login options&lt;/legend&gt;&lt;label class=\"label\"&gt;      &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox\"&gt;\nRemember me&lt;/label&gt;&lt;/fieldset&gt;&lt;/div&gt;\n\n\n\ntest_func = test_checkbox_with_fieldset_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_checkbox_sizes_fasthtml_examples\n\n test_checkbox_sizes_fasthtml_examples ()\n\nTest checkbox size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_checkbox_sizes_fasthtml_examples():\n    \"\"\"Test checkbox size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Extra small checkbox\n    xs_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_sizes.xs)\n    )\n    assert \"checkbox\" in xs_checkbox.attrs['class']\n    assert \"checkbox-xs\" in xs_checkbox.attrs['class']\n    \n    # Small checkbox\n    sm_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_sizes.sm)\n    )\n    assert \"checkbox-sm\" in sm_checkbox.attrs['class']\n    \n    # Medium checkbox\n    md_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_sizes.md)\n    )\n    assert \"checkbox-md\" in md_checkbox.attrs['class']\n    \n    # Large checkbox\n    lg_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_sizes.lg)\n    )\n    assert \"checkbox-lg\" in lg_checkbox.attrs['class']\n    \n    # Extra large checkbox\n    xl_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_sizes.xl)\n    )\n    assert \"checkbox-xl\" in xl_checkbox.attrs['class']\n    \n    return Div(\n        xs_checkbox,\n        sm_checkbox,\n        md_checkbox,\n        lg_checkbox,\n        xl_checkbox\n    )\n\n# Run the tests\ntest_checkbox_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-xs\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-sm\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-md\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-lg\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-xl\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_checkbox_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_checkbox_colors_fasthtml_examples\n\n test_checkbox_colors_fasthtml_examples ()\n\nTest checkbox color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_checkbox_colors_fasthtml_examples():\n    \"\"\"Test checkbox color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Primary checkbox\n    primary_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.primary)\n    )\n    assert \"checkbox\" in primary_checkbox.attrs['class']\n    assert \"checkbox-primary\" in primary_checkbox.attrs['class']\n    \n    # Secondary checkbox\n    secondary_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.secondary)\n    )\n    assert \"checkbox-secondary\" in secondary_checkbox.attrs['class']\n    \n    # Accent checkbox\n    accent_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.accent)\n    )\n    assert \"checkbox-accent\" in accent_checkbox.attrs['class']\n    \n    # Neutral checkbox\n    neutral_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.neutral)\n    )\n    assert \"checkbox-neutral\" in neutral_checkbox.attrs['class']\n    \n    # Info checkbox\n    info_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.info)\n    )\n    assert \"checkbox-info\" in info_checkbox.attrs['class']\n    \n    # Success checkbox\n    success_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.success)\n    )\n    assert \"checkbox-success\" in success_checkbox.attrs['class']\n    \n    # Warning checkbox\n    warning_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.warning)\n    )\n    assert \"checkbox-warning\" in warning_checkbox.attrs['class']\n    \n    # Error checkbox\n    error_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(checkbox, checkbox_colors.error)\n    )\n    assert \"checkbox-error\" in error_checkbox.attrs['class']\n    \n    return Div(\n        primary_checkbox,\n        secondary_checkbox,\n        accent_checkbox,\n        neutral_checkbox,\n        info_checkbox,\n        success_checkbox,\n        warning_checkbox,\n        error_checkbox\n    )\n\n# Run the tests\ntest_checkbox_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-primary\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-secondary\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-accent\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-neutral\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-info\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-success\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-warning\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox checkbox-error\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_checkbox_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_checkbox_disabled_fasthtml_examples\n\n test_checkbox_disabled_fasthtml_examples ()\n\nTest disabled checkbox variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_checkbox_disabled_fasthtml_examples():\n    \"\"\"Test disabled checkbox variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Disabled unchecked checkbox\n    disabled_unchecked = Input(\n        type=\"checkbox\",\n        cls=str(checkbox),\n        disabled=True\n    )\n    assert disabled_unchecked.tag == \"input\"\n    assert disabled_unchecked.attrs['type'] == \"checkbox\"\n    assert disabled_unchecked.attrs['class'] == \"checkbox\"\n    assert disabled_unchecked.attrs['disabled'] == True\n    assert 'checked' not in disabled_unchecked.attrs\n    \n    # Disabled checked checkbox\n    disabled_checked = Input(\n        type=\"checkbox\",\n        cls=str(checkbox),\n        disabled=True,\n        checked=\"checked\"\n    )\n    assert disabled_checked.tag == \"input\"\n    assert disabled_checked.attrs['type'] == \"checkbox\"\n    assert disabled_checked.attrs['class'] == \"checkbox\"\n    assert disabled_checked.attrs['disabled'] == True\n    assert disabled_checked.attrs['checked'] == \"checked\"\n    \n    return Div(\n        disabled_unchecked,\n        disabled_checked\n    )\n\n# Run the tests\ntest_checkbox_disabled_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" disabled class=\"checkbox\"&gt;\n  &lt;input type=\"checkbox\" disabled checked=\"checked\" class=\"checkbox\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_checkbox_disabled_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_checkbox_indeterminate_fasthtml_examples\n\n test_checkbox_indeterminate_fasthtml_examples ()\n\nTest indeterminate checkbox from daisyUI v5 documentation.\n\n\nExported source\ndef test_checkbox_indeterminate_fasthtml_examples():\n    \"\"\"Test indeterminate checkbox from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Script, Div\n    \n    # Indeterminate checkbox (requires JavaScript to set the state)\n    # Note: The indeterminate state must be set via JavaScript\n    indeterminate_checkbox = Input(\n        type=\"checkbox\",\n        cls=str(checkbox),\n        id=\"my-checkbox\"\n    )\n    \n    # JavaScript to set indeterminate state\n    indeterminate_script = Script(\"\"\"\n        document.getElementById(\"my-checkbox\").indeterminate = true;\n    \"\"\")\n    \n    # Verify checkbox attributes\n    assert indeterminate_checkbox.tag == \"input\"\n    assert indeterminate_checkbox.attrs['type'] == \"checkbox\"\n    assert indeterminate_checkbox.attrs['class'] == \"checkbox\"\n    assert indeterminate_checkbox.attrs['id'] == \"my-checkbox\"\n    \n    # Verify script element\n    assert indeterminate_script.tag == \"script\"\n    assert \"indeterminate = true\" in indeterminate_script.children[0]\n    \n    return Div(\n        indeterminate_script,\n        indeterminate_checkbox\n    )\n\n# Run the tests\ntest_checkbox_indeterminate_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;script&gt;\n        document.getElementById(\"my-checkbox\").indeterminate = true;\n    &lt;/script&gt;  &lt;input type=\"checkbox\" id=\"my-checkbox\" class=\"checkbox\" name=\"my-checkbox\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_checkbox_indeterminate_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_checkbox_custom_colors_fasthtml_examples\n\n test_checkbox_custom_colors_fasthtml_examples ()\n\nTest checkbox with custom colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_checkbox_custom_colors_fasthtml_examples():\n    \"\"\"Test checkbox with custom colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    from cjm_fasthtml_tailwind.utilities.borders import border_color\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Checkbox with custom colors\n    custom_color_checkbox = Input(\n        type=\"checkbox\",\n        checked=\"checked\",\n        cls=combine_classes(\n            checkbox,\n            border_color.indigo._600,\n            bg.indigo._500,\n            border_color.orange._500.checked,\n            bg.orange._400.checked,\n            text_color.orange._800.checked\n        )\n    )\n    \n    # Verify attributes\n    assert custom_color_checkbox.tag == \"input\"\n    assert custom_color_checkbox.attrs['type'] == \"checkbox\"\n    assert custom_color_checkbox.attrs['checked'] == \"checked\"\n    assert \"checkbox\" in custom_color_checkbox.attrs['class']\n    assert \"border-indigo-600\" in custom_color_checkbox.attrs['class']\n    assert \"bg-indigo-500\" in custom_color_checkbox.attrs['class']\n    assert \"checked:border-orange-500\" in custom_color_checkbox.attrs['class']\n    assert \"checked:bg-orange-400\" in custom_color_checkbox.attrs['class']\n    assert \"checked:text-orange-800\" in custom_color_checkbox.attrs['class']\n    \n    return Div(custom_color_checkbox)\n\n# Run the tests\ntest_checkbox_custom_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\" class=\"checkbox border-indigo-600 bg-indigo-500 checked:border-orange-500 checked:bg-orange-400 checked:text-orange-800\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_checkbox_custom_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "checkbox"
    ]
  },
  {
    "objectID": "components/data_input/range.html",
    "href": "components/data_input/range.html",
    "title": "range slider",
    "section": "",
    "text": "Base Range Slider\n\n\nExported source\nrange_dui = SingleValueFactory(\"range\", \"Base range slider component for &lt;input type=\\\"range\\\"&gt; tag\") # Base range component\n\n\n\n\nRange Slider Colors\n\n\nExported source\nrange_colors = enums_to_simple_factory(range_dui, [SemanticColorBrand, SemanticColorStatus], \"range color variants using daisyUI semantic colors\") # range color variants\n\n\n\n\nRange Slider Sizes\n\n\nExported source\nrange_sizes = enums_to_simple_factory(range_dui, [DaisyUINamedSize], \"range size variants from extra small to extra large\") # range size variants\n\n\n\n\nRange Slider Test Examples\n\nsource\n\n\ntest_range_basic_examples\n\n test_range_basic_examples ()\n\nTest basic range utilities.\n\n\nExported source\ndef test_range_basic_examples():\n    \"\"\"Test basic range utilities.\"\"\"\n    # Basic range\n    assert str(range_dui) == \"range\"\n    \n    # Test with modifiers\n    assert str(range_dui.hover) == \"hover:range\"\n    assert str(range_dui.md) == \"md:range\"\n    assert str(range_dui.dark) == \"dark:range\"\n\n# Run the tests\ntest_range_basic_examples()\n\n\n\nsource\n\n\ntest_range_colors_examples\n\n test_range_colors_examples ()\n\nTest range color variants.\n\n\nExported source\ndef test_range_colors_examples():\n    \"\"\"Test range color variants.\"\"\"\n    # All color variants\n    assert str(range_colors.neutral) == \"range-neutral\"\n    assert str(range_colors.primary) == \"range-primary\"\n    assert str(range_colors.secondary) == \"range-secondary\"\n    assert str(range_colors.accent) == \"range-accent\"\n    assert str(range_colors.info) == \"range-info\"\n    assert str(range_colors.success) == \"range-success\"\n    assert str(range_colors.warning) == \"range-warning\"\n    assert str(range_colors.error) == \"range-error\"\n    \n    # With modifiers\n    assert str(range_colors.primary.hover) == \"hover:range-primary\"\n    assert str(range_colors.success.focus) == \"focus:range-success\"\n\n# Run the tests\ntest_range_colors_examples()\n\n\n\nsource\n\n\ntest_range_sizes_examples\n\n test_range_sizes_examples ()\n\nTest range size variants.\n\n\nExported source\ndef test_range_sizes_examples():\n    \"\"\"Test range size variants.\"\"\"\n    assert str(range_sizes.xs) == \"range-xs\"\n    assert str(range_sizes.sm) == \"range-sm\"\n    assert str(range_sizes.md) == \"range-md\"\n    assert str(range_sizes.lg) == \"range-lg\"\n    assert str(range_sizes.xl) == \"range-xl\"\n    \n    # With responsive modifiers\n    assert str(range_sizes.xs.sm) == \"sm:range-xs\"\n    assert str(range_sizes.lg.md) == \"md:range-lg\"\n\n# Run the tests\ntest_range_sizes_examples()\n\n\n\nsource\n\n\ntest_range_basic_fasthtml_examples\n\n test_range_basic_fasthtml_examples ()\n\nTest basic range slider from daisyUI v5 documentation.\n\n\nExported source\ndef test_range_basic_fasthtml_examples():\n    \"\"\"Test basic range slider from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Basic range slider\n    basic_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=str(range_dui)\n    )\n    \n    # Verify attributes\n    assert basic_range.tag == \"input\"\n    assert basic_range.attrs['type'] == \"range\"\n    assert basic_range.attrs['min'] == \"0\"\n    assert basic_range.attrs['max'] == \"100\"\n    assert basic_range.attrs['value'] == \"40\"\n    assert basic_range.attrs['class'] == \"range\"\n    \n    return basic_range\n\n# Run the tests\ntest_range_basic_fasthtml_examples()\n\n\n&lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range\"&gt;\n\n\n\ntest_func = test_range_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_range_with_steps_fasthtml_examples\n\n test_range_with_steps_fasthtml_examples ()\n\nTest range with steps and measure from daisyUI v5 documentation.\n\n\nExported source\ndef test_range_with_steps_fasthtml_examples():\n    \"\"\"Test range with steps and measure from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import w, max_w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify, flex_display\n    from cjm_fasthtml_tailwind.utilities.spacing import p, m\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    \n    # Range with steps and measure\n    range_with_steps = Div(\n        Input(\n            type=\"range\",\n            min=\"0\",\n            max=\"100\",\n            value=\"25\",\n            step=\"25\",\n            cls=str(range_dui)\n        ),\n        Div(\n            Span(\"|\"),\n            Span(\"|\"),\n            Span(\"|\"),\n            Span(\"|\"),\n            Span(\"|\"),\n            cls=combine_classes(justify.between, flex_display, p.x(2.5), m.t._2, font_size.xs)\n        ),\n        Div(\n            Span(\"1\"),\n            Span(\"2\"),\n            Span(\"3\"),\n            Span(\"4\"),\n            Span(\"5\"),\n            cls=combine_classes(justify.between, flex_display, p.x(2.5), m.t._2, font_size.xs)\n        ),\n        cls=combine_classes(w.full, max_w.xs)\n    )\n    \n    # Verify container structure\n    assert range_with_steps.tag == \"div\"\n    assert \"w-full\" in range_with_steps.attrs['class']\n    assert \"max-w-xs\" in range_with_steps.attrs['class']\n    \n    # Verify range input\n    range_input = range_with_steps.children[0]\n    assert range_input.tag == \"input\"\n    assert range_input.attrs['type'] == \"range\"\n    assert range_input.attrs['min'] == \"0\"\n    assert range_input.attrs['max'] == \"100\"\n    assert range_input.attrs['value'] == \"25\"\n    assert range_input.attrs['step'] == \"25\"\n    assert range_input.attrs['class'] == \"range\"\n    \n    # Verify tick marks div\n    tick_marks = range_with_steps.children[1]\n    assert tick_marks.tag == \"div\"\n    assert \"flex\" in tick_marks.attrs['class']\n    assert \"justify-between\" in tick_marks.attrs['class']\n    assert \"px-2.5\" in tick_marks.attrs['class']\n    assert \"mt-2\" in tick_marks.attrs['class']\n    assert \"text-xs\" in tick_marks.attrs['class']\n    assert len(tick_marks.children) == 5\n    for i in range(5):\n        assert tick_marks.children[i].tag == \"span\"\n        assert tick_marks.children[i].children[0] == \"|\"\n    \n    # Verify labels div\n    labels = range_with_steps.children[2]\n    assert labels.tag == \"div\"\n    assert \"flex\" in labels.attrs['class']\n    assert \"justify-between\" in labels.attrs['class']\n    assert \"px-2.5\" in labels.attrs['class']\n    assert \"mt-2\" in labels.attrs['class']\n    assert \"text-xs\" in labels.attrs['class']\n    assert len(labels.children) == 5\n    for i in range(5):\n        assert labels.children[i].tag == \"span\"\n        assert labels.children[i].children[0] == str(i + 1)\n    \n    return range_with_steps\n\n# Run the tests\ntest_range_with_steps_fasthtml_examples()\n\n\n&lt;div class=\"w-full max-w-xs\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"25\" step=\"25\" class=\"range\"&gt;\n  &lt;div class=\"justify-between flex px-2.5 mt-2 text-xs\"&gt;\n&lt;span&gt;|&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;  &lt;/div&gt;\n  &lt;div class=\"justify-between flex px-2.5 mt-2 text-xs\"&gt;\n&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;&lt;span&gt;4&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_range_with_steps_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_range_colors_fasthtml_examples\n\n test_range_colors_fasthtml_examples ()\n\nTest range color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_range_colors_fasthtml_examples():\n    \"\"\"Test range color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Neutral color\n    neutral_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.neutral)\n    )\n    assert neutral_range.attrs['type'] == \"range\"\n    assert \"range\" in neutral_range.attrs['class']\n    assert \"range-neutral\" in neutral_range.attrs['class']\n    \n    # Primary color\n    primary_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.primary)\n    )\n    assert \"range\" in primary_range.attrs['class']\n    assert \"range-primary\" in primary_range.attrs['class']\n    \n    # Secondary color\n    secondary_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.secondary)\n    )\n    assert \"range\" in secondary_range.attrs['class']\n    assert \"range-secondary\" in secondary_range.attrs['class']\n    \n    # Accent color\n    accent_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.accent)\n    )\n    assert \"range\" in accent_range.attrs['class']\n    assert \"range-accent\" in accent_range.attrs['class']\n    \n    # Success color\n    success_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.success)\n    )\n    assert \"range\" in success_range.attrs['class']\n    assert \"range-success\" in success_range.attrs['class']\n    \n    # Warning color\n    warning_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.warning)\n    )\n    assert \"range\" in warning_range.attrs['class']\n    assert \"range-warning\" in warning_range.attrs['class']\n    \n    # Info color\n    info_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.info)\n    )\n    assert \"range\" in info_range.attrs['class']\n    assert \"range-info\" in info_range.attrs['class']\n    \n    # Error color\n    error_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_colors.error)\n    )\n    assert \"range\" in error_range.attrs['class']\n    assert \"range-error\" in error_range.attrs['class']\n    \n    # Return all color variations in a Div\n    return Div(\n        neutral_range,\n        primary_range,\n        secondary_range,\n        accent_range,\n        success_range,\n        warning_range,\n        info_range,\n        error_range\n    )\n\n# Run the tests\ntest_range_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-neutral\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-primary\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-secondary\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-accent\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-success\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-warning\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-info\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-error\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_range_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_range_sizes_fasthtml_examples\n\n test_range_sizes_fasthtml_examples ()\n\nTest range size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_range_sizes_fasthtml_examples():\n    \"\"\"Test range size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    \n    # Extra small size\n    xs_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"30\",\n        cls=combine_classes(range_dui, range_sizes.xs)\n    )\n    assert xs_range.attrs['type'] == \"range\"\n    assert xs_range.attrs['value'] == \"30\"\n    assert \"range\" in xs_range.attrs['class']\n    assert \"range-xs\" in xs_range.attrs['class']\n    \n    # Small size\n    sm_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(range_dui, range_sizes.sm)\n    )\n    assert sm_range.attrs['value'] == \"40\"\n    assert \"range\" in sm_range.attrs['class']\n    assert \"range-sm\" in sm_range.attrs['class']\n    \n    # Medium size (default)\n    md_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"50\",\n        cls=combine_classes(range_dui, range_sizes.md)\n    )\n    assert md_range.attrs['value'] == \"50\"\n    assert \"range\" in md_range.attrs['class']\n    assert \"range-md\" in md_range.attrs['class']\n    \n    # Large size\n    lg_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"60\",\n        cls=combine_classes(range_dui, range_sizes.lg)\n    )\n    assert lg_range.attrs['value'] == \"60\"\n    assert \"range\" in lg_range.attrs['class']\n    assert \"range-lg\" in lg_range.attrs['class']\n    \n    # Extra large size\n    xl_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"70\",\n        cls=combine_classes(range_dui, range_sizes.xl)\n    )\n    assert xl_range.attrs['value'] == \"70\"\n    assert \"range\" in xl_range.attrs['class']\n    assert \"range-xl\" in xl_range.attrs['class']\n    \n    # Return all size variations in a Div\n    return Div(\n        xs_range,\n        sm_range,\n        md_range,\n        lg_range,\n        xl_range\n    )\n\n# Run the tests\ntest_range_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"30\" class=\"range range-xs\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range range-sm\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"50\" class=\"range range-md\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"60\" class=\"range range-lg\"&gt;\n  &lt;input type=\"range\" min=\"0\" max=\"100\" value=\"70\" class=\"range range-xl\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_range_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_range_custom_fasthtml_examples\n\n test_range_custom_fasthtml_examples ()\n\nTest range with custom color and no fill from daisyUI v5 documentation.\n\n\nExported source\ndef test_range_custom_fasthtml_examples():\n    \"\"\"Test range with custom color and no fill from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Div\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Range with custom color and no fill using CSS variables\n    custom_range = Input(\n        type=\"range\",\n        min=\"0\",\n        max=\"100\",\n        value=\"40\",\n        cls=combine_classes(\n            range_dui,\n            text_color.blue_300,\n            \"[--range-bg:orange]\",\n            \"[--range-thumb:blue]\",\n            \"[--range-fill:0]\"\n        )\n    )\n    \n    # Verify attributes\n    assert custom_range.tag == \"input\"\n    assert custom_range.attrs['type'] == \"range\"\n    assert custom_range.attrs['min'] == \"0\"\n    assert custom_range.attrs['max'] == \"100\"\n    assert custom_range.attrs['value'] == \"40\"\n    assert \"range\" in custom_range.attrs['class']\n    assert \"text-blue-300\" in custom_range.attrs['class']\n    assert \"[--range-bg:orange]\" in custom_range.attrs['class']\n    assert \"[--range-thumb:blue]\" in custom_range.attrs['class']\n    assert \"[--range-fill:0]\" in custom_range.attrs['class']\n    \n    return custom_range\n\n# Run the tests\ntest_range_custom_fasthtml_examples()\n\n\n&lt;input type=\"range\" min=\"0\" max=\"100\" value=\"40\" class=\"range text-blue-300 [--range-bg:orange] [--range-thumb:blue] [--range-fill:0]\"&gt;\n\n\n\ntest_func = test_range_custom_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "range slider"
    ]
  },
  {
    "objectID": "components/data_input/label.html",
    "href": "components/data_input/label.html",
    "title": "label",
    "section": "",
    "text": "Base Label\n\n\nExported source\nlabel = SingleValueFactory(\"label\", \"Base label component for styling the text next to an input field (or select)\") # Base label component\nfloating_label = SingleValueFactory(\"floating-label\", \"Floating label component for the parent of an input field (or select) and a span that floats above the input field when the field is focused\") # Base floating label component\n\n\n\n\nLabel Test Examples\n\nsource\n\n\ntest_label_basic_examples\n\n test_label_basic_examples ()\n\nTest basic label utilities.\n\n\nExported source\ndef test_label_basic_examples():\n    \"\"\"Test basic label utilities.\"\"\"\n    # Basic label\n    assert str(label) == \"label\"\n    assert str(floating_label) == \"floating-label\"\n    \n    # Test with modifiers\n    assert str(label.hover) == \"hover:label\"\n    assert str(label.md) == \"md:label\"\n    assert str(label.dark) == \"dark:label\"\n\n    # Test with modifiers\n    assert str(floating_label.hover) == \"hover:floating-label\"\n    assert str(floating_label.md) == \"md:floating-label\"\n    assert str(floating_label.dark) == \"dark:floating-label\"\n\n# Run the tests\ntest_label_basic_examples()\n\n\n\nsource\n\n\ntest_label_for_input_fasthtml_examples\n\n test_label_for_input_fasthtml_examples ()\n\nTest label for input examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_label_for_input_fasthtml_examples():\n    \"\"\"Test label for input examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Span, Input\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Label for input at the start\n    label_start = Label(\n        Span(\"https://\", cls=str(label)),\n        Input(type=\"text\", placeholder=\"URL\"),\n        cls=str(text_input)\n    )\n    \n    # Verify structure\n    assert label_start.tag == \"label\"\n    assert \"input\" in label_start.attrs['class']\n    \n    # Verify span element\n    span_element = label_start.children[0]\n    assert span_element.tag == \"span\"\n    assert \"label\" in span_element.attrs['class']\n    assert span_element.children[0] == \"https://\"\n    \n    # Verify input element\n    input_element = label_start.children[1]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['type'] == \"text\"\n    assert input_element.attrs['placeholder'] == \"URL\"\n    \n    # Label for input at the end\n    label_end = Label(\n        Input(type=\"text\", placeholder=\"domain name\"),\n        Span(\".com\", cls=str(label)),\n        cls=str(text_input)\n    )\n    \n    # Verify structure\n    assert label_end.tag == \"label\"\n    assert \"input\" in label_end.attrs['class']\n    \n    # Verify input element comes first\n    input_element = label_end.children[0]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['type'] == \"text\"\n    assert input_element.attrs['placeholder'] == \"domain name\"\n    \n    # Verify span element comes second\n    span_element = label_end.children[1]\n    assert span_element.tag == \"span\"\n    assert \"label\" in span_element.attrs['class']\n    assert span_element.children[0] == \".com\"\n    \n    return Div(label_start, label_end)\n\n# Run the tests\ntest_label_for_input_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"input\"&gt;&lt;span class=\"label\"&gt;https://&lt;/span&gt;    &lt;input type=\"text\" placeholder=\"URL\"&gt;\n&lt;/label&gt;&lt;label class=\"input\"&gt;    &lt;input type=\"text\" placeholder=\"domain name\"&gt;\n&lt;span class=\"label\"&gt;.com&lt;/span&gt;&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_label_for_input_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_label_for_select_and_date_fasthtml_examples\n\n test_label_for_select_and_date_fasthtml_examples ()\n\nTest label for select and date input examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_label_for_select_and_date_fasthtml_examples():\n    \"\"\"Test label for select and date input examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Span, Select, Option, Input\n    from cjm_fasthtml_daisyui.components.data_input.select import select\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input\n    \n    # Label for select\n    label_select = Label(\n        Span(\"Type\", cls=str(label)),\n        Select(\n            Option(\"Personal\"),\n            Option(\"Business\")\n        ),\n        cls=str(select)\n    )\n    \n    # Verify structure\n    assert label_select.tag == \"label\"\n    assert \"select\" in label_select.attrs['class']\n    \n    # Verify span element\n    span_element = label_select.children[0]\n    assert span_element.tag == \"span\"\n    assert \"label\" in span_element.attrs['class']\n    assert span_element.children[0] == \"Type\"\n    \n    # Verify select element\n    select_element = label_select.children[1]\n    assert select_element.tag == \"select\"\n    assert len(select_element.children) == 2\n    \n    # Verify options\n    option1 = select_element.children[0]\n    assert option1.tag == \"option\"\n    assert option1.children[0] == \"Personal\"\n    \n    option2 = select_element.children[1]\n    assert option2.tag == \"option\"\n    assert option2.children[0] == \"Business\"\n    \n    # Label for date input\n    label_date = Label(\n        Span(\"Publish date\", cls=str(label)),\n        Input(type=\"date\"),\n        cls=str(text_input)\n    )\n    \n    # Verify structure\n    assert label_date.tag == \"label\"\n    assert \"input\" in label_date.attrs['class']\n    \n    # Verify span element\n    span_element = label_date.children[0]\n    assert span_element.tag == \"span\"\n    assert \"label\" in span_element.attrs['class']\n    assert span_element.children[0] == \"Publish date\"\n    \n    # Verify input element\n    input_element = label_date.children[1]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['type'] == \"date\"\n    \n    return Div(label_select, label_date)\n\n# Run the tests\ntest_label_for_select_and_date_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"select\"&gt;&lt;span class=\"label\"&gt;Type&lt;/span&gt;&lt;select&gt;&lt;option&gt;Personal&lt;/option&gt;&lt;option&gt;Business&lt;/option&gt;&lt;/select&gt;&lt;/label&gt;&lt;label class=\"input\"&gt;&lt;span class=\"label\"&gt;Publish date&lt;/span&gt;    &lt;input type=\"date\"&gt;\n&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_label_for_select_and_date_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_floating_label_fasthtml_examples\n\n test_floating_label_fasthtml_examples ()\n\nTest floating label example from daisyUI v5 documentation.\n\n\nExported source\ndef test_floating_label_fasthtml_examples():\n    \"\"\"Test floating label example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Span, Input\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input, text_input_sizes\n    \n    # Floating Label\n    floating_label_elem = Label(\n        Span(\"Your Email\"),\n        Input(type=\"text\", placeholder=\"[email protected]\", cls=combine_classes(text_input, text_input_sizes.md)),\n        cls=str(floating_label)\n    )\n    \n    # Verify structure\n    assert floating_label_elem.tag == \"label\"\n    assert \"floating-label\" in floating_label_elem.attrs['class']\n    \n    # Verify span element (comes first in HTML, but order in FastHTML may vary)\n    span_element = floating_label_elem.children[0]\n    assert span_element.tag == \"span\"\n    assert span_element.children[0] == \"Your Email\"\n    \n    # Verify input element\n    input_element = floating_label_elem.children[1]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['type'] == \"text\"\n    assert input_element.attrs['placeholder'] == \"[email protected]\"\n    assert \"input\" in input_element.attrs['class']\n    assert \"input-md\" in input_element.attrs['class']\n    \n    return floating_label_elem\n\n# Run the tests\ntest_floating_label_fasthtml_examples()\n\n\n&lt;label class=\"floating-label\"&gt;&lt;span&gt;Your Email&lt;/span&gt;  &lt;input type=\"text\" placeholder=\"[email protected]\" class=\"input input-md\"&gt;\n&lt;/label&gt;\n\n\n\ntest_func = test_floating_label_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_floating_label_sizes_fasthtml_examples\n\n test_floating_label_sizes_fasthtml_examples ()\n\nTest floating label with different sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_floating_label_sizes_fasthtml_examples():\n    \"\"\"Test floating label with different sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Label, Span, Input, Div\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input, text_input_sizes\n    \n    # Floating Label - Extra Small\n    floating_xs = Label(\n        Input(type=\"text\", placeholder=\"Extra Small\", cls=combine_classes(text_input, text_input_sizes.xs)),\n        Span(\"Extra Small\"),\n        cls=str(floating_label)\n    )\n    \n    # Verify extra small\n    assert floating_xs.tag == \"label\"\n    assert \"floating-label\" in floating_xs.attrs['class']\n    input_elem = floating_xs.children[0]\n    assert input_elem.tag == \"input\"\n    assert input_elem.attrs['placeholder'] == \"Extra Small\"\n    assert \"input-xs\" in input_elem.attrs['class']\n    span_elem = floating_xs.children[1]\n    assert span_elem.tag == \"span\"\n    assert span_elem.children[0] == \"Extra Small\"\n    \n    # Floating Label - Small\n    floating_sm = Label(\n        Input(type=\"text\", placeholder=\"Small\", cls=combine_classes(text_input, text_input_sizes.sm)),\n        Span(\"Small\"),\n        cls=str(floating_label)\n    )\n    \n    # Verify small\n    assert \"floating-label\" in floating_sm.attrs['class']\n    assert floating_sm.children[0].attrs['placeholder'] == \"Small\"\n    assert \"input-sm\" in floating_sm.children[0].attrs['class']\n    assert floating_sm.children[1].children[0] == \"Small\"\n    \n    # Floating Label - Medium\n    floating_md = Label(\n        Input(type=\"text\", placeholder=\"Medium\", cls=combine_classes(text_input, text_input_sizes.md)),\n        Span(\"Medium\"),\n        cls=str(floating_label)\n    )\n    \n    # Verify medium\n    assert \"floating-label\" in floating_md.attrs['class']\n    assert floating_md.children[0].attrs['placeholder'] == \"Medium\"\n    assert \"input-md\" in floating_md.children[0].attrs['class']\n    assert floating_md.children[1].children[0] == \"Medium\"\n    \n    # Floating Label - Large\n    floating_lg = Label(\n        Input(type=\"text\", placeholder=\"Large\", cls=combine_classes(text_input, text_input_sizes.lg)),\n        Span(\"Large\"),\n        cls=str(floating_label)\n    )\n    \n    # Verify large\n    assert \"floating-label\" in floating_lg.attrs['class']\n    assert floating_lg.children[0].attrs['placeholder'] == \"Large\"\n    assert \"input-lg\" in floating_lg.children[0].attrs['class']\n    assert floating_lg.children[1].children[0] == \"Large\"\n    \n    # Floating Label - Extra Large\n    floating_xl = Label(\n        Input(type=\"text\", placeholder=\"Extra Large\", cls=combine_classes(text_input, text_input_sizes.xl)),\n        Span(\"Extra Large\"),\n        cls=str(floating_label)\n    )\n    \n    # Verify extra large\n    assert \"floating-label\" in floating_xl.attrs['class']\n    assert floating_xl.children[0].attrs['placeholder'] == \"Extra Large\"\n    assert \"input-xl\" in floating_xl.children[0].attrs['class']\n    assert floating_xl.children[1].children[0] == \"Extra Large\"\n    \n    return Div(\n        floating_xs,\n        floating_sm,\n        floating_md,\n        floating_lg,\n        floating_xl\n    )\n\n# Run the tests\ntest_floating_label_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"floating-label\"&gt;    &lt;input type=\"text\" placeholder=\"Extra Small\" class=\"input input-xs\"&gt;\n&lt;span&gt;Extra Small&lt;/span&gt;&lt;/label&gt;&lt;label class=\"floating-label\"&gt;    &lt;input type=\"text\" placeholder=\"Small\" class=\"input input-sm\"&gt;\n&lt;span&gt;Small&lt;/span&gt;&lt;/label&gt;&lt;label class=\"floating-label\"&gt;    &lt;input type=\"text\" placeholder=\"Medium\" class=\"input input-md\"&gt;\n&lt;span&gt;Medium&lt;/span&gt;&lt;/label&gt;&lt;label class=\"floating-label\"&gt;    &lt;input type=\"text\" placeholder=\"Large\" class=\"input input-lg\"&gt;\n&lt;span&gt;Large&lt;/span&gt;&lt;/label&gt;&lt;label class=\"floating-label\"&gt;    &lt;input type=\"text\" placeholder=\"Extra Large\" class=\"input input-xl\"&gt;\n&lt;span&gt;Extra Large&lt;/span&gt;&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_floating_label_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_input",
      "label"
    ]
  },
  {
    "objectID": "components/data_display/stat.html",
    "href": "components/data_display/stat.html",
    "title": "stat",
    "section": "",
    "text": "Base Stat Components\nThe base stat components:\n\n\nExported source\nstats = SingleValueFactory(\"stats\", \"Container of multiple stat items\") # Stats container\nstat = SingleValueFactory(\"stat\", \"A block to display stat data about a topic\") # Stat block\nstat_title = SingleValueFactory(\"stat-title\", \"Title part of a stat\") # Stat title\nstat_value = SingleValueFactory(\"stat-value\", \"Value part of a stat\") # Stat value\nstat_desc = SingleValueFactory(\"stat-desc\", \"Description part of a stat\") # Stat description\nstat_figure = SingleValueFactory(\"stat-figure\", \"Figure part for icon, etc\") # Stat figure\nstat_actions = SingleValueFactory(\"stat-actions\", \"Actions part for button, etc\") # Stat actions\n\n\n\n\nStat Direction\nStat direction modifiers:\n\n\nExported source\nstats_direction = SimpleFactory(\n    {\n        \"horizontal\": \"stats-horizontal\",\n        \"vertical\": \"stats-vertical\"\n    },\n    \"Stats direction modifiers (horizontal is default)\"\n) # Stats direction\n\n\n\n\nStat Test Examples\n\nsource\n\n\ntest_stat_basic_examples\n\n test_stat_basic_examples ()\n\nTest basic stat utilities.\n\n\nExported source\ndef test_stat_basic_examples():\n    \"\"\"Test basic stat utilities.\"\"\"\n    # Basic components\n    assert str(stats) == \"stats\"\n    assert str(stat) == \"stat\"\n    assert str(stat_title) == \"stat-title\"\n    assert str(stat_value) == \"stat-value\"\n    assert str(stat_desc) == \"stat-desc\"\n    assert str(stat_figure) == \"stat-figure\"\n    assert str(stat_actions) == \"stat-actions\"\n    \n    # With modifiers\n    assert str(stats.hover) == \"hover:stats\"\n    assert str(stat.md) == \"md:stat\"\n    assert str(stat_value.dark) == \"dark:stat-value\"\n\n# Run the tests\ntest_stat_basic_examples()\n\n\n\nsource\n\n\ntest_stat_direction_examples\n\n test_stat_direction_examples ()\n\nTest stat direction modifiers.\n\n\nExported source\ndef test_stat_direction_examples():\n    \"\"\"Test stat direction modifiers.\"\"\"\n    assert str(stats_direction.horizontal) == \"stats-horizontal\"\n    assert str(stats_direction.vertical) == \"stats-vertical\"\n    \n    # With responsive modifiers\n    assert str(stats_direction.vertical.lg) == \"lg:stats-vertical\"\n\n# Run the tests\ntest_stat_direction_examples()\n\n\n\nsource\n\n\ntest_stat_basic_fasthtml_examples\n\n test_stat_basic_fasthtml_examples ()\n\nTest basic stat examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_stat_basic_fasthtml_examples():\n    \"\"\"Test basic stat examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    \n    # Basic stat\n    basic_stat = Div(\n        Div(\n            Div(\"Total Page Views\", cls=str(stat_title)),\n            Div(\"89,400\", cls=str(stat_value)),\n            Div(\"21% more than last month\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        cls=combine_classes(str(stats), shadow())\n    )\n    \n    # Verify structure\n    assert basic_stat.tag == \"div\"\n    assert \"stats\" in basic_stat.attrs['class']\n    assert \"shadow\" in basic_stat.attrs['class']\n    \n    # Check stat container\n    stat_container = basic_stat.children[0]\n    assert stat_container.tag == \"div\"\n    assert \"stat\" in stat_container.attrs['class']\n    assert len(stat_container.children) == 3\n    \n    # Check stat title\n    title = stat_container.children[0]\n    assert title.tag == \"div\"\n    assert \"stat-title\" in title.attrs['class']\n    assert title.children[0] == \"Total Page Views\"\n    \n    # Check stat value\n    value = stat_container.children[1]\n    assert value.tag == \"div\"\n    assert \"stat-value\" in value.attrs['class']\n    assert value.children[0] == \"89,400\"\n    \n    # Check stat desc\n    desc = stat_container.children[2]\n    assert desc.tag == \"div\"\n    assert \"stat-desc\" in desc.attrs['class']\n    assert desc.children[0] == \"21% more than last month\"\n    \n    # Return the created element\n    return Div(basic_stat)\n\n# Run the test\ntest_stat_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"stats shadow\"&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;Total Page Views&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;89,400&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;21% more than last month&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stat_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stat_with_icons_fasthtml_examples\n\n test_stat_with_icons_fasthtml_examples ()\n\nTest stat with icons or image examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_stat_with_icons_fasthtml_examples():\n    \"\"\"Test stat with icons or image examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    from cjm_fasthtml_daisyui.components.data_display.avatar import avatar, avatar_modifiers\n    \n    # Define reusable SVG icons\n    heart_icon = Svg(\n        Path(\n            d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\",\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h(8), w(8), stroke.current)\n    )\n    \n    lightning_icon = Svg(\n        Path(\n            d=\"M13 10V3L4 14h7v7l9-11h-7z\",\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h(8), w(8), stroke.current)\n    )\n    \n    # Stats container with icons\n    stats_with_icons = Div(\n        # First stat - Total Likes\n        Div(\n            Div(\n                heart_icon,\n                cls=combine_classes(stat_figure, text_dui.primary)\n            ),\n            Div(\"Total Likes\", cls=str(stat_title)),\n            Div(\"25.6K\", cls=combine_classes(stat_value, text_dui.primary)),\n            Div(\"21% more than last month\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        # Second stat - Page Views\n        Div(\n            Div(\n                lightning_icon,\n                cls=combine_classes(stat_figure, text_dui.secondary)\n            ),\n            Div(\"Page Views\", cls=str(stat_title)),\n            Div(\"2.6M\", cls=combine_classes(stat_value, text_dui.secondary)),\n            Div(\"21% more than last month\", cls=str(stat_desc)),\n            cls=stat\n        ),\n        # Third stat - Tasks done with avatar\n        Div(\n            Div(\n                Div(\n                    Div(\n                        Img(src=\"https://img.daisyui.com/images/profile/demo/anakeen@192.webp\"),\n                        cls=combine_classes(w(16), rounded.full)\n                    ),\n                    cls=combine_classes(avatar, avatar_modifiers.online)\n                ),\n                cls=combine_classes(stat_figure, text_dui.secondary)\n            ),\n            Div(\"86%\", cls=str(stat_value)),\n            Div(\"Tasks done\", cls=str(stat_title)),\n            Div(\"31 tasks remaining\", cls=combine_classes(stat_desc, text_dui.secondary)),\n            cls=str(stat)\n        ),\n        cls=combine_classes(stats, shadow())\n    )\n    \n    # Verify structure\n    assert stats_with_icons.tag == \"div\"\n    assert \"stats\" in stats_with_icons.attrs['class']\n    assert \"shadow\" in stats_with_icons.attrs['class']\n    assert len(stats_with_icons.children) == 3\n    \n    # Check first stat (Total Likes)\n    first_stat = stats_with_icons.children[0]\n    assert \"stat\" in first_stat.attrs['class']\n    assert len(first_stat.children) == 4\n    \n    # Check stat figure with heart icon\n    figure1 = first_stat.children[0]\n    assert \"stat-figure\" in figure1.attrs['class']\n    assert \"text-primary\" in figure1.attrs['class']\n    assert figure1.children[0].tag == \"svg\"\n    \n    # Check primary colored value\n    value1 = first_stat.children[2]\n    assert \"stat-value\" in value1.attrs['class']\n    assert \"text-primary\" in value1.attrs['class']\n    assert value1.children[0] == \"25.6K\"\n    \n    # Check third stat (with avatar)\n    third_stat = stats_with_icons.children[2]\n    assert \"stat\" in third_stat.attrs['class']\n    \n    # Check avatar structure\n    avatar_figure = third_stat.children[0]\n    assert \"stat-figure\" in avatar_figure.attrs['class']\n    avatar_container = avatar_figure.children[0]\n    assert \"avatar\" in avatar_container.attrs['class']\n    assert \"avatar-online\" in avatar_container.attrs['class']\n    \n    # Check image\n    img_container = avatar_container.children[0]\n    assert \"w-16\" in img_container.attrs['class']\n    assert \"rounded-full\" in img_container.attrs['class']\n    img = img_container.children[0]\n    assert img.tag == \"img\"\n    assert img.attrs['src'] == \"https://img.daisyui.com/images/profile/demo/anakeen@192.webp\"\n    \n    # Check order of value and title (reversed in this stat)\n    assert third_stat.children[1].children[0] == \"86%\"\n    assert \"stat-value\" in third_stat.children[1].attrs['class']\n    assert third_stat.children[2].children[0] == \"Tasks done\"\n    assert \"stat-title\" in third_stat.children[2].attrs['class']\n    \n    # Return the created element\n    return Div(stats_with_icons)\n\n# Run the test\ntest_stat_with_icons_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"stats shadow\"&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-figure text-primary\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-8 w-8 stroke-current\"&gt;&lt;path d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"stat-title\"&gt;Total Likes&lt;/div&gt;\n      &lt;div class=\"stat-value text-primary\"&gt;25.6K&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;21% more than last month&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-figure text-secondary\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-8 w-8 stroke-current\"&gt;&lt;path d=\"M13 10V3L4 14h7v7l9-11h-7z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"stat-title\"&gt;Page Views&lt;/div&gt;\n      &lt;div class=\"stat-value text-secondary\"&gt;2.6M&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;21% more than last month&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-figure text-secondary\"&gt;\n        &lt;div class=\"avatar avatar-online\"&gt;\n          &lt;div class=\"w-16 rounded-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/anakeen@192.webp\"&gt;          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;86%&lt;/div&gt;\n      &lt;div class=\"stat-title\"&gt;Tasks done&lt;/div&gt;\n      &lt;div class=\"stat-desc text-secondary\"&gt;31 tasks remaining&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stat_with_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stat_detailed_fasthtml_examples\n\n test_stat_detailed_fasthtml_examples ()\n\nTest detailed stat examples with different icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_stat_detailed_fasthtml_examples():\n    \"\"\"Test detailed stat examples with different icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    \n    # Define reusable SVG icons\n    info_icon = Svg(\n        Path(\n            d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\",\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h(8), w(8), stroke.current)\n    )\n    \n    settings_icon = Svg(\n        Path(\n            d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4\",\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h(8), w(8), stroke.current)\n    )\n    \n    archive_icon = Svg(\n        Path(\n            d=\"M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4\",\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h(8), w(8), stroke.current)\n    )\n    \n    # Stats container with detailed information\n    detailed_stats = Div(\n        # Downloads stat\n        Div(\n            Div(\n                info_icon,\n                cls=combine_classes(stat_figure, text_dui.secondary)\n            ),\n            Div(\"Downloads\", cls=str(stat_title)),\n            Div(\"31K\", cls=str(stat_value)),\n            Div(\"Jan 1st - Feb 1st\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        # New Users stat\n        Div(\n            Div(\n                settings_icon,\n                cls=combine_classes(stat_figure, text_dui.secondary)\n            ),\n            Div(\"New Users\", cls=str(stat_title)),\n            Div(\"4,200\", cls=str(stat_value)),\n            Div(\"↗︎ 400 (22%)\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        # New Registers stat\n        Div(\n            Div(\n                archive_icon,\n                cls=combine_classes(stat_figure, text_dui.secondary)\n            ),\n            Div(\"New Registers\", cls=str(stat_title)),\n            Div(\"1,200\", cls=str(stat_value)),\n            Div(\"↘︎ 90 (14%)\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        cls=combine_classes(stats, shadow())\n    )\n    \n    # Verify structure\n    assert detailed_stats.tag == \"div\"\n    assert \"stats\" in detailed_stats.attrs['class']\n    assert \"shadow\" in detailed_stats.attrs['class']\n    assert len(detailed_stats.children) == 3\n    \n    # Check each stat has the correct structure\n    for i, (expected_title, expected_value, expected_desc) in enumerate([\n        (\"Downloads\", \"31K\", \"Jan 1st - Feb 1st\"),\n        (\"New Users\", \"4,200\", \"↗︎ 400 (22%)\"),\n        (\"New Registers\", \"1,200\", \"↘︎ 90 (14%)\")\n    ]):\n        stat_elem = detailed_stats.children[i]\n        assert \"stat\" in stat_elem.attrs['class']\n        assert len(stat_elem.children) == 4\n        \n        # Check figure\n        figure = stat_elem.children[0]\n        assert \"stat-figure\" in figure.attrs['class']\n        assert \"text-secondary\" in figure.attrs['class']\n        assert figure.children[0].tag == \"svg\"\n        \n        # Check title\n        title = stat_elem.children[1]\n        assert \"stat-title\" in title.attrs['class']\n        assert title.children[0] == expected_title\n        \n        # Check value\n        value = stat_elem.children[2]\n        assert \"stat-value\" in value.attrs['class']\n        assert value.children[0] == expected_value\n        \n        # Check desc\n        desc = stat_elem.children[3]\n        assert \"stat-desc\" in desc.attrs['class']\n        assert desc.children[0] == expected_desc\n    \n    # Return the created element\n    return Div(detailed_stats)\n\n# Run the test\ntest_stat_detailed_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"stats shadow\"&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-figure text-secondary\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-8 w-8 stroke-current\"&gt;&lt;path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"stat-title\"&gt;Downloads&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;31K&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;Jan 1st - Feb 1st&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-figure text-secondary\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-8 w-8 stroke-current\"&gt;&lt;path d=\"M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"stat-title\"&gt;New Users&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;4,200&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;↗︎ 400 (22%)&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-figure text-secondary\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-8 w-8 stroke-current\"&gt;&lt;path d=\"M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"stat-title\"&gt;New Registers&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;1,200&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;↘︎ 90 (14%)&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stat_detailed_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stat_centered_fasthtml_examples\n\n test_stat_centered_fasthtml_examples ()\n\nTest centered stat items examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_stat_centered_fasthtml_examples():\n    \"\"\"Test centered stat items examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_items\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    \n    # Centered stats\n    centered_stats = Div(\n        # Downloads stat\n        Div(\n            Div(\"Downloads\", cls=str(stat_title)),\n            Div(\"31K\", cls=str(stat_value)),\n            Div(\"From January 1st to February 1st\", cls=str(stat_desc)),\n            cls=combine_classes(stat, place_items.center)\n        ),\n        # Users stat\n        Div(\n            Div(\"Users\", cls=str(stat_title)),\n            Div(\"4,200\", cls=combine_classes(stat_value, text_dui.secondary)),\n            Div(\"↗︎ 40 (2%)\", cls=combine_classes(stat_desc, text_dui.secondary)),\n            cls=combine_classes(stat, place_items.center)\n        ),\n        # New Registers stat\n        Div(\n            Div(\"New Registers\", cls=str(stat_title)),\n            Div(\"1,200\", cls=str(stat_value)),\n            Div(\"↘︎ 90 (14%)\", cls=str(stat_desc)),\n            cls=combine_classes(stat, place_items.center)\n        ),\n        cls=combine_classes(stats, shadow())\n    )\n    \n    # Verify structure\n    assert centered_stats.tag == \"div\"\n    assert \"stats\" in centered_stats.attrs['class']\n    assert \"shadow\" in centered_stats.attrs['class']\n    assert len(centered_stats.children) == 3\n    \n    # Check first stat (Downloads)\n    first_stat = centered_stats.children[0]\n    assert \"stat\" in first_stat.attrs['class']\n    assert \"place-items-center\" in first_stat.attrs['class']\n    assert len(first_stat.children) == 3\n    \n    # Check elements order and content\n    assert first_stat.children[0].children[0] == \"Downloads\"\n    assert \"stat-title\" in first_stat.children[0].attrs['class']\n    assert first_stat.children[1].children[0] == \"31K\"\n    assert \"stat-value\" in first_stat.children[1].attrs['class']\n    assert first_stat.children[2].children[0] == \"From January 1st to February 1st\"\n    assert \"stat-desc\" in first_stat.children[2].attrs['class']\n    \n    # Check second stat (Users) with secondary color\n    second_stat = centered_stats.children[1]\n    assert \"stat\" in second_stat.attrs['class']\n    assert \"place-items-center\" in second_stat.attrs['class']\n    \n    # Check secondary colored value and desc\n    value = second_stat.children[1]\n    assert \"stat-value\" in value.attrs['class']\n    assert \"text-secondary\" in value.attrs['class']\n    assert value.children[0] == \"4,200\"\n    \n    desc = second_stat.children[2]\n    assert \"stat-desc\" in desc.attrs['class']\n    assert \"text-secondary\" in desc.attrs['class']\n    assert desc.children[0] == \"↗︎ 40 (2%)\"\n    \n    # Check third stat\n    third_stat = centered_stats.children[2]\n    assert \"stat\" in third_stat.attrs['class']\n    assert \"place-items-center\" in third_stat.attrs['class']\n    assert third_stat.children[1].children[0] == \"1,200\"\n    assert third_stat.children[2].children[0] == \"↘︎ 90 (14%)\"\n    \n    # Return the created element\n    return Div(centered_stats)\n\n# Run the test\ntest_stat_centered_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"stats shadow\"&gt;\n    &lt;div class=\"stat place-items-center\"&gt;\n      &lt;div class=\"stat-title\"&gt;Downloads&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;31K&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;From January 1st to February 1st&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat place-items-center\"&gt;\n      &lt;div class=\"stat-title\"&gt;Users&lt;/div&gt;\n      &lt;div class=\"stat-value text-secondary\"&gt;4,200&lt;/div&gt;\n      &lt;div class=\"stat-desc text-secondary\"&gt;↗︎ 40 (2%)&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat place-items-center\"&gt;\n      &lt;div class=\"stat-title\"&gt;New Registers&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;1,200&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;↘︎ 90 (14%)&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stat_centered_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stat_vertical_fasthtml_examples\n\n test_stat_vertical_fasthtml_examples ()\n\nTest vertical and responsive stat examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_stat_vertical_fasthtml_examples():\n    \"\"\"Test vertical and responsive stat examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    \n    # Vertical stats\n    vertical_stats = Div(\n        Div(\n            Div(\"Downloads\", cls=str(stat_title)),\n            Div(\"31K\", cls=str(stat_value)),\n            Div(\"Jan 1st - Feb 1st\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        Div(\n            Div(\"New Users\", cls=str(stat_title)),\n            Div(\"4,200\", cls=str(stat_value)),\n            Div(\"↗︎ 400 (22%)\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        Div(\n            Div(\"New Registers\", cls=str(stat_title)),\n            Div(\"1,200\", cls=str(stat_value)),\n            Div(\"↘︎ 90 (14%)\", cls=str(stat_desc)),\n            cls=str(stat)\n        ),\n        cls=combine_classes(stats, stats_direction.vertical, shadow())\n    )\n    \n    # Verify vertical stats\n    assert vertical_stats.tag == \"div\"\n    assert \"stats\" in vertical_stats.attrs['class']\n    assert \"stats-vertical\" in vertical_stats.attrs['class']\n    assert \"shadow\" in vertical_stats.attrs['class']\n    assert len(vertical_stats.children) == 3\n    \n    # Check stat content\n    for i, (expected_title, expected_value, expected_desc) in enumerate([\n        (\"Downloads\", \"31K\", \"Jan 1st - Feb 1st\"),\n        (\"New Users\", \"4,200\", \"↗︎ 400 (22%)\"),\n        (\"New Registers\", \"1,200\", \"↘︎ 90 (14%)\")\n    ]):\n        stat_elem = vertical_stats.children[i]\n        assert \"stat\" in stat_elem.attrs['class']\n        assert stat_elem.children[0].children[0] == expected_title\n        assert stat_elem.children[1].children[0] == expected_value\n        assert stat_elem.children[2].children[0] == expected_desc\n    \n    # Responsive stats (vertical on small, horizontal on large)\n    responsive_stats = Div(\n        Div(\n            Div(\"Downloads\", cls=stat_title),\n            Div(\"31K\", cls=stat_value),\n            Div(\"Jan 1st - Feb 1st\", cls=stat_desc),\n            cls=stat\n        ),\n        Div(\n            Div(\"New Users\", cls=stat_title),\n            Div(\"4,200\", cls=stat_value),\n            Div(\"↗︎ 400 (22%)\", cls=stat_desc),\n            cls=stat\n        ),\n        Div(\n            Div(\"New Registers\", cls=stat_title),\n            Div(\"1,200\", cls=stat_value),\n            Div(\"↘︎ 90 (14%)\", cls=stat_desc),\n            cls=stat\n        ),\n        cls=combine_classes(stats, stats_direction.vertical, stats_direction.horizontal.lg, shadow())\n    )\n    \n    # Verify responsive stats\n    assert responsive_stats.tag == \"div\"\n    assert \"stats\" in responsive_stats.attrs['class']\n    assert \"stats-vertical\" in responsive_stats.attrs['class']\n    assert \"lg:stats-horizontal\" in responsive_stats.attrs['class']\n    assert \"shadow\" in responsive_stats.attrs['class']\n    assert len(responsive_stats.children) == 3\n    \n    # Return both examples in a container\n    return Div(\n        vertical_stats,\n        responsive_stats\n    )\n\n# Run the test\ntest_stat_vertical_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"stats stats-vertical shadow\"&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;Downloads&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;31K&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;Jan 1st - Feb 1st&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;New Users&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;4,200&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;↗︎ 400 (22%)&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;New Registers&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;1,200&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;↘︎ 90 (14%)&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"stats stats-vertical lg:stats-horizontal shadow\"&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;Downloads&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;31K&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;Jan 1st - Feb 1st&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;New Users&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;4,200&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;↗︎ 400 (22%)&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;New Registers&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;1,200&lt;/div&gt;\n      &lt;div class=\"stat-desc\"&gt;↘︎ 90 (14%)&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stat_vertical_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_stat_with_actions_fasthtml_examples\n\n test_stat_with_actions_fasthtml_examples ()\n\nTest stat with custom colors and button actions from daisyUI v5 documentation.\n\n\nExported source\ndef test_stat_with_actions_fasthtml_examples():\n    \"\"\"Test stat with custom colors and button actions from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_colors\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # Stats with custom colors and buttons\n    stats_with_actions = Div(\n        # Account balance with single button\n        Div(\n            Div(\"Account balance\", cls=str(stat_title)),\n            Div(\"$89,400\", cls=str(stat_value)),\n            Div(\n                Button(\"Add funds\", cls=combine_classes(btn, btn_sizes.xs, btn_colors.success)),\n                cls=str(stat_actions)\n            ),\n            cls=str(stat)\n        ),\n        # Current balance with multiple buttons\n        Div(\n            Div(\"Current balance\", cls=str(stat_title)),\n            Div(\"$89,400\", cls=(stat_value)),\n            Div(\n                Button(\"Withdrawal\", cls=combine_classes(btn, btn_sizes.xs)),\n                Button(\"Deposit\", cls=combine_classes(btn, btn_sizes.xs)),\n                cls=str(stat_actions)\n            ),\n            cls=str(stat)\n        ),\n        cls=combine_classes(stats, bg_dui.base_100, border_dui.base_300, border())\n    )\n    \n    # Verify structure\n    assert stats_with_actions.tag == \"div\"\n    assert \"stats\" in stats_with_actions.attrs['class']\n    assert \"bg-base-100\" in stats_with_actions.attrs['class']\n    assert \"border-base-300\" in stats_with_actions.attrs['class']\n    assert \"border\" in stats_with_actions.attrs['class']\n    assert len(stats_with_actions.children) == 2\n    \n    # Check first stat (Account balance)\n    first_stat = stats_with_actions.children[0]\n    assert \"stat\" in first_stat.attrs['class']\n    assert len(first_stat.children) == 3\n    \n    # Check title and value\n    assert first_stat.children[0].children[0] == \"Account balance\"\n    assert \"stat-title\" in first_stat.children[0].attrs['class']\n    assert first_stat.children[1].children[0] == \"$89,400\"\n    assert \"stat-value\" in first_stat.children[1].attrs['class']\n    \n    # Check actions with single button\n    actions1 = first_stat.children[2]\n    assert \"stat-actions\" in actions1.attrs['class']\n    assert len(actions1.children) == 1\n    button1 = actions1.children[0]\n    assert button1.tag == \"button\"\n    assert \"btn\" in button1.attrs['class']\n    assert \"btn-xs\" in button1.attrs['class']\n    assert \"btn-success\" in button1.attrs['class']\n    assert button1.children[0] == \"Add funds\"\n    \n    # Check second stat (Current balance)\n    second_stat = stats_with_actions.children[1]\n    assert \"stat\" in second_stat.attrs['class']\n    assert len(second_stat.children) == 3\n    \n    # Check actions with multiple buttons\n    actions2 = second_stat.children[2]\n    assert \"stat-actions\" in actions2.attrs['class']\n    assert len(actions2.children) == 2\n    \n    # Check both buttons\n    withdrawal_btn = actions2.children[0]\n    assert withdrawal_btn.tag == \"button\"\n    assert \"btn\" in withdrawal_btn.attrs['class']\n    assert \"btn-xs\" in withdrawal_btn.attrs['class']\n    assert withdrawal_btn.children[0] == \"Withdrawal\"\n    \n    deposit_btn = actions2.children[1]\n    assert deposit_btn.tag == \"button\"\n    assert \"btn\" in deposit_btn.attrs['class']\n    assert \"btn-xs\" in deposit_btn.attrs['class']\n    assert deposit_btn.children[0] == \"Deposit\"\n    \n    # Return the created element\n    return Div(stats_with_actions)\n\n# Run the test\ntest_stat_with_actions_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"stats bg-base-100 border-base-300 border\"&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;Account balance&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;$89,400&lt;/div&gt;\n      &lt;div class=\"stat-actions\"&gt;\n&lt;button class=\"btn btn-xs btn-success\"&gt;Add funds&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stat\"&gt;\n      &lt;div class=\"stat-title\"&gt;Current balance&lt;/div&gt;\n      &lt;div class=\"stat-value\"&gt;$89,400&lt;/div&gt;\n      &lt;div class=\"stat-actions\"&gt;\n&lt;button class=\"btn btn-xs\"&gt;Withdrawal&lt;/button&gt;&lt;button class=\"btn btn-xs\"&gt;Deposit&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_stat_with_actions_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "stat"
    ]
  },
  {
    "objectID": "components/data_display/countdown.html",
    "href": "components/data_display/countdown.html",
    "title": "countdown",
    "section": "",
    "text": "Base Countdown\nThe base countdown component:\n\n\nExported source\ncountdown = SingleValueFactory(\"countdown\", \"Countdown wrapper component for transition effect\") # Countdown wrapper\n\n\n\n\nCountdown Test Examples\n\nsource\n\n\ntest_countdown_basic_examples\n\n test_countdown_basic_examples ()\n\nTest basic countdown utilities.\n\n\nExported source\ndef test_countdown_basic_examples():\n    \"\"\"Test basic countdown utilities.\"\"\"\n    # Basic countdown\n    assert str(countdown) == \"countdown\"\n    \n    # With modifiers\n    assert str(countdown.hover) == \"hover:countdown\"\n    assert str(countdown.md) == \"md:countdown\"\n    assert str(countdown.dark) == \"dark:countdown\"\n\n# Run the tests\ntest_countdown_basic_examples()\n\n\n\nsource\n\n\ntest_countdown_basic_fasthtml_examples\n\n test_countdown_basic_fasthtml_examples ()\n\nTest basic countdown and large text from daisyUI v5 documentation.\n\n\nExported source\ndef test_countdown_basic_fasthtml_examples():\n    \"\"\"Test basic countdown and large text from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Basic countdown\n    basic_countdown = Span(\n        Span(\"59\", style=\"--value:59;\", aria_live=\"polite\", aria_label=\"59\"),\n        cls=str(countdown)\n    )\n    assert basic_countdown.tag == \"span\"\n    assert basic_countdown.attrs['class'] == \"countdown\"\n    assert len(basic_countdown.children) == 1\n    inner_span = basic_countdown.children[0]\n    assert inner_span.tag == \"span\"\n    assert inner_span.attrs['style'] == \"--value:59;\"\n    assert inner_span.attrs['aria-live'] == \"polite\"\n    assert inner_span.attrs['aria-label'] == \"59\"\n    assert inner_span.children[0] == \"59\"\n    \n    # Large text\n    large_countdown = Span(\n        Span(\"59\", style=\"--value:59;\", aria_live=\"polite\", aria_label=\"59\"),\n        cls=combine_classes(countdown, font_family.mono, font_size._6xl)\n    )\n    assert large_countdown.tag == \"span\"\n    assert \"countdown\" in large_countdown.attrs['class']\n    assert \"font-mono\" in large_countdown.attrs['class']\n    assert \"text-6xl\" in large_countdown.attrs['class']\n    assert large_countdown.children[0].attrs['style'] == \"--value:59;\"\n    assert large_countdown.children[0].children[0] == \"59\"\n    \n    # Return all examples in a Div\n    return Div(\n        basic_countdown,\n        large_countdown\n    )\n\n# Run the tests\ntest_countdown_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"countdown\"&gt;&lt;span aria-live=\"polite\" aria-label=\"59\" style=\"--value:59;\"&gt;59&lt;/span&gt;&lt;/span&gt;&lt;span class=\"countdown font-mono text-6xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"59\" style=\"--value:59;\"&gt;59&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_countdown_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_countdown_clock_fasthtml_examples\n\n test_countdown_clock_fasthtml_examples ()\n\nTest clock countdown and clock countdown with colons from daisyUI v5 documentation.\n\n\nExported source\ndef test_countdown_clock_fasthtml_examples():\n    \"\"\"Test clock countdown and clock countdown with colons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Clock countdown\n    clock_countdown = Span(\n        Span(\"10\", style=\"--value:10;\", aria_live=\"polite\", aria_label=\"10\"),\n        \"h\",\n        Span(\"24\", style=\"--value:24;\", aria_live=\"polite\", aria_label=\"24\"),\n        \"m\",\n        Span(\"59\", style=\"--value:59;\", aria_live=\"polite\", aria_label=\"59\"),\n        \"s\",\n        cls=combine_classes(countdown, font_family.mono, font_size._2xl)\n    )\n    assert clock_countdown.tag == \"span\"\n    assert \"countdown\" in clock_countdown.attrs['class']\n    assert \"font-mono\" in clock_countdown.attrs['class']\n    assert \"text-2xl\" in clock_countdown.attrs['class']\n    assert len(clock_countdown.children) == 6  # 3 spans + 3 text nodes\n    # First countdown span\n    assert clock_countdown.children[0].tag == \"span\"\n    assert clock_countdown.children[0].attrs['style'] == \"--value:10;\"\n    assert clock_countdown.children[0].children[0] == \"10\"\n    # Text separators\n    assert clock_countdown.children[1] == \"h\"\n    assert clock_countdown.children[3] == \"m\"\n    assert clock_countdown.children[5] == \"s\"\n    # Other countdown spans\n    assert clock_countdown.children[2].attrs['style'] == \"--value:24;\"\n    assert clock_countdown.children[2].children[0] == \"24\"\n    assert clock_countdown.children[4].attrs['style'] == \"--value:59;\"\n    assert clock_countdown.children[4].children[0] == \"59\"\n    \n    # Clock countdown with colons\n    clock_colons = Span(\n        Span(\"10\", style=\"--value:10;\", aria_live=\"polite\", aria_label=\"10\"),\n        \":\",\n        Span(\"24\", style=\"--value:24;\", aria_live=\"polite\", aria_label=\"24\"),\n        \":\",\n        Span(\"59\", style=\"--value:59;\", aria_live=\"polite\", aria_label=\"59\"),\n        cls=combine_classes(countdown, font_family.mono, font_size._2xl)\n    )\n    assert clock_colons.tag == \"span\"\n    assert \"countdown\" in clock_colons.attrs['class']\n    assert \"font-mono\" in clock_colons.attrs['class']\n    assert \"text-2xl\" in clock_colons.attrs['class']\n    assert len(clock_colons.children) == 5  # 3 spans + 2 text nodes\n    # Verify colons\n    assert clock_colons.children[1] == \":\"\n    assert clock_colons.children[3] == \":\"\n    # Verify countdown values\n    assert clock_colons.children[0].attrs['style'] == \"--value:10;\"\n    assert clock_colons.children[2].attrs['style'] == \"--value:24;\"\n    assert clock_colons.children[4].attrs['style'] == \"--value:59;\"\n    \n    # Return all examples in a Div\n    return Div(\n        clock_countdown,\n        clock_colons\n    )\n\n# Run the tests\ntest_countdown_clock_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"countdown font-mono text-2xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"10\" style=\"--value:10;\"&gt;10&lt;/span&gt;h&lt;span aria-live=\"polite\" aria-label=\"24\" style=\"--value:24;\"&gt;24&lt;/span&gt;m&lt;span aria-live=\"polite\" aria-label=\"59\" style=\"--value:59;\"&gt;59&lt;/span&gt;s&lt;/span&gt;&lt;span class=\"countdown font-mono text-2xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"10\" style=\"--value:10;\"&gt;10&lt;/span&gt;:&lt;span aria-live=\"polite\" aria-label=\"24\" style=\"--value:24;\"&gt;24&lt;/span&gt;:&lt;span aria-live=\"polite\" aria-label=\"59\" style=\"--value:59;\"&gt;59&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_countdown_clock_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_countdown_labels_fasthtml_examples\n\n test_countdown_labels_fasthtml_examples ()\n\nTest large text with labels and labels under from daisyUI v5 documentation.\n\n\nExported source\ndef test_countdown_labels_fasthtml_examples():\n    \"\"\"Test large text with labels and labels under from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, text_align\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, flex_direction, auto_cols, grid_flow, flex_display, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    \n    # Large text with labels\n    labels_side = Div(\n        Div(\n            Span(\n                Span(\"15\", style=\"--value:15;\", aria_live=\"polite\", aria_label=\"15\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._4xl)\n            ),\n            \"days\"\n        ),\n        Div(\n            Span(\n                Span(\"10\", style=\"--value:10;\", aria_live=\"polite\", aria_label=\"10\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._4xl)\n            ),\n            \"hours\"\n        ),\n        Div(\n            Span(\n                Span(\"24\", style=\"--value:24;\", aria_live=\"polite\", aria_label=\"24\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._4xl)\n            ),\n            \"min\"\n        ),\n        Div(\n            Span(\n                Span(\"59\", style=\"--value:59;\", aria_live=\"polite\", aria_label=\"59\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._4xl)\n            ),\n            \"sec\"\n        ),\n        cls=combine_classes(flex_display, gap._5)\n    )\n    assert labels_side.tag == \"div\"\n    assert \"flex\" in labels_side.attrs['class']\n    assert \"gap-5\" in labels_side.attrs['class']\n    assert len(labels_side.children) == 4\n    # Check each time unit\n    for i, (label_text, value) in enumerate([(\"days\", \"15\"), (\"hours\", \"10\"), (\"min\", \"24\"), (\"sec\", \"59\")]):\n        unit_div = labels_side.children[i]\n        assert unit_div.tag == \"div\"\n        assert len(unit_div.children) == 2\n        # Check countdown span\n        countdown_span = unit_div.children[0]\n        assert countdown_span.tag == \"span\"\n        assert \"countdown\" in countdown_span.attrs['class']\n        assert \"font-mono\" in countdown_span.attrs['class']\n        assert \"text-4xl\" in countdown_span.attrs['class']\n        assert countdown_span.children[0].attrs['style'] == f\"--value:{value};\"\n        assert countdown_span.children[0].children[0] == value\n        # Check label text\n        assert unit_div.children[1] == label_text\n    \n    # Large text with labels under\n    labels_under = Div(\n        Div(\n            Span(\n                Span(\"15\", style=\"--value:15;\", aria_live=\"polite\", aria_label=\"15\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"days\",\n            cls=combine_classes(flex_display, flex_direction.col)\n        ),\n        Div(\n            Span(\n                Span(\"10\", style=\"--value:10;\", aria_live=\"polite\", aria_label=\"10\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"hours\",\n            cls=combine_classes(flex_display, flex_direction.col)\n        ),\n        Div(\n            Span(\n                Span(\"24\", style=\"--value:24;\", aria_live=\"polite\", aria_label=\"24\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"min\",\n            cls=combine_classes(flex_display, flex_direction.col)\n        ),\n        Div(\n            Span(\n                Span(\"59\", style=\"--value:59;\", aria_live=\"polite\", aria_label=\"59\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"sec\",\n            cls=combine_classes(flex_display, flex_direction.col)\n        ),\n        cls=combine_classes(grid_display, auto_cols.max, grid_flow.col, gap._5, text_align.center)\n    )\n    assert labels_under.tag == \"div\"\n    assert \"grid\" in labels_under.attrs['class']\n    assert \"auto-cols-max\" in labels_under.attrs['class']\n    assert \"grid-flow-col\" in labels_under.attrs['class']\n    assert \"gap-5\" in labels_under.attrs['class']\n    assert \"text-center\" in labels_under.attrs['class']\n    assert len(labels_under.children) == 4\n    # Check each time unit\n    for i, (label_text, value) in enumerate([(\"days\", \"15\"), (\"hours\", \"10\"), (\"min\", \"24\"), (\"sec\", \"59\")]):\n        unit_div = labels_under.children[i]\n        assert unit_div.tag == \"div\"\n        assert \"flex\" in unit_div.attrs['class']\n        assert \"flex-col\" in unit_div.attrs['class']\n        # Check countdown span (text-5xl for labels under)\n        countdown_span = unit_div.children[0]\n        assert \"text-5xl\" in countdown_span.attrs['class']\n        assert countdown_span.children[0].attrs['style'] == f\"--value:{value};\"\n        # Check label text\n        assert unit_div.children[1] == label_text\n    \n    # Return all examples in a Div\n    return Div(\n        labels_side,\n        labels_under\n    )\n\n# Run the tests\ntest_countdown_labels_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"flex gap-5\"&gt;\n    &lt;div&gt;\n&lt;span class=\"countdown font-mono text-4xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"15\" style=\"--value:15;\"&gt;15&lt;/span&gt;&lt;/span&gt;days    &lt;/div&gt;\n    &lt;div&gt;\n&lt;span class=\"countdown font-mono text-4xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"10\" style=\"--value:10;\"&gt;10&lt;/span&gt;&lt;/span&gt;hours    &lt;/div&gt;\n    &lt;div&gt;\n&lt;span class=\"countdown font-mono text-4xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"24\" style=\"--value:24;\"&gt;24&lt;/span&gt;&lt;/span&gt;min    &lt;/div&gt;\n    &lt;div&gt;\n&lt;span class=\"countdown font-mono text-4xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"59\" style=\"--value:59;\"&gt;59&lt;/span&gt;&lt;/span&gt;sec    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"grid auto-cols-max grid-flow-col gap-5 text-center\"&gt;\n    &lt;div class=\"flex flex-col\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"15\" style=\"--value:15;\"&gt;15&lt;/span&gt;&lt;/span&gt;days    &lt;/div&gt;\n    &lt;div class=\"flex flex-col\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"10\" style=\"--value:10;\"&gt;10&lt;/span&gt;&lt;/span&gt;hours    &lt;/div&gt;\n    &lt;div class=\"flex flex-col\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"24\" style=\"--value:24;\"&gt;24&lt;/span&gt;&lt;/span&gt;min    &lt;/div&gt;\n    &lt;div class=\"flex flex-col\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"59\" style=\"--value:59;\"&gt;59&lt;/span&gt;&lt;/span&gt;sec    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_countdown_labels_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_countdown_boxes_fasthtml_examples\n\n test_countdown_boxes_fasthtml_examples ()\n\nTest countdown in boxes from daisyUI v5 documentation.\n\n\nExported source\ndef test_countdown_boxes_fasthtml_examples():\n    \"\"\"Test countdown in boxes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, text_align\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, flex_direction, auto_cols, grid_flow, flex_display, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    \n    # In boxes\n    in_boxes = Div(\n        Div(\n            Span(\n                Span(\"15\", style=\"--value:15;\", aria_live=\"polite\", aria_label=\"15\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"days\",\n            cls=combine_classes(bg_dui.neutral, border_radius.box, text_dui.neutral_content, flex_display, flex_direction.col, p._2)\n        ),\n        Div(\n            Span(\n                Span(\"10\", style=\"--value:10;\", aria_live=\"polite\", aria_label=\"10\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"hours\",\n            cls=combine_classes(bg_dui.neutral, border_radius.box, text_dui.neutral_content, flex_display, flex_direction.col, p._2)\n        ),\n        Div(\n            Span(\n                Span(\"24\", style=\"--value:24;\", aria_live=\"polite\", aria_label=\"24\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"min\",\n            cls=combine_classes(bg_dui.neutral, border_radius.box, text_dui.neutral_content, flex_display, flex_direction.col, p._2)\n        ),\n        Div(\n            Span(\n                Span(\"59\", style=\"--value:59;\", aria_live=\"polite\", aria_label=\"59\"),\n                cls=combine_classes(countdown, font_family.mono, font_size._5xl)\n            ),\n            \"sec\",\n            cls=combine_classes(bg_dui.neutral, border_radius.box, text_dui.neutral_content, flex_display, flex_direction.col, p._2)\n        ),\n        cls=combine_classes(grid_display, auto_cols.max, grid_flow.col, gap._5, text_align.center)\n    )\n    assert in_boxes.tag == \"div\"\n    assert \"grid\" in in_boxes.attrs['class']\n    assert \"auto-cols-max\" in in_boxes.attrs['class']\n    assert \"grid-flow-col\" in in_boxes.attrs['class']\n    assert \"gap-5\" in in_boxes.attrs['class']\n    assert \"text-center\" in in_boxes.attrs['class']\n    assert len(in_boxes.children) == 4\n    # Check each time unit box\n    for i, (label_text, value) in enumerate([(\"days\", \"15\"), (\"hours\", \"10\"), (\"min\", \"24\"), (\"sec\", \"59\")]):\n        unit_div = in_boxes.children[i]\n        assert unit_div.tag == \"div\"\n        assert \"bg-neutral\" in unit_div.attrs['class']\n        assert \"rounded-box\" in unit_div.attrs['class']\n        assert \"text-neutral-content\" in unit_div.attrs['class']\n        assert \"flex\" in unit_div.attrs['class']\n        assert \"flex-col\" in unit_div.attrs['class']\n        assert \"p-2\" in unit_div.attrs['class']\n        # Check countdown span\n        countdown_span = unit_div.children[0]\n        assert \"countdown\" in countdown_span.attrs['class']\n        assert \"font-mono\" in countdown_span.attrs['class']\n        assert \"text-5xl\" in countdown_span.attrs['class']\n        assert countdown_span.children[0].attrs['style'] == f\"--value:{value};\"\n        assert countdown_span.children[0].children[0] == value\n        # Check label text\n        assert unit_div.children[1] == label_text\n    \n    # Return all examples in a Div\n    return Div(\n        in_boxes\n    )\n\n# Run the tests\ntest_countdown_boxes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"grid auto-cols-max grid-flow-col gap-5 text-center\"&gt;\n    &lt;div class=\"bg-neutral rounded-box text-neutral-content flex flex-col p-2\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"15\" style=\"--value:15;\"&gt;15&lt;/span&gt;&lt;/span&gt;days    &lt;/div&gt;\n    &lt;div class=\"bg-neutral rounded-box text-neutral-content flex flex-col p-2\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"10\" style=\"--value:10;\"&gt;10&lt;/span&gt;&lt;/span&gt;hours    &lt;/div&gt;\n    &lt;div class=\"bg-neutral rounded-box text-neutral-content flex flex-col p-2\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"24\" style=\"--value:24;\"&gt;24&lt;/span&gt;&lt;/span&gt;min    &lt;/div&gt;\n    &lt;div class=\"bg-neutral rounded-box text-neutral-content flex flex-col p-2\"&gt;\n&lt;span class=\"countdown font-mono text-5xl\"&gt;&lt;span aria-live=\"polite\" aria-label=\"59\" style=\"--value:59;\"&gt;59&lt;/span&gt;&lt;/span&gt;sec    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_countdown_boxes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "countdown"
    ]
  },
  {
    "objectID": "components/data_display/diff.html",
    "href": "components/data_display/diff.html",
    "title": "diff",
    "section": "",
    "text": "Base Diff Components\nThe base diff components:\n\n\nExported source\ndiff = SingleValueFactory(\"diff\", \"Container element for side-by-side comparison\") # Diff container\ndiff_item_1 = SingleValueFactory(\"diff-item-1\", \"First item in the comparison\") # First item\ndiff_item_2 = SingleValueFactory(\"diff-item-2\", \"Second item in the comparison\") # Second item\ndiff_resizer = SingleValueFactory(\"diff-resizer\", \"The resizer control for adjusting comparison\") # Resizer control\n\n\n\n\nDiff Test Examples\n\nsource\n\n\ntest_diff_basic_examples\n\n test_diff_basic_examples ()\n\nTest basic diff utilities.\n\n\nExported source\ndef test_diff_basic_examples():\n    \"\"\"Test basic diff utilities.\"\"\"\n    # Basic components\n    assert str(diff) == \"diff\"\n    assert str(diff_item_1) == \"diff-item-1\"\n    assert str(diff_item_2) == \"diff-item-2\"\n    assert str(diff_resizer) == \"diff-resizer\"\n    \n    # With modifiers\n    assert str(diff.hover) == \"hover:diff\"\n    assert str(diff_item_1.md) == \"md:diff-item-1\"\n    assert str(diff_resizer.dark) == \"dark:diff-resizer\"\n\n# Run the tests\ntest_diff_basic_examples()\n\n\n\nsource\n\n\ntest_diff_basic_fasthtml_examples\n\n test_diff_basic_fasthtml_examples ()\n\nTest basic diff and diff text from daisyUI v5 documentation.\n\n\nExported source\ndef test_diff_basic_fasthtml_examples():\n    \"\"\"Test basic diff and diff text from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Figure, Div, Img\n    from cjm_fasthtml_tailwind.utilities.layout import aspect\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Basic diff\n    img_diff = Figure(\n        Div(\n            Img(\n                alt=\"daisy\",\n                src=\"https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a.webp\"\n            ),\n            cls=str(diff_item_1),\n            role=\"img\",\n            tabindex=\"0\"\n        ),\n        Div(\n            Img(\n                alt=\"daisy\",\n                src=\"https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a-blur.webp\"\n            ),\n            cls=str(diff_item_2),\n            role=\"img\"\n        ),\n        Div(cls=str(diff_resizer)),\n        cls=combine_classes(diff, aspect(\"16/9\")),\n        tabindex=\"0\"\n    )\n    assert img_diff.tag == \"figure\"\n    assert \"diff\" in img_diff.attrs['class']\n    assert \"aspect-16/9\" in img_diff.attrs['class']\n    assert img_diff.attrs['tabindex'] == \"0\"\n    \n    # Verify structure\n    assert len(img_diff.children) == 3  # item1, item2, resizer\n    \n    # Verify first item\n    item1 = img_diff.children[0]\n    assert item1.tag == \"div\"\n    assert \"diff-item-1\" in item1.attrs['class']\n    assert item1.attrs['role'] == \"img\"\n    assert item1.attrs['tabindex'] == \"0\"\n    assert item1.children[0].tag == \"img\"\n    assert item1.children[0].attrs['alt'] == \"daisy\"\n    assert item1.children[0].attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a.webp\"\n    \n    # Verify second item\n    item2 = img_diff.children[1]\n    assert item2.tag == \"div\"\n    assert \"diff-item-2\" in item2.attrs['class']\n    assert item2.attrs['role'] == \"img\"\n    assert 'tabindex' not in item2.attrs  # Only first item has tabindex\n    assert item2.children[0].tag == \"img\"\n    assert item2.children[0].attrs['alt'] == \"daisy\"\n    assert item2.children[0].attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a-blur.webp\"\n    \n    # Verify resizer\n    resizer = img_diff.children[2]\n    assert resizer.tag == \"div\"\n    assert \"diff-resizer\" in resizer.attrs['class']\n    assert resizer.children == ()  # Empty\n    \n    # Diff text\n    text_diff = Figure(\n        Div(\n            Div(\n                \"DAISY\",\n                cls=combine_classes(bg_dui.primary, text_dui.primary_content, grid_display, place_content.center, font_size._9xl, font_weight.black)\n            ),\n            cls=str(diff_item_1),\n            role=\"img\",\n            tabindex=\"0\"\n        ),\n        Div(\n            Div(\n                \"DAISY\",\n                cls=combine_classes(bg_dui.base_200, grid_display, place_content.center, font_size._9xl, font_weight.black)\n            ),\n            cls=str(diff_item_2),\n            role=\"img\"\n        ),\n        Div(cls=str(diff_resizer)),\n        cls=combine_classes(diff, aspect(\"16/9\")),\n        tabindex=\"0\"\n    )\n    assert text_diff.tag == \"figure\"\n    assert \"diff\" in text_diff.attrs['class']\n    assert \"aspect-16/9\" in text_diff.attrs['class']\n    \n    # Verify text diff structure\n    assert len(text_diff.children) == 3\n    \n    # Verify first text item\n    text_item1 = text_diff.children[0]\n    assert text_item1.tag == \"div\"\n    assert \"diff-item-1\" in text_item1.attrs['class']\n    assert text_item1.attrs['role'] == \"img\"\n    assert text_item1.attrs['tabindex'] == \"0\"\n    \n    # Check inner div with styling\n    inner1 = text_item1.children[0]\n    assert inner1.tag == \"div\"\n    assert \"bg-primary\" in inner1.attrs['class']\n    assert \"text-primary-content\" in inner1.attrs['class']\n    assert \"grid\" in inner1.attrs['class']\n    assert \"place-content-center\" in inner1.attrs['class']\n    assert \"text-9xl\" in inner1.attrs['class']\n    assert \"font-black\" in inner1.attrs['class']\n    assert inner1.children[0] == \"DAISY\"\n    \n    # Verify second text item\n    text_item2 = text_diff.children[1]\n    assert text_item2.tag == \"div\"\n    assert \"diff-item-2\" in text_item2.attrs['class']\n    assert text_item2.attrs['role'] == \"img\"\n    \n    # Check inner div with different styling\n    inner2 = text_item2.children[0]\n    assert inner2.tag == \"div\"\n    assert \"bg-base-200\" in inner2.attrs['class']\n    assert \"grid\" in inner2.attrs['class']\n    assert \"place-content-center\" in inner2.attrs['class']\n    assert \"text-9xl\" in inner2.attrs['class']\n    assert \"font-black\" in inner2.attrs['class']\n    assert inner2.children[0] == \"DAISY\"\n    \n    # Return the components in a Div\n    return Div(img_diff, text_diff)\n\n# Run the tests\ntest_diff_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;figure tabindex=\"0\" class=\"diff aspect-16/9\"&gt;    &lt;div role=\"img\" tabindex=\"0\" class=\"diff-item-1\"&gt;\n&lt;img alt=\"daisy\" src=\"https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a.webp\"&gt;    &lt;/div&gt;\n    &lt;div role=\"img\" class=\"diff-item-2\"&gt;\n&lt;img alt=\"daisy\" src=\"https://img.daisyui.com/images/stock/photo-1560717789-0ac7c58ac90a-blur.webp\"&gt;    &lt;/div&gt;\n    &lt;div class=\"diff-resizer\"&gt;&lt;/div&gt;\n&lt;/figure&gt;&lt;figure tabindex=\"0\" class=\"diff aspect-16/9\"&gt;    &lt;div role=\"img\" tabindex=\"0\" class=\"diff-item-1\"&gt;\n      &lt;div class=\"bg-primary text-primary-content grid place-content-center text-9xl font-black\"&gt;DAISY&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div role=\"img\" class=\"diff-item-2\"&gt;\n      &lt;div class=\"bg-base-200 grid place-content-center text-9xl font-black\"&gt;DAISY&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"diff-resizer\"&gt;&lt;/div&gt;\n&lt;/figure&gt;&lt;/div&gt;\n\n\n\ntest_func = test_diff_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "diff"
    ]
  },
  {
    "objectID": "components/data_display/timeline.html",
    "href": "components/data_display/timeline.html",
    "title": "timeline",
    "section": "",
    "text": "Base Timeline\nThe base timeline components:\n\n\nExported source\ntimeline = SingleValueFactory(\"timeline\", \"Timeline container component\") # Timeline container\ntimeline_start = SingleValueFactory(\"timeline-start\", \"The content inside &lt;li&gt; that will be at the start direction\") # Timeline start\ntimeline_middle = SingleValueFactory(\"timeline-middle\", \"The content inside &lt;li&gt; that will be at the middle\") # Timeline middle\ntimeline_end = SingleValueFactory(\"timeline-end\", \"The content inside &lt;li&gt; that will be at the end direction\") # Timeline end\n\n\n\n\nTimeline Modifiers\nTimeline modifier utilities:\n\n\nExported source\ntimeline_modifiers = SimpleFactory(\n    {\n        \"snap_icon\": \"timeline-snap-icon\",\n        \"box\": \"timeline-box\",\n        \"compact\": \"timeline-compact\"\n    },\n    \"Timeline modifiers (snap icon to start, box style, compact layout)\"\n) # Timeline modifiers\n\n\n\n\nTimeline Direction\nTimeline direction layouts:\n\n\nExported source\ntimeline_direction = SimpleFactory(\n    {\n        \"horizontal\": \"timeline-horizontal\",\n        \"vertical\": \"timeline-vertical\"\n    },\n    \"Timeline direction layout (horizontal or vertical)\"\n) # Timeline direction\n\n\n\n\nTimeline Test Examples\n\nsource\n\n\ntest_timeline_basic_examples\n\n test_timeline_basic_examples ()\n\nTest basic timeline utilities.\n\n\nExported source\ndef test_timeline_basic_examples():\n    \"\"\"Test basic timeline utilities.\"\"\"\n    # Basic components\n    assert str(timeline) == \"timeline\"\n    assert str(timeline_start) == \"timeline-start\"\n    assert str(timeline_middle) == \"timeline-middle\"\n    assert str(timeline_end) == \"timeline-end\"\n    \n    # With modifiers\n    assert str(timeline.hover) == \"hover:timeline\"\n    assert str(timeline_start.md) == \"md:timeline-start\"\n    assert str(timeline_middle.dark) == \"dark:timeline-middle\"\n    assert str(timeline_end.lg) == \"lg:timeline-end\"\n\n# Run the tests\ntest_timeline_basic_examples()\n\n\n\nsource\n\n\ntest_timeline_modifiers_examples\n\n test_timeline_modifiers_examples ()\n\nTest timeline modifier utilities.\n\n\nExported source\ndef test_timeline_modifiers_examples():\n    \"\"\"Test timeline modifier utilities.\"\"\"\n    assert str(timeline_modifiers.snap_icon) == \"timeline-snap-icon\"\n    assert str(timeline_modifiers.box) == \"timeline-box\"\n    assert str(timeline_modifiers.compact) == \"timeline-compact\"\n    \n    # With responsive modifiers\n    assert str(timeline_modifiers.snap_icon.hover) == \"hover:timeline-snap-icon\"\n    assert str(timeline_modifiers.box.md) == \"md:timeline-box\"\n    assert str(timeline_modifiers.compact.lg) == \"lg:timeline-compact\"\n\n# Run the tests\ntest_timeline_modifiers_examples()\n\n\n\nsource\n\n\ntest_timeline_direction_examples\n\n test_timeline_direction_examples ()\n\nTest timeline direction utilities.\n\n\nExported source\ndef test_timeline_direction_examples():\n    \"\"\"Test timeline direction utilities.\"\"\"\n    assert str(timeline_direction.horizontal) == \"timeline-horizontal\"\n    assert str(timeline_direction.vertical) == \"timeline-vertical\"\n    \n    # With responsive modifiers\n    assert str(timeline_direction.horizontal.md) == \"md:timeline-horizontal\"\n    assert str(timeline_direction.vertical.lg) == \"lg:timeline-vertical\"\n\n# Run the tests\ntest_timeline_direction_examples()\n\n\n\nsource\n\n\ntest_timeline_basic_fasthtml_examples\n\n test_timeline_basic_fasthtml_examples ()\n\nTest timeline with text on both sides and icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_basic_fasthtml_examples():\n    \"\"\"Test timeline with text on both sides and icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Create checkmark SVG icon as reusable component\n    checkmark_icon = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(h._5, w._5)\n    )\n    \n    # Timeline with text on both sides and icon\n    timeline_both_sides = Ul(\n        Li(\n            Div(\"1984\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"1998\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2001\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPod\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2007\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2015\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_end, timeline_modifiers.box))\n        ),\n        cls=str(timeline)\n    )\n    \n    # Verify structure\n    assert timeline_both_sides.tag == \"ul\"\n    assert \"timeline\" in timeline_both_sides.attrs['class']\n    assert len(timeline_both_sides.children) == 5  # 5 timeline items\n    \n    # Verify first item structure\n    first_item = timeline_both_sides.children[0]\n    assert first_item.tag == \"li\"\n    assert len(first_item.children) == 4  # start, middle, end, hr\n    assert \"timeline-start\" in first_item.children[0].attrs['class']\n    assert first_item.children[0].children[0] == \"1984\"\n    assert \"timeline-middle\" in first_item.children[1].attrs['class']\n    assert first_item.children[1].children[0].tag == \"svg\"\n    assert \"timeline-end\" in first_item.children[2].attrs['class']\n    assert \"timeline-box\" in first_item.children[2].attrs['class']\n    assert first_item.children[2].children[0] == \"First Macintosh computer\"\n    assert first_item.children[3].tag == \"hr\"\n    \n    # Verify second item has hr at beginning\n    second_item = timeline_both_sides.children[1]\n    assert second_item.children[0].tag == \"hr\"\n    assert \"timeline-start\" in second_item.children[1].attrs['class']\n    assert second_item.children[1].children[0] == \"1998\"\n    \n    # Verify last item doesn't have trailing hr\n    last_item = timeline_both_sides.children[4]\n    assert last_item.children[0].tag == \"hr\"\n    assert len(last_item.children) == 4  # hr, start, middle, end (no trailing hr)\n    assert last_item.children[3].children[0] == \"Apple Watch\"\n    \n    # Return elements in a Div\n    return Div(timeline_both_sides)\n\n# Run the test\ntest_timeline_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start\"&gt;1984&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;1998&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2001&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPod&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2007&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2015&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;Apple Watch&lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_timeline_single_side_fasthtml_examples\n\n test_timeline_single_side_fasthtml_examples ()\n\nTest timeline with bottom side only and top side only from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_single_side_fasthtml_examples():\n    \"\"\"Test timeline with bottom side only and top side only from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Create checkmark SVG icon as reusable component\n    checkmark_icon = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(h._5, w._5)\n    )\n    \n    # Timeline with bottom side only\n    timeline_bottom_only = Ul(\n        Li(\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPod\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_end, timeline_modifiers.box))\n        ),\n        cls=str(timeline)\n    )\n    \n    # Verify bottom only timeline\n    assert timeline_bottom_only.tag == \"ul\"\n    assert \"timeline\" in timeline_bottom_only.attrs['class']\n    assert len(timeline_bottom_only.children) == 5\n    \n    # First item has no timeline-start\n    first_item = timeline_bottom_only.children[0]\n    assert len(first_item.children) == 3  # middle, end, hr\n    assert \"timeline-middle\" in first_item.children[0].attrs['class']\n    assert \"timeline-end\" in first_item.children[1].attrs['class']\n    assert \"timeline-box\" in first_item.children[1].attrs['class']\n    assert first_item.children[1].children[0] == \"First Macintosh computer\"\n    assert first_item.children[2].tag == \"hr\"\n    \n    # Timeline with top side only\n    timeline_top_only = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iMac\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPhone\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle))\n        ),\n        cls=str(timeline)\n    )\n    \n    # Verify top only timeline\n    assert timeline_top_only.tag == \"ul\"\n    assert \"timeline\" in timeline_top_only.attrs['class']\n    assert len(timeline_top_only.children) == 5\n    \n    # First item has no starting hr\n    first_item = timeline_top_only.children[0]\n    assert len(first_item.children) == 3  # start, middle, hr\n    assert \"timeline-start\" in first_item.children[0].attrs['class']\n    assert \"timeline-box\" in first_item.children[0].attrs['class']\n    assert first_item.children[0].children[0] == \"First Macintosh computer\"\n    assert \"timeline-middle\" in first_item.children[1].attrs['class']\n    assert first_item.children[2].tag == \"hr\"\n    \n    # Last item has no trailing hr\n    last_item = timeline_top_only.children[4]\n    assert last_item.children[0].tag == \"hr\"\n    assert len(last_item.children) == 3  # hr, start, middle (no trailing hr)\n    assert \"timeline-start\" in last_item.children[1].attrs['class']\n    assert last_item.children[1].children[0] == \"Apple Watch\"\n    \n    # Return both elements in a Div\n    return Div(timeline_bottom_only, timeline_top_only)\n\n# Run the test\ntest_timeline_single_side_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPod&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;Apple Watch&lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"timeline\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iMac&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPhone&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_single_side_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_timeline_alternating_fasthtml_examples\n\n test_timeline_alternating_fasthtml_examples ()\n\nTest timeline with different sides and colorful lines from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_alternating_fasthtml_examples():\n    \"\"\"Test timeline with different sides and colorful lines from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui, bg_dui\n    \n    # Create checkmark SVG icon as reusable component\n    checkmark_icon = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(h._5, w._5)\n    )\n    \n    # Timeline with different sides\n    timeline_different_sides = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle))\n        ),\n        cls=str(timeline)\n    )\n    \n    # Verify different sides timeline\n    assert timeline_different_sides.tag == \"ul\"\n    assert \"timeline\" in timeline_different_sides.attrs['class']\n    assert len(timeline_different_sides.children) == 5\n    \n    # First item - start side\n    first_item = timeline_different_sides.children[0]\n    assert \"timeline-start\" in first_item.children[0].attrs['class']\n    assert \"timeline-box\" in first_item.children[0].attrs['class']\n    assert first_item.children[0].children[0] == \"First Macintosh computer\"\n    \n    # Second item - end side\n    second_item = timeline_different_sides.children[1]\n    assert \"timeline-middle\" in second_item.children[1].attrs['class']\n    assert \"timeline-end\" in second_item.children[2].attrs['class']\n    assert second_item.children[2].children[0] == \"iMac\"\n    \n    # Third item - start side\n    third_item = timeline_different_sides.children[2]\n    assert \"timeline-start\" in third_item.children[1].attrs['class']\n    assert third_item.children[1].children[0] == \"iPod\"\n    \n    # Timeline with colorful lines\n    # Create colored checkmark icons\n    checkmark_icon_primary = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(text_dui.primary, h._5, w._5)\n    )\n    \n    timeline_colorful = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon_primary, cls=str(timeline_middle)),\n            Hr(cls=str(bg_dui.primary))\n        ),\n        Li(\n            Hr(cls=str(bg_dui.primary)),\n            Div(checkmark_icon_primary, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr(cls=str(bg_dui.primary))\n        ),\n        Li(\n            Hr(cls=str(bg_dui.primary)),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon_primary, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle))\n        ),\n        cls=str(timeline)\n    )\n    \n    # Verify colorful timeline\n    assert timeline_colorful.tag == \"ul\"\n    assert \"timeline\" in timeline_colorful.attrs['class']\n    \n    # First item has primary colored hr\n    first_item = timeline_colorful.children[0]\n    assert first_item.children[2].tag == \"hr\"\n    assert \"bg-primary\" in first_item.children[2].attrs['class']\n    \n    # Check primary colored icon\n    assert \"text-primary\" in first_item.children[1].children[0].attrs['class']\n    \n    # Third item switches from primary to default\n    third_item = timeline_colorful.children[2]\n    assert \"bg-primary\" in third_item.children[0].attrs['class']  # Incoming hr is primary\n    assert 'class' not in third_item.children[3].attrs or \"bg-primary\" not in third_item.children[3].attrs.get('class', '')  # Outgoing hr is default\n    \n    # Return both elements in a Div\n    return Div(timeline_different_sides, timeline_colorful)\n\n# Run the test\ntest_timeline_alternating_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"timeline\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"text-primary h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr class=\"bg-primary\"&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr class=\"bg-primary\"&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"text-primary h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr class=\"bg-primary\"&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr class=\"bg-primary\"&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"text-primary h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_alternating_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_timeline_without_icons_fasthtml_examples\n\n test_timeline_without_icons_fasthtml_examples ()\n\nTest timeline without icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_without_icons_fasthtml_examples():\n    \"\"\"Test timeline without icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Timeline without icons\n    timeline_no_icons = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box))\n        ),\n        cls=str(timeline)\n    )\n    \n    # Verify timeline without icons\n    assert timeline_no_icons.tag == \"ul\"\n    assert \"timeline\" in timeline_no_icons.attrs['class']\n    assert len(timeline_no_icons.children) == 5\n    \n    # First item - only start and hr, no middle\n    first_item = timeline_no_icons.children[0]\n    assert len(first_item.children) == 2  # start, hr\n    assert \"timeline-start\" in first_item.children[0].attrs['class']\n    assert \"timeline-box\" in first_item.children[0].attrs['class']\n    assert first_item.children[0].children[0] == \"First Macintosh computer\"\n    assert first_item.children[1].tag == \"hr\"\n    \n    # Second item - alternates to end side\n    second_item = timeline_no_icons.children[1]\n    assert len(second_item.children) == 3  # hr, end, hr\n    assert second_item.children[0].tag == \"hr\"\n    assert \"timeline-end\" in second_item.children[1].attrs['class']\n    assert \"timeline-box\" in second_item.children[1].attrs['class']\n    assert second_item.children[1].children[0] == \"iMac\"\n    assert second_item.children[2].tag == \"hr\"\n    \n    # Third item - back to start side\n    third_item = timeline_no_icons.children[2]\n    assert \"timeline-start\" in third_item.children[1].attrs['class']\n    assert third_item.children[1].children[0] == \"iPod\"\n    \n    # Fourth item - end side\n    fourth_item = timeline_no_icons.children[3]\n    assert \"timeline-end\" in fourth_item.children[1].attrs['class']\n    assert fourth_item.children[1].children[0] == \"iPhone\"\n    \n    # Last item - no trailing hr\n    last_item = timeline_no_icons.children[4]\n    assert len(last_item.children) == 2  # hr, start (no trailing hr)\n    assert last_item.children[0].tag == \"hr\"\n    assert \"timeline-start\" in last_item.children[1].attrs['class']\n    assert last_item.children[1].children[0] == \"Apple Watch\"\n    \n    # Return element in a Div\n    return Div(timeline_no_icons)\n\n# Run the test\ntest_timeline_without_icons_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_without_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_timeline_vertical_fasthtml_examples\n\n test_timeline_vertical_fasthtml_examples ()\n\nTest vertical timeline variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_vertical_fasthtml_examples():\n    \"\"\"Test vertical timeline variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui, bg_dui\n    \n    # Create checkmark SVG icon as reusable component\n    checkmark_icon = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(h._5, w._5)\n    )\n    \n    # Vertical timeline with text on both sides and icon\n    vertical_timeline_both = Ul(\n        Li(\n            Div(\"1984\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"1998\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2001\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPod\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2007\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2015\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_end, timeline_modifiers.box))\n        ),\n        cls=combine_classes(timeline, timeline_direction.vertical)\n    )\n    \n    # Verify vertical timeline with both sides\n    assert vertical_timeline_both.tag == \"ul\"\n    assert \"timeline\" in vertical_timeline_both.attrs['class']\n    assert \"timeline-vertical\" in vertical_timeline_both.attrs['class']\n    assert len(vertical_timeline_both.children) == 5\n    \n    # Vertical timeline with right side only\n    vertical_timeline_right = Ul(\n        Li(\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPod\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_end, timeline_modifiers.box))\n        ),\n        cls=combine_classes(timeline, timeline_direction.vertical)\n    )\n    \n    # Verify vertical timeline with right side only\n    assert \"timeline\" in vertical_timeline_right.attrs['class']\n    assert \"timeline-vertical\" in vertical_timeline_right.attrs['class']\n    first_item = vertical_timeline_right.children[0]\n    assert len(first_item.children) == 3  # middle, end, hr (no start)\n    \n    # Vertical timeline with left side only\n    vertical_timeline_left = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iMac\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPhone\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle))\n        ),\n        cls=combine_classes(timeline, timeline_direction.vertical)\n    )\n    \n    # Verify vertical timeline with left side only\n    assert \"timeline\" in vertical_timeline_left.attrs['class']\n    assert \"timeline-vertical\" in vertical_timeline_left.attrs['class']\n    first_item = vertical_timeline_left.children[0]\n    assert len(first_item.children) == 3  # start, middle, hr (no end)\n    assert \"timeline-start\" in first_item.children[0].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(vertical_timeline_both, vertical_timeline_right, vertical_timeline_left)\n\n# Run the test\ntest_timeline_vertical_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline timeline-vertical\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start\"&gt;1984&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;1998&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2001&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPod&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2007&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2015&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;Apple Watch&lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"timeline timeline-vertical\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPod&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;Apple Watch&lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"timeline timeline-vertical\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iMac&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPhone&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_vertical_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_timeline_vertical_advanced_fasthtml_examples\n\n test_timeline_vertical_advanced_fasthtml_examples ()\n\nTest vertical timeline with different sides, colorful lines, and without icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_vertical_advanced_fasthtml_examples():\n    \"\"\"Test vertical timeline with different sides, colorful lines, and without icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui, bg_dui\n    \n    # Create checkmark SVG icon as reusable component\n    checkmark_icon = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(h._5, w._5)\n    )\n    \n    # Vertical timeline with different sides\n    vertical_timeline_alternating = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle))\n        ),\n        cls=combine_classes(timeline, timeline_direction.vertical)\n    )\n    \n    # Verify vertical timeline with alternating sides\n    assert \"timeline\" in vertical_timeline_alternating.attrs['class']\n    assert \"timeline-vertical\" in vertical_timeline_alternating.attrs['class']\n    \n    # First item - start side\n    assert \"timeline-start\" in vertical_timeline_alternating.children[0].children[0].attrs['class']\n    # Second item - end side\n    assert \"timeline-end\" in vertical_timeline_alternating.children[1].children[2].attrs['class']\n    # Third item - start side\n    assert \"timeline-start\" in vertical_timeline_alternating.children[2].children[1].attrs['class']\n    \n    # Vertical timeline with colorful lines\n    checkmark_icon_primary = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(text_dui.primary, h._5, w._5)\n    )\n    \n    vertical_timeline_colorful = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon_primary, cls=str(timeline_middle)),\n            Hr(cls=str(bg_dui.primary))\n        ),\n        Li(\n            Hr(cls=str(bg_dui.primary)),\n            Div(checkmark_icon_primary, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr(cls=str(bg_dui.primary))\n        ),\n        Li(\n            Hr(cls=str(bg_dui.primary)),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon_primary, cls=str(timeline_middle)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Div(checkmark_icon, cls=str(timeline_middle))\n        ),\n        cls=combine_classes(timeline, timeline_direction.vertical)\n    )\n    \n    # Verify vertical timeline with colorful lines\n    assert \"timeline\" in vertical_timeline_colorful.attrs['class']\n    assert \"timeline-vertical\" in vertical_timeline_colorful.attrs['class']\n    # First three items have primary colored hrs\n    assert \"bg-primary\" in vertical_timeline_colorful.children[0].children[2].attrs['class']\n    assert \"bg-primary\" in vertical_timeline_colorful.children[1].children[0].attrs['class']\n    assert \"bg-primary\" in vertical_timeline_colorful.children[2].children[0].attrs['class']\n    # Primary colored icons\n    assert \"text-primary\" in vertical_timeline_colorful.children[0].children[1].children[0].attrs['class']\n    \n    # Vertical timeline without icons\n    vertical_timeline_no_icons = Ul(\n        Li(\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPod\", cls=combine_classes(timeline_start, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_start, timeline_modifiers.box))\n        ),\n        cls=combine_classes(timeline, timeline_direction.vertical)\n    )\n    \n    # Verify vertical timeline without icons\n    assert \"timeline\" in vertical_timeline_no_icons.attrs['class']\n    assert \"timeline-vertical\" in vertical_timeline_no_icons.attrs['class']\n    # Items have no middle section\n    assert len(vertical_timeline_no_icons.children[0].children) == 2  # start, hr\n    assert len(vertical_timeline_no_icons.children[1].children) == 3  # hr, end, hr\n    # Items alternate between start and end\n    assert \"timeline-start\" in vertical_timeline_no_icons.children[0].children[0].attrs['class']\n    assert \"timeline-end\" in vertical_timeline_no_icons.children[1].children[1].attrs['class']\n    assert \"timeline-start\" in vertical_timeline_no_icons.children[2].children[1].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(vertical_timeline_alternating, vertical_timeline_colorful, vertical_timeline_no_icons)\n\n# Run the test\ntest_timeline_vertical_advanced_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline timeline-vertical\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"timeline timeline-vertical\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"text-primary h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr class=\"bg-primary\"&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr class=\"bg-primary\"&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"text-primary h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr class=\"bg-primary\"&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr class=\"bg-primary\"&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"text-primary h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;ul class=\"timeline timeline-vertical\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;iPod&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start timeline-box\"&gt;Apple Watch&lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_vertical_advanced_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_timeline_responsive_fasthtml_examples\n\n test_timeline_responsive_fasthtml_examples ()\n\nTest responsive timeline (vertical by default, horizontal on large screen) from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_responsive_fasthtml_examples():\n    \"\"\"Test responsive timeline (vertical by default, horizontal on large screen) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Create checkmark SVG icon as reusable component\n    checkmark_icon = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(h._5, w._5)\n    )\n    \n    # Responsive: vertical by default, horizontal on large screen\n    responsive_timeline = Ul(\n        Li(\n            Div(\"1984\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"First Macintosh computer\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"1998\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iMac\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2001\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPod\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2007\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"iPhone\", cls=combine_classes(timeline_end, timeline_modifiers.box)),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(\"2015\", cls=str(timeline_start)),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\"Apple Watch\", cls=combine_classes(timeline_end, timeline_modifiers.box))\n        ),\n        cls=combine_classes(timeline, timeline_direction.vertical, timeline_direction.horizontal.lg)\n    )\n    \n    # Verify responsive timeline\n    assert responsive_timeline.tag == \"ul\"\n    assert \"timeline\" in responsive_timeline.attrs['class']\n    assert \"timeline-vertical\" in responsive_timeline.attrs['class']\n    assert \"lg:timeline-horizontal\" in responsive_timeline.attrs['class']\n    assert len(responsive_timeline.children) == 5\n    \n    # Verify structure is same as basic timeline\n    first_item = responsive_timeline.children[0]\n    assert \"timeline-start\" in first_item.children[0].attrs['class']\n    assert first_item.children[0].children[0] == \"1984\"\n    assert \"timeline-middle\" in first_item.children[1].attrs['class']\n    assert \"timeline-end\" in first_item.children[2].attrs['class']\n    assert first_item.children[2].children[0] == \"First Macintosh computer\"\n    \n    # Return element in a Div\n    return Div(responsive_timeline)\n\n# Run the test\ntest_timeline_responsive_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline timeline-vertical lg:timeline-horizontal\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-start\"&gt;1984&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;First Macintosh computer&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;1998&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iMac&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2001&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPod&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2007&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;iPhone&lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-start\"&gt;2015&lt;/div&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end timeline-box\"&gt;Apple Watch&lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_timeline_snap_icon_fasthtml_examples\n\n test_timeline_snap_icon_fasthtml_examples ()\n\nTest timeline with icon snapped to the start from daisyUI v5 documentation.\n\n\nExported source\ndef test_timeline_snap_icon_fasthtml_examples():\n    \"\"\"Test timeline with icon snapped to the start from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Div, Hr, Time\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.spacing import m\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, italic, text_align\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Create checkmark SVG icon as reusable component\n    checkmark_icon = Svg(\n        Path(\n            d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\",\n            fill_rule=\"evenodd\",\n            clip_rule=\"evenodd\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 20 20\",\n        fill=\"currentColor\",\n        cls=combine_classes(h._5, w._5)\n    )\n    \n    # Timeline with icon snapped to the start\n    timeline_snap_icon = Ul(\n        Li(\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\n                Time(\"1984\", cls=combine_classes(font_family.mono, italic)),\n                Div(\"First Macintosh computer\", cls=combine_classes(font_size.lg, font_weight.black)),\n                \"The Apple Macintosh—later rebranded as the Macintosh 128K—is the original Apple Macintosh personal computer. It played a pivotal role in establishing desktop publishing as a general office function. The motherboard, a 9 in (23 cm) CRT monitor, and a floppy drive were housed in a beige case with integrated carrying handle; it came with a keyboard and single-button mouse.\",\n                cls=combine_classes(timeline_start, m.b._10, text_align.end.md)\n            ),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\n                Time(\"1998\", cls=combine_classes(font_family.mono, italic)),\n                Div(\"iMac\", cls=combine_classes(font_size.lg, font_weight.black)),\n                \"iMac is a family of all-in-one Mac desktop computers designed and built by Apple Inc. It has been the primary part of Apple's consumer desktop offerings since its debut in August 1998, and has evolved through seven distinct forms\",\n                cls=combine_classes(timeline_end, m.b._10.md)\n            ),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\n                Time(\"2001\", cls=combine_classes(font_family.mono, italic)),\n                Div(\"iPod\", cls=combine_classes(font_size.lg, font_weight.black)),\n                \"The iPod is a discontinued series of portable media players and multi-purpose mobile devices designed and marketed by Apple Inc. The first version was released on October 23, 2001, about 8+1⁄2 months after the Macintosh version of iTunes was released. Apple sold an estimated 450 million iPod products as of 2022. Apple discontinued the iPod product line on May 10, 2022. At over 20 years, the iPod brand is the oldest to be discontinued by Apple\",\n                cls=combine_classes(timeline_start, m.b._10, text_align.end.md)\n            ),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\n                Time(\"2007\", cls=combine_classes(font_family.mono, italic)),\n                Div(\"iPhone\", cls=combine_classes(font_size.lg, font_weight.black)),\n                \"iPhone is a line of smartphones produced by Apple Inc. that use Apple's own iOS mobile operating system. The first-generation iPhone was announced by then-Apple CEO Steve Jobs on January 9, 2007. Since then, Apple has annually released new iPhone models and iOS updates. As of November 1, 2018, more than 2.2 billion iPhones had been sold. As of 2022, the iPhone accounts for 15.6% of global smartphone market share\",\n                cls=combine_classes(timeline_end, m.b._10.md)\n            ),\n            Hr()\n        ),\n        Li(\n            Hr(),\n            Div(checkmark_icon, cls=str(timeline_middle)),\n            Div(\n                Time(\"2015\", cls=combine_classes(font_family.mono, italic)),\n                Div(\"Apple Watch\", cls=combine_classes(font_size.lg, font_weight.black)),\n                \"The Apple Watch is a line of smartwatches produced by Apple Inc. It incorporates fitness tracking, health-oriented capabilities, and wireless telecommunication, and integrates with iOS and other Apple products and services\",\n                cls=combine_classes(timeline_start, m.b._10, text_align.end.md)\n            )\n        ),\n        cls=combine_classes(\n            timeline,\n            timeline_modifiers.snap_icon,\n            timeline_modifiers.compact.max_md, \n            timeline_direction.vertical\n        )\n    )\n    \n    # Verify timeline with snap icon\n    assert timeline_snap_icon.tag == \"ul\"\n    assert \"timeline\" in timeline_snap_icon.attrs['class']\n    assert \"timeline-snap-icon\" in timeline_snap_icon.attrs['class']\n    assert \"max-md:timeline-compact\" in timeline_snap_icon.attrs['class']\n    assert \"timeline-vertical\" in timeline_snap_icon.attrs['class']\n    \n    # Verify first item structure with detailed content\n    first_item = timeline_snap_icon.children[0]\n    assert len(first_item.children) == 3  # middle, start (with content), hr\n    assert \"timeline-middle\" in first_item.children[0].attrs['class']\n    \n    start_content = first_item.children[1]\n    assert \"timeline-start\" in start_content.attrs['class']\n    assert \"mb-10\" in start_content.attrs['class']\n    assert \"md:text-end\" in start_content.attrs['class']\n    \n    # Check Time element\n    assert start_content.children[0].tag == \"time\"\n    assert \"font-mono\" in start_content.children[0].attrs['class']\n    assert \"italic\" in start_content.children[0].attrs['class']\n    assert start_content.children[0].children[0] == \"1984\"\n    \n    # Check title\n    assert start_content.children[1].tag == \"div\"\n    assert \"text-lg\" in start_content.children[1].attrs['class']\n    assert \"font-black\" in start_content.children[1].attrs['class']\n    assert start_content.children[1].children[0] == \"First Macintosh computer\"\n    \n    # Check description text\n    assert \"The Apple Macintosh\" in start_content.children[2]\n    \n    # Verify alternating pattern (start -&gt; end -&gt; start -&gt; end -&gt; start)\n    assert \"timeline-start\" in timeline_snap_icon.children[0].children[1].attrs['class']\n    assert \"timeline-end\" in timeline_snap_icon.children[1].children[2].attrs['class']\n    assert \"timeline-start\" in timeline_snap_icon.children[2].children[2].attrs['class']\n    assert \"timeline-end\" in timeline_snap_icon.children[3].children[2].attrs['class']\n    assert \"timeline-start\" in timeline_snap_icon.children[4].children[2].attrs['class']\n    \n    # Return element in a Div\n    return Div(timeline_snap_icon)\n\n# Run the test\ntest_timeline_snap_icon_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;ul class=\"timeline timeline-snap-icon max-md:timeline-compact timeline-vertical\"&gt;\n    &lt;li&gt;\n      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-start mb-10 md:text-end\"&gt;\n&lt;time class=\"font-mono italic\"&gt;1984&lt;/time&gt;        &lt;div class=\"text-lg font-black\"&gt;First Macintosh computer&lt;/div&gt;\nThe Apple Macintosh—later rebranded as the Macintosh 128K—is the original Apple Macintosh personal computer. It played a pivotal role in establishing desktop publishing as a general office function. The motherboard, a 9 in (23 cm) CRT monitor, and a floppy drive were housed in a beige case with integrated carrying handle; it came with a keyboard and single-button mouse.      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end md:mb-10\"&gt;\n&lt;time class=\"font-mono italic\"&gt;1998&lt;/time&gt;        &lt;div class=\"text-lg font-black\"&gt;iMac&lt;/div&gt;\niMac is a family of all-in-one Mac desktop computers designed and built by Apple Inc. It has been the primary part of Apple's consumer desktop offerings since its debut in August 1998, and has evolved through seven distinct forms      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-start mb-10 md:text-end\"&gt;\n&lt;time class=\"font-mono italic\"&gt;2001&lt;/time&gt;        &lt;div class=\"text-lg font-black\"&gt;iPod&lt;/div&gt;\nThe iPod is a discontinued series of portable media players and multi-purpose mobile devices designed and marketed by Apple Inc. The first version was released on October 23, 2001, about 8+1⁄2 months after the Macintosh version of iTunes was released. Apple sold an estimated 450 million iPod products as of 2022. Apple discontinued the iPod product line on May 10, 2022. At over 20 years, the iPod brand is the oldest to be discontinued by Apple      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-end md:mb-10\"&gt;\n&lt;time class=\"font-mono italic\"&gt;2007&lt;/time&gt;        &lt;div class=\"text-lg font-black\"&gt;iPhone&lt;/div&gt;\niPhone is a line of smartphones produced by Apple Inc. that use Apple's own iOS mobile operating system. The first-generation iPhone was announced by then-Apple CEO Steve Jobs on January 9, 2007. Since then, Apple has annually released new iPhone models and iOS updates. As of November 1, 2018, more than 2.2 billion iPhones had been sold. As of 2022, the iPhone accounts for 15.6% of global smartphone market share      &lt;/div&gt;\n&lt;hr&gt;    &lt;/li&gt;\n    &lt;li&gt;\n&lt;hr&gt;      &lt;div class=\"timeline-middle\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 20 20\" fill=\"currentColor\" class=\"h-5 w-5\"&gt;&lt;path d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;/div&gt;\n      &lt;div class=\"timeline-start mb-10 md:text-end\"&gt;\n&lt;time class=\"font-mono italic\"&gt;2015&lt;/time&gt;        &lt;div class=\"text-lg font-black\"&gt;Apple Watch&lt;/div&gt;\nThe Apple Watch is a line of smartwatches produced by Apple Inc. It incorporates fitness tracking, health-oriented capabilities, and wireless telecommunication, and integrates with iOS and other Apple products and services      &lt;/div&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_timeline_snap_icon_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "timeline"
    ]
  },
  {
    "objectID": "components/data_display/accordion.html",
    "href": "components/data_display/accordion.html",
    "title": "accordion",
    "section": "",
    "text": "Note on Accordion Components\nAccordion uses the same style as the collapse component but it works with radio inputs. You can control which item to be open by checking/unchecking the hidden radio input.\nAll collapse utilities are already defined in the cjm_fasthtml_daisyui.components.data_display.collapse module.\n\n\nAccordion Test Examples\n\nsource\n\n\ntest_accordion_basic_examples\n\n test_accordion_basic_examples ()\n\nTest basic accordion utilities.\n\n\nExported source\ndef test_accordion_basic_examples():\n    \"\"\"Test basic accordion utilities.\"\"\"\n    # Basic components\n    assert str(collapse) == \"collapse\"\n    assert str(collapse_title) == \"collapse-title\"\n    assert str(collapse_content) == \"collapse-content\"\n    \n    # With modifiers\n    assert str(collapse.hover) == \"hover:collapse\"\n    assert str(collapse_title.md) == \"md:collapse-title\"\n    assert str(collapse_content.dark) == \"dark:collapse-content\"\n\n# Run the tests\ntest_accordion_basic_examples()\n\n\n\nsource\n\n\ntest_accordion_modifiers_examples\n\n test_accordion_modifiers_examples ()\n\nTest accordion modifier utilities.\n\n\nExported source\ndef test_accordion_modifiers_examples():\n    \"\"\"Test accordion modifier utilities.\"\"\"\n    assert str(collapse_modifiers.arrow) == \"collapse-arrow\"\n    assert str(collapse_modifiers.plus) == \"collapse-plus\"\n    assert str(collapse_modifiers.open) == \"collapse-open\"\n    assert str(collapse_modifiers.close) == \"collapse-close\"\n    \n    # With responsive modifiers\n    assert str(collapse_modifiers.arrow.hover) == \"hover:collapse-arrow\"\n    assert str(collapse_modifiers.plus.focus) == \"focus:collapse-plus\"\n\n# Run the tests\ntest_accordion_modifiers_examples()\n\n\n\nsource\n\n\ntest_accordion_basic_fasthtml_examples\n\n test_accordion_basic_fasthtml_examples ()\n\nTest basic accordion using radio inputs from daisyUI v5 documentation.\n\n\nExported source\ndef test_accordion_basic_fasthtml_examples():\n    \"\"\"Test basic accordion using radio inputs from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # First accordion item\n    accordion_item_1 = Div(\n        Input(type=\"radio\", name=\"my-accordion-1\", checked=\"checked\"),\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert \"collapse\" in accordion_item_1.attrs['class']\n    assert \"bg-base-100\" in accordion_item_1.attrs['class']\n    assert \"border\" in accordion_item_1.attrs['class']\n    assert \"border-base-300\" in accordion_item_1.attrs['class']\n    assert accordion_item_1.children[0].attrs['type'] == \"radio\"\n    assert accordion_item_1.children[0].attrs['name'] == \"my-accordion-1\"\n    assert accordion_item_1.children[0].attrs['checked'] == \"checked\"\n    assert \"collapse-title\" in accordion_item_1.children[1].attrs['class']\n    assert \"font-semibold\" in accordion_item_1.children[1].attrs['class']\n    assert accordion_item_1.children[1].children[0] == \"How do I create an account?\"\n    assert \"collapse-content\" in accordion_item_1.children[2].attrs['class']\n    assert \"text-sm\" in accordion_item_1.children[2].attrs['class']\n    \n    # Second accordion item\n    accordion_item_2 = Div(\n        Input(type=\"radio\", name=\"my-accordion-1\"),\n        Div(\"I forgot my password. What should I do?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert accordion_item_2.children[0].attrs['name'] == \"my-accordion-1\"\n    assert 'checked' not in accordion_item_2.children[0].attrs\n    \n    # Third accordion item\n    accordion_item_3 = Div(\n        Input(type=\"radio\", name=\"my-accordion-1\"),\n        Div(\"How do I update my profile information?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Go to \"My Account\" settings and select \"Edit Profile\" to make changes.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert accordion_item_3.children[1].children[0] == \"How do I update my profile information?\"\n    assert accordion_item_3.children[2].children[0] == 'Go to \"My Account\" settings and select \"Edit Profile\" to make changes.'\n    \n    # Test that all items share the same radio group name\n    assert accordion_item_1.children[0].attrs['name'] == accordion_item_2.children[0].attrs['name']\n    assert accordion_item_2.children[0].attrs['name'] == accordion_item_3.children[0].attrs['name']\n    \n    # Return the accordion items in a Div\n    return Div(accordion_item_1, accordion_item_2, accordion_item_3)\n\n# Run the tests\ntest_accordion_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"collapse bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-1\" checked=\"checked\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-1\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;I forgot my password. What should I do?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-1\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I update my profile information?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Go to \"My Account\" settings and select \"Edit Profile\" to make changes.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_accordion_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_accordion_arrow_fasthtml_examples\n\n test_accordion_arrow_fasthtml_examples ()\n\nTest accordion with arrow icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_accordion_arrow_fasthtml_examples():\n    \"\"\"Test accordion with arrow icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # First accordion item with arrow\n    accordion_arrow_1 = Div(\n        Input(type=\"radio\", name=\"my-accordion-2\", checked=\"checked\"),\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, collapse_modifiers.arrow, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert \"collapse\" in accordion_arrow_1.attrs['class']\n    assert \"collapse-arrow\" in accordion_arrow_1.attrs['class']\n    assert \"bg-base-100\" in accordion_arrow_1.attrs['class']\n    assert \"border\" in accordion_arrow_1.attrs['class']\n    assert \"border-base-300\" in accordion_arrow_1.attrs['class']\n    assert accordion_arrow_1.children[0].attrs['type'] == \"radio\"\n    assert accordion_arrow_1.children[0].attrs['name'] == \"my-accordion-2\"\n    assert accordion_arrow_1.children[0].attrs['checked'] == \"checked\"\n    \n    # Second accordion item with arrow\n    accordion_arrow_2 = Div(\n        Input(type=\"radio\", name=\"my-accordion-2\"),\n        Div(\"I forgot my password. What should I do?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, collapse_modifiers.arrow, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert \"collapse-arrow\" in accordion_arrow_2.attrs['class']\n    assert accordion_arrow_2.children[0].attrs['name'] == \"my-accordion-2\"\n    assert 'checked' not in accordion_arrow_2.children[0].attrs\n    \n    # Third accordion item with arrow\n    accordion_arrow_3 = Div(\n        Input(type=\"radio\", name=\"my-accordion-2\"),\n        Div(\"How do I update my profile information?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Go to \"My Account\" settings and select \"Edit Profile\" to make changes.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, collapse_modifiers.arrow, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert \"collapse-arrow\" in accordion_arrow_3.attrs['class']\n    assert accordion_arrow_3.children[1].children[0] == \"How do I update my profile information?\"\n    \n    # Test that all arrow items share the same radio group name\n    assert accordion_arrow_1.children[0].attrs['name'] == accordion_arrow_2.children[0].attrs['name']\n    assert accordion_arrow_2.children[0].attrs['name'] == accordion_arrow_3.children[0].attrs['name']\n    \n    # Return the accordion items in a Div\n    return Div(accordion_arrow_1, accordion_arrow_2, accordion_arrow_3)\n\n# Run the tests\ntest_accordion_arrow_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"collapse collapse-arrow bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-2\" checked=\"checked\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse collapse-arrow bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-2\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;I forgot my password. What should I do?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse collapse-arrow bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-2\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I update my profile information?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Go to \"My Account\" settings and select \"Edit Profile\" to make changes.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_accordion_arrow_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_accordion_plus_fasthtml_examples\n\n test_accordion_plus_fasthtml_examples ()\n\nTest accordion with plus/minus icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_accordion_plus_fasthtml_examples():\n    \"\"\"Test accordion with plus/minus icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # First accordion item with plus/minus\n    accordion_plus_1 = Div(\n        Input(type=\"radio\", name=\"my-accordion-3\", checked=\"checked\"),\n        Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, collapse_modifiers.plus, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert \"collapse\" in accordion_plus_1.attrs['class']\n    assert \"collapse-plus\" in accordion_plus_1.attrs['class']\n    assert \"bg-base-100\" in accordion_plus_1.attrs['class']\n    assert \"border\" in accordion_plus_1.attrs['class']\n    assert \"border-base-300\" in accordion_plus_1.attrs['class']\n    assert accordion_plus_1.children[0].attrs['type'] == \"radio\"\n    assert accordion_plus_1.children[0].attrs['name'] == \"my-accordion-3\"\n    assert accordion_plus_1.children[0].attrs['checked'] == \"checked\"\n    \n    # Second accordion item with plus/minus\n    accordion_plus_2 = Div(\n        Input(type=\"radio\", name=\"my-accordion-3\"),\n        Div(\"I forgot my password. What should I do?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, collapse_modifiers.plus, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert \"collapse-plus\" in accordion_plus_2.attrs['class']\n    assert accordion_plus_2.children[0].attrs['name'] == \"my-accordion-3\"\n    assert 'checked' not in accordion_plus_2.children[0].attrs\n    \n    # Third accordion item with plus/minus\n    accordion_plus_3 = Div(\n        Input(type=\"radio\", name=\"my-accordion-3\"),\n        Div(\"How do I update my profile information?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n        Div(\n            'Go to \"My Account\" settings and select \"Edit Profile\" to make changes.',\n            cls=combine_classes(collapse_content, font_size.sm)\n        ),\n        cls=combine_classes(collapse, collapse_modifiers.plus, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    assert \"collapse-plus\" in accordion_plus_3.attrs['class']\n    assert accordion_plus_3.children[1].children[0] == \"How do I update my profile information?\"\n    assert accordion_plus_3.children[2].children[0] == 'Go to \"My Account\" settings and select \"Edit Profile\" to make changes.'\n    \n    # Test that all plus items share the same radio group name\n    assert accordion_plus_1.children[0].attrs['name'] == accordion_plus_2.children[0].attrs['name']\n    assert accordion_plus_2.children[0].attrs['name'] == accordion_plus_3.children[0].attrs['name']\n    \n    # Return the accordion items in a Div\n    return Div(accordion_plus_1, accordion_plus_2, accordion_plus_3)\n\n# Run the tests\ntest_accordion_plus_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"collapse collapse-plus bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-3\" checked=\"checked\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse collapse-plus bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-3\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;I forgot my password. What should I do?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse collapse-plus bg-base-100 border border-base-300\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-3\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I update my profile information?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Go to \"My Account\" settings and select \"Edit Profile\" to make changes.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_accordion_plus_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_accordion_join_fasthtml_examples\n\n test_accordion_join_fasthtml_examples ()\n\nTest accordion with join from daisyUI v5 documentation.\n\n\nExported source\ndef test_accordion_join_fasthtml_examples():\n    \"\"\"Test accordion with join from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.components.layout.join import join, join_item, join_directions\n    \n    # Accordion group using Join\n    accordion_join = Div(\n        Div(\n            Input(type=\"radio\", name=\"my-accordion-4\", checked=\"checked\"),\n            Div(\"How do I create an account?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n            Div(\n                'Click the \"Sign Up\" button in the top right corner and follow the registration process.',\n                cls=combine_classes(collapse_content, font_size.sm)\n            ),\n            cls=combine_classes(collapse, collapse_modifiers.arrow, join_item, border_dui.base_300, border())\n        ),\n        Div(\n            Input(type=\"radio\", name=\"my-accordion-4\"),\n            Div(\"I forgot my password. What should I do?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n            Div(\n                'Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.',\n                cls=combine_classes(collapse_content, font_size.sm)\n            ),\n            cls=combine_classes(collapse, collapse_modifiers.arrow, join_item, border_dui.base_300, border())\n        ),\n        Div(\n            Input(type=\"radio\", name=\"my-accordion-4\"),\n            Div(\"How do I update my profile information?\", cls=combine_classes(collapse_title, font_weight.semibold)),\n            Div(\n                'Go to \"My Account\" settings and select \"Edit Profile\" to make changes.',\n                cls=combine_classes(collapse_content, font_size.sm)\n            ),\n            cls=combine_classes(collapse, collapse_modifiers.arrow, join_item, border_dui.base_300, border())\n        ),\n        cls=combine_classes(join, join_directions.vertical, bg_dui.base_100)\n    )\n    \n    # Verify container structure\n    assert \"join\" in accordion_join.attrs['class']\n    assert \"join-vertical\" in accordion_join.attrs['class']\n    assert \"bg-base-100\" in accordion_join.attrs['class']\n    \n    # Verify first accordion item\n    item_1 = accordion_join.children[0]\n    assert \"collapse\" in item_1.attrs['class']\n    assert \"collapse-arrow\" in item_1.attrs['class']\n    assert \"join-item\" in item_1.attrs['class']\n    assert \"border-base-300\" in item_1.attrs['class']\n    assert \"border\" in item_1.attrs['class']\n    assert item_1.children[0].attrs['type'] == \"radio\"\n    assert item_1.children[0].attrs['name'] == \"my-accordion-4\"\n    assert item_1.children[0].attrs['checked'] == \"checked\"\n    assert item_1.children[1].children[0] == \"How do I create an account?\"\n    \n    # Verify second accordion item\n    item_2 = accordion_join.children[1]\n    assert \"collapse\" in item_2.attrs['class']\n    assert \"collapse-arrow\" in item_2.attrs['class']\n    assert \"join-item\" in item_2.attrs['class']\n    assert item_2.children[0].attrs['name'] == \"my-accordion-4\"\n    assert 'checked' not in item_2.children[0].attrs\n    assert item_2.children[1].children[0] == \"I forgot my password. What should I do?\"\n    \n    # Verify third accordion item\n    item_3 = accordion_join.children[2]\n    assert \"collapse\" in item_3.attrs['class']\n    assert \"collapse-arrow\" in item_3.attrs['class']\n    assert \"join-item\" in item_3.attrs['class']\n    assert item_3.children[0].attrs['name'] == \"my-accordion-4\"\n    assert 'checked' not in item_3.children[0].attrs\n    assert item_3.children[1].children[0] == \"How do I update my profile information?\"\n    \n    # Test that all items share the same radio group name\n    assert item_1.children[0].attrs['name'] == item_2.children[0].attrs['name']\n    assert item_2.children[0].attrs['name'] == item_3.children[0].attrs['name']\n    \n    # Return the accordion join in a Div (it's already a container, but returning for consistency)\n    return accordion_join\n\n# Run the tests\ntest_accordion_join_fasthtml_examples()\n\n\n&lt;div class=\"join join-vertical bg-base-100\"&gt;\n  &lt;div class=\"collapse collapse-arrow join-item border-base-300 border\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-4\" checked=\"checked\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I create an account?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click the \"Sign Up\" button in the top right corner and follow the registration process.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse collapse-arrow join-item border-base-300 border\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-4\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;I forgot my password. What should I do?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Click on \"Forgot Password\" on the login page and follow the instructions sent to your email.&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"collapse collapse-arrow join-item border-base-300 border\"&gt;\n    &lt;input type=\"radio\" name=\"my-accordion-4\"&gt;\n    &lt;div class=\"collapse-title font-semibold\"&gt;How do I update my profile information?&lt;/div&gt;\n    &lt;div class=\"collapse-content text-sm\"&gt;Go to \"My Account\" settings and select \"Edit Profile\" to make changes.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_accordion_join_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "accordion"
    ]
  },
  {
    "objectID": "components/data_display/kbd.html",
    "href": "components/data_display/kbd.html",
    "title": "kbd",
    "section": "",
    "text": "Base Kbd\nThe base kbd component:\n\n\nExported source\nkbd = SingleValueFactory(\"kbd\", \"Keyboard key or shortcut display component\") # Kbd component\n\n\n\n\nKbd Sizes\nKbd size variants:\n\n\nExported source\nkbd_sizes = enums_to_simple_factory(kbd, [DaisyUINamedSize], \"Kbd size variants from extra small to extra large\") # Kbd size variants\n\n\n\n\nKbd Test Examples\n\nsource\n\n\ntest_kbd_basic_examples\n\n test_kbd_basic_examples ()\n\nTest basic kbd utilities.\n\n\nExported source\ndef test_kbd_basic_examples():\n    \"\"\"Test basic kbd utilities.\"\"\"\n    # Basic kbd\n    assert str(kbd) == \"kbd\"\n    \n    # With modifiers\n    assert str(kbd.hover) == \"hover:kbd\"\n    assert str(kbd.md) == \"md:kbd\"\n    assert str(kbd.dark) == \"dark:kbd\"\n\n# Run the tests\ntest_kbd_basic_examples()\n\n\n\nsource\n\n\ntest_kbd_sizes_examples\n\n test_kbd_sizes_examples ()\n\nTest kbd size variants.\n\n\nExported source\ndef test_kbd_sizes_examples():\n    \"\"\"Test kbd size variants.\"\"\"\n    assert str(kbd_sizes.xs) == \"kbd-xs\"\n    assert str(kbd_sizes.sm) == \"kbd-sm\"\n    assert str(kbd_sizes.md) == \"kbd-md\"\n    assert str(kbd_sizes.lg) == \"kbd-lg\"\n    assert str(kbd_sizes.xl) == \"kbd-xl\"\n    \n    # With responsive modifiers\n    assert str(kbd_sizes.xs.sm) == \"sm:kbd-xs\"\n    assert str(kbd_sizes.lg.md) == \"md:kbd-lg\"\n\n# Run the tests\ntest_kbd_sizes_examples()\n\n\n\nsource\n\n\ntest_kbd_basic_fasthtml_examples\n\n test_kbd_basic_fasthtml_examples ()\n\nTest basic kbd and sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_kbd_basic_fasthtml_examples():\n    \"\"\"Test basic kbd and sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Kbd, Div\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Basic kbd\n    basic_kbd = Kbd(\"K\", cls=str(kbd))\n    assert basic_kbd.tag == \"kbd\"\n    assert basic_kbd.attrs['class'] == \"kbd\"\n    assert basic_kbd.children[0] == \"K\"\n    \n    # Kbd sizes\n    kbd_xs_elem = Kbd(\"Xsmall\", cls=combine_classes(kbd, kbd_sizes.xs))\n    assert kbd_xs_elem.tag == \"kbd\"\n    assert \"kbd\" in kbd_xs_elem.attrs['class']\n    assert \"kbd-xs\" in kbd_xs_elem.attrs['class']\n    assert kbd_xs_elem.children[0] == \"Xsmall\"\n    \n    kbd_sm_elem = Kbd(\"Small\", cls=combine_classes(kbd, kbd_sizes.sm))\n    assert \"kbd\" in kbd_sm_elem.attrs['class']\n    assert \"kbd-sm\" in kbd_sm_elem.attrs['class']\n    assert kbd_sm_elem.children[0] == \"Small\"\n    \n    kbd_md_elem = Kbd(\"Medium\", cls=combine_classes(kbd, kbd_sizes.md))\n    assert \"kbd\" in kbd_md_elem.attrs['class']\n    assert \"kbd-md\" in kbd_md_elem.attrs['class']\n    assert kbd_md_elem.children[0] == \"Medium\"\n    \n    kbd_lg_elem = Kbd(\"Large\", cls=combine_classes(kbd, kbd_sizes.lg))\n    assert \"kbd\" in kbd_lg_elem.attrs['class']\n    assert \"kbd-lg\" in kbd_lg_elem.attrs['class']\n    assert kbd_lg_elem.children[0] == \"Large\"\n    \n    kbd_xl_elem = Kbd(\"Xlarge\", cls=combine_classes(kbd, kbd_sizes.xl))\n    assert \"kbd\" in kbd_xl_elem.attrs['class']\n    assert \"kbd-xl\" in kbd_xl_elem.attrs['class']\n    assert kbd_xl_elem.children[0] == \"Xlarge\"\n    \n    # In text example\n    kbd_in_text = Kbd(\"F\", cls=combine_classes(kbd, kbd_sizes.sm))\n    assert kbd_in_text.tag == \"kbd\"\n    assert \"kbd\" in kbd_in_text.attrs['class']\n    assert \"kbd-sm\" in kbd_in_text.attrs['class']\n    assert kbd_in_text.children[0] == \"F\"\n    \n    # Return all elements in a Div\n    return Div(\n        basic_kbd,\n        kbd_xs_elem,\n        kbd_sm_elem,\n        kbd_md_elem,\n        kbd_lg_elem,\n        kbd_xl_elem,\n        kbd_in_text\n    )\n\n# Run the tests\ntest_kbd_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;kbd class=\"kbd\"&gt;K&lt;/kbd&gt;&lt;kbd class=\"kbd kbd-xs\"&gt;Xsmall&lt;/kbd&gt;&lt;kbd class=\"kbd kbd-sm\"&gt;Small&lt;/kbd&gt;&lt;kbd class=\"kbd kbd-md\"&gt;Medium&lt;/kbd&gt;&lt;kbd class=\"kbd kbd-lg\"&gt;Large&lt;/kbd&gt;&lt;kbd class=\"kbd kbd-xl\"&gt;Xlarge&lt;/kbd&gt;&lt;kbd class=\"kbd kbd-sm\"&gt;F&lt;/kbd&gt;&lt;/div&gt;\n\n\n\ntest_func = test_kbd_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_kbd_combination_fasthtml_examples\n\n test_kbd_combination_fasthtml_examples ()\n\nTest key combinations and function keys from daisyUI v5 documentation.\n\n\nExported source\ndef test_kbd_combination_fasthtml_examples():\n    \"\"\"Test key combinations and function keys from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Kbd, Div\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Key combination\n    ctrl = Kbd(\"ctrl\", cls=str(kbd))\n    shift = Kbd(\"shift\", cls=str(kbd))\n    delete = Kbd(\"del\", cls=str(kbd))\n    \n    assert ctrl.tag == \"kbd\"\n    assert ctrl.attrs['class'] == \"kbd\"\n    assert ctrl.children[0] == \"ctrl\"\n    \n    assert shift.tag == \"kbd\"\n    assert shift.attrs['class'] == \"kbd\"\n    assert shift.children[0] == \"shift\"\n    \n    assert delete.tag == \"kbd\"\n    assert delete.attrs['class'] == \"kbd\"\n    assert delete.children[0] == \"del\"\n    \n    # Function Keys\n    cmd = Kbd(\"⌘\", cls=str(kbd))\n    option = Kbd(\"⌥\", cls=str(kbd))\n    shift_key = Kbd(\"⇧\", cls=str(kbd))\n    ctrl_key = Kbd(\"⌃\", cls=str(kbd))\n    \n    assert cmd.tag == \"kbd\"\n    assert cmd.attrs['class'] == \"kbd\"\n    assert cmd.children[0] == \"⌘\"\n    \n    assert option.tag == \"kbd\"\n    assert option.attrs['class'] == \"kbd\"\n    assert option.children[0] == \"⌥\"\n    \n    assert shift_key.tag == \"kbd\"\n    assert shift_key.attrs['class'] == \"kbd\"\n    assert shift_key.children[0] == \"⇧\"\n    \n    assert ctrl_key.tag == \"kbd\"\n    assert ctrl_key.attrs['class'] == \"kbd\"\n    assert ctrl_key.children[0] == \"⌃\"\n    \n    # Return all elements in a Div\n    return Div(\n        # Key combination row\n        Div(ctrl, shift, delete),\n        # Function keys row\n        Div(cmd, option, shift_key, ctrl_key)\n    )\n\n# Run the tests\ntest_kbd_combination_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n&lt;kbd class=\"kbd\"&gt;ctrl&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;shift&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;del&lt;/kbd&gt;  &lt;/div&gt;\n  &lt;div&gt;\n&lt;kbd class=\"kbd\"&gt;⌘&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;⌥&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;⇧&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;⌃&lt;/kbd&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_kbd_combination_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_kbd_keyboard_fasthtml_examples\n\n test_kbd_keyboard_fasthtml_examples ()\n\nTest full keyboard and arrow keys from daisyUI v5 documentation.\n\n\nExported source\ndef test_kbd_keyboard_fasthtml_examples():\n    \"\"\"Test full keyboard and arrow keys from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Kbd, Div\n    from cjm_fasthtml_tailwind.utilities.spacing import m\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, justify, flex_display\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    \n    # Full keyboard - first row\n    row1 = Div(\n        Kbd(\"q\", cls=str(kbd)),\n        Kbd(\"w\", cls=str(kbd)),\n        Kbd(\"e\", cls=str(kbd)),\n        Kbd(\"r\", cls=str(kbd)),\n        Kbd(\"t\", cls=str(kbd)),\n        Kbd(\"y\", cls=str(kbd)),\n        Kbd(\"u\", cls=str(kbd)),\n        Kbd(\"i\", cls=str(kbd)),\n        Kbd(\"o\", cls=str(kbd)),\n        Kbd(\"p\", cls=str(kbd)),\n        cls=combine_classes(m.y_1, flex_display, w.full, justify.center, gap._1)\n    )\n    assert row1.tag == \"div\"\n    assert \"m-y-1\" in row1.attrs['class']\n    assert \"flex\" in row1.attrs['class']\n    assert \"w-full\" in row1.attrs['class']\n    assert \"justify-center\" in row1.attrs['class']\n    assert \"gap-1\" in row1.attrs['class']\n    assert len(row1.children) == 10\n    for i, letter in enumerate(\"qwertyuiop\"):\n        assert row1.children[i].tag == \"kbd\"\n        assert row1.children[i].attrs['class'] == \"kbd\"\n        assert row1.children[i].children[0] == letter\n    \n    # Second row\n    row2 = Div(\n        Kbd(\"a\", cls=str(kbd)),\n        Kbd(\"s\", cls=str(kbd)),\n        Kbd(\"d\", cls=str(kbd)),\n        Kbd(\"f\", cls=str(kbd)),\n        Kbd(\"g\", cls=str(kbd)),\n        Kbd(\"h\", cls=str(kbd)),\n        Kbd(\"j\", cls=str(kbd)),\n        Kbd(\"k\", cls=str(kbd)),\n        Kbd(\"l\", cls=str(kbd)),\n        cls=combine_classes(m.y_1, flex_display, w.full, justify.center, gap._1)\n    )\n    assert len(row2.children) == 9\n    for i, letter in enumerate(\"asdfghjkl\"):\n        assert row2.children[i].children[0] == letter\n    \n    # Third row\n    row3 = Div(\n        Kbd(\"z\", cls=str(kbd)),\n        Kbd(\"x\", cls=str(kbd)),\n        Kbd(\"c\", cls=str(kbd)),\n        Kbd(\"v\", cls=str(kbd)),\n        Kbd(\"b\", cls=str(kbd)),\n        Kbd(\"n\", cls=str(kbd)),\n        Kbd(\"m\", cls=str(kbd)),\n        Kbd(\"/\", cls=str(kbd)),\n        cls=combine_classes(m.y_1, flex_display, w.full, justify.center, gap._1)\n    )\n    assert len(row3.children) == 8\n    for i, char in enumerate(\"zxcvbnm/\"):\n        assert row3.children[i].children[0] == char\n    \n    # Arrow Keys\n    # Up arrow\n    up_row = Div(\n        Kbd(\"▲\", cls=str(kbd)),\n        cls=combine_classes(flex_display, w.full, justify.center)\n    )\n    assert up_row.tag == \"div\"\n    assert \"flex\" in up_row.attrs['class']\n    assert \"w-full\" in up_row.attrs['class']\n    assert \"justify-center\" in up_row.attrs['class']\n    assert len(up_row.children) == 1\n    assert up_row.children[0].children[0] == \"▲\"\n    \n    # Left and right arrows\n    middle_row = Div(\n        Kbd(\"◀︎\", cls=str(kbd)),\n        Kbd(\"▶︎\", cls=str(kbd)),\n        cls=combine_classes(flex_display, w.full, justify.center, gap._12)\n    )\n    assert \"gap-12\" in middle_row.attrs['class']\n    assert len(middle_row.children) == 2\n    assert middle_row.children[0].children[0] == \"◀︎\"\n    assert middle_row.children[1].children[0] == \"▶︎\"\n    \n    # Down arrow\n    down_row = Div(\n        Kbd(\"▼\", cls=str(kbd)),\n        cls=combine_classes(flex_display, w.full, justify.center)\n    )\n    assert len(down_row.children) == 1\n    assert down_row.children[0].children[0] == \"▼\"\n    \n    # Return all elements in a Div\n    return Div(\n        # Full keyboard\n        Div(row1, row2, row3),\n        # Arrow keys\n        Div(up_row, middle_row, down_row)\n    )\n\n# Run the tests\ntest_kbd_keyboard_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div&gt;\n    &lt;div class=\"m-y-1 flex w-full justify-center gap-1\"&gt;\n&lt;kbd class=\"kbd\"&gt;q&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;w&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;e&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;r&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;t&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;y&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;u&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;i&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;o&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;p&lt;/kbd&gt;    &lt;/div&gt;\n    &lt;div class=\"m-y-1 flex w-full justify-center gap-1\"&gt;\n&lt;kbd class=\"kbd\"&gt;a&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;s&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;d&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;f&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;g&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;h&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;j&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;k&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;l&lt;/kbd&gt;    &lt;/div&gt;\n    &lt;div class=\"m-y-1 flex w-full justify-center gap-1\"&gt;\n&lt;kbd class=\"kbd\"&gt;z&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;x&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;c&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;v&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;b&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;n&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;m&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;/&lt;/kbd&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div class=\"flex w-full justify-center\"&gt;\n&lt;kbd class=\"kbd\"&gt;▲&lt;/kbd&gt;    &lt;/div&gt;\n    &lt;div class=\"flex w-full justify-center gap-12\"&gt;\n&lt;kbd class=\"kbd\"&gt;◀︎&lt;/kbd&gt;&lt;kbd class=\"kbd\"&gt;▶︎&lt;/kbd&gt;    &lt;/div&gt;\n    &lt;div class=\"flex w-full justify-center\"&gt;\n&lt;kbd class=\"kbd\"&gt;▼&lt;/kbd&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_kbd_keyboard_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "kbd"
    ]
  },
  {
    "objectID": "components/data_display/status.html",
    "href": "components/data_display/status.html",
    "title": "status",
    "section": "",
    "text": "Base Status\nThe base status component:\n\n\nExported source\nstatus = SingleValueFactory(\"status\", \"Status icon component\") # Status icon\n\n\n\n\nStatus Colors\nStatus color variants using daisyUI semantic colors:\n\n\nExported source\nstatus_colors = enums_to_simple_factory(status, [SemanticColorBrand, SemanticColorStatus], \"Status color variants using daisyUI semantic colors\") # Status color variants\n\n\n\n\nStatus Sizes\nStatus size variants:\n\n\nExported source\nstatus_sizes = enums_to_simple_factory(status, [DaisyUINamedSize], \"Status size variants from extra small to extra large\") # Status size variants\n\n\n\n\nStatus Test Examples\n\nsource\n\n\ntest_status_basic_examples\n\n test_status_basic_examples ()\n\nTest basic status utilities.\n\n\nExported source\ndef test_status_basic_examples():\n    \"\"\"Test basic status utilities.\"\"\"\n    # Basic status\n    assert str(status) == \"status\"\n    \n    # With modifiers\n    assert str(status.hover) == \"hover:status\"\n    assert str(status.md) == \"md:status\"\n    assert str(status.dark) == \"dark:status\"\n\n# Run the tests\ntest_status_basic_examples()\n\n\n\nsource\n\n\ntest_status_colors_examples\n\n test_status_colors_examples ()\n\nTest status color variants.\n\n\nExported source\ndef test_status_colors_examples():\n    \"\"\"Test status color variants.\"\"\"\n    # All color variants\n    assert str(status_colors.neutral) == \"status-neutral\"\n    assert str(status_colors.primary) == \"status-primary\"\n    assert str(status_colors.secondary) == \"status-secondary\"\n    assert str(status_colors.accent) == \"status-accent\"\n    assert str(status_colors.info) == \"status-info\"\n    assert str(status_colors.success) == \"status-success\"\n    assert str(status_colors.warning) == \"status-warning\"\n    assert str(status_colors.error) == \"status-error\"\n    \n    # With modifiers\n    assert str(status_colors.primary.hover) == \"hover:status-primary\"\n    assert str(status_colors.success.focus) == \"focus:status-success\"\n\n# Run the tests\ntest_status_colors_examples()\n\n\n\nsource\n\n\ntest_status_sizes_examples\n\n test_status_sizes_examples ()\n\nTest status size variants.\n\n\nExported source\ndef test_status_sizes_examples():\n    \"\"\"Test status size variants.\"\"\"\n    assert str(status_sizes.xs) == \"status-xs\"\n    assert str(status_sizes.sm) == \"status-sm\"\n    assert str(status_sizes.md) == \"status-md\"\n    assert str(status_sizes.lg) == \"status-lg\"\n    assert str(status_sizes.xl) == \"status-xl\"\n    \n    # With responsive modifiers\n    assert str(status_sizes.xs.sm) == \"sm:status-xs\"\n    assert str(status_sizes.lg.md) == \"md:status-lg\"\n\n# Run the tests\ntest_status_sizes_examples()\n\n\n\nsource\n\n\ntest_status_basic_fasthtml_examples\n\n test_status_basic_fasthtml_examples ()\n\nTest basic status from daisyUI v5 documentation.\n\n\nExported source\ndef test_status_basic_fasthtml_examples():\n    \"\"\"Test basic status from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Basic status\n    basic_status = Span(cls=str(status))\n    assert basic_status.tag == \"span\"\n    assert basic_status.attrs['class'] == \"status\"\n    assert basic_status.children == ()  # Empty\n    \n    # Return elements in a Div\n    return Div(basic_status)\n\n# Run the tests\ntest_status_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"status\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_status_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_status_sizes_fasthtml_examples\n\n test_status_sizes_fasthtml_examples ()\n\nTest status sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_status_sizes_fasthtml_examples():\n    \"\"\"Test status sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    \n    # Status sizes\n    xs_status = Div(aria_label=\"status\", cls=combine_classes(status, status_sizes.xs))\n    assert xs_status.tag == \"div\"\n    assert xs_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in xs_status.attrs['class']\n    assert \"status-xs\" in xs_status.attrs['class']\n    assert xs_status.children == ()\n    \n    sm_status = Div(aria_label=\"status\", cls=combine_classes(status, status_sizes.sm))\n    assert sm_status.tag == \"div\"\n    assert sm_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in sm_status.attrs['class']\n    assert \"status-sm\" in sm_status.attrs['class']\n    assert sm_status.children == ()\n    \n    md_status = Div(aria_label=\"status\", cls=combine_classes(status, status_sizes.md))\n    assert md_status.tag == \"div\"\n    assert md_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in md_status.attrs['class']\n    assert \"status-md\" in md_status.attrs['class']\n    assert md_status.children == ()\n    \n    lg_status = Div(aria_label=\"status\", cls=combine_classes(status, status_sizes.lg))\n    assert lg_status.tag == \"div\"\n    assert lg_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in lg_status.attrs['class']\n    assert \"status-lg\" in lg_status.attrs['class']\n    assert lg_status.children == ()\n    \n    xl_status = Div(aria_label=\"status\", cls=combine_classes(status, status_sizes.xl))\n    assert xl_status.tag == \"div\"\n    assert xl_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in xl_status.attrs['class']\n    assert \"status-xl\" in xl_status.attrs['class']\n    assert xl_status.children == ()\n    \n    # Return all elements in a Div\n    return Div(xs_status, sm_status, md_status, lg_status, xl_status)\n\n# Run the tests\ntest_status_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-xs\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-sm\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-md\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-lg\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-xl\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_status_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_status_colors_fasthtml_examples\n\n test_status_colors_fasthtml_examples ()\n\nTest status with colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_status_colors_fasthtml_examples():\n    \"\"\"Test status with colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    \n    # Status with colors\n    primary_status = Div(aria_label=\"status\", cls=combine_classes(status, status_colors.primary))\n    assert primary_status.tag == \"div\"\n    assert primary_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in primary_status.attrs['class']\n    assert \"status-primary\" in primary_status.attrs['class']\n    assert primary_status.children == ()\n    \n    secondary_status = Div(aria_label=\"status\", cls=combine_classes(status, status_colors.secondary))\n    assert secondary_status.tag == \"div\"\n    assert secondary_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in secondary_status.attrs['class']\n    assert \"status-secondary\" in secondary_status.attrs['class']\n    assert secondary_status.children == ()\n    \n    accent_status = Div(aria_label=\"status\", cls=combine_classes(status, status_colors.accent))\n    assert accent_status.tag == \"div\"\n    assert accent_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in accent_status.attrs['class']\n    assert \"status-accent\" in accent_status.attrs['class']\n    assert accent_status.children == ()\n    \n    neutral_status = Div(aria_label=\"status\", cls=combine_classes(status, status_colors.neutral))\n    assert neutral_status.tag == \"div\"\n    assert neutral_status.attrs['aria-label'] == \"status\"\n    assert \"status\" in neutral_status.attrs['class']\n    assert \"status-neutral\" in neutral_status.attrs['class']\n    assert neutral_status.children == ()\n    \n    info_status = Div(aria_label=\"info\", cls=combine_classes(status, status_colors.info))\n    assert info_status.tag == \"div\"\n    assert info_status.attrs['aria-label'] == \"info\"\n    assert \"status\" in info_status.attrs['class']\n    assert \"status-info\" in info_status.attrs['class']\n    assert info_status.children == ()\n    \n    success_status = Div(aria_label=\"success\", cls=combine_classes(status, status_colors.success))\n    assert success_status.tag == \"div\"\n    assert success_status.attrs['aria-label'] == \"success\"\n    assert \"status\" in success_status.attrs['class']\n    assert \"status-success\" in success_status.attrs['class']\n    assert success_status.children == ()\n    \n    warning_status = Div(aria_label=\"warning\", cls=combine_classes(status, status_colors.warning))\n    assert warning_status.tag == \"div\"\n    assert warning_status.attrs['aria-label'] == \"warning\"\n    assert \"status\" in warning_status.attrs['class']\n    assert \"status-warning\" in warning_status.attrs['class']\n    assert warning_status.children == ()\n    \n    error_status = Div(aria_label=\"error\", cls=combine_classes(status, status_colors.error))\n    assert error_status.tag == \"div\"\n    assert error_status.attrs['aria-label'] == \"error\"\n    assert \"status\" in error_status.attrs['class']\n    assert \"status-error\" in error_status.attrs['class']\n    assert error_status.children == ()\n    \n    # Return all elements in a Div\n    return Div(\n        primary_status, secondary_status, accent_status, neutral_status,\n        info_status, success_status, warning_status, error_status\n    )\n\n# Run the tests\ntest_status_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-primary\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-secondary\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-accent\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"status\" class=\"status status-neutral\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"info\" class=\"status status-info\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"success\" class=\"status status-success\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"warning\" class=\"status status-warning\"&gt;&lt;/div&gt;\n  &lt;div aria-label=\"error\" class=\"status status-error\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_status_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_status_animation_fasthtml_examples\n\n test_status_animation_fasthtml_examples ()\n\nTest status with ping and bounce animations from daisyUI v5 documentation.\n\n\nExported source\ndef test_status_animation_fasthtml_examples():\n    \"\"\"Test status with ping and bounce animations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.transitions_and_animation import animate\n    \n    # Status with ping animation\n    ping_container = Div(\n        Div(cls=combine_classes(status, status_colors.error, animate.ping)),\n        Div(cls=combine_classes(status, status_colors.error)),\n        \" Server is down\",\n        cls=combine_classes(grid_display.inline, \"*:[grid-area:1/1]\")\n    )\n    assert ping_container.tag == \"div\"\n    assert \"inline-grid\" in ping_container.attrs['class']\n    assert \"*:[grid-area:1/1]\" in ping_container.attrs['class']\n    assert len(ping_container.children) == 3\n    \n    # First child - status with ping\n    ping_status = ping_container.children[0]\n    assert ping_status.tag == \"div\"\n    assert \"status\" in ping_status.attrs['class']\n    assert \"status-error\" in ping_status.attrs['class']\n    assert \"animate-ping\" in ping_status.attrs['class']\n    assert ping_status.children == ()\n    \n    # Second child - static status\n    static_status = ping_container.children[1]\n    assert static_status.tag == \"div\"\n    assert \"status\" in static_status.attrs['class']\n    assert \"status-error\" in static_status.attrs['class']\n    assert \"animate-ping\" not in static_status.attrs['class']\n    assert static_status.children == ()\n    \n    # Third child - text\n    assert ping_container.children[2] == \" Server is down\"\n    \n    # Status with bounce animation\n    bounce_status = Div(\n        Div(cls=combine_classes(status, status_colors.info, animate.bounce)),\n        \" Unread messages\"\n    )\n    assert bounce_status.tag == \"div\"\n    assert len(bounce_status.children) == 2\n    \n    # First child - status with bounce\n    bounce_indicator = bounce_status.children[0]\n    assert bounce_indicator.tag == \"div\"\n    assert \"status\" in bounce_indicator.attrs['class']\n    assert \"status-info\" in bounce_indicator.attrs['class']\n    assert \"animate-bounce\" in bounce_indicator.attrs['class']\n    assert bounce_indicator.children == ()\n    \n    # Second child - text\n    assert bounce_status.children[1] == \" Unread messages\"\n    \n    # Return all elements in a Div\n    return Div(ping_container, bounce_status)\n\n# Run the tests\ntest_status_animation_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"inline-grid *:[grid-area:1/1]\"&gt;\n    &lt;div class=\"status status-error animate-ping\"&gt;&lt;/div&gt;\n    &lt;div class=\"status status-error\"&gt;&lt;/div&gt;\n Server is down  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;div class=\"status status-info animate-bounce\"&gt;&lt;/div&gt;\n Unread messages  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_status_animation_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "status"
    ]
  },
  {
    "objectID": "components/data_display/avatar.html",
    "href": "components/data_display/avatar.html",
    "title": "avatar",
    "section": "",
    "text": "from nbdev.showdoc import *\n\n\nBase Avatar\nThe base avatar components:\n\n\nExported source\navatar = SingleValueFactory(\"avatar\", \"Avatar container component\") # Avatar container\navatar_group = SingleValueFactory(\"avatar-group\", \"Container for multiple avatars\") # Avatar group\n\n\n\n\nAvatar Modifiers\nAvatar modifier utilities:\n\n\nExported source\navatar_modifiers = SimpleFactory(\n    {\n        \"online\": \"avatar-online\",\n        \"offline\": \"avatar-offline\",\n        \"placeholder\": \"avatar-placeholder\"\n    },\n    \"Avatar modifiers (online/offline indicators, placeholder)\"\n) # Avatar modifiers\n\n\n\n\nAvatar Test Examples\n\nsource\n\n\ntest_avatar_basic_examples\n\n test_avatar_basic_examples ()\n\nTest basic avatar utilities.\n\n\nExported source\ndef test_avatar_basic_examples():\n    \"\"\"Test basic avatar utilities.\"\"\"\n    # Basic components\n    assert str(avatar) == \"avatar\"\n    assert str(avatar_group) == \"avatar-group\"\n    \n    # With modifiers\n    assert str(avatar.hover) == \"hover:avatar\"\n    assert str(avatar_group.md) == \"md:avatar-group\"\n\n# Run the tests\ntest_avatar_basic_examples()\n\n\n\nsource\n\n\ntest_avatar_modifiers_examples\n\n test_avatar_modifiers_examples ()\n\nTest avatar modifier utilities.\n\n\nExported source\ndef test_avatar_modifiers_examples():\n    \"\"\"Test avatar modifier utilities.\"\"\"\n    assert str(avatar_modifiers.online) == \"avatar-online\"\n    assert str(avatar_modifiers.offline) == \"avatar-offline\"\n    assert str(avatar_modifiers.placeholder) == \"avatar-placeholder\"\n    \n    # With responsive modifiers\n    assert str(avatar_modifiers.online.hover) == \"hover:avatar-online\"\n    assert str(avatar_modifiers.placeholder.md) == \"md:avatar-placeholder\"\n\n# Run the tests\ntest_avatar_modifiers_examples()\n\n\n\nsource\n\n\ntest_avatar_basic_fasthtml_examples\n\n test_avatar_basic_fasthtml_examples ()\n\nTest basic avatar and avatar in custom sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_avatar_basic_fasthtml_examples():\n    \"\"\"Test basic avatar and avatar in custom sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    \n    # Basic avatar\n    basic_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/batperson@192.webp\"),\n            cls=combine_classes(w._24, rounded())\n        ),\n        cls=str(avatar)\n    )\n    assert \"avatar\" in basic_avatar.attrs['class']\n    assert basic_avatar.children[0].tag == \"div\"\n    assert \"w-24\" in basic_avatar.children[0].attrs['class']\n    assert \"rounded\" in basic_avatar.children[0].attrs['class']\n    assert basic_avatar.children[0].children[0].tag == \"img\"\n    assert basic_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/batperson@192.webp\"\n    \n    # Avatar in custom sizes\n    size_32_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\"),\n            cls=combine_classes(w._32, rounded())\n        ),\n        cls=str(avatar)\n    )\n    assert \"avatar\" in size_32_avatar.attrs['class']\n    assert \"w-32\" in size_32_avatar.children[0].attrs['class']\n    assert size_32_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/superperson@192.webp\"\n    \n    size_20_avatar = Div(\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\",\n                alt=\"Tailwind-CSS-Avatar-component\"\n            ),\n            cls=combine_classes(w._20, rounded())\n        ),\n        cls=str(avatar)\n    )\n    assert \"w-20\" in size_20_avatar.children[0].attrs['class']\n    assert size_20_avatar.children[0].children[0].attrs['alt'] == \"Tailwind-CSS-Avatar-component\"\n    \n    size_16_avatar = Div(\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\",\n                alt=\"Tailwind-CSS-Avatar-component\"\n            ),\n            cls=combine_classes(w._16, rounded())\n        ),\n        cls=str(avatar)\n    )\n    assert \"w-16\" in size_16_avatar.children[0].attrs['class']\n    \n    size_8_avatar = Div(\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\",\n                alt=\"Tailwind-CSS-Avatar-component\"\n            ),\n            cls=combine_classes(w._8, rounded())\n        ),\n        cls=str(avatar)\n    )\n    assert \"w-8\" in size_8_avatar.children[0].attrs['class']\n    \n    # Return all examples in a Div\n    return Div(\n        basic_avatar,\n        size_32_avatar,\n        size_20_avatar,\n        size_16_avatar,\n        size_8_avatar\n    )\n\n# Run the tests\ntest_avatar_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"w-24 rounded\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/batperson@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"w-32 rounded\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"w-20 rounded\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\" alt=\"Tailwind-CSS-Avatar-component\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"w-16 rounded\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\" alt=\"Tailwind-CSS-Avatar-component\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"w-8 rounded\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/superperson@192.webp\" alt=\"Tailwind-CSS-Avatar-component\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_avatar_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_avatar_rounded_and_mask_fasthtml_examples\n\n test_avatar_rounded_and_mask_fasthtml_examples ()\n\nTest avatar rounded and avatar with mask from daisyUI v5 documentation.\n\n\nExported source\ndef test_avatar_rounded_and_mask_fasthtml_examples():\n    \"\"\"Test avatar rounded and avatar with mask from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.components.layout.mask import mask, mask_styles\n    \n    # Avatar rounded\n    rounded_xl_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/yellingwoman@192.webp\"),\n            cls=combine_classes(w._24, rounded.xl)\n        ),\n        cls=str(avatar)\n    )\n    assert \"avatar\" in rounded_xl_avatar.attrs['class']\n    assert \"w-24\" in rounded_xl_avatar.children[0].attrs['class']\n    assert \"rounded-xl\" in rounded_xl_avatar.children[0].attrs['class']\n    assert rounded_xl_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/yellingwoman@192.webp\"\n    \n    rounded_full_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/yellingcat@192.webp\"),\n            cls=combine_classes(w._24, rounded.full)\n        ),\n        cls=str(avatar)\n    )\n    assert \"w-24\" in rounded_full_avatar.children[0].attrs['class']\n    assert \"rounded-full\" in rounded_full_avatar.children[0].attrs['class']\n    assert rounded_full_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/yellingcat@192.webp\"\n    \n    # Avatar with mask\n    mask_heart_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/distracted3@192.webp\"),\n            cls=combine_classes(mask, mask_styles.heart, w._24)\n        ),\n        cls=str(avatar)\n    )\n    assert \"avatar\" in mask_heart_avatar.attrs['class']\n    assert \"mask\" in mask_heart_avatar.children[0].attrs['class']\n    assert \"mask-heart\" in mask_heart_avatar.children[0].attrs['class']\n    assert \"w-24\" in mask_heart_avatar.children[0].attrs['class']\n    assert mask_heart_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/distracted3@192.webp\"\n    \n    mask_squircle_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/distracted1@192.webp\"),\n            cls=combine_classes(mask, mask_styles.squircle, w._24)\n        ),\n        cls=str(avatar)\n    )\n    assert \"mask\" in mask_squircle_avatar.children[0].attrs['class']\n    assert \"mask-squircle\" in mask_squircle_avatar.children[0].attrs['class']\n    assert mask_squircle_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/distracted1@192.webp\"\n    \n    mask_hexagon_2_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/distracted2@192.webp\"),\n            cls=combine_classes(mask, mask_styles.hexagon_2, w._24)\n        ),\n        cls=str(avatar)\n    )\n    assert \"mask\" in mask_hexagon_2_avatar.children[0].attrs['class']\n    assert \"mask-hexagon-2\" in mask_hexagon_2_avatar.children[0].attrs['class']\n    assert mask_hexagon_2_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/distracted2@192.webp\"\n    \n    # Return all examples in a Div\n    return Div(\n        rounded_xl_avatar,\n        rounded_full_avatar,\n        mask_heart_avatar,\n        mask_squircle_avatar,\n        mask_hexagon_2_avatar\n    )\n\n# Run the tests\ntest_avatar_rounded_and_mask_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"w-24 rounded-xl\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/yellingwoman@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"w-24 rounded-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/yellingcat@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"mask mask-heart w-24\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/distracted3@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"mask mask-squircle w-24\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/distracted1@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"mask mask-hexagon-2 w-24\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/distracted2@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_avatar_rounded_and_mask_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_avatar_group_fasthtml_examples\n\n test_avatar_group_fasthtml_examples ()\n\nTest avatar group and avatar group with counter from daisyUI v5 documentation.\n\n\nExported source\ndef test_avatar_group_fasthtml_examples():\n    \"\"\"Test avatar group and avatar group with counter from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.spacing import space\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Avatar group\n    avatar_group_example = Div(\n        Div(\n            Div(\n                Img(src=\"https://img.daisyui.com/images/profile/demo/batperson@192.webp\"),\n                cls=str(w._12)\n            ),\n            cls=str(avatar)\n        ),\n        Div(\n            Div(\n                Img(src=\"https://img.daisyui.com/images/profile/demo/spiderperson@192.webp\"),\n                cls=str(w._12)\n            ),\n            cls=str(avatar)\n        ),\n        Div(\n            Div(\n                Img(src=\"https://img.daisyui.com/images/profile/demo/averagebulk@192.webp\"),\n                cls=str(w._12)\n            ),\n            cls=str(avatar)\n        ),\n        Div(\n            Div(\n                Img(src=\"https://img.daisyui.com/images/profile/demo/wonderperson@192.webp\"),\n                cls=str(w._12)\n            ),\n            cls=str(avatar)\n        ),\n        cls=combine_classes(avatar_group, space.x(6, negative=True))\n    )\n    assert \"avatar-group\" in avatar_group_example.attrs['class']\n    assert \"-space-x-6\" in avatar_group_example.attrs['class']\n    assert len(avatar_group_example.children) == 4\n    for i, child in enumerate(avatar_group_example.children):\n        assert \"avatar\" in child.attrs['class']\n        assert \"w-12\" in child.children[0].attrs['class']\n        assert child.children[0].children[0].tag == \"img\"\n    \n    # Avatar group with counter\n    avatar_group_counter = Div(\n        Div(\n            Div(\n                Img(src=\"https://img.daisyui.com/images/profile/demo/batperson@192.webp\"),\n                cls=str(w._12)\n            ),\n            cls=str(avatar)\n        ),\n        Div(\n            Div(\n                Img(src=\"https://img.daisyui.com/images/profile/demo/spiderperson@192.webp\"),\n                cls=str(w._12)\n            ),\n            cls=str(avatar)\n        ),\n        Div(\n            Div(\n                Img(src=\"https://img.daisyui.com/images/profile/demo/averagebulk@192.webp\"),\n                cls=str(w._12)\n            ),\n            cls=str(avatar)\n        ),\n        Div(\n            Div(\n                Span(\"+99\"),\n                cls=combine_classes(bg_dui.neutral, text_dui.neutral_content, w._12)\n            ),\n            cls=combine_classes(avatar, avatar_modifiers.placeholder)\n        ),\n        cls=combine_classes(avatar_group, space.x(6, negative=True))\n    )\n    assert \"avatar-group\" in avatar_group_counter.attrs['class']\n    assert \"-space-x-6\" in avatar_group_counter.attrs['class']\n    # Check the counter avatar\n    counter_avatar = avatar_group_counter.children[3]\n    assert \"avatar\" in counter_avatar.attrs['class']\n    assert \"avatar-placeholder\" in counter_avatar.attrs['class']\n    counter_div = counter_avatar.children[0]\n    assert \"bg-neutral\" in counter_div.attrs['class']\n    assert \"text-neutral-content\" in counter_div.attrs['class']\n    assert \"w-12\" in counter_div.attrs['class']\n    assert counter_div.children[0].tag == \"span\"\n    assert counter_div.children[0].children[0] == \"+99\"\n    \n    # Return all examples in a Div\n    return Div(\n        avatar_group_example,\n        avatar_group_counter\n    )\n\n# Run the tests\ntest_avatar_group_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"avatar-group -space-x-6\"&gt;\n    &lt;div class=\"avatar\"&gt;\n      &lt;div class=\"w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/batperson@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"avatar\"&gt;\n      &lt;div class=\"w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/spiderperson@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"avatar\"&gt;\n      &lt;div class=\"w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/averagebulk@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"avatar\"&gt;\n      &lt;div class=\"w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/wonderperson@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar-group -space-x-6\"&gt;\n    &lt;div class=\"avatar\"&gt;\n      &lt;div class=\"w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/batperson@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"avatar\"&gt;\n      &lt;div class=\"w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/spiderperson@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"avatar\"&gt;\n      &lt;div class=\"w-12\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/averagebulk@192.webp\"&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"avatar avatar-placeholder\"&gt;\n      &lt;div class=\"bg-neutral text-neutral-content w-12\"&gt;\n&lt;span&gt;+99&lt;/span&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_avatar_group_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_avatar_ring_and_presence_fasthtml_examples\n\n test_avatar_ring_and_presence_fasthtml_examples ()\n\nTest avatar with ring and avatar with presence indicator from daisyUI v5 documentation.\n\n\nExported source\ndef test_avatar_ring_and_presence_fasthtml_examples():\n    \"\"\"Test avatar with ring and avatar with presence indicator from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.effects import ring\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import ring_dui, ring_offset_dui\n    \n    # Avatar with ring\n    ring_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/spiderperson@192.webp\"),\n            cls=combine_classes(\n                ring_dui.primary,\n                ring_offset_dui.base_100,\n                w._24,\n                rounded.full,\n                ring._2,\n            )\n        ),\n        cls=str(avatar)\n    )\n    assert \"avatar\" in ring_avatar.attrs['class']\n    ring_div = ring_avatar.children[0]\n    assert \"ring-primary\" in ring_div.attrs['class']\n    assert \"ring-offset-base-100\" in ring_div.attrs['class']\n    assert \"w-24\" in ring_div.attrs['class']\n    assert \"rounded-full\" in ring_div.attrs['class']\n    assert \"ring-2\" in ring_div.attrs['class']\n    assert ring_div.children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/spiderperson@192.webp\"\n    \n    # Avatar with presence indicator - online\n    online_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/gordon@192.webp\"),\n            cls=combine_classes(w._24, rounded.full)\n        ),\n        cls=combine_classes(avatar, avatar_modifiers.online)\n    )\n    assert \"avatar\" in online_avatar.attrs['class']\n    assert \"avatar-online\" in online_avatar.attrs['class']\n    assert \"w-24\" in online_avatar.children[0].attrs['class']\n    assert \"rounded-full\" in online_avatar.children[0].attrs['class']\n    assert online_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/gordon@192.webp\"\n    \n    # Avatar with presence indicator - offline\n    offline_avatar = Div(\n        Div(\n            Img(src=\"https://img.daisyui.com/images/profile/demo/idiotsandwich@192.webp\"),\n            cls=combine_classes(w._24, rounded.full)\n        ),\n        cls=combine_classes(avatar, avatar_modifiers.offline)\n    )\n    assert \"avatar\" in offline_avatar.attrs['class']\n    assert \"avatar-offline\" in offline_avatar.attrs['class']\n    assert offline_avatar.children[0].children[0].attrs['src'] == \"https://img.daisyui.com/images/profile/demo/idiotsandwich@192.webp\"\n    \n    # Return all examples in a Div\n    return Div(\n        ring_avatar,\n        online_avatar,\n        offline_avatar\n    )\n\n# Run the tests\ntest_avatar_ring_and_presence_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"avatar\"&gt;\n    &lt;div class=\"ring-primary ring-offset-base-100 w-24 rounded-full ring-2\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/spiderperson@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar avatar-online\"&gt;\n    &lt;div class=\"w-24 rounded-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/gordon@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar avatar-offline\"&gt;\n    &lt;div class=\"w-24 rounded-full\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/profile/demo/idiotsandwich@192.webp\"&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_avatar_ring_and_presence_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_avatar_placeholder_fasthtml_examples\n\n test_avatar_placeholder_fasthtml_examples ()\n\nTest avatar placeholder from daisyUI v5 documentation.\n\n\nExported source\ndef test_avatar_placeholder_fasthtml_examples():\n    \"\"\"Test avatar placeholder from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Basic avatar placeholder\n    placeholder_d = Div(\n        Div(\n            Span(\"D\", cls=str(font_size._3xl)),\n            cls=combine_classes(bg_dui.neutral, text_dui.neutral_content, w._24, rounded.full)\n        ),\n        cls=combine_classes(avatar, avatar_modifiers.placeholder)\n    )\n    assert \"avatar\" in placeholder_d.attrs['class']\n    assert \"avatar-placeholder\" in placeholder_d.attrs['class']\n    placeholder_div = placeholder_d.children[0]\n    assert \"bg-neutral\" in placeholder_div.attrs['class']\n    assert \"text-neutral-content\" in placeholder_div.attrs['class']\n    assert \"w-24\" in placeholder_div.attrs['class']\n    assert \"rounded-full\" in placeholder_div.attrs['class']\n    assert placeholder_div.children[0].tag == \"span\"\n    assert \"text-3xl\" in placeholder_div.children[0].attrs['class']\n    assert placeholder_div.children[0].children[0] == \"D\"\n    \n    # Avatar placeholder with online status\n    online_placeholder = Div(\n        Div(\n            Span(\"AI\", cls=str(font_size.xl)),\n            cls=combine_classes(bg_dui.neutral, text_dui.neutral_content, w._16, rounded.full)\n        ),\n        cls=combine_classes(avatar, avatar_modifiers.online, avatar_modifiers.placeholder)\n    )\n    assert \"avatar\" in online_placeholder.attrs['class']\n    assert \"avatar-online\" in online_placeholder.attrs['class']\n    assert \"avatar-placeholder\" in online_placeholder.attrs['class']\n    assert \"w-16\" in online_placeholder.children[0].attrs['class']\n    assert \"text-xl\" in online_placeholder.children[0].children[0].attrs['class']\n    assert online_placeholder.children[0].children[0].children[0] == \"AI\"\n    \n    # Smaller avatar placeholder\n    placeholder_sy = Div(\n        Div(\n            Span(\"SY\"),\n            cls=combine_classes(bg_dui.neutral, text_dui.neutral_content, w._12, rounded.full)\n        ),\n        cls=combine_classes(avatar, avatar_modifiers.placeholder)\n    )\n    assert \"w-12\" in placeholder_sy.children[0].attrs['class']\n    assert placeholder_sy.children[0].children[0].children[0] == \"SY\"\n    \n    # Extra small avatar placeholder\n    placeholder_ui = Div(\n        Div(\n            Span(\"UI\", cls=str(font_size.xs)),\n            cls=combine_classes(bg_dui.neutral, text_dui.neutral_content, w._8, rounded.full)\n        ),\n        cls=combine_classes(avatar, avatar_modifiers.placeholder)\n    )\n    assert \"w-8\" in placeholder_ui.children[0].attrs['class']\n    assert \"text-xs\" in placeholder_ui.children[0].children[0].attrs['class']\n    assert placeholder_ui.children[0].children[0].children[0] == \"UI\"\n    \n    # Return all examples in a Div\n    return Div(\n        placeholder_d,\n        online_placeholder,\n        placeholder_sy,\n        placeholder_ui\n    )\n\n# Run the tests\ntest_avatar_placeholder_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"avatar avatar-placeholder\"&gt;\n    &lt;div class=\"bg-neutral text-neutral-content w-24 rounded-full\"&gt;\n&lt;span class=\"text-3xl\"&gt;D&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar avatar-online avatar-placeholder\"&gt;\n    &lt;div class=\"bg-neutral text-neutral-content w-16 rounded-full\"&gt;\n&lt;span class=\"text-xl\"&gt;AI&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar avatar-placeholder\"&gt;\n    &lt;div class=\"bg-neutral text-neutral-content w-12 rounded-full\"&gt;\n&lt;span&gt;SY&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"avatar avatar-placeholder\"&gt;\n    &lt;div class=\"bg-neutral text-neutral-content w-8 rounded-full\"&gt;\n&lt;span class=\"text-xs\"&gt;UI&lt;/span&gt;    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_avatar_placeholder_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "data_display",
      "avatar"
    ]
  },
  {
    "objectID": "components/feedback/skeleton.html",
    "href": "components/feedback/skeleton.html",
    "title": "skeleton",
    "section": "",
    "text": "Base Skeleton\n\n\nExported source\nskeleton = SingleValueFactory(\"skeleton\", \"A placeholder div with loading animation\") # Base skeleton component\n\n\n\n\nSkeleton Test Examples\n\nsource\n\n\ntest_skeleton_basic_examples\n\n test_skeleton_basic_examples ()\n\nTest basic skeleton utilities.\n\n\nExported source\ndef test_skeleton_basic_examples():\n    \"\"\"Test basic skeleton utilities.\"\"\"\n    # Basic skeleton\n    assert str(skeleton) == \"skeleton\"\n    \n    # Skeleton with modifiers\n    assert str(skeleton.hover) == \"hover:skeleton\"\n    assert str(skeleton.md) == \"md:skeleton\"\n    assert str(skeleton.dark) == \"dark:skeleton\"\n\n# Run the tests\ntest_skeleton_basic_examples()\n\n\n\nsource\n\n\ntest_skeleton_basic_fasthtml_examples\n\n test_skeleton_basic_fasthtml_examples ()\n\nTest basic skeleton from daisyUI v5 documentation.\n\n\nExported source\ndef test_skeleton_basic_fasthtml_examples():\n    \"\"\"Test basic skeleton from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    \n    # Basic skeleton\n    basic_skeleton = Div(\n        cls=combine_classes(skeleton, h._32, w._32)\n    )\n    \n    # Verify structure\n    assert basic_skeleton.tag == \"div\"\n    assert \"skeleton\" in basic_skeleton.attrs['class']\n    assert \"h-32\" in basic_skeleton.attrs['class']\n    assert \"w-32\" in basic_skeleton.attrs['class']\n    \n    return basic_skeleton\n\n# Run the tests\ntest_skeleton_basic_fasthtml_examples()\n\n\n&lt;div class=\"skeleton h-32 w-32\"&gt;&lt;/div&gt;\n\n\n\ntest_func = test_skeleton_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_skeleton_circle_with_content_fasthtml_examples\n\n test_skeleton_circle_with_content_fasthtml_examples ()\n\nTest skeleton circle with content from daisyUI v5 documentation.\n\n\nExported source\ndef test_skeleton_circle_with_content_fasthtml_examples():\n    \"\"\"Test skeleton circle with content from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_direction, items, gap, shrink, flex_display\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    \n    # Skeleton circle with content\n    circle_with_content = Div(\n        Div(\n            Div(cls=combine_classes(skeleton, h._16, w._16, shrink._0, rounded.full)),\n            Div(\n                Div(cls=combine_classes(skeleton, h._4, w._20)),\n                Div(cls=combine_classes(skeleton, h._4, w._28)),\n                cls=combine_classes(flex_display, flex_direction.col, gap._4)\n            ),\n            cls=combine_classes(flex_display, items.center, gap._4)\n        ),\n        Div(cls=combine_classes(skeleton, h._32, w.full)),\n        cls=combine_classes(flex_display, w._52, flex_direction.col, gap._4)\n    )\n    \n    # Verify outer container\n    assert circle_with_content.tag == \"div\"\n    assert \"flex\" in circle_with_content.attrs['class']\n    assert \"w-52\" in circle_with_content.attrs['class']\n    assert \"flex-col\" in circle_with_content.attrs['class']\n    assert \"gap-4\" in circle_with_content.attrs['class']\n    \n    # Verify first child (flex container with circle and text skeletons)\n    first_child = circle_with_content.children[0]\n    assert first_child.tag == \"div\"\n    assert \"flex\" in first_child.attrs['class']\n    assert \"items-center\" in first_child.attrs['class']\n    assert \"gap-4\" in first_child.attrs['class']\n    \n    # Verify circle skeleton\n    circle_skeleton = first_child.children[0]\n    assert circle_skeleton.tag == \"div\"\n    assert \"skeleton\" in circle_skeleton.attrs['class']\n    assert \"h-16\" in circle_skeleton.attrs['class']\n    assert \"w-16\" in circle_skeleton.attrs['class']\n    assert \"shrink-0\" in circle_skeleton.attrs['class']\n    assert \"rounded-full\" in circle_skeleton.attrs['class']\n    \n    # Verify text skeletons container\n    text_container = first_child.children[1]\n    assert text_container.tag == \"div\"\n    assert \"flex\" in text_container.attrs['class']\n    assert \"flex-col\" in text_container.attrs['class']\n    assert \"gap-4\" in text_container.attrs['class']\n    \n    # Verify first text skeleton\n    first_text = text_container.children[0]\n    assert \"skeleton\" in first_text.attrs['class']\n    assert \"h-4\" in first_text.attrs['class']\n    assert \"w-20\" in first_text.attrs['class']\n    \n    # Verify second text skeleton\n    second_text = text_container.children[1]\n    assert \"skeleton\" in second_text.attrs['class']\n    assert \"h-4\" in second_text.attrs['class']\n    assert \"w-28\" in second_text.attrs['class']\n    \n    # Verify bottom skeleton\n    bottom_skeleton = circle_with_content.children[1]\n    assert bottom_skeleton.tag == \"div\"\n    assert \"skeleton\" in bottom_skeleton.attrs['class']\n    assert \"h-32\" in bottom_skeleton.attrs['class']\n    assert \"w-full\" in bottom_skeleton.attrs['class']\n    \n    return circle_with_content\n\n# Run the tests\ntest_skeleton_circle_with_content_fasthtml_examples()\n\n\n&lt;div class=\"flex w-52 flex-col gap-4\"&gt;\n  &lt;div class=\"flex items-center gap-4\"&gt;\n    &lt;div class=\"skeleton h-16 w-16 shrink-0 rounded-full\"&gt;&lt;/div&gt;\n    &lt;div class=\"flex flex-col gap-4\"&gt;\n      &lt;div class=\"skeleton h-4 w-20\"&gt;&lt;/div&gt;\n      &lt;div class=\"skeleton h-4 w-28\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"skeleton h-32 w-full\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_skeleton_circle_with_content_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_skeleton_rectangle_with_content_fasthtml_examples\n\n test_skeleton_rectangle_with_content_fasthtml_examples ()\n\nTest skeleton rectangle with content from daisyUI v5 documentation.\n\n\nExported source\ndef test_skeleton_rectangle_with_content_fasthtml_examples():\n    \"\"\"Test skeleton rectangle with content from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_direction, gap, flex_display\n    \n    # Skeleton rectangle with content\n    rectangle_with_content = Div(\n        Div(cls=combine_classes(skeleton, h._32, w.full)),\n        Div(cls=combine_classes(skeleton, h._4, w._28)),\n        Div(cls=combine_classes(skeleton, h._4, w.full)),\n        Div(cls=combine_classes(skeleton, h._4, w.full)),\n        cls=combine_classes(flex_display, w._52, flex_direction.col, gap._4)\n    )\n    \n    # Verify outer container\n    assert rectangle_with_content.tag == \"div\"\n    assert \"flex\" in rectangle_with_content.attrs['class']\n    assert \"w-52\" in rectangle_with_content.attrs['class']\n    assert \"flex-col\" in rectangle_with_content.attrs['class']\n    assert \"gap-4\" in rectangle_with_content.attrs['class']\n    \n    # Verify children count\n    assert len(rectangle_with_content.children) == 4\n    \n    # Verify first skeleton (large rectangle)\n    first_skeleton = rectangle_with_content.children[0]\n    assert first_skeleton.tag == \"div\"\n    assert \"skeleton\" in first_skeleton.attrs['class']\n    assert \"h-32\" in first_skeleton.attrs['class']\n    assert \"w-full\" in first_skeleton.attrs['class']\n    \n    # Verify second skeleton (short line)\n    second_skeleton = rectangle_with_content.children[1]\n    assert second_skeleton.tag == \"div\"\n    assert \"skeleton\" in second_skeleton.attrs['class']\n    assert \"h-4\" in second_skeleton.attrs['class']\n    assert \"w-28\" in second_skeleton.attrs['class']\n    \n    # Verify third skeleton (full width line)\n    third_skeleton = rectangle_with_content.children[2]\n    assert third_skeleton.tag == \"div\"\n    assert \"skeleton\" in third_skeleton.attrs['class']\n    assert \"h-4\" in third_skeleton.attrs['class']\n    assert \"w-full\" in third_skeleton.attrs['class']\n    \n    # Verify fourth skeleton (full width line)\n    fourth_skeleton = rectangle_with_content.children[3]\n    assert fourth_skeleton.tag == \"div\"\n    assert \"skeleton\" in fourth_skeleton.attrs['class']\n    assert \"h-4\" in fourth_skeleton.attrs['class']\n    assert \"w-full\" in fourth_skeleton.attrs['class']\n    \n    return rectangle_with_content\n\n# Run the tests\ntest_skeleton_rectangle_with_content_fasthtml_examples()\n\n\n&lt;div class=\"flex w-52 flex-col gap-4\"&gt;\n  &lt;div class=\"skeleton h-32 w-full\"&gt;&lt;/div&gt;\n  &lt;div class=\"skeleton h-4 w-28\"&gt;&lt;/div&gt;\n  &lt;div class=\"skeleton h-4 w-full\"&gt;&lt;/div&gt;\n  &lt;div class=\"skeleton h-4 w-full\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_skeleton_rectangle_with_content_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "feedback",
      "skeleton"
    ]
  },
  {
    "objectID": "components/feedback/radial_progress.html",
    "href": "components/feedback/radial_progress.html",
    "title": "radial progress",
    "section": "",
    "text": "Base Radial Progress\n\n\nExported source\nradial_progress = SingleValueFactory(\"radial-progress\", \"Shows a radial progress\") # Base radial progress component\n\n\n\n\nTest Radial Progress Examples\n\nsource\n\n\ntest_radial_progress_basic_examples\n\n test_radial_progress_basic_examples ()\n\nTest basic button utilities.\n\n\nExported source\ndef test_radial_progress_basic_examples():\n    \"\"\"Test basic button utilities.\"\"\"\n    # Basic button\n    assert str(radial_progress) == \"radial-progress\"\n    \n    # Radial progress with modifiers\n    assert str(radial_progress.hover) == \"hover:radial-progress\"\n    assert str(radial_progress.md) == \"md:radial-progress\"\n    assert str(radial_progress.dark) == \"dark:radial-progress\"\n\n# Run the tests\ntest_radial_progress_basic_examples()\n\n\n\nsource\n\n\ntest_radial_progress_basic_fasthtml_examples\n\n test_radial_progress_basic_fasthtml_examples ()\n\nTest basic radial progress from daisyUI v5 documentation.\n\n\nExported source\ndef test_radial_progress_basic_fasthtml_examples():\n    \"\"\"Test basic radial progress from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    \n    # Basic radial progress\n    basic_radial = Div(\n        \"70%\",\n        cls=str(radial_progress),\n        style=\"--value:70;\",\n        aria_valuenow=\"70\",\n        role=\"progressbar\"\n    )\n    \n    # Verify structure\n    assert basic_radial.tag == \"div\"\n    assert basic_radial.attrs['class'] == \"radial-progress\"\n    assert basic_radial.attrs['style'] == \"--value:70;\"\n    assert basic_radial.attrs['aria-valuenow'] == \"70\"\n    assert basic_radial.attrs['role'] == \"progressbar\"\n    assert basic_radial.children[0] == \"70%\"\n    \n    return basic_radial\n\n# Run the tests\ntest_radial_progress_basic_fasthtml_examples()\n\n\n&lt;div aria-valuenow=\"70\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:70;\"&gt;70%&lt;/div&gt;\n\n\n\ntest_func = test_radial_progress_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_radial_progress_values_fasthtml_examples\n\n test_radial_progress_values_fasthtml_examples ()\n\nTest radial progress with different values from daisyUI v5 documentation.\n\n\nExported source\ndef test_radial_progress_values_fasthtml_examples():\n    \"\"\"Test radial progress with different values from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    \n    # Different values\n    progress_0 = Div(\n        \"0%\",\n        cls=str(radial_progress),\n        style=\"--value:0;\",\n        aria_valuenow=\"0\",\n        role=\"progressbar\"\n    )\n    assert progress_0.attrs['style'] == \"--value:0;\"\n    assert progress_0.attrs['aria-valuenow'] == \"0\"\n    assert progress_0.children[0] == \"0%\"\n    \n    progress_20 = Div(\n        \"20%\",\n        cls=str(radial_progress),\n        style=\"--value:20;\",\n        aria_valuenow=\"20\",\n        role=\"progressbar\"\n    )\n    assert progress_20.attrs['style'] == \"--value:20;\"\n    assert progress_20.attrs['aria-valuenow'] == \"20\"\n    assert progress_20.children[0] == \"20%\"\n    \n    progress_60 = Div(\n        \"60%\",\n        cls=str(radial_progress),\n        style=\"--value:60;\",\n        aria_valuenow=\"60\",\n        role=\"progressbar\"\n    )\n    assert progress_60.attrs['style'] == \"--value:60;\"\n    assert progress_60.attrs['aria-valuenow'] == \"60\"\n    assert progress_60.children[0] == \"60%\"\n    \n    progress_80 = Div(\n        \"80%\",\n        cls=str(radial_progress),\n        style=\"--value:80;\",\n        aria_valuenow=\"80\",\n        role=\"progressbar\"\n    )\n    assert progress_80.attrs['style'] == \"--value:80;\"\n    assert progress_80.attrs['aria-valuenow'] == \"80\"\n    assert progress_80.children[0] == \"80%\"\n    \n    progress_100 = Div(\n        \"100%\",\n        cls=str(radial_progress),\n        style=\"--value:100;\",\n        aria_valuenow=\"100\",\n        role=\"progressbar\"\n    )\n    assert progress_100.attrs['style'] == \"--value:100;\"\n    assert progress_100.attrs['aria-valuenow'] == \"100\"\n    assert progress_100.children[0] == \"100%\"\n    \n    # Return all elements in a Div\n    return Div(\n        progress_0,\n        progress_20,\n        progress_60,\n        progress_80,\n        progress_100\n    )\n\n# Run the tests\ntest_radial_progress_values_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div aria-valuenow=\"0\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:0;\"&gt;0%&lt;/div&gt;\n  &lt;div aria-valuenow=\"20\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:20;\"&gt;20%&lt;/div&gt;\n  &lt;div aria-valuenow=\"60\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:60;\"&gt;60%&lt;/div&gt;\n  &lt;div aria-valuenow=\"80\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:80;\"&gt;80%&lt;/div&gt;\n  &lt;div aria-valuenow=\"100\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:100;\"&gt;100%&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radial_progress_values_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_radial_progress_colors_fasthtml_examples\n\n test_radial_progress_colors_fasthtml_examples ()\n\nTest radial progress with custom colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_radial_progress_colors_fasthtml_examples():\n    \"\"\"Test radial progress with custom colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui, bg_dui, border_dui\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    \n    # Custom color\n    custom_color = Div(\n        \"70%\",\n        cls=combine_classes(radial_progress, text_dui.primary),\n        style=\"--value:70;\",\n        aria_valuenow=\"70\",\n        role=\"progressbar\"\n    )\n    assert \"radial-progress\" in custom_color.attrs['class']\n    assert \"text-primary\" in custom_color.attrs['class']\n    assert custom_color.attrs['style'] == \"--value:70;\"\n    assert custom_color.attrs['aria-valuenow'] == \"70\"\n    assert custom_color.children[0] == \"70%\"\n    \n    # With background color and border\n    with_bg_border = Div(\n        \"70%\",\n        cls=combine_classes(\n            radial_progress,\n            bg_dui.primary,\n            text_dui.primary_content,\n            border_dui.primary,\n            border._4\n        ),\n        style=\"--value:70;\",\n        aria_valuenow=\"70\",\n        role=\"progressbar\"\n    )\n    assert \"radial-progress\" in with_bg_border.attrs['class']\n    assert \"bg-primary\" in with_bg_border.attrs['class']\n    assert \"text-primary-content\" in with_bg_border.attrs['class']\n    assert \"border-primary\" in with_bg_border.attrs['class']\n    assert \"border-4\" in with_bg_border.attrs['class']\n    assert with_bg_border.attrs['style'] == \"--value:70;\"\n    assert with_bg_border.attrs['aria-valuenow'] == \"70\"\n    assert with_bg_border.children[0] == \"70%\"\n    \n    # Return all elements in a Div\n    return Div(\n        custom_color,\n        with_bg_border\n    )\n\n# Run the tests\ntest_radial_progress_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div aria-valuenow=\"70\" role=\"progressbar\" class=\"radial-progress text-primary\" style=\"--value:70;\"&gt;70%&lt;/div&gt;\n  &lt;div aria-valuenow=\"70\" role=\"progressbar\" class=\"radial-progress bg-primary text-primary-content border-primary border-4\" style=\"--value:70;\"&gt;70%&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radial_progress_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_radial_progress_custom_size_fasthtml_examples\n\n test_radial_progress_custom_size_fasthtml_examples ()\n\nTest radial progress with custom size and thickness from daisyUI v5 documentation.\n\n\nExported source\ndef test_radial_progress_custom_size_fasthtml_examples():\n    \"\"\"Test radial progress with custom size and thickness from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    \n    # Custom size and thin thickness\n    custom_thin = Div(\n        \"70%\",\n        cls=str(radial_progress),\n        style=\"--value:70; --size:12rem; --thickness: 2px;\",\n        aria_valuenow=\"70\",\n        role=\"progressbar\"\n    )\n    assert custom_thin.attrs['class'] == \"radial-progress\"\n    assert custom_thin.attrs['style'] == \"--value:70; --size:12rem; --thickness: 2px;\"\n    assert custom_thin.attrs['aria-valuenow'] == \"70\"\n    assert custom_thin.attrs['role'] == \"progressbar\"\n    assert custom_thin.children[0] == \"70%\"\n    \n    # Custom size and thick thickness\n    custom_thick = Div(\n        \"70%\",\n        cls=str(radial_progress),\n        style=\"--value:70; --size:12rem; --thickness: 2rem;\",\n        aria_valuenow=\"70\",\n        role=\"progressbar\"\n    )\n    assert custom_thick.attrs['class'] == \"radial-progress\"\n    assert custom_thick.attrs['style'] == \"--value:70; --size:12rem; --thickness: 2rem;\"\n    assert custom_thick.attrs['aria-valuenow'] == \"70\"\n    assert custom_thick.attrs['role'] == \"progressbar\"\n    assert custom_thick.children[0] == \"70%\"\n    \n    # Return all elements in a Div\n    return Div(\n        custom_thin,\n        custom_thick\n    )\n\n# Run the tests\ntest_radial_progress_custom_size_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div aria-valuenow=\"70\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:70; --size:12rem; --thickness: 2px;\"&gt;70%&lt;/div&gt;\n  &lt;div aria-valuenow=\"70\" role=\"progressbar\" class=\"radial-progress\" style=\"--value:70; --size:12rem; --thickness: 2rem;\"&gt;70%&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_radial_progress_custom_size_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "feedback",
      "radial progress"
    ]
  },
  {
    "objectID": "components/feedback/loading.html",
    "href": "components/feedback/loading.html",
    "title": "loading",
    "section": "",
    "text": "Base Loading\n\n\nExported source\nloading = SingleValueFactory(\"loading\", \"Base loading component\") # Base loading component\n\n\n\n\nLoading Styles\n\nsource\n\n\nLoadingStyle\n\n LoadingStyle (value, names=None, module=None, qualname=None, type=None,\n               start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass LoadingStyle(str, Enum):\n    SPINNER = \"spinner\"\n    DOTS = \"dots\"\n    RING = \"ring\"\n    BALL = \"ball\"\n    BARS = \"bars\"\n    INFINITY = \"infinity\"\n\nloading_styles = enums_to_simple_factory(loading, [LoadingStyle], \"Loading styles\") # Loading styles\n\n\n\n\nLoading Sizes\n\n\nExported source\nloading_sizes = enums_to_simple_factory(loading, [DaisyUINamedSize], \"Loading size variants from extra small to extra large\") # Loading size variants\n\n\n\n\nLoading Test Examples\n\nsource\n\n\ntest_loading_basic_examples\n\n test_loading_basic_examples ()\n\nTest basic loading utilities.\n\n\nExported source\ndef test_loading_basic_examples():\n    \"\"\"Test basic loading utilities.\"\"\"\n    # Basic loading\n    assert str(loading) == \"loading\"\n    \n    # Loading with modifiers\n    assert str(loading.hover) == \"hover:loading\"\n    assert str(loading.md) == \"md:loading\"\n    assert str(loading.dark) == \"dark:loading\"\n\n# Run the tests\ntest_loading_basic_examples()\n\n\n\nsource\n\n\ntest_loading_styles_examples\n\n test_loading_styles_examples ()\n\nTest loading style variants.\n\n\nExported source\ndef test_loading_styles_examples():\n    \"\"\"Test loading style variants.\"\"\"\n    assert str(loading_styles.spinner) == \"loading-spinner\"\n    assert str(loading_styles.dots) == \"loading-dots\"\n    assert str(loading_styles.ring) == \"loading-ring\"\n    assert str(loading_styles.ball) == \"loading-ball\"\n    assert str(loading_styles.bars) == \"loading-bars\"\n    assert str(loading_styles.infinity) == \"loading-infinity\"\n\n# Run the tests\ntest_loading_styles_examples()\n\n\n\nsource\n\n\ntest_loading_sizes_examples\n\n test_loading_sizes_examples ()\n\nTest loading size variants.\n\n\nExported source\ndef test_loading_sizes_examples():\n    \"\"\"Test loading size variants.\"\"\"\n    assert str(loading_sizes.xs) == \"loading-xs\"\n    assert str(loading_sizes.sm) == \"loading-sm\"\n    assert str(loading_sizes.md) == \"loading-md\"\n    assert str(loading_sizes.lg) == \"loading-lg\"\n    assert str(loading_sizes.xl) == \"loading-xl\"\n    \n    # With responsive modifiers\n    assert str(loading_sizes.xs.sm) == \"sm:loading-xs\"\n    assert str(loading_sizes.lg.md) == \"md:loading-lg\"\n\n# Run the tests\ntest_loading_sizes_examples()\n\n\n\nsource\n\n\ntest_loading_spinner_fasthtml_examples\n\n test_loading_spinner_fasthtml_examples ()\n\nTest loading spinner with all sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_loading_spinner_fasthtml_examples():\n    \"\"\"Test loading spinner with all sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Loading spinner extra small\n    spinner_xs = Span(cls=combine_classes(loading, loading_styles.spinner, loading_sizes.xs))\n    assert spinner_xs.tag == \"span\"\n    assert \"loading\" in spinner_xs.attrs['class']\n    assert \"loading-spinner\" in spinner_xs.attrs['class']\n    assert \"loading-xs\" in spinner_xs.attrs['class']\n    \n    # Loading spinner small\n    spinner_sm = Span(cls=combine_classes(loading, loading_styles.spinner, loading_sizes.sm))\n    assert \"loading\" in spinner_sm.attrs['class']\n    assert \"loading-spinner\" in spinner_sm.attrs['class']\n    assert \"loading-sm\" in spinner_sm.attrs['class']\n    \n    # Loading spinner medium\n    spinner_md = Span(cls=combine_classes(loading, loading_styles.spinner, loading_sizes.md))\n    assert \"loading\" in spinner_md.attrs['class']\n    assert \"loading-spinner\" in spinner_md.attrs['class']\n    assert \"loading-md\" in spinner_md.attrs['class']\n    \n    # Loading spinner large\n    spinner_lg = Span(cls=combine_classes(loading, loading_styles.spinner, loading_sizes.lg))\n    assert \"loading\" in spinner_lg.attrs['class']\n    assert \"loading-spinner\" in spinner_lg.attrs['class']\n    assert \"loading-lg\" in spinner_lg.attrs['class']\n    \n    # Loading spinner extra large\n    spinner_xl = Span(cls=combine_classes(loading, loading_styles.spinner, loading_sizes.xl))\n    assert \"loading\" in spinner_xl.attrs['class']\n    assert \"loading-spinner\" in spinner_xl.attrs['class']\n    assert \"loading-xl\" in spinner_xl.attrs['class']\n    \n    # Return all spinners in a Div\n    return Div(\n        spinner_xs,\n        spinner_sm,\n        spinner_md,\n        spinner_lg,\n        spinner_xl\n    )\n\n# Run the tests\ntest_loading_spinner_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"loading loading-spinner loading-xs\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner loading-sm\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner loading-md\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner loading-lg\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner loading-xl\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_loading_spinner_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_loading_dots_fasthtml_examples\n\n test_loading_dots_fasthtml_examples ()\n\nTest loading dots with all sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_loading_dots_fasthtml_examples():\n    \"\"\"Test loading dots with all sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Loading dots extra small\n    dots_xs = Span(cls=combine_classes(loading, loading_styles.dots, loading_sizes.xs))\n    assert dots_xs.tag == \"span\"\n    assert \"loading\" in dots_xs.attrs['class']\n    assert \"loading-dots\" in dots_xs.attrs['class']\n    assert \"loading-xs\" in dots_xs.attrs['class']\n    \n    # Loading dots small\n    dots_sm = Span(cls=combine_classes(loading, loading_styles.dots, loading_sizes.sm))\n    assert \"loading\" in dots_sm.attrs['class']\n    assert \"loading-dots\" in dots_sm.attrs['class']\n    assert \"loading-sm\" in dots_sm.attrs['class']\n    \n    # Loading dots medium\n    dots_md = Span(cls=combine_classes(loading, loading_styles.dots, loading_sizes.md))\n    assert \"loading\" in dots_md.attrs['class']\n    assert \"loading-dots\" in dots_md.attrs['class']\n    assert \"loading-md\" in dots_md.attrs['class']\n    \n    # Loading dots large\n    dots_lg = Span(cls=combine_classes(loading, loading_styles.dots, loading_sizes.lg))\n    assert \"loading\" in dots_lg.attrs['class']\n    assert \"loading-dots\" in dots_lg.attrs['class']\n    assert \"loading-lg\" in dots_lg.attrs['class']\n    \n    # Loading dots extra large\n    dots_xl = Span(cls=combine_classes(loading, loading_styles.dots, loading_sizes.xl))\n    assert \"loading\" in dots_xl.attrs['class']\n    assert \"loading-dots\" in dots_xl.attrs['class']\n    assert \"loading-xl\" in dots_xl.attrs['class']\n    \n    # Return all dots in a Div\n    return Div(\n        dots_xs,\n        dots_sm,\n        dots_md,\n        dots_lg,\n        dots_xl\n    )\n\n# Run the tests\ntest_loading_dots_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"loading loading-dots loading-xs\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-dots loading-sm\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-dots loading-md\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-dots loading-lg\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-dots loading-xl\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_loading_dots_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_loading_ring_fasthtml_examples\n\n test_loading_ring_fasthtml_examples ()\n\nTest loading ring with all sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_loading_ring_fasthtml_examples():\n    \"\"\"Test loading ring with all sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Loading ring extra small\n    ring_xs = Span(cls=combine_classes(loading, loading_styles.ring, loading_sizes.xs))\n    assert ring_xs.tag == \"span\"\n    assert \"loading\" in ring_xs.attrs['class']\n    assert \"loading-ring\" in ring_xs.attrs['class']\n    assert \"loading-xs\" in ring_xs.attrs['class']\n    \n    # Loading ring small\n    ring_sm = Span(cls=combine_classes(loading, loading_styles.ring, loading_sizes.sm))\n    assert \"loading\" in ring_sm.attrs['class']\n    assert \"loading-ring\" in ring_sm.attrs['class']\n    assert \"loading-sm\" in ring_sm.attrs['class']\n    \n    # Loading ring medium\n    ring_md = Span(cls=combine_classes(loading, loading_styles.ring, loading_sizes.md))\n    assert \"loading\" in ring_md.attrs['class']\n    assert \"loading-ring\" in ring_md.attrs['class']\n    assert \"loading-md\" in ring_md.attrs['class']\n    \n    # Loading ring large\n    ring_lg = Span(cls=combine_classes(loading, loading_styles.ring, loading_sizes.lg))\n    assert \"loading\" in ring_lg.attrs['class']\n    assert \"loading-ring\" in ring_lg.attrs['class']\n    assert \"loading-lg\" in ring_lg.attrs['class']\n    \n    # Loading ring extra large\n    ring_xl = Span(cls=combine_classes(loading, loading_styles.ring, loading_sizes.xl))\n    assert \"loading\" in ring_xl.attrs['class']\n    assert \"loading-ring\" in ring_xl.attrs['class']\n    assert \"loading-xl\" in ring_xl.attrs['class']\n    \n    # Return all rings in a Div\n    return Div(\n        ring_xs,\n        ring_sm,\n        ring_md,\n        ring_lg,\n        ring_xl\n    )\n\n# Run the tests\ntest_loading_ring_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"loading loading-ring loading-xs\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ring loading-sm\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ring loading-md\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ring loading-lg\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ring loading-xl\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_loading_ring_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_loading_ball_fasthtml_examples\n\n test_loading_ball_fasthtml_examples ()\n\nTest loading ball with all sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_loading_ball_fasthtml_examples():\n    \"\"\"Test loading ball with all sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Loading ball extra small\n    ball_xs = Span(cls=combine_classes(loading, loading_styles.ball, loading_sizes.xs))\n    assert ball_xs.tag == \"span\"\n    assert \"loading\" in ball_xs.attrs['class']\n    assert \"loading-ball\" in ball_xs.attrs['class']\n    assert \"loading-xs\" in ball_xs.attrs['class']\n    \n    # Loading ball small\n    ball_sm = Span(cls=combine_classes(loading, loading_styles.ball, loading_sizes.sm))\n    assert \"loading\" in ball_sm.attrs['class']\n    assert \"loading-ball\" in ball_sm.attrs['class']\n    assert \"loading-sm\" in ball_sm.attrs['class']\n    \n    # Loading ball medium\n    ball_md = Span(cls=combine_classes(loading, loading_styles.ball, loading_sizes.md))\n    assert \"loading\" in ball_md.attrs['class']\n    assert \"loading-ball\" in ball_md.attrs['class']\n    assert \"loading-md\" in ball_md.attrs['class']\n    \n    # Loading ball large\n    ball_lg = Span(cls=combine_classes(loading, loading_styles.ball, loading_sizes.lg))\n    assert \"loading\" in ball_lg.attrs['class']\n    assert \"loading-ball\" in ball_lg.attrs['class']\n    assert \"loading-lg\" in ball_lg.attrs['class']\n    \n    # Loading ball extra large\n    ball_xl = Span(cls=combine_classes(loading, loading_styles.ball, loading_sizes.xl))\n    assert \"loading\" in ball_xl.attrs['class']\n    assert \"loading-ball\" in ball_xl.attrs['class']\n    assert \"loading-xl\" in ball_xl.attrs['class']\n    \n    # Return all balls in a Div\n    return Div(\n        ball_xs,\n        ball_sm,\n        ball_md,\n        ball_lg,\n        ball_xl\n    )\n\n# Run the tests\ntest_loading_ball_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"loading loading-ball loading-xs\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ball loading-sm\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ball loading-md\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ball loading-lg\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-ball loading-xl\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_loading_ball_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_loading_bars_fasthtml_examples\n\n test_loading_bars_fasthtml_examples ()\n\nTest loading bars with all sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_loading_bars_fasthtml_examples():\n    \"\"\"Test loading bars with all sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Loading bars extra small\n    bars_xs = Span(cls=combine_classes(loading, loading_styles.bars, loading_sizes.xs))\n    assert bars_xs.tag == \"span\"\n    assert \"loading\" in bars_xs.attrs['class']\n    assert \"loading-bars\" in bars_xs.attrs['class']\n    assert \"loading-xs\" in bars_xs.attrs['class']\n    \n    # Loading bars small\n    bars_sm = Span(cls=combine_classes(loading, loading_styles.bars, loading_sizes.sm))\n    assert \"loading\" in bars_sm.attrs['class']\n    assert \"loading-bars\" in bars_sm.attrs['class']\n    assert \"loading-sm\" in bars_sm.attrs['class']\n    \n    # Loading bars medium\n    bars_md = Span(cls=combine_classes(loading, loading_styles.bars, loading_sizes.md))\n    assert \"loading\" in bars_md.attrs['class']\n    assert \"loading-bars\" in bars_md.attrs['class']\n    assert \"loading-md\" in bars_md.attrs['class']\n    \n    # Loading bars large\n    bars_lg = Span(cls=combine_classes(loading, loading_styles.bars, loading_sizes.lg))\n    assert \"loading\" in bars_lg.attrs['class']\n    assert \"loading-bars\" in bars_lg.attrs['class']\n    assert \"loading-lg\" in bars_lg.attrs['class']\n    \n    # Loading bars extra large\n    bars_xl = Span(cls=combine_classes(loading, loading_styles.bars, loading_sizes.xl))\n    assert \"loading\" in bars_xl.attrs['class']\n    assert \"loading-bars\" in bars_xl.attrs['class']\n    assert \"loading-xl\" in bars_xl.attrs['class']\n    \n    # Return all bars in a Div\n    return Div(\n        bars_xs,\n        bars_sm,\n        bars_md,\n        bars_lg,\n        bars_xl\n    )\n\n# Run the tests\ntest_loading_bars_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"loading loading-bars loading-xs\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-bars loading-sm\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-bars loading-md\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-bars loading-lg\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-bars loading-xl\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_loading_bars_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_loading_infinity_fasthtml_examples\n\n test_loading_infinity_fasthtml_examples ()\n\nTest loading infinity with all sizes from daisyUI v5 documentation.\n\n\nExported source\ndef test_loading_infinity_fasthtml_examples():\n    \"\"\"Test loading infinity with all sizes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    \n    # Loading infinity extra small\n    infinity_xs = Span(cls=combine_classes(loading, loading_styles.infinity, loading_sizes.xs))\n    assert infinity_xs.tag == \"span\"\n    assert \"loading\" in infinity_xs.attrs['class']\n    assert \"loading-infinity\" in infinity_xs.attrs['class']\n    assert \"loading-xs\" in infinity_xs.attrs['class']\n    \n    # Loading infinity small\n    infinity_sm = Span(cls=combine_classes(loading, loading_styles.infinity, loading_sizes.sm))\n    assert \"loading\" in infinity_sm.attrs['class']\n    assert \"loading-infinity\" in infinity_sm.attrs['class']\n    assert \"loading-sm\" in infinity_sm.attrs['class']\n    \n    # Loading infinity medium\n    infinity_md = Span(cls=combine_classes(loading, loading_styles.infinity, loading_sizes.md))\n    assert \"loading\" in infinity_md.attrs['class']\n    assert \"loading-infinity\" in infinity_md.attrs['class']\n    assert \"loading-md\" in infinity_md.attrs['class']\n    \n    # Loading infinity large\n    infinity_lg = Span(cls=combine_classes(loading, loading_styles.infinity, loading_sizes.lg))\n    assert \"loading\" in infinity_lg.attrs['class']\n    assert \"loading-infinity\" in infinity_lg.attrs['class']\n    assert \"loading-lg\" in infinity_lg.attrs['class']\n    \n    # Loading infinity extra large\n    infinity_xl = Span(cls=combine_classes(loading, loading_styles.infinity, loading_sizes.xl))\n    assert \"loading\" in infinity_xl.attrs['class']\n    assert \"loading-infinity\" in infinity_xl.attrs['class']\n    assert \"loading-xl\" in infinity_xl.attrs['class']\n    \n    # Return all infinities in a Div\n    return Div(\n        infinity_xs,\n        infinity_sm,\n        infinity_md,\n        infinity_lg,\n        infinity_xl\n    )\n\n# Run the tests\ntest_loading_infinity_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"loading loading-infinity loading-xs\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-infinity loading-sm\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-infinity loading-md\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-infinity loading-lg\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-infinity loading-xl\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_loading_infinity_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_loading_with_colors_fasthtml_examples\n\n test_loading_with_colors_fasthtml_examples ()\n\nTest loading with colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_loading_with_colors_fasthtml_examples():\n    \"\"\"Test loading with colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Span, Div\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    \n    # Loading spinner with primary color\n    primary_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.primary))\n    assert primary_spinner.tag == \"span\"\n    assert \"loading\" in primary_spinner.attrs['class']\n    assert \"loading-spinner\" in primary_spinner.attrs['class']\n    assert \"text-primary\" in primary_spinner.attrs['class']\n    \n    # Loading spinner with secondary color\n    secondary_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.secondary))\n    assert \"loading\" in secondary_spinner.attrs['class']\n    assert \"loading-spinner\" in secondary_spinner.attrs['class']\n    assert \"text-secondary\" in secondary_spinner.attrs['class']\n    \n    # Loading spinner with accent color\n    accent_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.accent))\n    assert \"loading\" in accent_spinner.attrs['class']\n    assert \"loading-spinner\" in accent_spinner.attrs['class']\n    assert \"text-accent\" in accent_spinner.attrs['class']\n    \n    # Loading spinner with neutral color\n    neutral_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.neutral))\n    assert \"loading\" in neutral_spinner.attrs['class']\n    assert \"loading-spinner\" in neutral_spinner.attrs['class']\n    assert \"text-neutral\" in neutral_spinner.attrs['class']\n    \n    # Loading spinner with info color\n    info_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.info))\n    assert \"loading\" in info_spinner.attrs['class']\n    assert \"loading-spinner\" in info_spinner.attrs['class']\n    assert \"text-info\" in info_spinner.attrs['class']\n    \n    # Loading spinner with success color\n    success_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.success))\n    assert \"loading\" in success_spinner.attrs['class']\n    assert \"loading-spinner\" in success_spinner.attrs['class']\n    assert \"text-success\" in success_spinner.attrs['class']\n    \n    # Loading spinner with warning color\n    warning_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.warning))\n    assert \"loading\" in warning_spinner.attrs['class']\n    assert \"loading-spinner\" in warning_spinner.attrs['class']\n    assert \"text-warning\" in warning_spinner.attrs['class']\n    \n    # Loading spinner with error color\n    error_spinner = Span(cls=combine_classes(loading, loading_styles.spinner, text_dui.error))\n    assert \"loading\" in error_spinner.attrs['class']\n    assert \"loading-spinner\" in error_spinner.attrs['class']\n    assert \"text-error\" in error_spinner.attrs['class']\n    \n    # Return all colored spinners in a Div\n    return Div(\n        primary_spinner,\n        secondary_spinner,\n        accent_spinner,\n        neutral_spinner,\n        info_spinner,\n        success_spinner,\n        warning_spinner,\n        error_spinner\n    )\n\n# Run the tests\ntest_loading_with_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;span class=\"loading loading-spinner text-primary\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner text-secondary\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner text-accent\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner text-neutral\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner text-info\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner text-success\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner text-warning\"&gt;&lt;/span&gt;&lt;span class=\"loading loading-spinner text-error\"&gt;&lt;/span&gt;&lt;/div&gt;\n\n\n\ntest_func = test_loading_with_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "feedback",
      "loading"
    ]
  },
  {
    "objectID": "components/mockup/phone.html",
    "href": "components/mockup/phone.html",
    "title": "phone mockup",
    "section": "",
    "text": "Base Phone Mockup\n\n\nExported source\nmockup_phone = SingleValueFactory(\"mockup-phone\", \"Base phone mockup component\") # Base mockup phone component\nmockup_phone_camera = SingleValueFactory(\"mockup-phone-camera\", \"Camera part\") # Mockup phone camera part\nmockup_phone_display = SingleValueFactory(\"mockup-phone-display\", \"Display part\") # Mockup phone display part\n\n\n\n\nPhone Mockup Test Examples\n\nsource\n\n\ntest_mockup_phone_basic_examples\n\n test_mockup_phone_basic_examples ()\n\nTest basic mockup_phone utilities.\n\n\nExported source\ndef test_mockup_phone_basic_examples():\n    \"\"\"Test basic mockup_phone utilities.\"\"\"\n    # Basic mockup_phone\n    assert str(mockup_phone) == \"mockup-phone\"\n    assert str(mockup_phone_camera) == \"mockup-phone-camera\"\n    assert str(mockup_phone_display) == \"mockup-phone-display\"\n    \n    # Test with modifiers\n    assert str(mockup_phone.hover) == \"hover:mockup-phone\"\n    assert str(mockup_phone.md) == \"md:mockup-phone\"\n    assert str(mockup_phone.dark) == \"dark:mockup-phone\"\n\n# Run the tests\ntest_mockup_phone_basic_examples()\n\n\n\nsource\n\n\ntest_phone_mockup_basic_fasthtml_examples\n\n test_phone_mockup_basic_fasthtml_examples ()\n\nTest basic iPhone mockup from daisyUI v5 documentation.\n\n\nExported source\ndef test_phone_mockup_basic_fasthtml_examples():\n    \"\"\"Test basic iPhone mockup from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    \n    # iPhone mockup\n    iphone_mockup = Div(\n        Div(cls=str(mockup_phone_camera)),\n        Div(\n            \"It's Glowtime.\",\n            cls=combine_classes(mockup_phone_display, text_color.white, grid_display, place_content.center)\n        ),\n        cls=str(mockup_phone)\n    )\n    \n    # Verify structure\n    assert iphone_mockup.tag == \"div\"\n    assert iphone_mockup.attrs['class'] == \"mockup-phone\"\n    assert len(iphone_mockup.children) == 2\n    \n    # Verify camera element\n    camera_element = iphone_mockup.children[0]\n    assert camera_element.tag == \"div\"\n    assert camera_element.attrs['class'] == \"mockup-phone-camera\"\n    assert camera_element.children == ()  # Empty div\n    \n    # Verify display element\n    display_element = iphone_mockup.children[1]\n    assert display_element.tag == \"div\"\n    assert \"mockup-phone-display\" in display_element.attrs['class']\n    assert \"text-white\" in display_element.attrs['class']\n    assert \"grid\" in display_element.attrs['class']\n    assert \"place-content-center\" in display_element.attrs['class']\n    assert display_element.children[0] == \"It's Glowtime.\"\n    \n    return iphone_mockup\n\n# Run the tests\ntest_phone_mockup_basic_fasthtml_examples()\n\n\n&lt;div class=\"mockup-phone\"&gt;\n  &lt;div class=\"mockup-phone-camera\"&gt;&lt;/div&gt;\n  &lt;div class=\"mockup-phone-display text-white grid place-content-center\"&gt;It's Glowtime.&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_phone_mockup_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_phone_mockup_with_color_and_wallpaper_fasthtml_examples\n\n test_phone_mockup_with_color_and_wallpaper_fasthtml_examples ()\n\nTest phone mockup with color and wallpaper from daisyUI v5 documentation.\n\n\nExported source\ndef test_phone_mockup_with_color_and_wallpaper_fasthtml_examples():\n    \"\"\"Test phone mockup with color and wallpaper from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Img\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import border_dui\n    \n    # Phone mockup with color and wallpaper\n    phone_with_wallpaper = Div(\n        Div(cls=str(mockup_phone_camera)),\n        Div(\n            Img(\n                alt=\"wallpaper\",\n                src=\"https://img.daisyui.com/images/stock/453966.webp\"\n            ),\n            cls=str(mockup_phone_display)\n        ),\n        cls=combine_classes(mockup_phone, border_dui.primary)\n    )\n    \n    # Verify structure\n    assert phone_with_wallpaper.tag == \"div\"\n    assert \"mockup-phone\" in phone_with_wallpaper.attrs['class']\n    assert \"border-primary\" in phone_with_wallpaper.attrs['class']\n    assert len(phone_with_wallpaper.children) == 2\n    \n    # Verify camera element\n    camera_element = phone_with_wallpaper.children[0]\n    assert camera_element.tag == \"div\"\n    assert camera_element.attrs['class'] == \"mockup-phone-camera\"\n    assert camera_element.children == ()  # Empty div\n    \n    # Verify display element with image\n    display_element = phone_with_wallpaper.children[1]\n    assert display_element.tag == \"div\"\n    assert display_element.attrs['class'] == \"mockup-phone-display\"\n    assert len(display_element.children) == 1\n    \n    # Verify wallpaper image\n    wallpaper_img = display_element.children[0]\n    assert wallpaper_img.tag == \"img\"\n    assert wallpaper_img.attrs['alt'] == \"wallpaper\"\n    assert wallpaper_img.attrs['src'] == \"https://img.daisyui.com/images/stock/453966.webp\"\n    \n    return phone_with_wallpaper\n\n# Run the tests\ntest_phone_mockup_with_color_and_wallpaper_fasthtml_examples()\n\n\n&lt;div class=\"mockup-phone border-primary\"&gt;\n  &lt;div class=\"mockup-phone-camera\"&gt;&lt;/div&gt;\n  &lt;div class=\"mockup-phone-display\"&gt;\n&lt;img alt=\"wallpaper\" src=\"https://img.daisyui.com/images/stock/453966.webp\"&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_phone_mockup_with_color_and_wallpaper_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "mockup",
      "phone mockup"
    ]
  },
  {
    "objectID": "components/mockup/window.html",
    "href": "components/mockup/window.html",
    "title": "window mockup",
    "section": "",
    "text": "window mockup\n\nWindow mockup shows a box that looks like an operating system window.\n\n\n\nBase Window Mockup\n\n\nExported source\nmockup_window = SingleValueFactory(\"mockup-window\", \"Base OS window mockup\") # Base mockup window component\n\n\n\n\nWindow Mockup Test Examples\n\nsource\n\n\ntest_mockup_window_basic_examples\n\n test_mockup_window_basic_examples ()\n\nTest basic mockup_window utilities.\n\n\nExported source\ndef test_mockup_window_basic_examples():\n    \"\"\"Test basic mockup_window utilities.\"\"\"\n    # Basic mockup_window\n    assert str(mockup_window) == \"mockup-window\"\n    \n    # Test with modifiers\n    assert str(mockup_window.hover) == \"hover:mockup-window\"\n    assert str(mockup_window.md) == \"md:mockup-window\"\n    assert str(mockup_window.dark) == \"dark:mockup-window\"\n\n# Run the tests\ntest_mockup_window_basic_examples()\n\n\n\nsource\n\n\ntest_window_mockup_with_border_fasthtml_examples\n\n test_window_mockup_with_border_fasthtml_examples ()\n\nTest window mockup with border from daisyUI v5 documentation.\n\n\nExported source\ndef test_window_mockup_with_border_fasthtml_examples():\n    \"\"\"Test window mockup with border from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import border_dui\n    \n    # Window mockup with border\n    window_with_border = Div(\n        Div(\n            \"Hello!\",\n            cls=combine_classes(\n                grid_display, \n                place_content.center, \n                border.t(), \n                border_dui.base_300, \n                h._80\n            )\n        ),\n        cls=combine_classes(mockup_window, border(), border_dui.base_300, w.full)\n    )\n    \n    # Verify structure\n    assert window_with_border.tag == \"div\"\n    assert \"mockup-window\" in window_with_border.attrs['class']\n    assert \"border\" in window_with_border.attrs['class']\n    assert \"border-base-300\" in window_with_border.attrs['class']\n    assert \"w-full\" in window_with_border.attrs['class']\n    \n    # Verify content div\n    content_div = window_with_border.children[0]\n    assert content_div.tag == \"div\"\n    assert \"grid\" in content_div.attrs['class']\n    assert \"place-content-center\" in content_div.attrs['class']\n    assert \"border-t\" in content_div.attrs['class']\n    assert \"border-base-300\" in content_div.attrs['class']\n    assert \"h-80\" in content_div.attrs['class']\n    assert content_div.children[0] == \"Hello!\"\n    \n    return window_with_border\n\n# Run the tests\ntest_window_mockup_with_border_fasthtml_examples()\n\n\n&lt;div class=\"mockup-window border border-base-300 w-full\"&gt;\n  &lt;div class=\"grid place-content-center border-t border-base-300 h-80\"&gt;Hello!&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_window_mockup_with_border_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_window_mockup_with_background_fasthtml_examples\n\n test_window_mockup_with_background_fasthtml_examples ()\n\nTest window mockup with background color from daisyUI v5 documentation.\n\n\nExported source\ndef test_window_mockup_with_background_fasthtml_examples():\n    \"\"\"Test window mockup with background color from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.sizing import h\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_content, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # Window mockup with background color\n    window_with_bg = Div(\n        Div(\n            \"Hello!\",\n            cls=combine_classes(grid_display, place_content.center, h._80)\n        ),\n        cls=combine_classes(mockup_window, bg_dui.base_100, border(), border_dui.base_300)\n    )\n    \n    # Verify structure\n    assert window_with_bg.tag == \"div\"\n    assert \"mockup-window\" in window_with_bg.attrs['class']\n    assert \"bg-base-100\" in window_with_bg.attrs['class']\n    assert \"border\" in window_with_bg.attrs['class']\n    assert \"border-base-300\" in window_with_bg.attrs['class']\n    \n    # Verify content div\n    content_div = window_with_bg.children[0]\n    assert content_div.tag == \"div\"\n    assert \"grid\" in content_div.attrs['class']\n    assert \"place-content-center\" in content_div.attrs['class']\n    assert \"h-80\" in content_div.attrs['class']\n    assert content_div.children[0] == \"Hello!\"\n    \n    return window_with_bg\n\n# Run the tests\ntest_window_mockup_with_background_fasthtml_examples()\n\n\n&lt;div class=\"mockup-window bg-base-100 border border-base-300\"&gt;\n  &lt;div class=\"grid place-content-center h-80\"&gt;Hello!&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_window_mockup_with_background_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "mockup",
      "window mockup"
    ]
  },
  {
    "objectID": "components/navigation/link.html",
    "href": "components/navigation/link.html",
    "title": "link",
    "section": "",
    "text": "Link Component\n\n\nExported source\nlink = SingleValueFactory(\"link\", \"Link component for adding underline style to links\") # Link component\n\n\n\n\nLink Styles\n\nsource\n\n\nLinkStyle\n\n LinkStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass LinkStyle(str, Enum):\n    HOVER = \"hover\"\n\nlink_styles = enums_to_simple_factory(link, [LinkStyle]) # Link style variants\n\n\n\n\nLink Colors\n\n\nExported source\nlink_colors = enums_to_simple_factory(link, [SemanticColorBrand, SemanticColorStatus], \"Link color variants using daisyUI semantic colors\") # Link color variants\n\n\n\n\nLink Test Examples\n\nsource\n\n\ntest_link_basic_examples\n\n test_link_basic_examples ()\n\nTest basic link utilities.\n\n\nExported source\ndef test_link_basic_examples():\n    \"\"\"Test basic link utilities.\"\"\"\n    # Basic link\n    assert str(link) == \"link\"\n    \n    # link with modifiers\n    assert str(link.hover) == \"hover:link\"\n    assert str(link.md) == \"md:link\"\n    assert str(link.dark) == \"dark:link\"\n\n# Run the tests\ntest_link_basic_examples()\n\n\n\nsource\n\n\ntest_link_styles_examples\n\n test_link_styles_examples ()\n\nTest link style variants.\n\n\nExported source\ndef test_link_styles_examples():\n    \"\"\"Test link style variants.\"\"\"\n    assert str(link_styles.hover) == \"link-hover\"\n\n# Run the tests\ntest_link_styles_examples()\n\n\n\nsource\n\n\ntest_link_colors_examples\n\n test_link_colors_examples ()\n\nTest link color variants.\n\n\nExported source\ndef test_link_colors_examples():\n    \"\"\"Test link color variants.\"\"\"\n    # All color variants\n    assert str(link_colors.neutral) == \"link-neutral\"\n    assert str(link_colors.primary) == \"link-primary\"\n    assert str(link_colors.secondary) == \"link-secondary\"\n    assert str(link_colors.accent) == \"link-accent\"\n    assert str(link_colors.info) == \"link-info\"\n    assert str(link_colors.success) == \"link-success\"\n    assert str(link_colors.warning) == \"link-warning\"\n    assert str(link_colors.error) == \"link-error\"\n    \n    # With modifiers\n    assert str(link_colors.primary.hover) == \"hover:link-primary\"\n    assert str(link_colors.success.focus) == \"focus:link-success\"\n\n# Run the tests\ntest_link_colors_examples()\n\n\n\nsource\n\n\ntest_link_basic_fasthtml_examples\n\n test_link_basic_fasthtml_examples ()\n\nTest basic link examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_link_basic_fasthtml_examples():\n    \"\"\"Test basic link examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import A, P, Br, Div\n    \n    # Basic link\n    basic_link = A(\"Click me\", cls=str(link), href=\"#\")\n    assert basic_link.tag == \"a\"\n    assert basic_link.attrs['class'] == \"link\"\n    assert basic_link.attrs['href'] == \"#\"\n    assert basic_link.children[0] == \"Click me\"\n    \n    # Link within paragraph text\n    paragraph_with_link = P(\n        \"Tailwind CSS resets the style of links by default.\",\n        Br(),\n        \"Add \\\"link\\\" class to make it look like a \",\n        A(\"normal link\", cls=str(link), href=\"#\"),\n        \" again.\"\n    )\n    assert paragraph_with_link.tag == \"p\"\n    assert paragraph_with_link.children[0] == \"Tailwind CSS resets the style of links by default.\"\n    assert paragraph_with_link.children[1].tag == \"br\"\n    assert paragraph_with_link.children[2] == \"Add \\\"link\\\" class to make it look like a \"\n    assert paragraph_with_link.children[3].tag == \"a\"\n    assert paragraph_with_link.children[3].attrs['class'] == \"link\"\n    assert paragraph_with_link.children[3].attrs['href'] == \"#\"\n    assert paragraph_with_link.children[3].children[0] == \"normal link\"\n    assert paragraph_with_link.children[4] == \" again.\"\n    \n    # Return all elements in a Div\n    return Div(\n        basic_link,\n        paragraph_with_link\n    )\n\n# Run the tests\ntest_link_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;a href=\"#\" class=\"link\"&gt;Click me&lt;/a&gt;  &lt;p&gt;\nTailwind CSS resets the style of links by default.&lt;br&gt;Add \"link\" class to make it look like a &lt;a href=\"#\" class=\"link\"&gt;normal link&lt;/a&gt; again.  &lt;/p&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_link_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_link_colors_fasthtml_examples\n\n test_link_colors_fasthtml_examples ()\n\nTest link color variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_link_colors_fasthtml_examples():\n    \"\"\"Test link color variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import A, Div\n    \n    # Primary color link\n    primary_link = A(\"Click me\", cls=combine_classes(link, link_colors.primary), href=\"#\")\n    assert primary_link.tag == \"a\"\n    assert \"link\" in primary_link.attrs['class']\n    assert \"link-primary\" in primary_link.attrs['class']\n    assert primary_link.attrs['href'] == \"#\"\n    assert primary_link.children[0] == \"Click me\"\n    \n    # Secondary color link\n    secondary_link = A(\"Click me\", cls=combine_classes(link, link_colors.secondary), href=\"#\")\n    assert \"link\" in secondary_link.attrs['class']\n    assert \"link-secondary\" in secondary_link.attrs['class']\n    assert secondary_link.children[0] == \"Click me\"\n    \n    # Accent color link\n    accent_link = A(\"Click me\", cls=combine_classes(link, link_colors.accent), href=\"#\")\n    assert \"link\" in accent_link.attrs['class']\n    assert \"link-accent\" in accent_link.attrs['class']\n    assert accent_link.children[0] == \"Click me\"\n    \n    # Neutral color link\n    neutral_link = A(\"Click me\", cls=combine_classes(link, link_colors.neutral), href=\"#\")\n    assert \"link\" in neutral_link.attrs['class']\n    assert \"link-neutral\" in neutral_link.attrs['class']\n    assert neutral_link.children[0] == \"Click me\"\n    \n    # Success color link\n    success_link = A(\"Click me\", cls=combine_classes(link, link_colors.success), href=\"#\")\n    assert \"link\" in success_link.attrs['class']\n    assert \"link-success\" in success_link.attrs['class']\n    assert success_link.children[0] == \"Click me\"\n    \n    # Info color link\n    info_link = A(\"Click me\", cls=combine_classes(link, link_colors.info), href=\"#\")\n    assert \"link\" in info_link.attrs['class']\n    assert \"link-info\" in info_link.attrs['class']\n    assert info_link.children[0] == \"Click me\"\n    \n    # Warning color link\n    warning_link = A(\"Click me\", cls=combine_classes(link, link_colors.warning), href=\"#\")\n    assert \"link\" in warning_link.attrs['class']\n    assert \"link-warning\" in warning_link.attrs['class']\n    assert warning_link.children[0] == \"Click me\"\n    \n    # Error color link\n    error_link = A(\"Click me\", cls=combine_classes(link, link_colors.error), href=\"#\")\n    assert \"link\" in error_link.attrs['class']\n    assert \"link-error\" in error_link.attrs['class']\n    assert error_link.children[0] == \"Click me\"\n    \n    # Return all color variations in a Div\n    return Div(\n        primary_link,\n        secondary_link,\n        accent_link,\n        neutral_link,\n        success_link,\n        info_link,\n        warning_link,\n        error_link\n    )\n\n# Run the tests\ntest_link_colors_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;a href=\"#\" class=\"link link-primary\"&gt;Click me&lt;/a&gt;&lt;a href=\"#\" class=\"link link-secondary\"&gt;Click me&lt;/a&gt;&lt;a href=\"#\" class=\"link link-accent\"&gt;Click me&lt;/a&gt;&lt;a href=\"#\" class=\"link link-neutral\"&gt;Click me&lt;/a&gt;&lt;a href=\"#\" class=\"link link-success\"&gt;Click me&lt;/a&gt;&lt;a href=\"#\" class=\"link link-info\"&gt;Click me&lt;/a&gt;&lt;a href=\"#\" class=\"link link-warning\"&gt;Click me&lt;/a&gt;&lt;a href=\"#\" class=\"link link-error\"&gt;Click me&lt;/a&gt;&lt;/div&gt;\n\n\n\ntest_func = test_link_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_link_hover_fasthtml_examples\n\n test_link_hover_fasthtml_examples ()\n\nTest link hover style from daisyUI v5 documentation.\n\n\nExported source\ndef test_link_hover_fasthtml_examples():\n    \"\"\"Test link hover style from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import A, Div\n    \n    # Link with underline only on hover\n    hover_link = A(\"Click me\", cls=combine_classes(link, link_styles.hover), href=\"#\")\n    assert hover_link.tag == \"a\"\n    assert \"link\" in hover_link.attrs['class']\n    assert \"link-hover\" in hover_link.attrs['class']\n    assert hover_link.attrs['href'] == \"#\"\n    assert hover_link.children[0] == \"Click me\"\n    \n    # Return element in a Div\n    return Div(hover_link)\n\n# Run the tests\ntest_link_hover_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Click me&lt;/a&gt;&lt;/div&gt;\n\n\n\ntest_func = test_link_hover_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "link"
    ]
  },
  {
    "objectID": "components/navigation/dock.html",
    "href": "components/navigation/dock.html",
    "title": "dock",
    "section": "",
    "text": "Base Dock\n\n\nExported source\ndock = SingleValueFactory(\"dock\", \"Base dock component\") # Base dock component\ndock_label = SingleValueFactory(\"dock-label\", \"Text label for Dock Item\") # Dock label\n\n\n\n\nDock Modifiers\n\n\nExported source\ndock_modifiers = SimpleFactory(\n    {\n        \"active\": \"dock-active\"\n    },\n    \"Dock modifiers (active)\"\n) # Dock modifiers\n\n\n\n\nDock Sizes\n\n\nExported source\ndock_sizes = enums_to_simple_factory(dock, [DaisyUINamedSize], \"Dock size variants from extra small to extra large\") # Dock size variants\n\n\n\n\nDock Test Examples\n\nsource\n\n\ntest_dock_basic_examples\n\n test_dock_basic_examples ()\n\nTest basic dock utilities.\n\n\nExported source\ndef test_dock_basic_examples():\n    \"\"\"Test basic dock utilities.\"\"\"\n    # Basic dock\n    assert str(dock) == \"dock\"\n    assert str(dock_label) == \"dock-label\"\n    \n    # Dock with modifiers\n    assert str(dock.hover) == \"hover:dock\"\n    assert str(dock.md) == \"md:dock\"\n    assert str(dock.dark) == \"dark:dock\"\n\n# Run the tests\ntest_dock_basic_examples()\n\n\n\nsource\n\n\ntest_dock_modifiers_examples\n\n test_dock_modifiers_examples ()\n\nTest dock modifier utilities.\n\n\nExported source\ndef test_dock_modifiers_examples():\n    \"\"\"Test dock modifier utilities.\"\"\"\n    assert str(dock_modifiers.active) == \"dock-active\"\n\n# Run the tests\ntest_dock_modifiers_examples()\n\n\n\nsource\n\n\ntest_dock_sizes_examples\n\n test_dock_sizes_examples ()\n\nTest dock size variants.\n\n\nExported source\ndef test_dock_sizes_examples():\n    \"\"\"Test dock size variants.\"\"\"\n    assert str(dock_sizes.xs) == \"dock-xs\"\n    assert str(dock_sizes.sm) == \"dock-sm\"\n    assert str(dock_sizes.md) == \"dock-md\"\n    assert str(dock_sizes.lg) == \"dock-lg\"\n    assert str(dock_sizes.xl) == \"dock-xl\"\n    \n    # With responsive modifiers\n    assert str(dock_sizes.xs.sm) == \"sm:dock-xs\"\n    assert str(dock_sizes.lg.md) == \"md:dock-lg\"\n\n# Run the tests\ntest_dock_sizes_examples()\n\n\n\nsource\n\n\ntest_dock_basic_fasthtml_examples\n\n test_dock_basic_fasthtml_examples ()\n\nTest basic dock example from daisyUI v5 documentation.\n\n\nExported source\ndef test_dock_basic_fasthtml_examples():\n    \"\"\"Test basic dock example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button, Span\n    from fasthtml.svg import Svg, G, Polyline, Path, Line, Rect, Circle\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.svg import fill, stroke\n    \n    # Create reusable home icon SVG\n    home_icon = Svg(\n        G(\n            Polyline(\n                points=\"1 11 12 2 23 11\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Path(\n                d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Line(\n                x1=\"12\", y1=\"22\", x2=\"12\", y2=\"18\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create inbox icon SVG\n    inbox_icon = Svg(\n        G(\n            Polyline(\n                points=\"3 14 9 14 9 17 15 17 15 14 21 14\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Rect(\n                x=\"3\", y=\"3\", width=\"18\", height=\"18\",\n                rx=\"2\", ry=\"2\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create settings icon SVG\n    settings_icon = Svg(\n        G(\n            Circle(\n                cx=\"12\", cy=\"12\", r=\"3\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Path(\n                d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Basic dock with labels\n    basic_dock = Div(\n        Button(\n            home_icon,\n            Span(\"Home\", cls=str(dock_label))\n        ),\n        Button(\n            inbox_icon,\n            Span(\"Inbox\", cls=str(dock_label)),\n            cls=str(dock_modifiers.active)\n        ),\n        Button(\n            settings_icon,\n            Span(\"Settings\", cls=str(dock_label))\n        ),\n        cls=str(dock)\n    )\n    \n    # Verify structure\n    assert basic_dock.tag == \"div\"\n    assert basic_dock.attrs['class'] == \"dock\"\n    \n    # Verify buttons\n    assert len(basic_dock.children) == 3\n    \n    # First button (Home)\n    home_btn = basic_dock.children[0]\n    assert home_btn.tag == \"button\"\n    assert home_btn.children[0].tag == \"svg\"  # Icon\n    assert home_btn.children[1].tag == \"span\"  # Label\n    assert home_btn.children[1].attrs['class'] == \"dock-label\"\n    assert home_btn.children[1].children[0] == \"Home\"\n    \n    # Second button (Inbox - active)\n    inbox_btn = basic_dock.children[1]\n    assert inbox_btn.tag == \"button\"\n    assert inbox_btn.attrs['class'] == \"dock-active\"\n    assert inbox_btn.children[0].tag == \"svg\"  # Icon\n    assert inbox_btn.children[1].tag == \"span\"  # Label\n    assert inbox_btn.children[1].attrs['class'] == \"dock-label\"\n    assert inbox_btn.children[1].children[0] == \"Inbox\"\n    \n    # Third button (Settings)\n    settings_btn = basic_dock.children[2]\n    assert settings_btn.tag == \"button\"\n    assert settings_btn.children[0].tag == \"svg\"  # Icon\n    assert settings_btn.children[1].tag == \"span\"  # Label\n    assert settings_btn.children[1].attrs['class'] == \"dock-label\"\n    assert settings_btn.children[1].children[0] == \"Settings\"\n    \n    return basic_dock\n\n# Run the tests\ntest_dock_basic_fasthtml_examples()\n\n\n&lt;div class=\"dock\"&gt;\n&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"1 11 12 2 23 11\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;path d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/line&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Home&lt;/span&gt;&lt;/button&gt;&lt;button class=\"dock-active\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"3 14 9 14 9 17 15 17 15 14 21 14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"2\" ry=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Inbox&lt;/span&gt;&lt;/button&gt;&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"3\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Settings&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_dock_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_dock_sizes_fasthtml_examples\n\n test_dock_sizes_fasthtml_examples ()\n\nTest dock size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_dock_sizes_fasthtml_examples():\n    \"\"\"Test dock size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button, Span\n    from fasthtml.svg import Svg, G, Polyline, Path, Line, Rect, Circle\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.svg import fill, stroke\n    \n    # Create reusable icons (same as in basic example)\n    home_icon = Svg(\n        G(\n            Polyline(\n                points=\"1 11 12 2 23 11\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Path(\n                d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Line(\n                x1=\"12\", y1=\"22\", x2=\"12\", y2=\"18\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    inbox_icon = Svg(\n        G(\n            Polyline(\n                points=\"3 14 9 14 9 17 15 17 15 14 21 14\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Rect(\n                x=\"3\", y=\"3\", width=\"18\", height=\"18\",\n                rx=\"2\", ry=\"2\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    settings_icon = Svg(\n        G(\n            Circle(\n                cx=\"12\", cy=\"12\", r=\"3\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Path(\n                d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Dock Extra Small size (no labels)\n    dock_xs = Div(\n        Button(home_icon),\n        Button(inbox_icon, cls=str(dock_modifiers.active)),\n        Button(settings_icon),\n        cls=combine_classes(dock, dock_sizes.xs)\n    )\n    assert \"dock\" in dock_xs.attrs['class']\n    assert \"dock-xs\" in dock_xs.attrs['class']\n    assert len(dock_xs.children) == 3\n    # XS size has no labels\n    assert len(dock_xs.children[0].children) == 1  # Only icon\n    \n    # Dock Small size (no labels)\n    dock_sm = Div(\n        Button(home_icon),\n        Button(inbox_icon, cls=str(dock_modifiers.active)),\n        Button(settings_icon),\n        cls=combine_classes(dock, dock_sizes.sm)\n    )\n    assert \"dock\" in dock_sm.attrs['class']\n    assert \"dock-sm\" in dock_sm.attrs['class']\n    assert len(dock_sm.children) == 3\n    # SM size has no labels\n    assert len(dock_sm.children[0].children) == 1  # Only icon\n    \n    # Dock Medium size (with labels)\n    dock_md = Div(\n        Button(\n            home_icon,\n            Span(\"Home\", cls=str(dock_label))\n        ),\n        Button(\n            inbox_icon,\n            Span(\"Inbox\", cls=str(dock_label)),\n            cls=str(dock_modifiers.active)\n        ),\n        Button(\n            settings_icon,\n            Span(\"Settings\", cls=str(dock_label))\n        ),\n        cls=combine_classes(dock, dock_sizes.md)\n    )\n    assert \"dock\" in dock_md.attrs['class']\n    assert \"dock-md\" in dock_md.attrs['class']\n    assert len(dock_md.children) == 3\n    # MD size has labels\n    assert len(dock_md.children[0].children) == 2  # Icon and label\n    assert dock_md.children[0].children[1].attrs['class'] == \"dock-label\"\n    \n    # Dock Large size (with labels)\n    dock_lg = Div(\n        Button(\n            home_icon,\n            Span(\"Home\", cls=str(dock_label))\n        ),\n        Button(\n            inbox_icon,\n            Span(\"Inbox\", cls=str(dock_label)),\n            cls=str(dock_modifiers.active)\n        ),\n        Button(\n            settings_icon,\n            Span(\"Settings\", cls=str(dock_label))\n        ),\n        cls=combine_classes(dock, dock_sizes.lg)\n    )\n    assert \"dock\" in dock_lg.attrs['class']\n    assert \"dock-lg\" in dock_lg.attrs['class']\n    assert len(dock_lg.children) == 3\n    # LG size has labels\n    assert len(dock_lg.children[0].children) == 2  # Icon and label\n    \n    # Dock Extra Large size (with labels)\n    dock_xl = Div(\n        Button(\n            home_icon,\n            Span(\"Home\", cls=str(dock_label))\n        ),\n        Button(\n            inbox_icon,\n            Span(\"Inbox\", cls=str(dock_label)),\n            cls=str(dock_modifiers.active)\n        ),\n        Button(\n            settings_icon,\n            Span(\"Settings\", cls=str(dock_label))\n        ),\n        cls=combine_classes(dock, dock_sizes.xl)\n    )\n    assert \"dock\" in dock_xl.attrs['class']\n    assert \"dock-xl\" in dock_xl.attrs['class']\n    assert len(dock_xl.children) == 3\n    # XL size has labels\n    assert len(dock_xl.children[0].children) == 2  # Icon and label\n    \n    # Return all dock sizes in a container\n    return Div(\n        dock_xs,\n        dock_sm,\n        dock_md,\n        dock_lg,\n        dock_xl\n    )\n\n# Run the tests\ntest_dock_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"dock dock-xs\"&gt;\n&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"1 11 12 2 23 11\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;path d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/line&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"dock-active\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"3 14 9 14 9 17 15 17 15 14 21 14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"2\" ry=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"3\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"dock dock-sm\"&gt;\n&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"1 11 12 2 23 11\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;path d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/line&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button class=\"dock-active\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"3 14 9 14 9 17 15 17 15 14 21 14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"2\" ry=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"3\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"dock dock-md\"&gt;\n&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"1 11 12 2 23 11\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;path d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/line&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Home&lt;/span&gt;&lt;/button&gt;&lt;button class=\"dock-active\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"3 14 9 14 9 17 15 17 15 14 21 14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"2\" ry=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Inbox&lt;/span&gt;&lt;/button&gt;&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"3\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Settings&lt;/span&gt;&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"dock dock-lg\"&gt;\n&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"1 11 12 2 23 11\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;path d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/line&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Home&lt;/span&gt;&lt;/button&gt;&lt;button class=\"dock-active\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"3 14 9 14 9 17 15 17 15 14 21 14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"2\" ry=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Inbox&lt;/span&gt;&lt;/button&gt;&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"3\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Settings&lt;/span&gt;&lt;/button&gt;  &lt;/div&gt;\n  &lt;div class=\"dock dock-xl\"&gt;\n&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"1 11 12 2 23 11\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;path d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/line&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Home&lt;/span&gt;&lt;/button&gt;&lt;button class=\"dock-active\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"3 14 9 14 9 17 15 17 15 14 21 14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"2\" ry=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Inbox&lt;/span&gt;&lt;/button&gt;&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"3\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Settings&lt;/span&gt;&lt;/button&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_dock_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_dock_custom_colors_fasthtml_examples\n\n test_dock_custom_colors_fasthtml_examples ()\n\nTest dock with custom colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_dock_custom_colors_fasthtml_examples():\n    \"\"\"Test dock with custom colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Button, Span\n    from fasthtml.svg import Svg, G, Polyline, Path, Line, Rect, Circle\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.svg import fill, stroke\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Create reusable icons (same as in basic example)\n    home_icon = Svg(\n        G(\n            Polyline(\n                points=\"1 11 12 2 23 11\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Path(\n                d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Line(\n                x1=\"12\", y1=\"22\", x2=\"12\", y2=\"18\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    inbox_icon = Svg(\n        G(\n            Polyline(\n                points=\"3 14 9 14 9 17 15 17 15 14 21 14\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Rect(\n                x=\"3\", y=\"3\", width=\"18\", height=\"18\",\n                rx=\"2\", ry=\"2\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    settings_icon = Svg(\n        G(\n            Circle(\n                cx=\"12\", cy=\"12\", r=\"3\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            Path(\n                d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\",\n                fill=\"none\",\n                stroke=\"currentColor\",\n                stroke_linecap=\"square\",\n                stroke_miterlimit=\"10\",\n                stroke_width=\"2\"\n            ),\n            fill=\"currentColor\",\n            stroke_linejoin=\"miter\",\n            stroke_linecap=\"butt\"\n        ),\n        cls=str(size_util(\"1.2em\")),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Dock with custom neutral background color\n    custom_color_dock = Div(\n        Button(\n            home_icon,\n            Span(\"Home\", cls=str(dock_label))\n        ),\n        Button(\n            inbox_icon,\n            Span(\"Inbox\", cls=str(dock_label)),\n            cls=str(dock_modifiers.active)\n        ),\n        Button(\n            settings_icon,\n            Span(\"Settings\", cls=str(dock_label))\n        ),\n        cls=combine_classes(dock, bg_dui.neutral, text_dui.neutral_content)\n    )\n    \n    # Verify structure\n    assert custom_color_dock.tag == \"div\"\n    assert \"dock\" in custom_color_dock.attrs['class']\n    assert \"bg-neutral\" in custom_color_dock.attrs['class']\n    assert \"text-neutral-content\" in custom_color_dock.attrs['class']\n    \n    # Verify buttons\n    assert len(custom_color_dock.children) == 3\n    \n    # First button (Home)\n    home_btn = custom_color_dock.children[0]\n    assert home_btn.tag == \"button\"\n    assert home_btn.children[0].tag == \"svg\"  # Icon\n    assert home_btn.children[1].tag == \"span\"  # Label\n    assert home_btn.children[1].attrs['class'] == \"dock-label\"\n    assert home_btn.children[1].children[0] == \"Home\"\n    \n    # Second button (Inbox - active)\n    inbox_btn = custom_color_dock.children[1]\n    assert inbox_btn.tag == \"button\"\n    assert inbox_btn.attrs['class'] == \"dock-active\"\n    assert inbox_btn.children[0].tag == \"svg\"  # Icon\n    assert inbox_btn.children[1].tag == \"span\"  # Label\n    assert inbox_btn.children[1].attrs['class'] == \"dock-label\"\n    assert inbox_btn.children[1].children[0] == \"Inbox\"\n    \n    # Third button (Settings)\n    settings_btn = custom_color_dock.children[2]\n    assert settings_btn.tag == \"button\"\n    assert settings_btn.children[0].tag == \"svg\"  # Icon\n    assert settings_btn.children[1].tag == \"span\"  # Label\n    assert settings_btn.children[1].attrs['class'] == \"dock-label\"\n    assert settings_btn.children[1].children[0] == \"Settings\"\n    \n    return custom_color_dock\n\n# Run the tests\ntest_dock_custom_colors_fasthtml_examples()\n\n\n&lt;div class=\"dock bg-neutral text-neutral-content\"&gt;\n&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"1 11 12 2 23 11\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;path d=\"m5,13v7c0,1.105.895,2,2,2h10c1.105,0,2-.895,2-2v-7\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;line x1=\"12\" y1=\"22\" x2=\"12\" y2=\"18\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/line&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Home&lt;/span&gt;&lt;/button&gt;&lt;button class=\"dock-active\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;polyline points=\"3 14 9 14 9 17 15 17 15 14 21 14\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-miterlimit=\"10\"&gt;&lt;/polyline&gt;&lt;rect width=\"18\" height=\"18\" x=\"3\" y=\"3\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" rx=\"2\" ry=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/rect&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Inbox&lt;/span&gt;&lt;/button&gt;&lt;button&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"size-[1.2em]\"&gt;&lt;g fill=\"currentColor\" stroke-linejoin=\"miter\" stroke-linecap=\"butt\"&gt;&lt;circle r=\"3\" cx=\"12\" cy=\"12\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/circle&gt;&lt;path d=\"m22,13.25v-2.5l-2.318-.966c-.167-.581-.395-1.135-.682-1.654l.954-2.318-1.768-1.768-2.318.954c-.518-.287-1.073-.515-1.654-.682l-.966-2.318h-2.5l-.966,2.318c-.581.167-1.135.395-1.654.682l-2.318-.954-1.768,1.768.954,2.318c-.287.518-.515,1.073-.682,1.654l-2.318.966v2.5l2.318.966c.167.581.395,1.135.682,1.654l-.954,2.318,1.768,1.768,2.318-.954c.518.287,1.073.515,1.654.682l.966,2.318h2.5l.966-2.318c.581-.167,1.135-.395,1.654-.682l2.318.954,1.768-1.768-.954-2.318c.287-.518.515-1.073.682-1.654l2.318-.966Z\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"square\" stroke-miterlimit=\"10\"&gt;&lt;/path&gt;&lt;/g&gt;&lt;/svg&gt;&lt;span class=\"dock-label\"&gt;Settings&lt;/span&gt;&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_dock_custom_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "dock"
    ]
  },
  {
    "objectID": "components/navigation/steps.html",
    "href": "components/navigation/steps.html",
    "title": "steps",
    "section": "",
    "text": "Base Steps\n\n\nExported source\nsteps = SingleValueFactory(\"steps\", \"Container of multiple step nodes\") # Base steps component\nstep = SingleValueFactory(\"step\", \"A single step node\") # step part\nstep_icon = SingleValueFactory(\"step-icon\", \"For custom icon inside step\") # step icon part\n\n\n\n\nStep Colors\n\n\nExported source\nstep_colors = enums_to_simple_factory(step, [SemanticColorBrand, SemanticColorStatus], \"Step color variants using daisyUI semantic colors\") # Step color variants\n\n\n\n\nSteps Directions\n\n\nExported source\nsteps_directions = SimpleFactory(\n    {\n        \"vertical\": \"steps-vertical\",\n        \"horizontal\": \"steps-horizontal\",\n    },\n    \"steps directions (vertical, horizontal)\"\n) # steps directions\n\n\n\n\nSteps Test Examples\n\nsource\n\n\ntest_steps_basic_examples\n\n test_steps_basic_examples ()\n\nTest basic steps utilities.\n\n\nExported source\ndef test_steps_basic_examples():\n    \"\"\"Test basic steps utilities.\"\"\"\n    # Basic steps\n    assert str(steps) == \"steps\"\n    assert str(step) == \"step\"\n    assert str(step_icon) == \"step-icon\"\n    \n    # steps with modifiers\n    assert str(steps.hover) == \"hover:steps\"\n    assert str(steps.md) == \"md:steps\"\n    assert str(steps.dark) == \"dark:steps\"\n\n# Run the tests\ntest_steps_basic_examples()\n\n\n\nsource\n\n\ntest_step_colors_examples\n\n test_step_colors_examples ()\n\nTest step color variants.\n\n\nExported source\ndef test_step_colors_examples():\n    \"\"\"Test step color variants.\"\"\"\n    # All color variants\n    assert str(step_colors.neutral) == \"step-neutral\"\n    assert str(step_colors.primary) == \"step-primary\"\n    assert str(step_colors.secondary) == \"step-secondary\"\n    assert str(step_colors.accent) == \"step-accent\"\n    assert str(step_colors.info) == \"step-info\"\n    assert str(step_colors.success) == \"step-success\"\n    assert str(step_colors.warning) == \"step-warning\"\n    assert str(step_colors.error) == \"step-error\"\n    \n    # With modifiers\n    assert str(step_colors.primary.hover) == \"hover:step-primary\"\n    assert str(step_colors.success.focus) == \"focus:step-success\"\n\n# Run the tests\ntest_step_colors_examples()\n\n\n\nsource\n\n\ntest_steps_directions_examples\n\n test_steps_directions_examples ()\n\nTest steps direction utilities.\n\n\nExported source\ndef test_steps_directions_examples():\n    \"\"\"Test steps direction utilities.\"\"\"\n    assert str(steps_directions.vertical) == \"steps-vertical\"\n    assert str(steps_directions.horizontal) == \"steps-horizontal\"\n\n# Run the tests\ntest_steps_directions_examples()\n\n\n\nsource\n\n\ntest_steps_horizontal_fasthtml_examples\n\n test_steps_horizontal_fasthtml_examples ()\n\nTest horizontal steps from daisyUI v5 documentation.\n\n\nExported source\ndef test_steps_horizontal_fasthtml_examples():\n    \"\"\"Test horizontal steps from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li\n    \n    # Horizontal steps\n    horizontal_steps = Ul(\n        Li(\"Register\", cls=combine_classes(step, step_colors.primary)),\n        Li(\"Choose plan\", cls=combine_classes(step, step_colors.primary)),\n        Li(\"Purchase\", cls=str(step)),\n        Li(\"Receive Product\", cls=str(step)),\n        cls=str(steps)\n    )\n    \n    # Verify structure\n    assert horizontal_steps.tag == \"ul\"\n    assert horizontal_steps.attrs['class'] == \"steps\"\n    \n    # Verify li elements\n    assert len(horizontal_steps.children) == 4\n    \n    # First li - completed step\n    first_li = horizontal_steps.children[0]\n    assert first_li.tag == \"li\"\n    assert \"step\" in first_li.attrs['class']\n    assert \"step-primary\" in first_li.attrs['class']\n    assert first_li.children[0] == \"Register\"\n    \n    # Second li - completed step\n    second_li = horizontal_steps.children[1]\n    assert second_li.tag == \"li\"\n    assert \"step\" in second_li.attrs['class']\n    assert \"step-primary\" in second_li.attrs['class']\n    assert second_li.children[0] == \"Choose plan\"\n    \n    # Third li - uncompleted step\n    third_li = horizontal_steps.children[2]\n    assert third_li.tag == \"li\"\n    assert third_li.attrs['class'] == \"step\"\n    assert third_li.children[0] == \"Purchase\"\n    \n    # Fourth li - uncompleted step\n    fourth_li = horizontal_steps.children[3]\n    assert fourth_li.tag == \"li\"\n    assert fourth_li.attrs['class'] == \"step\"\n    assert fourth_li.children[0] == \"Receive Product\"\n    \n    return horizontal_steps\n\n# Run the tests\ntest_steps_horizontal_fasthtml_examples()\n\n\n&lt;ul class=\"steps\"&gt;\n  &lt;li class=\"step step-primary\"&gt;Register&lt;/li&gt;\n  &lt;li class=\"step step-primary\"&gt;Choose plan&lt;/li&gt;\n  &lt;li class=\"step\"&gt;Purchase&lt;/li&gt;\n  &lt;li class=\"step\"&gt;Receive Product&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_steps_horizontal_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_steps_vertical_fasthtml_examples\n\n test_steps_vertical_fasthtml_examples ()\n\nTest vertical steps from daisyUI v5 documentation.\n\n\nExported source\ndef test_steps_vertical_fasthtml_examples():\n    \"\"\"Test vertical steps from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li\n    \n    # Vertical steps\n    vertical_steps = Ul(\n        Li(\"Register\", cls=combine_classes(step, step_colors.primary)),\n        Li(\"Choose plan\", cls=combine_classes(step, step_colors.primary)),\n        Li(\"Purchase\", cls=str(step)),\n        Li(\"Receive Product\", cls=str(step)),\n        cls=combine_classes(steps, steps_directions.vertical)\n    )\n    \n    # Verify structure\n    assert vertical_steps.tag == \"ul\"\n    assert \"steps\" in vertical_steps.attrs['class']\n    assert \"steps-vertical\" in vertical_steps.attrs['class']\n    \n    # Verify li elements\n    assert len(vertical_steps.children) == 4\n    \n    # First li - completed step\n    first_li = vertical_steps.children[0]\n    assert first_li.tag == \"li\"\n    assert \"step\" in first_li.attrs['class']\n    assert \"step-primary\" in first_li.attrs['class']\n    assert first_li.children[0] == \"Register\"\n    \n    # Second li - completed step\n    second_li = vertical_steps.children[1]\n    assert second_li.tag == \"li\"\n    assert \"step\" in second_li.attrs['class']\n    assert \"step-primary\" in second_li.attrs['class']\n    assert second_li.children[0] == \"Choose plan\"\n    \n    # Third li - uncompleted step\n    third_li = vertical_steps.children[2]\n    assert third_li.tag == \"li\"\n    assert third_li.attrs['class'] == \"step\"\n    assert third_li.children[0] == \"Purchase\"\n    \n    # Fourth li - uncompleted step\n    fourth_li = vertical_steps.children[3]\n    assert fourth_li.tag == \"li\"\n    assert fourth_li.attrs['class'] == \"step\"\n    assert fourth_li.children[0] == \"Receive Product\"\n    \n    return vertical_steps\n\n# Run the tests\ntest_steps_vertical_fasthtml_examples()\n\n\n&lt;ul class=\"steps steps-vertical\"&gt;\n  &lt;li class=\"step step-primary\"&gt;Register&lt;/li&gt;\n  &lt;li class=\"step step-primary\"&gt;Choose plan&lt;/li&gt;\n  &lt;li class=\"step\"&gt;Purchase&lt;/li&gt;\n  &lt;li class=\"step\"&gt;Receive Product&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_steps_vertical_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_steps_responsive_fasthtml_examples\n\n test_steps_responsive_fasthtml_examples ()\n\nTest responsive steps (vertical on small screen, horizontal on large screen) from daisyUI v5 documentation.\n\n\nExported source\ndef test_steps_responsive_fasthtml_examples():\n    \"\"\"Test responsive steps (vertical on small screen, horizontal on large screen) from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li\n    \n    # Responsive steps - vertical on small, horizontal on large\n    responsive_steps = Ul(\n        Li(\"Register\", cls=combine_classes(step, step_colors.primary)),\n        Li(\"Choose plan\", cls=combine_classes(step, step_colors.primary)),\n        Li(\"Purchase\", cls=str(step)),\n        Li(\"Receive Product\", cls=str(step)),\n        cls=combine_classes(steps, steps_directions.vertical, steps_directions.horizontal.lg)\n    )\n    \n    # Verify structure\n    assert responsive_steps.tag == \"ul\"\n    assert \"steps\" in responsive_steps.attrs['class']\n    assert \"steps-vertical\" in responsive_steps.attrs['class']\n    assert \"lg:steps-horizontal\" in responsive_steps.attrs['class']\n    \n    # Verify li elements\n    assert len(responsive_steps.children) == 4\n    \n    # First li - completed step\n    first_li = responsive_steps.children[0]\n    assert first_li.tag == \"li\"\n    assert \"step\" in first_li.attrs['class']\n    assert \"step-primary\" in first_li.attrs['class']\n    assert first_li.children[0] == \"Register\"\n    \n    # Second li - completed step\n    second_li = responsive_steps.children[1]\n    assert second_li.tag == \"li\"\n    assert \"step\" in second_li.attrs['class']\n    assert \"step-primary\" in second_li.attrs['class']\n    assert second_li.children[0] == \"Choose plan\"\n    \n    # Third li - uncompleted step\n    third_li = responsive_steps.children[2]\n    assert third_li.tag == \"li\"\n    assert third_li.attrs['class'] == \"step\"\n    assert third_li.children[0] == \"Purchase\"\n    \n    # Fourth li - uncompleted step\n    fourth_li = responsive_steps.children[3]\n    assert fourth_li.tag == \"li\"\n    assert fourth_li.attrs['class'] == \"step\"\n    assert fourth_li.children[0] == \"Receive Product\"\n    \n    return responsive_steps\n\n# Run the tests\ntest_steps_responsive_fasthtml_examples()\n\n\n&lt;ul class=\"steps steps-vertical lg:steps-horizontal\"&gt;\n  &lt;li class=\"step step-primary\"&gt;Register&lt;/li&gt;\n  &lt;li class=\"step step-primary\"&gt;Choose plan&lt;/li&gt;\n  &lt;li class=\"step\"&gt;Purchase&lt;/li&gt;\n  &lt;li class=\"step\"&gt;Receive Product&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_steps_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_steps_with_custom_content_fasthtml_examples\n\n test_steps_with_custom_content_fasthtml_examples ()\n\nTest steps with custom content in step-icon from daisyUI v5 documentation.\n\n\nExported source\ndef test_steps_with_custom_content_fasthtml_examples():\n    \"\"\"Test steps with custom content in step-icon from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, Span\n    \n    # Steps with custom content in step-icon\n    custom_content_steps = Ul(\n        Li(\n            Span(\"😕\", cls=str(step_icon)),\n            \"Step 1\",\n            cls=combine_classes(step, step_colors.neutral)\n        ),\n        Li(\n            Span(\"😃\", cls=str(step_icon)),\n            \"Step 2\",\n            cls=combine_classes(step, step_colors.neutral)\n        ),\n        Li(\n            Span(\"😍\", cls=str(step_icon)),\n            \"Step 3\",\n            cls=str(step)\n        ),\n        cls=str(steps)\n    )\n    \n    # Verify structure\n    assert custom_content_steps.tag == \"ul\"\n    assert custom_content_steps.attrs['class'] == \"steps\"\n    \n    # Verify li elements\n    assert len(custom_content_steps.children) == 3\n    \n    # First li with custom icon\n    first_li = custom_content_steps.children[0]\n    assert first_li.tag == \"li\"\n    assert \"step\" in first_li.attrs['class']\n    assert \"step-neutral\" in first_li.attrs['class']\n    assert first_li.children[0].tag == \"span\"\n    assert first_li.children[0].attrs['class'] == \"step-icon\"\n    assert first_li.children[0].children[0] == \"😕\"\n    assert first_li.children[1] == \"Step 1\"\n    \n    # Second li with custom icon\n    second_li = custom_content_steps.children[1]\n    assert second_li.tag == \"li\"\n    assert \"step\" in second_li.attrs['class']\n    assert \"step-neutral\" in second_li.attrs['class']\n    assert second_li.children[0].tag == \"span\"\n    assert second_li.children[0].attrs['class'] == \"step-icon\"\n    assert second_li.children[0].children[0] == \"😃\"\n    assert second_li.children[1] == \"Step 2\"\n    \n    # Third li with custom icon\n    third_li = custom_content_steps.children[2]\n    assert third_li.tag == \"li\"\n    assert third_li.attrs['class'] == \"step\"\n    assert third_li.children[0].tag == \"span\"\n    assert third_li.children[0].attrs['class'] == \"step-icon\"\n    assert third_li.children[0].children[0] == \"😍\"\n    assert third_li.children[1] == \"Step 3\"\n    \n    return custom_content_steps\n\n# Run the tests\ntest_steps_with_custom_content_fasthtml_examples()\n\n\n&lt;ul class=\"steps\"&gt;\n  &lt;li class=\"step step-neutral\"&gt;\n&lt;span class=\"step-icon\"&gt;😕&lt;/span&gt;Step 1  &lt;/li&gt;\n  &lt;li class=\"step step-neutral\"&gt;\n&lt;span class=\"step-icon\"&gt;😃&lt;/span&gt;Step 2  &lt;/li&gt;\n  &lt;li class=\"step\"&gt;\n&lt;span class=\"step-icon\"&gt;😍&lt;/span&gt;Step 3  &lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_steps_with_custom_content_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_steps_with_data_content_fasthtml_examples\n\n test_steps_with_data_content_fasthtml_examples ()\n\nTest steps with data-content attribute from daisyUI v5 documentation.\n\n\nExported source\ndef test_steps_with_data_content_fasthtml_examples():\n    \"\"\"Test steps with data-content attribute from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li\n    \n    # Steps with data-content\n    data_content_steps = Ul(\n        Li(\"Step 1\", data_content=\"?\", cls=combine_classes(step, step_colors.neutral)),\n        Li(\"Step 2\", data_content=\"!\", cls=combine_classes(step, step_colors.neutral)),\n        Li(\"Step 3\", data_content=\"✓\", cls=combine_classes(step, step_colors.neutral)),\n        Li(\"Step 4\", data_content=\"✕\", cls=combine_classes(step, step_colors.neutral)),\n        Li(\"Step 5\", data_content=\"★\", cls=combine_classes(step, step_colors.neutral)),\n        Li(\"Step 6\", data_content=\"\", cls=combine_classes(step, step_colors.neutral)),\n        Li(\"Step 7\", data_content=\"●\", cls=combine_classes(step, step_colors.neutral)),\n        cls=str(steps)\n    )\n    \n    # Verify structure\n    assert data_content_steps.tag == \"ul\"\n    assert data_content_steps.attrs['class'] == \"steps\"\n    \n    # Verify li elements\n    assert len(data_content_steps.children) == 7\n    \n    # First li with data-content\n    first_li = data_content_steps.children[0]\n    assert first_li.tag == \"li\"\n    assert \"step\" in first_li.attrs['class']\n    assert \"step-neutral\" in first_li.attrs['class']\n    assert first_li.attrs['data-content'] == \"?\"\n    assert first_li.children[0] == \"Step 1\"\n    \n    # Second li with data-content\n    second_li = data_content_steps.children[1]\n    assert second_li.tag == \"li\"\n    assert \"step\" in second_li.attrs['class']\n    assert \"step-neutral\" in second_li.attrs['class']\n    assert second_li.attrs['data-content'] == \"!\"\n    assert second_li.children[0] == \"Step 2\"\n    \n    # Third li with data-content\n    third_li = data_content_steps.children[2]\n    assert third_li.tag == \"li\"\n    assert \"step\" in third_li.attrs['class']\n    assert \"step-neutral\" in third_li.attrs['class']\n    assert third_li.attrs['data-content'] == \"✓\"\n    assert third_li.children[0] == \"Step 3\"\n    \n    # Fourth li with data-content\n    fourth_li = data_content_steps.children[3]\n    assert fourth_li.tag == \"li\"\n    assert \"step\" in fourth_li.attrs['class']\n    assert \"step-neutral\" in fourth_li.attrs['class']\n    assert fourth_li.attrs['data-content'] == \"✕\"\n    assert fourth_li.children[0] == \"Step 4\"\n    \n    # Fifth li with data-content\n    fifth_li = data_content_steps.children[4]\n    assert fifth_li.tag == \"li\"\n    assert \"step\" in fifth_li.attrs['class']\n    assert \"step-neutral\" in fifth_li.attrs['class']\n    assert fifth_li.attrs['data-content'] == \"★\"\n    assert fifth_li.children[0] == \"Step 5\"\n    \n    # Sixth li with empty data-content\n    sixth_li = data_content_steps.children[5]\n    assert sixth_li.tag == \"li\"\n    assert \"step\" in sixth_li.attrs['class']\n    assert \"step-neutral\" in sixth_li.attrs['class']\n    assert sixth_li.attrs['data-content'] == \"\"\n    assert sixth_li.children[0] == \"Step 6\"\n    \n    # Seventh li with data-content\n    seventh_li = data_content_steps.children[6]\n    assert seventh_li.tag == \"li\"\n    assert \"step\" in seventh_li.attrs['class']\n    assert \"step-neutral\" in seventh_li.attrs['class']\n    assert seventh_li.attrs['data-content'] == \"●\"\n    assert seventh_li.children[0] == \"Step 7\"\n    \n    return data_content_steps\n\n# Run the tests\ntest_steps_with_data_content_fasthtml_examples()\n\n\n&lt;ul class=\"steps\"&gt;\n  &lt;li data-content=\"?\" class=\"step step-neutral\"&gt;Step 1&lt;/li&gt;\n  &lt;li data-content=\"!\" class=\"step step-neutral\"&gt;Step 2&lt;/li&gt;\n  &lt;li data-content=\"✓\" class=\"step step-neutral\"&gt;Step 3&lt;/li&gt;\n  &lt;li data-content=\"✕\" class=\"step step-neutral\"&gt;Step 4&lt;/li&gt;\n  &lt;li data-content=\"★\" class=\"step step-neutral\"&gt;Step 5&lt;/li&gt;\n  &lt;li class=\"step step-neutral\"&gt;Step 6&lt;/li&gt;\n  &lt;li data-content=\"●\" class=\"step step-neutral\"&gt;Step 7&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_steps_with_data_content_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_steps_custom_colors_fasthtml_examples\n\n test_steps_custom_colors_fasthtml_examples ()\n\nTest steps with custom colors from daisyUI v5 documentation.\n\n\nExported source\ndef test_steps_custom_colors_fasthtml_examples():\n    \"\"\"Test steps with custom colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li\n    \n    # Steps with custom colors\n    custom_colors_steps = Ul(\n        Li(\"Fly to moon\", cls=combine_classes(step, step_colors.info)),\n        Li(\"Shrink the moon\", cls=combine_classes(step, step_colors.info)),\n        Li(\"Grab the moon\", cls=combine_classes(step, step_colors.info)),\n        Li(\"Sit on toilet\", data_content=\"?\", cls=combine_classes(step, step_colors.error)),\n        cls=str(steps)\n    )\n    \n    # Verify structure\n    assert custom_colors_steps.tag == \"ul\"\n    assert custom_colors_steps.attrs['class'] == \"steps\"\n    \n    # Verify li elements\n    assert len(custom_colors_steps.children) == 4\n    \n    # First li with info color\n    first_li = custom_colors_steps.children[0]\n    assert first_li.tag == \"li\"\n    assert \"step\" in first_li.attrs['class']\n    assert \"step-info\" in first_li.attrs['class']\n    assert first_li.children[0] == \"Fly to moon\"\n    \n    # Second li with info color\n    second_li = custom_colors_steps.children[1]\n    assert second_li.tag == \"li\"\n    assert \"step\" in second_li.attrs['class']\n    assert \"step-info\" in second_li.attrs['class']\n    assert second_li.children[0] == \"Shrink the moon\"\n    \n    # Third li with info color\n    third_li = custom_colors_steps.children[2]\n    assert third_li.tag == \"li\"\n    assert \"step\" in third_li.attrs['class']\n    assert \"step-info\" in third_li.attrs['class']\n    assert third_li.children[0] == \"Grab the moon\"\n    \n    # Fourth li with error color and data-content\n    fourth_li = custom_colors_steps.children[3]\n    assert fourth_li.tag == \"li\"\n    assert \"step\" in fourth_li.attrs['class']\n    assert \"step-error\" in fourth_li.attrs['class']\n    assert fourth_li.attrs['data-content'] == \"?\"\n    assert fourth_li.children[0] == \"Sit on toilet\"\n    \n    return custom_colors_steps\n\n# Run the tests\ntest_steps_custom_colors_fasthtml_examples()\n\n\n&lt;ul class=\"steps\"&gt;\n  &lt;li class=\"step step-info\"&gt;Fly to moon&lt;/li&gt;\n  &lt;li class=\"step step-info\"&gt;Shrink the moon&lt;/li&gt;\n  &lt;li class=\"step step-info\"&gt;Grab the moon&lt;/li&gt;\n  &lt;li data-content=\"?\" class=\"step step-error\"&gt;Sit on toilet&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\ntest_func = test_steps_custom_colors_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_steps_with_scrollable_wrapper_fasthtml_examples\n\n test_steps_with_scrollable_wrapper_fasthtml_examples ()\n\nTest steps with scrollable wrapper from daisyUI v5 documentation.\n\n\nExported source\ndef test_steps_with_scrollable_wrapper_fasthtml_examples():\n    \"\"\"Test steps with scrollable wrapper from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Ul, Li\n    from cjm_fasthtml_tailwind.utilities.layout import overflow\n    \n    # Steps with scrollable wrapper\n    scrollable_steps = Div(\n        Ul(\n            Li(\"start\", cls=str(step)),\n            Li(\"2\", cls=combine_classes(step, step_colors.secondary)),\n            Li(\"3\", cls=combine_classes(step, step_colors.secondary)),\n            Li(\"4\", cls=combine_classes(step, step_colors.secondary)),\n            Li(\"5\", cls=str(step)),\n            Li(\"6\", cls=combine_classes(step, step_colors.accent)),\n            Li(\"7\", cls=combine_classes(step, step_colors.accent)),\n            Li(\"8\", cls=str(step)),\n            Li(\"9\", cls=combine_classes(step, step_colors.error)),\n            Li(\"10\", cls=combine_classes(step, step_colors.error)),\n            Li(\"11\", cls=str(step)),\n            Li(\"12\", cls=str(step)),\n            Li(\"13\", cls=combine_classes(step, step_colors.warning)),\n            Li(\"14\", cls=combine_classes(step, step_colors.warning)),\n            Li(\"15\", cls=str(step)),\n            Li(\"16\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"17\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"18\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"19\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"20\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"21\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"22\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"23\", cls=combine_classes(step, step_colors.neutral)),\n            Li(\"end\", cls=combine_classes(step, step_colors.neutral)),\n            cls=str(steps)\n        ),\n        cls=str(overflow.x.auto)\n    )\n    \n    # Verify structure\n    assert scrollable_steps.tag == \"div\"\n    assert scrollable_steps.attrs['class'] == \"overflow-x-auto\"\n    \n    # Verify ul element\n    ul_element = scrollable_steps.children[0]\n    assert ul_element.tag == \"ul\"\n    assert ul_element.attrs['class'] == \"steps\"\n    \n    # Verify total number of steps\n    assert len(ul_element.children) == 24\n    \n    # Verify first step\n    first_li = ul_element.children[0]\n    assert first_li.tag == \"li\"\n    assert first_li.attrs['class'] == \"step\"\n    assert first_li.children[0] == \"start\"\n    \n    # Verify some secondary colored steps (2-4)\n    for i in range(1, 4):\n        li = ul_element.children[i]\n        assert li.tag == \"li\"\n        assert \"step\" in li.attrs['class']\n        assert \"step-secondary\" in li.attrs['class']\n        assert li.children[0] == str(i + 1)\n    \n    # Verify step 5 (no color)\n    step_5 = ul_element.children[4]\n    assert step_5.attrs['class'] == \"step\"\n    assert step_5.children[0] == \"5\"\n    \n    # Verify accent colored steps (6-7)\n    for i in range(5, 7):\n        li = ul_element.children[i]\n        assert \"step\" in li.attrs['class']\n        assert \"step-accent\" in li.attrs['class']\n        assert li.children[0] == str(i + 1)\n    \n    # Verify step 8 (no color)\n    step_8 = ul_element.children[7]\n    assert step_8.attrs['class'] == \"step\"\n    assert step_8.children[0] == \"8\"\n    \n    # Verify error colored steps (9-10)\n    for i in range(8, 10):\n        li = ul_element.children[i]\n        assert \"step\" in li.attrs['class']\n        assert \"step-error\" in li.attrs['class']\n        assert li.children[0] == str(i + 1)\n    \n    # Verify steps 11-12 (no color)\n    for i in range(10, 12):\n        li = ul_element.children[i]\n        assert li.attrs['class'] == \"step\"\n        assert li.children[0] == str(i + 1)\n    \n    # Verify warning colored steps (13-14)\n    for i in range(12, 14):\n        li = ul_element.children[i]\n        assert \"step\" in li.attrs['class']\n        assert \"step-warning\" in li.attrs['class']\n        assert li.children[0] == str(i + 1)\n    \n    # Verify step 15 (no color)\n    step_15 = ul_element.children[14]\n    assert step_15.attrs['class'] == \"step\"\n    assert step_15.children[0] == \"15\"\n    \n    # Verify neutral colored steps (16-23)\n    for i in range(15, 23):\n        li = ul_element.children[i]\n        assert \"step\" in li.attrs['class']\n        assert \"step-neutral\" in li.attrs['class']\n        assert li.children[0] == str(i + 1)\n    \n    # Verify last step\n    last_li = ul_element.children[23]\n    assert last_li.tag == \"li\"\n    assert \"step\" in last_li.attrs['class']\n    assert \"step-neutral\" in last_li.attrs['class']\n    assert last_li.children[0] == \"end\"\n    \n    return scrollable_steps\n\n# Run the tests\ntest_steps_with_scrollable_wrapper_fasthtml_examples()\n\n\n&lt;div class=\"overflow-x-auto\"&gt;\n  &lt;ul class=\"steps\"&gt;\n    &lt;li class=\"step\"&gt;start&lt;/li&gt;\n    &lt;li class=\"step step-secondary\"&gt;2&lt;/li&gt;\n    &lt;li class=\"step step-secondary\"&gt;3&lt;/li&gt;\n    &lt;li class=\"step step-secondary\"&gt;4&lt;/li&gt;\n    &lt;li class=\"step\"&gt;5&lt;/li&gt;\n    &lt;li class=\"step step-accent\"&gt;6&lt;/li&gt;\n    &lt;li class=\"step step-accent\"&gt;7&lt;/li&gt;\n    &lt;li class=\"step\"&gt;8&lt;/li&gt;\n    &lt;li class=\"step step-error\"&gt;9&lt;/li&gt;\n    &lt;li class=\"step step-error\"&gt;10&lt;/li&gt;\n    &lt;li class=\"step\"&gt;11&lt;/li&gt;\n    &lt;li class=\"step\"&gt;12&lt;/li&gt;\n    &lt;li class=\"step step-warning\"&gt;13&lt;/li&gt;\n    &lt;li class=\"step step-warning\"&gt;14&lt;/li&gt;\n    &lt;li class=\"step\"&gt;15&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;16&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;17&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;18&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;19&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;20&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;21&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;22&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;23&lt;/li&gt;\n    &lt;li class=\"step step-neutral\"&gt;end&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_steps_with_scrollable_wrapper_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "steps"
    ]
  },
  {
    "objectID": "components/navigation/tabs.html",
    "href": "components/navigation/tabs.html",
    "title": "tabs",
    "section": "",
    "text": "Base Tabs\n\n\nExported source\ntabs = SingleValueFactory(\"tabs\", \"Container of multiple tab items\") # Base tabs component\ntab = SingleValueFactory(\"tab\", \"A single tab button (can be button, link, div, radio input, etc)\") # tab part\ntab_content = SingleValueFactory(\"tab-content\", \"Tab content that comes immediately after a tab\") # tab content part\n\n\n\n\nTabs Styles\n\nsource\n\n\nLiftStyle\n\n LiftStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass BoxStyle(str, Enum):\n    BOX = \"box\"\nclass LiftStyle(str, Enum):\n    LIFT = \"lift\"\n\ntabs_styles = enums_to_simple_factory(tabs, [BoxStyle, BorderStyle, LiftStyle]) # Tabs style variants\n\n\n\nsource\n\n\nBoxStyle\n\n BoxStyle (value, names=None, module=None, qualname=None, type=None,\n           start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nTab Modifiers\n\n\nExported source\ntab_modifiers = SimpleFactory(\n    {\n        \"disabled\": \"tab-disabled\",\n        \"active\": \"tab-active\",\n    },\n    \"Tab modifiers\"\n) # Tab modifiers\n\n\n\n\nTabs Placement\n\n\nExported source\ntabs_placement = SimpleFactory(\n    {\n        \"top\": \"tabs-top\",\n        \"bottom\": \"tabs-bottom\",\n    },\n    \"tabs placement options\"\n) # tabs placement options\n\n\n\n\nTabs Sizes\n\n\nExported source\ntabs_sizes = enums_to_simple_factory(tabs, [DaisyUINamedSize], \"Tabs size variants from extra small to extra large\") # Tabs size variants\n\n\n\n\nTabs Test Examples\n\nsource\n\n\ntest_tabs_basic_examples\n\n test_tabs_basic_examples ()\n\nTest basic tabs utilities.\n\n\nExported source\ndef test_tabs_basic_examples():\n    \"\"\"Test basic tabs utilities.\"\"\"\n    # Basic tabs\n    assert str(tabs) == \"tabs\"\n    assert str(tab) == \"tab\"\n    assert str(tab_content) == \"tab-content\"\n    \n    # tabs with modifiers\n    assert str(tabs.hover) == \"hover:tabs\"\n    assert str(tabs.md) == \"md:tabs\"\n    assert str(tabs.dark) == \"dark:tabs\"\n\n# Run the tests\ntest_tabs_basic_examples()\n\n\n\nsource\n\n\ntest_tab_modifiers_examples\n\n test_tab_modifiers_examples ()\n\nTest tab modifier utilities.\n\n\nExported source\ndef test_tab_modifiers_examples():\n    \"\"\"Test tab modifier utilities.\"\"\"\n    assert str(tab_modifiers.disabled) == \"tab-disabled\"\n    assert str(tab_modifiers.active) == \"tab-active\"\n\n# Run the tests\ntest_tab_modifiers_examples()\n\n\n\nsource\n\n\ntest_tab_placement_examples\n\n test_tab_placement_examples ()\n\nTest tab modifier utilities.\n\n\nExported source\ndef test_tab_placement_examples():\n    \"\"\"Test tab modifier utilities.\"\"\"\n    assert str(tabs_placement.top) == \"tabs-top\"\n    assert str(tabs_placement.bottom) == \"tabs-bottom\"\n\n# Run the tests\ntest_tab_placement_examples()\n\n\n\nsource\n\n\ntest_tabs_sizes_examples\n\n test_tabs_sizes_examples ()\n\nTest tabs size variants.\n\n\nExported source\ndef test_tabs_sizes_examples():\n    \"\"\"Test tabs size variants.\"\"\"\n    assert str(tabs_sizes.xs) == \"tabs-xs\"\n    assert str(tabs_sizes.sm) == \"tabs-sm\"\n    assert str(tabs_sizes.md) == \"tabs-md\"\n    assert str(tabs_sizes.lg) == \"tabs-lg\"\n    assert str(tabs_sizes.xl) == \"tabs-xl\"\n    \n    # With responsive modifiers\n    assert str(tabs_sizes.xs.sm) == \"sm:tabs-xs\"\n    assert str(tabs_sizes.lg.md) == \"md:tabs-lg\"\n\n# Run the tests\ntest_tabs_sizes_examples()\n\n\n\nsource\n\n\ntest_tabs_basic_fasthtml_examples\n\n test_tabs_basic_fasthtml_examples ()\n\nTest basic tabs example from daisyUI v5 documentation.\n\n\nExported source\ndef test_tabs_basic_fasthtml_examples():\n    \"\"\"Test basic tabs example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A\n    \n    # Basic tabs\n    basic_tabs = Div(\n        A(\"Tab 1\", role=\"tab\", cls=str(tab)),\n        A(\"Tab 2\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Tab 3\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=str(tabs)\n    )\n    \n    # Verify structure\n    assert basic_tabs.tag == \"div\"\n    assert basic_tabs.attrs['role'] == \"tablist\"\n    assert basic_tabs.attrs['class'] == \"tabs\"\n    \n    # Verify tabs\n    assert len(basic_tabs.children) == 3\n    \n    # First tab\n    first_tab = basic_tabs.children[0]\n    assert first_tab.tag == \"a\"\n    assert first_tab.attrs['role'] == \"tab\"\n    assert first_tab.attrs['class'] == \"tab\"\n    assert first_tab.children[0] == \"Tab 1\"\n    \n    # Second tab (active)\n    second_tab = basic_tabs.children[1]\n    assert second_tab.tag == \"a\"\n    assert second_tab.attrs['role'] == \"tab\"\n    assert \"tab\" in second_tab.attrs['class']\n    assert \"tab-active\" in second_tab.attrs['class']\n    assert second_tab.children[0] == \"Tab 2\"\n    \n    # Third tab\n    third_tab = basic_tabs.children[2]\n    assert third_tab.tag == \"a\"\n    assert third_tab.attrs['role'] == \"tab\"\n    assert third_tab.attrs['class'] == \"tab\"\n    assert third_tab.children[0] == \"Tab 3\"\n    \n    return basic_tabs\n\n# Run the tests\ntest_tabs_basic_fasthtml_examples()\n\n\n&lt;div role=\"tablist\" class=\"tabs\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 1&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Tab 2&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 3&lt;/a&gt;&lt;/div&gt;\n\n\n\ntest_func = test_tabs_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tabs_styles_fasthtml_examples\n\n test_tabs_styles_fasthtml_examples ()\n\nTest tabs style variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_tabs_styles_fasthtml_examples():\n    \"\"\"Test tabs style variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A\n    \n    # Tabs with border style\n    border_tabs = Div(\n        A(\"Tab 1\", role=\"tab\", cls=str(tab)),\n        A(\"Tab 2\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Tab 3\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.border)\n    )\n    assert \"tabs\" in border_tabs.attrs['class']\n    assert \"tabs-border\" in border_tabs.attrs['class']\n    assert border_tabs.attrs['role'] == \"tablist\"\n    \n    # Tabs with lift style\n    lift_tabs = Div(\n        A(\"Tab 1\", role=\"tab\", cls=str(tab)),\n        A(\"Tab 2\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Tab 3\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.lift)\n    )\n    assert \"tabs\" in lift_tabs.attrs['class']\n    assert \"tabs-lift\" in lift_tabs.attrs['class']\n    assert lift_tabs.attrs['role'] == \"tablist\"\n    \n    # Tabs with box style\n    box_tabs = Div(\n        A(\"Tab 1\", role=\"tab\", cls=str(tab)),\n        A(\"Tab 2\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Tab 3\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.box)\n    )\n    assert \"tabs\" in box_tabs.attrs['class']\n    assert \"tabs-box\" in box_tabs.attrs['class']\n    assert box_tabs.attrs['role'] == \"tablist\"\n    \n    return Div(border_tabs, lift_tabs, box_tabs)\n\n# Run the tests\ntest_tabs_styles_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-border\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 1&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Tab 2&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 3&lt;/a&gt;  &lt;/div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-lift\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 1&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Tab 2&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 3&lt;/a&gt;  &lt;/div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-box\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 1&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Tab 2&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 3&lt;/a&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tabs_styles_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tabs_radio_inputs_fasthtml_examples\n\n test_tabs_radio_inputs_fasthtml_examples ()\n\nTest tabs using radio inputs from daisyUI v5 documentation.\n\n\nExported source\ndef test_tabs_radio_inputs_fasthtml_examples():\n    \"\"\"Test tabs using radio inputs from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    \n    # Tabs-box using radio inputs\n    radio_tabs = Div(\n        Input(type=\"radio\", name=\"my_tabs_1\", aria_label=\"Tab 1\", cls=str(tab)),\n        Input(type=\"radio\", name=\"my_tabs_1\", aria_label=\"Tab 2\", checked=\"checked\", cls=str(tab)),\n        Input(type=\"radio\", name=\"my_tabs_1\", aria_label=\"Tab 3\", cls=str(tab)),\n        cls=combine_classes(tabs, tabs_styles.box)\n    )\n    \n    # Verify structure\n    assert radio_tabs.tag == \"div\"\n    assert \"tabs\" in radio_tabs.attrs['class']\n    assert \"tabs-box\" in radio_tabs.attrs['class']\n    \n    # Verify radio inputs\n    assert len(radio_tabs.children) == 3\n    \n    # First radio input\n    first_input = radio_tabs.children[0]\n    assert first_input.tag == \"input\"\n    assert first_input.attrs['type'] == \"radio\"\n    assert first_input.attrs['name'] == \"my_tabs_1\"\n    assert first_input.attrs['aria-label'] == \"Tab 1\"\n    assert first_input.attrs['class'] == \"tab\"\n    assert 'checked' not in first_input.attrs\n    \n    # Second radio input (checked)\n    second_input = radio_tabs.children[1]\n    assert second_input.tag == \"input\"\n    assert second_input.attrs['type'] == \"radio\"\n    assert second_input.attrs['name'] == \"my_tabs_1\"\n    assert second_input.attrs['aria-label'] == \"Tab 2\"\n    assert second_input.attrs['class'] == \"tab\"\n    assert second_input.attrs['checked'] == \"checked\"\n    \n    # Third radio input\n    third_input = radio_tabs.children[2]\n    assert third_input.tag == \"input\"\n    assert third_input.attrs['type'] == \"radio\"\n    assert third_input.attrs['name'] == \"my_tabs_1\"\n    assert third_input.attrs['aria-label'] == \"Tab 3\"\n    assert third_input.attrs['class'] == \"tab\"\n    assert 'checked' not in third_input.attrs\n    \n    return radio_tabs\n\n# Run the tests\ntest_tabs_radio_inputs_fasthtml_examples()\n\n\n&lt;div class=\"tabs tabs-box\"&gt;\n  &lt;input type=\"radio\" name=\"my_tabs_1\" aria-label=\"Tab 1\" class=\"tab\"&gt;\n  &lt;input type=\"radio\" name=\"my_tabs_1\" aria-label=\"Tab 2\" checked=\"checked\" class=\"tab\"&gt;\n  &lt;input type=\"radio\" name=\"my_tabs_1\" aria-label=\"Tab 3\" class=\"tab\"&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tabs_radio_inputs_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tabs_sizes_fasthtml_examples\n\n test_tabs_sizes_fasthtml_examples ()\n\nTest tabs size variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_tabs_sizes_fasthtml_examples():\n    \"\"\"Test tabs size variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, A\n    \n    # Extra small tabs\n    xs_tabs = Div(\n        A(\"Xsmall\", role=\"tab\", cls=str(tab)),\n        A(\"Xsmall\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Xsmall\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.lift, tabs_sizes.xs)\n    )\n    assert \"tabs\" in xs_tabs.attrs['class']\n    assert \"tabs-lift\" in xs_tabs.attrs['class']\n    assert \"tabs-xs\" in xs_tabs.attrs['class']\n    \n    # Small tabs\n    sm_tabs = Div(\n        A(\"Small\", role=\"tab\", cls=str(tab)),\n        A(\"Small\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Small\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.lift, tabs_sizes.sm)\n    )\n    assert \"tabs-sm\" in sm_tabs.attrs['class']\n    \n    # Medium tabs (default size)\n    md_tabs = Div(\n        A(\"Medium\", role=\"tab\", cls=str(tab)),\n        A(\"Medium\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Medium\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.lift)\n    )\n    assert \"tabs\" in md_tabs.attrs['class']\n    assert \"tabs-lift\" in md_tabs.attrs['class']\n    # No size class for medium (default)\n    \n    # Large tabs\n    lg_tabs = Div(\n        A(\"Large\", role=\"tab\", cls=str(tab)),\n        A(\"Large\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Large\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.lift, tabs_sizes.lg)\n    )\n    assert \"tabs-lg\" in lg_tabs.attrs['class']\n    \n    # Extra large tabs\n    xl_tabs = Div(\n        A(\"Xlarge\", role=\"tab\", cls=str(tab)),\n        A(\"Xlarge\", role=\"tab\", cls=combine_classes(tab, tab_modifiers.active)),\n        A(\"Xlarge\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.lift, tabs_sizes.xl)\n    )\n    assert \"tabs-xl\" in xl_tabs.attrs['class']\n    \n    return Div(xs_tabs, sm_tabs, md_tabs, lg_tabs, xl_tabs)\n\n# Run the tests\ntest_tabs_sizes_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-lift tabs-xs\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Xsmall&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Xsmall&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Xsmall&lt;/a&gt;  &lt;/div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-lift tabs-sm\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Small&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Small&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Small&lt;/a&gt;  &lt;/div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-lift\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Medium&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Medium&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Medium&lt;/a&gt;  &lt;/div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-lift tabs-lg\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Large&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Large&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Large&lt;/a&gt;  &lt;/div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-lift tabs-xl\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Xlarge&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active\"&gt;Xlarge&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Xlarge&lt;/a&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tabs_sizes_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tabs_with_content_fasthtml_examples\n\n test_tabs_with_content_fasthtml_examples ()\n\nTest tabs with content panels from daisyUI v5 documentation.\n\n\nExported source\ndef test_tabs_with_content_fasthtml_examples():\n    \"\"\"Test tabs with content panels from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    \n    # Radio tabs-border + tab content\n    border_tabs_content = Div(\n        Input(type=\"radio\", name=\"my_tabs_2\", aria_label=\"Tab 1\", cls=str(tab)),\n        Div(\n            \"Tab content 1\",\n            cls=combine_classes(tab_content, border_dui.base_300, bg_dui.base_100, p._10)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_2\", aria_label=\"Tab 2\", checked=\"checked\", cls=str(tab)),\n        Div(\n            \"Tab content 2\",\n            cls=combine_classes(tab_content, border_dui.base_300, bg_dui.base_100, p._10)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_2\", aria_label=\"Tab 3\", cls=str(tab)),\n        Div(\n            \"Tab content 3\",\n            cls=combine_classes(tab_content, border_dui.base_300, bg_dui.base_100, p._10)\n        ),\n        cls=combine_classes(tabs, tabs_styles.border)\n    )\n    \n    # Verify structure\n    assert \"tabs\" in border_tabs_content.attrs['class']\n    assert \"tabs-border\" in border_tabs_content.attrs['class']\n    assert len(border_tabs_content.children) == 6  # 3 tabs + 3 content panels\n    \n    # Verify first tab and content\n    assert border_tabs_content.children[0].tag == \"input\"\n    assert border_tabs_content.children[0].attrs['type'] == \"radio\"\n    assert border_tabs_content.children[1].tag == \"div\"\n    assert \"tab-content\" in border_tabs_content.children[1].attrs['class']\n    assert \"border-base-300\" in border_tabs_content.children[1].attrs['class']\n    assert \"bg-base-100\" in border_tabs_content.children[1].attrs['class']\n    assert \"p-10\" in border_tabs_content.children[1].attrs['class']\n    assert border_tabs_content.children[1].children[0] == \"Tab content 1\"\n    \n    # Radio tabs-lift + tab content\n    lift_tabs_content = Div(\n        Input(type=\"radio\", name=\"my_tabs_3\", aria_label=\"Tab 1\", cls=str(tab)),\n        Div(\n            \"Tab content 1\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_3\", aria_label=\"Tab 2\", checked=\"checked\", cls=str(tab)),\n        Div(\n            \"Tab content 2\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_3\", aria_label=\"Tab 3\", cls=str(tab)),\n        Div(\n            \"Tab content 3\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        cls=combine_classes(tabs, tabs_styles.lift)\n    )\n    \n    # Verify lift tabs structure\n    assert \"tabs\" in lift_tabs_content.attrs['class']\n    assert \"tabs-lift\" in lift_tabs_content.attrs['class']\n    assert \"p-6\" in lift_tabs_content.children[1].attrs['class']\n    \n    # Radio tabs-box + tab content\n    box_tabs_content = Div(\n        Input(type=\"radio\", name=\"my_tabs_6\", aria_label=\"Tab 1\", cls=str(tab)),\n        Div(\n            \"Tab content 1\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_6\", aria_label=\"Tab 2\", checked=\"checked\", cls=str(tab)),\n        Div(\n            \"Tab content 2\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_6\", aria_label=\"Tab 3\", cls=str(tab)),\n        Div(\n            \"Tab content 3\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        cls=combine_classes(tabs, tabs_styles.box)\n    )\n    \n    # Verify box tabs structure\n    assert \"tabs\" in box_tabs_content.attrs['class']\n    assert \"tabs-box\" in box_tabs_content.attrs['class']\n    \n    return Div(border_tabs_content, lift_tabs_content, box_tabs_content)\n\n# Run the tests\ntest_tabs_with_content_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"tabs tabs-border\"&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_2\" aria-label=\"Tab 1\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content border-base-300 bg-base-100 p-10\"&gt;Tab content 1&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_2\" aria-label=\"Tab 2\" checked=\"checked\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content border-base-300 bg-base-100 p-10\"&gt;Tab content 2&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_2\" aria-label=\"Tab 3\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content border-base-300 bg-base-100 p-10\"&gt;Tab content 3&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"tabs tabs-lift\"&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_3\" aria-label=\"Tab 1\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 1&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_3\" aria-label=\"Tab 2\" checked=\"checked\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 2&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_3\" aria-label=\"Tab 3\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 3&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"tabs tabs-box\"&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_6\" aria-label=\"Tab 1\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 1&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_6\" aria-label=\"Tab 2\" checked=\"checked\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 2&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_6\" aria-label=\"Tab 3\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 3&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tabs_with_content_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tabs_with_icons_fasthtml_examples\n\n test_tabs_with_icons_fasthtml_examples ()\n\nTest tabs with icons and content from daisyUI v5 documentation.\n\n\nExported source\ndef test_tabs_with_icons_fasthtml_examples():\n    \"\"\"Test tabs with icons and content from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Label, Input\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.spacing import me, p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    \n    # Create reusable icon SVGs\n    play_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\",\n        cls=combine_classes(size_util._4, me._2)\n    )\n    \n    face_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M15.182 15.182a4.5 4.5 0 0 1-6.364 0M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\",\n        cls=combine_classes(size_util._4, me._2)\n    )\n    \n    heart_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        stroke_width=\"1.5\",\n        stroke=\"currentColor\",\n        cls=combine_classes(size_util._4, me._2)\n    )\n    \n    # Radio tabs-lift with icons + tab content\n    icon_tabs = Div(\n        Label(\n            Input(type=\"radio\", name=\"my_tabs_4\"),\n            play_icon,\n            \"Live\",\n            cls=str(tab)\n        ),\n        Div(\n            \"Tab content 1\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Label(\n            Input(type=\"radio\", name=\"my_tabs_4\", checked=\"checked\"),\n            face_icon,\n            \"Laugh\",\n            cls=str(tab)\n        ),\n        Div(\n            \"Tab content 2\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Label(\n            Input(type=\"radio\", name=\"my_tabs_4\"),\n            heart_icon,\n            \"Love\",\n            cls=str(tab)\n        ),\n        Div(\n            \"Tab content 3\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        cls=combine_classes(tabs, tabs_styles.lift)\n    )\n    \n    # Verify structure\n    assert \"tabs\" in icon_tabs.attrs['class']\n    assert \"tabs-lift\" in icon_tabs.attrs['class']\n    assert len(icon_tabs.children) == 6  # 3 labels + 3 content panels\n    \n    # Verify first tab with icon\n    first_label = icon_tabs.children[0]\n    assert first_label.tag == \"label\"\n    assert first_label.attrs['class'] == \"tab\"\n    assert first_label.children[0].tag == \"input\"\n    assert first_label.children[0].attrs['type'] == \"radio\"\n    assert first_label.children[0].attrs['name'] == \"my_tabs_4\"\n    assert first_label.children[1].tag == \"svg\"  # Play icon\n    assert first_label.children[2] == \"Live\"\n    \n    # Verify second tab (checked) with icon\n    second_label = icon_tabs.children[2]\n    assert second_label.tag == \"label\"\n    assert second_label.children[0].attrs['checked'] == \"checked\"\n    assert second_label.children[1].tag == \"svg\"  # Face icon\n    assert second_label.children[2] == \"Laugh\"\n    \n    # Verify third tab with icon\n    third_label = icon_tabs.children[4]\n    assert third_label.tag == \"label\"\n    assert third_label.children[1].tag == \"svg\"  # Heart icon\n    assert third_label.children[2] == \"Love\"\n    \n    # Verify content panels\n    assert icon_tabs.children[1].tag == \"div\"\n    assert \"tab-content\" in icon_tabs.children[1].attrs['class']\n    assert icon_tabs.children[1].children[0] == \"Tab content 1\"\n    \n    return icon_tabs\n\n# Run the tests\ntest_tabs_with_icons_fasthtml_examples()\n\n\n&lt;div class=\"tabs tabs-lift\"&gt;\n&lt;label class=\"tab\"&gt;    &lt;input type=\"radio\" name=\"my_tabs_4\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-4 me-2\"&gt;&lt;path d=\"M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Live&lt;/label&gt;  &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 1&lt;/div&gt;\n&lt;label class=\"tab\"&gt;    &lt;input type=\"radio\" name=\"my_tabs_4\" checked=\"checked\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-4 me-2\"&gt;&lt;path d=\"M15.182 15.182a4.5 4.5 0 0 1-6.364 0M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Laugh&lt;/label&gt;  &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 2&lt;/div&gt;\n&lt;label class=\"tab\"&gt;    &lt;input type=\"radio\" name=\"my_tabs_4\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" stroke-width=\"1.5\" stroke=\"currentColor\" class=\"size-4 me-2\"&gt;&lt;path d=\"M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;Love&lt;/label&gt;  &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 3&lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tabs_with_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_tabs_special_fasthtml_examples\n\n test_tabs_special_fasthtml_examples ()\n\nTest special tabs variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_tabs_special_fasthtml_examples():\n    \"\"\"Test special tabs variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input, A\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui, text_dui\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.sizing import max_w, min_w\n    from cjm_fasthtml_tailwind.utilities.layout import overflow, position, z, start\n    \n    # Radio tabs-lift + tab content on bottom\n    bottom_tabs = Div(\n        Input(type=\"radio\", name=\"my_tabs_5\", aria_label=\"Tab 1\", cls=str(tab)),\n        Div(\n            \"Tab content 1\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_5\", aria_label=\"Tab 2\", checked=\"checked\", cls=str(tab)),\n        Div(\n            \"Tab content 2\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        Input(type=\"radio\", name=\"my_tabs_5\", aria_label=\"Tab 3\", cls=str(tab)),\n        Div(\n            \"Tab content 3\",\n            cls=combine_classes(tab_content, bg_dui.base_100, border_dui.base_300, p._6)\n        ),\n        cls=combine_classes(tabs, tabs_styles.lift, tabs_placement.bottom)\n    )\n    \n    # Verify bottom tabs structure\n    assert \"tabs\" in bottom_tabs.attrs['class']\n    assert \"tabs-lift\" in bottom_tabs.attrs['class']\n    assert \"tabs-bottom\" in bottom_tabs.attrs['class']\n    \n    # Tabs with horizontal scroll when there's no space\n    scrollable_tabs = Div(\n        Div(\n            Input(type=\"radio\", name=\"my_tabs_7\", aria_label=\"Tab title 1\", cls=combine_classes(tab, z(1))),\n            Div(\n                \"Tab content 1\",\n                cls=combine_classes(position.sticky, start(0), tab_content, max_w._60, border_dui.base_300, bg_dui.base_100, p._6)\n            ),\n            Input(type=\"radio\", name=\"my_tabs_7\", aria_label=\"Tab title 2\", checked=\"checked\", cls=combine_classes(tab, z(1))),\n            Div(\n                \"Tab content 2\",\n                cls=combine_classes(position.sticky, start(0), tab_content, max_w._60, border_dui.base_300, bg_dui.base_100, p._6)\n            ),\n            Input(type=\"radio\", name=\"my_tabs_7\", aria_label=\"Tab title 3\", cls=combine_classes(tab, z(1))),\n            Div(\n                \"Tab content 3\",\n                cls=combine_classes(position.sticky, start(0), tab_content, max_w._60, border_dui.base_300, bg_dui.base_100, p._6)\n            ),\n            Input(type=\"radio\", name=\"my_tabs_7\", aria_label=\"Tab title 4\", cls=combine_classes(tab, z(1))),\n            Div(\n                \"Tab content 4\",\n                cls=combine_classes(position.sticky, start(0), tab_content, max_w._60, border_dui.base_300, bg_dui.base_100, p._6)\n            ),\n            cls=combine_classes(tabs_styles.lift, tabs, min_w.max)\n        ),\n        cls=combine_classes(overflow.x.auto, max_w._60)\n    )\n    \n    # Verify scrollable tabs structure\n    assert \"overflow-x-auto\" in scrollable_tabs.attrs['class']\n    assert \"max-w-60\" in scrollable_tabs.attrs['class']\n    inner_div = scrollable_tabs.children[0]\n    assert \"tabs-lift\" in inner_div.attrs['class']\n    assert \"tabs\" in inner_div.attrs['class']\n    assert \"min-w-max\" in inner_div.attrs['class']\n    assert \"z-1\" in inner_div.children[0].attrs['class']\n    assert \"sticky\" in inner_div.children[1].attrs['class']\n    assert \"start-0\" in inner_div.children[1].attrs['class']\n    \n    # Tabs with custom color\n    custom_color_tabs = Div(\n        A(\"Tab 1\", role=\"tab\", cls=str(tab)),\n        A(\n            \"Tab 2\",\n            role=\"tab\",\n            cls=combine_classes(tab, tab_modifiers.active, text_dui.primary),\n            style=\"--tab-bg:orange; --tab-border-color:red\"\n        ),\n        A(\"Tab 3\", role=\"tab\", cls=str(tab)),\n        role=\"tablist\",\n        cls=combine_classes(tabs, tabs_styles.lift)\n    )\n    \n    # Verify custom color tabs\n    assert \"tabs\" in custom_color_tabs.attrs['class']\n    assert \"tabs-lift\" in custom_color_tabs.attrs['class']\n    second_tab = custom_color_tabs.children[1]\n    assert \"tab-active\" in second_tab.attrs['class']\n    assert \"text-primary\" in second_tab.attrs['class']\n    assert second_tab.attrs['style'] == \"--tab-bg:orange; --tab-border-color:red\"\n    \n    return Div(bottom_tabs, scrollable_tabs, custom_color_tabs)\n\n# Run the tests\ntest_tabs_special_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"tabs tabs-lift tabs-bottom\"&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_5\" aria-label=\"Tab 1\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 1&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_5\" aria-label=\"Tab 2\" checked=\"checked\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 2&lt;/div&gt;\n    &lt;input type=\"radio\" name=\"my_tabs_5\" aria-label=\"Tab 3\" class=\"tab\"&gt;\n    &lt;div class=\"tab-content bg-base-100 border-base-300 p-6\"&gt;Tab content 3&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"overflow-x-auto max-w-60\"&gt;\n    &lt;div class=\"tabs-lift tabs min-w-max\"&gt;\n      &lt;input type=\"radio\" name=\"my_tabs_7\" aria-label=\"Tab title 1\" class=\"tab z-1\"&gt;\n      &lt;div class=\"sticky start-0 tab-content max-w-60 border-base-300 bg-base-100 p-6\"&gt;Tab content 1&lt;/div&gt;\n      &lt;input type=\"radio\" name=\"my_tabs_7\" aria-label=\"Tab title 2\" checked=\"checked\" class=\"tab z-1\"&gt;\n      &lt;div class=\"sticky start-0 tab-content max-w-60 border-base-300 bg-base-100 p-6\"&gt;Tab content 2&lt;/div&gt;\n      &lt;input type=\"radio\" name=\"my_tabs_7\" aria-label=\"Tab title 3\" class=\"tab z-1\"&gt;\n      &lt;div class=\"sticky start-0 tab-content max-w-60 border-base-300 bg-base-100 p-6\"&gt;Tab content 3&lt;/div&gt;\n      &lt;input type=\"radio\" name=\"my_tabs_7\" aria-label=\"Tab title 4\" class=\"tab z-1\"&gt;\n      &lt;div class=\"sticky start-0 tab-content max-w-60 border-base-300 bg-base-100 p-6\"&gt;Tab content 4&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div role=\"tablist\" class=\"tabs tabs-lift\"&gt;\n&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 1&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab tab-active text-primary\" style=\"--tab-bg:orange; --tab-border-color:red\"&gt;Tab 2&lt;/a&gt;&lt;a href=\"#\" role=\"tab\" class=\"tab\"&gt;Tab 3&lt;/a&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_tabs_special_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "navigation",
      "tabs"
    ]
  },
  {
    "objectID": "components/layout/footer.html",
    "href": "components/layout/footer.html",
    "title": "footer",
    "section": "",
    "text": "Base Footer\n\n\nExported source\nfooter = SingleValueFactory(\"footer\", \"Base footer component\") # Base footer component\nfooter_title = SingleValueFactory(\"footer-title\", \"Title of a footer column\") # footer title part\n\n\n\n\nFooter Placement\n\nsource\n\n\nFooterPlacement\n\n FooterPlacement (value, names=None, module=None, qualname=None,\n                  type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass FooterPlacement(str, Enum):\n    CENTER = \"center\"\n\nfooter_placement = enums_to_simple_factory(footer, [FooterPlacement], \"footer placement (center)\") # footer placement\n\n\n\n\nFooter Directions\n\nsource\n\n\nFooterDirection\n\n FooterDirection (value, names=None, module=None, qualname=None,\n                  type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass FooterDirection(str, Enum):\n    VERTICAL = \"vertical\"\n    HORIZONTAL = \"horizontal\"\n\nfooter_directions = enums_to_simple_factory(footer, [FooterDirection], \"footer directions (vertical, horizontal)\") # footer directions\n\n\n\n\nFooter Test Examples\n\nsource\n\n\ntest_footer_basic_examples\n\n test_footer_basic_examples ()\n\nTest basic footer utilities.\n\n\nExported source\ndef test_footer_basic_examples():\n    \"\"\"Test basic footer utilities.\"\"\"\n    # Basic footer\n    assert str(footer) == \"footer\"\n    assert str(footer_title) == \"footer-title\"\n    \n    # Test with modifiers\n    assert str(footer.hover) == \"hover:footer\"\n    assert str(footer.md) == \"md:footer\"\n    assert str(footer.dark) == \"dark:footer\"\n\n# Run the tests\ntest_footer_basic_examples()\n\n\n\nsource\n\n\ntest_footer_placement_examples\n\n test_footer_placement_examples ()\n\nTest footer placement variants.\n\n\nExported source\ndef test_footer_placement_examples():\n    \"\"\"Test footer placement variants.\"\"\"\n    assert str(footer_placement.center) == \"footer-center\"\n\n# Run the tests\ntest_footer_placement_examples()\n\n\n\nsource\n\n\ntest_footer_directions_examples\n\n test_footer_directions_examples ()\n\nTest footer directions variants.\n\n\nExported source\ndef test_footer_directions_examples():\n    \"\"\"Test footer directions variants.\"\"\"\n    assert str(footer_directions.vertical) == \"footer-vertical\"\n    assert str(footer_directions.horizontal) == \"footer-horizontal\"\n\n# Run the tests\ntest_footer_directions_examples()\n\n\n\nsource\n\n\ntest_footer_basic_fasthtml_examples\n\n test_footer_basic_fasthtml_examples ()\n\nTest basic footer with navigation sections from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_basic_fasthtml_examples():\n    \"\"\"Test basic footer with navigation sections from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, H6, A\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    \n    # Footer (vertical by default, horizontal for sm and up)\n    basic_footer = Footer(\n        Nav(\n            H6(\"Services\", cls=str(footer_title)),\n            A(\"Branding\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Design\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Marketing\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Advertisement\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Company\", cls=str(footer_title)),\n            A(\"About us\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Contact\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Jobs\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Press kit\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Legal\", cls=str(footer_title)),\n            A(\"Terms of use\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Privacy policy\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Cookie policy\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.neutral, text_dui.neutral_content, p._10)\n    )\n    \n    # Verify structure\n    assert basic_footer.tag == \"footer\"\n    assert \"footer\" in basic_footer.attrs['class']\n    assert \"sm:footer-horizontal\" in basic_footer.attrs['class']\n    assert \"bg-neutral\" in basic_footer.attrs['class']\n    assert \"text-neutral-content\" in basic_footer.attrs['class']\n    assert \"p-10\" in basic_footer.attrs['class']\n    \n    # Verify nav sections\n    assert len(basic_footer.children) == 3\n    for nav in basic_footer.children:\n        assert nav.tag == \"nav\"\n        assert nav.children[0].tag == \"h6\"\n        assert \"footer-title\" in nav.children[0].attrs['class']\n        # Check links\n        for i in range(1, len(nav.children)):\n            assert nav.children[i].tag == \"a\"\n            assert \"link\" in nav.children[i].attrs['class']\n            assert \"link-hover\" in nav.children[i].attrs['class']\n    \n    return basic_footer\n\n# Run the tests\ntest_footer_basic_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal bg-neutral text-neutral-content p-10\"&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Services&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Branding&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Design&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Marketing&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Advertisement&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Company&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;About us&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Contact&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Jobs&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Press kit&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Legal&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Terms of use&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Privacy policy&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Cookie policy&lt;/a&gt;  &lt;/nav&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_with_logo_fasthtml_examples\n\n test_footer_with_logo_fasthtml_examples ()\n\nTest footer with logo section from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_with_logo_fasthtml_examples():\n    \"\"\"Test footer with logo section from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, Aside, H6, A, P, Br\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    \n    # Create reusable logo SVG\n    logo_svg = Svg(\n        Path(\n            d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"\n        ),\n        width=\"50\",\n        height=\"50\",\n        viewBox=\"0 0 24 24\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill_rule=\"evenodd\",\n        clip_rule=\"evenodd\",\n        cls=str(fill.current)\n    )\n    \n    # Footer with a logo section\n    footer_with_logo = Footer(\n        Aside(\n            logo_svg,\n            P(\n                \"ACME Industries Ltd.\",\n                Br(),\n                \"Providing reliable tech since 1992\"\n            )\n        ),\n        Nav(\n            H6(\"Services\", cls=str(footer_title)),\n            A(\"Branding\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Design\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Marketing\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Advertisement\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Company\", cls=str(footer_title)),\n            A(\"About us\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Contact\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Jobs\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Press kit\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Legal\", cls=str(footer_title)),\n            A(\"Terms of use\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Privacy policy\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Cookie policy\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.base_200, text_dui.base_content, p._10)\n    )\n    \n    # Verify structure\n    assert footer_with_logo.tag == \"footer\"\n    assert \"footer\" in footer_with_logo.attrs['class']\n    assert \"sm:footer-horizontal\" in footer_with_logo.attrs['class']\n    assert \"bg-base-200\" in footer_with_logo.attrs['class']\n    assert \"text-base-content\" in footer_with_logo.attrs['class']\n    \n    # Verify aside section\n    aside = footer_with_logo.children[0]\n    assert aside.tag == \"aside\"\n    assert aside.children[0].tag == \"svg\"\n    assert aside.children[0].attrs['width'] == \"50\"\n    assert aside.children[0].attrs['height'] == \"50\"\n    assert aside.children[1].tag == \"p\"\n    assert aside.children[1].children[0] == \"ACME Industries Ltd.\"\n    assert aside.children[1].children[1].tag == \"br\"\n    assert aside.children[1].children[2] == \"Providing reliable tech since 1992\"\n    \n    # Verify nav sections\n    for i in range(1, 4):\n        nav = footer_with_logo.children[i]\n        assert nav.tag == \"nav\"\n        assert nav.children[0].tag == \"h6\"\n        assert \"footer-title\" in nav.children[0].attrs['class']\n    \n    return footer_with_logo\n\n# Run the tests\ntest_footer_with_logo_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal bg-base-200 text-base-content p-10\"&gt;\n  &lt;aside&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"50\" width=\"50\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" class=\"fill-current\"&gt;&lt;path d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;p&gt;\nACME Industries Ltd.&lt;br&gt;Providing reliable tech since 1992    &lt;/p&gt;\n  &lt;/aside&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Services&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Branding&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Design&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Marketing&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Advertisement&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Company&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;About us&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Contact&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Jobs&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Press kit&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Legal&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Terms of use&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Privacy policy&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Cookie policy&lt;/a&gt;  &lt;/nav&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_with_logo_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_with_form_fasthtml_examples\n\n test_footer_with_form_fasthtml_examples ()\n\nTest footer with newsletter form from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_with_form_fasthtml_examples():\n    \"\"\"Test footer with newsletter form from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, Form, Fieldset, Label, H6, A, Input, Button, Div\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input, text_input_styles\n    from cjm_fasthtml_daisyui.components.layout.join import join, join_item\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Footer with a form\n    footer_with_form = Footer(\n        Nav(\n            H6(\"Services\", cls=str(footer_title)),\n            A(\"Branding\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Design\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Marketing\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Advertisement\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Company\", cls=str(footer_title)),\n            A(\"About us\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Contact\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Jobs\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Press kit\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Legal\", cls=str(footer_title)),\n            A(\"Terms of use\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Privacy policy\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Cookie policy\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Form(\n            H6(\"Newsletter\", cls=str(footer_title)),\n            Fieldset(\n                Label(\"Enter your email address\"),\n                Div(\n                    Input(\n                        type=\"text\",\n                        placeholder=\"[email protected]\",\n                        cls=combine_classes(text_input, join_item)\n                    ),\n                    Button(\"Subscribe\", cls=combine_classes(btn, btn_colors.primary, join_item)),\n                    cls=str(join)\n                ),\n                cls=str(w._80)\n            )\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.base_200, text_dui.base_content, p._10)\n    )\n    \n    # Verify structure\n    assert footer_with_form.tag == \"footer\"\n    assert \"footer\" in footer_with_form.attrs['class']\n    assert \"sm:footer-horizontal\" in footer_with_form.attrs['class']\n    assert \"bg-base-200\" in footer_with_form.attrs['class']\n    assert \"text-base-content\" in footer_with_form.attrs['class']\n    \n    # Verify nav sections\n    for i in range(3):\n        nav = footer_with_form.children[i]\n        assert nav.tag == \"nav\"\n        assert nav.children[0].tag == \"h6\"\n        assert \"footer-title\" in nav.children[0].attrs['class']\n    \n    # Verify form section\n    form = footer_with_form.children[3]\n    assert form.tag == \"form\"\n    assert form.children[0].tag == \"h6\"\n    assert \"footer-title\" in form.children[0].attrs['class']\n    assert form.children[0].children[0] == \"Newsletter\"\n    \n    # Verify fieldset\n    fieldset = form.children[1]\n    assert fieldset.tag == \"fieldset\"\n    assert \"w-80\" in fieldset.attrs['class']\n    assert fieldset.children[0].tag == \"label\"\n    assert fieldset.children[0].children[0] == \"Enter your email address\"\n    \n    # Verify join div\n    join_div = fieldset.children[1]\n    assert join_div.tag == \"div\"\n    assert \"join\" in join_div.attrs['class']\n    assert join_div.children[0].tag == \"input\"\n    assert \"input\" in join_div.children[0].attrs['class']\n    assert \"join-item\" in join_div.children[0].attrs['class']\n    assert join_div.children[1].tag == \"button\"\n    assert \"btn\" in join_div.children[1].attrs['class']\n    assert \"btn-primary\" in join_div.children[1].attrs['class']\n    assert \"join-item\" in join_div.children[1].attrs['class']\n    \n    return footer_with_form\n\n# Run the tests\ntest_footer_with_form_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal bg-base-200 text-base-content p-10\"&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Services&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Branding&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Design&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Marketing&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Advertisement&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Company&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;About us&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Contact&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Jobs&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Press kit&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Legal&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Terms of use&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Privacy policy&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Cookie policy&lt;/a&gt;  &lt;/nav&gt;\n&lt;form enctype=\"multipart/form-data\"&gt;    &lt;h6 class=\"footer-title\"&gt;Newsletter&lt;/h6&gt;\n&lt;fieldset class=\"w-80\"&gt;&lt;label&gt;Enter your email address&lt;/label&gt;      &lt;div class=\"join\"&gt;\n        &lt;input type=\"text\" placeholder=\"[email protected]\" class=\"input join-item\"&gt;\n&lt;button class=\"btn btn-primary join-item\"&gt;Subscribe&lt;/button&gt;      &lt;/div&gt;\n&lt;/fieldset&gt;&lt;/form&gt;&lt;/footer&gt;\n\n\n\ntest_func = test_footer_with_form_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_with_social_icons_fasthtml_examples\n\n test_footer_with_social_icons_fasthtml_examples ()\n\nTest footer with social icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_with_social_icons_fasthtml_examples():\n    \"\"\"Test footer with social icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, Aside, H6, A, P, Br, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_flow, gap, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    \n    # Create reusable logo SVG\n    logo_svg = Svg(\n        Path(\n            d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"\n        ),\n        width=\"50\",\n        height=\"50\",\n        viewBox=\"0 0 24 24\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill_rule=\"evenodd\",\n        clip_rule=\"evenodd\",\n        cls=str(fill.current)\n    )\n    \n    # Create social media icons\n    twitter_icon = Svg(\n        Path(\n            d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    youtube_icon = Svg(\n        Path(\n            d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    facebook_icon = Svg(\n        Path(\n            d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    # Footer with logo and social icons\n    footer_with_social = Footer(\n        Aside(\n            logo_svg,\n            P(\n                \"ACME Industries Ltd.\",\n                Br(),\n                \"Providing reliable tech since 1992\"\n            )\n        ),\n        Nav(\n            H6(\"Social\", cls=str(footer_title)),\n            Div(\n                A(twitter_icon, href=\"#\"),\n                A(youtube_icon, href=\"#\"),\n                A(facebook_icon, href=\"#\"),\n                cls=combine_classes(grid_display, grid_flow.col, gap._4)\n            )\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.neutral, text_dui.neutral_content, p._10)\n    )\n    \n    # Verify structure\n    assert footer_with_social.tag == \"footer\"\n    assert \"footer\" in footer_with_social.attrs['class']\n    assert \"sm:footer-horizontal\" in footer_with_social.attrs['class']\n    assert \"bg-neutral\" in footer_with_social.attrs['class']\n    assert \"text-neutral-content\" in footer_with_social.attrs['class']\n    \n    # Verify aside section\n    aside = footer_with_social.children[0]\n    assert aside.tag == \"aside\"\n    assert aside.children[0].tag == \"svg\"\n    assert aside.children[1].tag == \"p\"\n    \n    # Verify social nav section\n    social_nav = footer_with_social.children[1]\n    assert social_nav.tag == \"nav\"\n    assert social_nav.children[0].tag == \"h6\"\n    assert \"footer-title\" in social_nav.children[0].attrs['class']\n    assert social_nav.children[0].children[0] == \"Social\"\n    \n    # Verify social icons grid\n    social_grid = social_nav.children[1]\n    assert social_grid.tag == \"div\"\n    assert \"grid\" in social_grid.attrs['class']\n    assert \"grid-flow-col\" in social_grid.attrs['class']\n    assert \"gap-4\" in social_grid.attrs['class']\n    assert len(social_grid.children) == 3\n    for child in social_grid.children:\n        assert child.tag == \"a\"\n        assert child.children[0].tag == \"svg\"\n    \n    return footer_with_social\n\n# Run the tests\ntest_footer_with_social_icons_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal bg-neutral text-neutral-content p-10\"&gt;\n  &lt;aside&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"50\" width=\"50\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" class=\"fill-current\"&gt;&lt;path d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;p&gt;\nACME Industries Ltd.&lt;br&gt;Providing reliable tech since 1992    &lt;/p&gt;\n  &lt;/aside&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Social&lt;/h6&gt;\n    &lt;div class=\"grid grid-flow-col gap-4\"&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/div&gt;\n  &lt;/nav&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_with_social_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_copyright_fasthtml_examples\n\n test_footer_copyright_fasthtml_examples ()\n\nTest footer with copyright text from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_copyright_fasthtml_examples():\n    \"\"\"Test footer with copyright text from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Aside, P\n    from datetime import datetime\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Footer with copyright text\n    copyright_footer = Footer(\n        Aside(\n            P(f\"Copyright © {datetime.now().year} - All right reserved by ACME Industries Ltd\")\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, footer_placement.center, bg_dui.base_300, text_dui.base_content, p._4)\n    )\n    \n    # Verify structure\n    assert copyright_footer.tag == \"footer\"\n    assert \"footer\" in copyright_footer.attrs['class']\n    assert \"sm:footer-horizontal\" in copyright_footer.attrs['class']\n    assert \"footer-center\" in copyright_footer.attrs['class']\n    assert \"bg-base-300\" in copyright_footer.attrs['class']\n    assert \"text-base-content\" in copyright_footer.attrs['class']\n    assert \"p-4\" in copyright_footer.attrs['class']\n    \n    # Verify aside section\n    aside = copyright_footer.children[0]\n    assert aside.tag == \"aside\"\n    assert aside.children[0].tag == \"p\"\n    assert f\"Copyright © {datetime.now().year} - All right reserved by ACME Industries Ltd\" in aside.children[0].children[0]\n    \n    return copyright_footer\n\n# Run the tests\ntest_footer_copyright_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal footer-center bg-base-300 text-base-content p-4\"&gt;\n  &lt;aside&gt;\n    &lt;p&gt;Copyright © 2025 - All right reserved by ACME Industries Ltd&lt;/p&gt;\n  &lt;/aside&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_copyright_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_copyright_with_icons_fasthtml_examples\n\n test_footer_copyright_with_icons_fasthtml_examples ()\n\nTest footer with copyright text and social icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_copyright_with_icons_fasthtml_examples():\n    \"\"\"Test footer with copyright text and social icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Aside, Nav, P, A, Div\n    from fasthtml.svg import Svg, Path\n    from datetime import datetime\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_flow, gap, items, place_self, justify_self\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Create reusable logo SVG\n    logo_svg = Svg(\n        Path(\n            d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"\n        ),\n        width=\"36\",\n        height=\"36\",\n        viewBox=\"0 0 24 24\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill_rule=\"evenodd\",\n        clip_rule=\"evenodd\",\n        cls=str(fill.current)\n    )\n    \n    # Create social media icons\n    twitter_icon = Svg(\n        Path(\n            d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    youtube_icon = Svg(\n        Path(\n            d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    facebook_icon = Svg(\n        Path(\n            d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    # Footer with copyright text and social icons\n    copyright_social_footer = Footer(\n        Aside(\n            logo_svg,\n            P(f\"Copyright © {datetime.now().year} - All right reserved\"),\n            cls=combine_classes(grid_flow.col, items.center)\n        ),\n        Nav(\n            A(twitter_icon, href=\"#\"),\n            A(youtube_icon, href=\"#\"),\n            A(facebook_icon, href=\"#\"),\n            cls=combine_classes(grid_flow.col, gap._4, place_self.center.md, justify_self.end.md)\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.neutral, text_dui.neutral_content, items.center, p._4)\n    )\n    \n    # Verify structure\n    assert copyright_social_footer.tag == \"footer\"\n    assert \"footer\" in copyright_social_footer.attrs['class']\n    assert \"sm:footer-horizontal\" in copyright_social_footer.attrs['class']\n    assert \"bg-neutral\" in copyright_social_footer.attrs['class']\n    assert \"text-neutral-content\" in copyright_social_footer.attrs['class']\n    assert \"items-center\" in copyright_social_footer.attrs['class']\n    assert \"p-4\" in copyright_social_footer.attrs['class']\n    \n    # Verify aside section\n    aside = copyright_social_footer.children[0]\n    assert aside.tag == \"aside\"\n    assert \"grid-flow-col\" in aside.attrs['class']\n    assert \"items-center\" in aside.attrs['class']\n    assert aside.children[0].tag == \"svg\"\n    assert aside.children[0].attrs['width'] == \"36\"\n    assert aside.children[1].tag == \"p\"\n    \n    # Verify nav section with social icons\n    nav = copyright_social_footer.children[1]\n    assert nav.tag == \"nav\"\n    assert \"grid-flow-col\" in nav.attrs['class']\n    assert \"gap-4\" in nav.attrs['class']\n    assert \"md:place-self-center\" in nav.attrs['class']\n    assert \"md:justify-self-end\" in nav.attrs['class']\n    assert len(nav.children) == 3\n    \n    return copyright_social_footer\n\n# Run the tests\ntest_footer_copyright_with_icons_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal bg-neutral text-neutral-content items-center p-4\"&gt;\n  &lt;aside class=\"grid-flow-col items-center\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"36\" width=\"36\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" class=\"fill-current\"&gt;&lt;path d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;p&gt;Copyright © 2025 - All right reserved&lt;/p&gt;\n  &lt;/aside&gt;\n  &lt;nav class=\"grid-flow-col gap-4 md:place-self-center md:justify-self-end\"&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;  &lt;/nav&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_copyright_with_icons_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_with_links_and_social_fasthtml_examples\n\n test_footer_with_links_and_social_fasthtml_examples ()\n\nTest footer with links and social icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_with_links_and_social_fasthtml_examples():\n    \"\"\"Test footer with links and social icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, H6, A, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_flow, gap, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    \n    # Create social media icons\n    twitter_icon = Svg(\n        Path(\n            d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    youtube_icon = Svg(\n        Path(\n            d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    facebook_icon = Svg(\n        Path(\n            d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    # Footer with links and social icons\n    footer_links_social = Footer(\n        Nav(\n            H6(\"Services\", cls=str(footer_title)),\n            A(\"Branding\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Design\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Marketing\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Advertisement\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Company\", cls=str(footer_title)),\n            A(\"About us\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Contact\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Jobs\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Press kit\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Social\", cls=str(footer_title)),\n            Div(\n                A(twitter_icon, href=\"#\"),\n                A(youtube_icon, href=\"#\"),\n                A(facebook_icon, href=\"#\"),\n                cls=combine_classes(grid_display, grid_flow.col, gap._4)\n            )\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.base_300, text_dui.base_content, p._10)\n    )\n    \n    # Verify structure\n    assert footer_links_social.tag == \"footer\"\n    assert \"footer\" in footer_links_social.attrs['class']\n    assert \"sm:footer-horizontal\" in footer_links_social.attrs['class']\n    assert \"bg-base-300\" in footer_links_social.attrs['class']\n    assert \"text-base-content\" in footer_links_social.attrs['class']\n    assert \"p-10\" in footer_links_social.attrs['class']\n    \n    # Verify service and company nav sections\n    for i in range(2):\n        nav = footer_links_social.children[i]\n        assert nav.tag == \"nav\"\n        assert nav.children[0].tag == \"h6\"\n        assert \"footer-title\" in nav.children[0].attrs['class']\n        for j in range(1, 5):\n            assert nav.children[j].tag == \"a\"\n            assert \"link\" in nav.children[j].attrs['class']\n            assert \"link-hover\" in nav.children[j].attrs['class']\n    \n    # Verify social nav section\n    social_nav = footer_links_social.children[2]\n    assert social_nav.tag == \"nav\"\n    assert social_nav.children[0].tag == \"h6\"\n    assert social_nav.children[0].children[0] == \"Social\"\n    social_grid = social_nav.children[1]\n    assert social_grid.tag == \"div\"\n    assert \"grid\" in social_grid.attrs['class']\n    assert \"grid-flow-col\" in social_grid.attrs['class']\n    assert \"gap-4\" in social_grid.attrs['class']\n    assert len(social_grid.children) == 3\n    \n    return footer_links_social\n\n# Run the tests\ntest_footer_with_links_and_social_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal bg-base-300 text-base-content p-10\"&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Services&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Branding&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Design&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Marketing&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Advertisement&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Company&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;About us&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Contact&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Jobs&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Press kit&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Social&lt;/h6&gt;\n    &lt;div class=\"grid grid-flow-col gap-4\"&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/div&gt;\n  &lt;/nav&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_with_links_and_social_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_centered_with_logo_fasthtml_examples\n\n test_footer_centered_with_logo_fasthtml_examples ()\n\nTest centered footer with logo and social icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_centered_with_logo_fasthtml_examples():\n    \"\"\"Test centered footer with logo and social icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Aside, Nav, P, A, Div, Br\n    from fasthtml.svg import Svg, Path\n    from datetime import datetime\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_flow, gap, grid_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    \n    # Create reusable logo SVG\n    logo_svg = Svg(\n        Path(\n            d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"\n        ),\n        width=\"50\",\n        height=\"50\",\n        viewBox=\"0 0 24 24\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill_rule=\"evenodd\",\n        clip_rule=\"evenodd\",\n        cls=combine_classes(display_tw.inline_block, fill.current)\n    )\n    \n    # Create social media icons\n    twitter_icon = Svg(\n        Path(\n            d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    youtube_icon = Svg(\n        Path(\n            d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    facebook_icon = Svg(\n        Path(\n            d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    # Centered footer with logo and social icons\n    centered_logo_footer = Footer(\n        Aside(\n            logo_svg,\n            P(\n                \"ACME Industries Ltd.\",\n                Br(),\n                \"Providing reliable tech since 1992\",\n                cls=str(font_weight.bold)\n            ),\n            P(f\"Copyright © {datetime.now().year} - All right reserved\")\n        ),\n        Nav(\n            Div(\n                A(twitter_icon, href=\"#\"),\n                A(youtube_icon, href=\"#\"),\n                A(facebook_icon, href=\"#\"),\n                cls=combine_classes(grid_display, grid_flow.col, gap._4)\n            )\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal, footer_placement.center, bg_dui.primary, text_dui.primary_content, p._10)\n    )\n    \n    # Verify structure\n    assert centered_logo_footer.tag == \"footer\"\n    assert \"footer\" in centered_logo_footer.attrs['class']\n    assert \"footer-horizontal\" in centered_logo_footer.attrs['class']\n    assert \"footer-center\" in centered_logo_footer.attrs['class']\n    assert \"bg-primary\" in centered_logo_footer.attrs['class']\n    assert \"text-primary-content\" in centered_logo_footer.attrs['class']\n    assert \"p-10\" in centered_logo_footer.attrs['class']\n    \n    # Verify aside section\n    aside = centered_logo_footer.children[0]\n    assert aside.tag == \"aside\"\n    assert aside.children[0].tag == \"svg\"\n    assert \"inline-block\" in aside.children[0].attrs['class']\n    assert aside.children[1].tag == \"p\"\n    assert \"font-bold\" in aside.children[1].attrs['class']\n    assert aside.children[2].tag == \"p\"\n    \n    # Verify nav section with social icons\n    nav = centered_logo_footer.children[1]\n    assert nav.tag == \"nav\"\n    social_grid = nav.children[0]\n    assert social_grid.tag == \"div\"\n    assert \"grid\" in social_grid.attrs['class']\n    assert \"grid-flow-col\" in social_grid.attrs['class']\n    assert \"gap-4\" in social_grid.attrs['class']\n    assert len(social_grid.children) == 3\n    \n    return centered_logo_footer\n\n# Run the tests\ntest_footer_centered_with_logo_fasthtml_examples()\n\n\n&lt;footer class=\"footer footer-horizontal footer-center bg-primary text-primary-content p-10\"&gt;\n  &lt;aside&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"50\" width=\"50\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" class=\"inline-block fill-current\"&gt;&lt;path d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;p class=\"font-bold\"&gt;\nACME Industries Ltd.&lt;br&gt;Providing reliable tech since 1992    &lt;/p&gt;\n    &lt;p&gt;Copyright © 2025 - All right reserved&lt;/p&gt;\n  &lt;/aside&gt;\n  &lt;nav&gt;\n    &lt;div class=\"grid grid-flow-col gap-4\"&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/div&gt;\n  &lt;/nav&gt;\n&lt;/footer&gt;\n\n\n\nsource\n\n\ntest_footer_with_two_rows_fasthtml_examples\n\n test_footer_with_two_rows_fasthtml_examples ()\n\nTest footer with 2 rows from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_with_two_rows_fasthtml_examples():\n    \"\"\"Test footer with 2 rows from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, H6, A\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_rows\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    \n    # Footer with 2 rows\n    two_row_footer = Footer(\n        Nav(\n            H6(\"Services\", cls=str(footer_title)),\n            A(\"Branding\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Design\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Marketing\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Advertisement\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Company\", cls=str(footer_title)),\n            A(\"About us\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Contact\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Jobs\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Press kit\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Legal\", cls=str(footer_title)),\n            A(\"Terms of use\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Privacy policy\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Cookie policy\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Social\", cls=str(footer_title)),\n            A(\"Twitter\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Instagram\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Facebook\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"GitHub\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Explore\", cls=str(footer_title)),\n            A(\"Features\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Enterprise\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Security\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Pricing\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        Nav(\n            H6(\"Apps\", cls=str(footer_title)),\n            A(\"Mac\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Windows\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"iPhone\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Android\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.neutral, text_dui.neutral_content, grid_rows._2, p._10)\n    )\n    \n    # Verify structure\n    assert two_row_footer.tag == \"footer\"\n    assert \"footer\" in two_row_footer.attrs['class']\n    assert \"sm:footer-horizontal\" in two_row_footer.attrs['class']\n    assert \"bg-neutral\" in two_row_footer.attrs['class']\n    assert \"text-neutral-content\" in two_row_footer.attrs['class']\n    assert \"grid-rows-2\" in two_row_footer.attrs['class']\n    assert \"p-10\" in two_row_footer.attrs['class']\n    \n    # Verify 6 nav sections\n    assert len(two_row_footer.children) == 6\n    for nav in two_row_footer.children:\n        assert nav.tag == \"nav\"\n        assert nav.children[0].tag == \"h6\"\n        assert \"footer-title\" in nav.children[0].attrs['class']\n        # Check links\n        for i in range(1, len(nav.children)):\n            assert nav.children[i].tag == \"a\"\n            assert \"link\" in nav.children[i].attrs['class']\n            assert \"link-hover\" in nav.children[i].attrs['class']\n    \n    return two_row_footer\n\n# Run the tests\ntest_footer_with_two_rows_fasthtml_examples()\n\n\n&lt;footer class=\"footer sm:footer-horizontal bg-neutral text-neutral-content grid-rows-2 p-10\"&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Services&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Branding&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Design&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Marketing&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Advertisement&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Company&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;About us&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Contact&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Jobs&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Press kit&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Legal&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Terms of use&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Privacy policy&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Cookie policy&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Social&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Twitter&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Instagram&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Facebook&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;GitHub&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Explore&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Features&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Enterprise&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Security&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Pricing&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;h6 class=\"footer-title\"&gt;Apps&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Mac&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Windows&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;iPhone&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Android&lt;/a&gt;  &lt;/nav&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_with_two_rows_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\ntest_func = test_footer_centered_with_logo_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_centered_with_social_fasthtml_examples\n\n test_footer_centered_with_social_fasthtml_examples ()\n\nTest centered footer with social icons from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_centered_with_social_fasthtml_examples():\n    \"\"\"Test centered footer with social icons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, Aside, A, P, Div\n    from fasthtml.svg import Svg, Path\n    from datetime import datetime\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_flow, gap, grid_display\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    \n    # Create social media icons\n    twitter_icon = Svg(\n        Path(\n            d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    youtube_icon = Svg(\n        Path(\n            d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    facebook_icon = Svg(\n        Path(\n            d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    # Centered footer with social icons\n    centered_social_footer = Footer(\n        Nav(\n            A(\"About us\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Contact\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Jobs\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            A(\"Press kit\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n            cls=combine_classes(grid_display, grid_flow.col, gap._4)\n        ),\n        Nav(\n            Div(\n                A(twitter_icon, href=\"#\"),\n                A(youtube_icon, href=\"#\"),\n                A(facebook_icon, href=\"#\"),\n                cls=combine_classes(grid_display, grid_flow.col, gap._4)\n            )\n        ),\n        Aside(\n            P(f\"Copyright © {datetime.now().year} - All right reserved by ACME Industries Ltd\")\n        ),\n        cls=combine_classes(footer, footer_directions.horizontal, footer_placement.center, bg_dui.base_200, text_dui.base_content, rounded(), p._10)\n    )\n    \n    # Verify structure\n    assert centered_social_footer.tag == \"footer\"\n    assert \"footer\" in centered_social_footer.attrs['class']\n    assert \"footer-horizontal\" in centered_social_footer.attrs['class']\n    assert \"footer-center\" in centered_social_footer.attrs['class']\n    assert \"bg-base-200\" in centered_social_footer.attrs['class']\n    assert \"text-base-content\" in centered_social_footer.attrs['class']\n    assert \"rounded\" in centered_social_footer.attrs['class']\n    assert \"p-10\" in centered_social_footer.attrs['class']\n    \n    # Verify first nav section with links\n    first_nav = centered_social_footer.children[0]\n    assert first_nav.tag == \"nav\"\n    assert \"grid\" in first_nav.attrs['class']\n    assert \"grid-flow-col\" in first_nav.attrs['class']\n    assert \"gap-4\" in first_nav.attrs['class']\n    assert len(first_nav.children) == 4\n    for child in first_nav.children:\n        assert child.tag == \"a\"\n        assert \"link\" in child.attrs['class']\n        assert \"link-hover\" in child.attrs['class']\n    \n    # Verify second nav section with social icons\n    second_nav = centered_social_footer.children[1]\n    assert second_nav.tag == \"nav\"\n    social_grid = second_nav.children[0]\n    assert social_grid.tag == \"div\"\n    assert \"grid\" in social_grid.attrs['class']\n    assert \"grid-flow-col\" in social_grid.attrs['class']\n    assert \"gap-4\" in social_grid.attrs['class']\n    assert len(social_grid.children) == 3\n    for child in social_grid.children:\n        assert child.tag == \"a\"\n        assert child.children[0].tag == \"svg\"\n    \n    # Verify aside with copyright\n    aside = centered_social_footer.children[2]\n    assert aside.tag == \"aside\"\n    assert aside.children[0].tag == \"p\"\n    assert f\"Copyright © {datetime.now().year}\" in aside.children[0].children[0]\n    \n    return centered_social_footer\n\n# Run the tests\ntest_footer_centered_with_social_fasthtml_examples()\n\n\n&lt;footer class=\"footer footer-horizontal footer-center bg-base-200 text-base-content rounded p-10\"&gt;\n  &lt;nav class=\"grid grid-flow-col gap-4\"&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;About us&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Contact&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Jobs&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Press kit&lt;/a&gt;  &lt;/nav&gt;\n  &lt;nav&gt;\n    &lt;div class=\"grid grid-flow-col gap-4\"&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;    &lt;/div&gt;\n  &lt;/nav&gt;\n  &lt;aside&gt;\n    &lt;p&gt;Copyright © 2025 - All right reserved by ACME Industries Ltd&lt;/p&gt;\n  &lt;/aside&gt;\n&lt;/footer&gt;\n\n\n\ntest_func = test_footer_centered_with_social_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_footer_two_stacked_fasthtml_examples\n\n test_footer_two_stacked_fasthtml_examples ()\n\nTest two stacked footers from daisyUI v5 documentation.\n\n\nExported source\ndef test_footer_two_stacked_fasthtml_examples():\n    \"\"\"Test two stacked footers from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Footer, Nav, Aside, H6, A, P, Br, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import grid_flow, gap, items, place_self, justify_self, grid_display\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui, border_dui\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    \n    # Create reusable logo SVG\n    logo_svg = Svg(\n        Path(\n            d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"\n        ),\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill_rule=\"evenodd\",\n        clip_rule=\"evenodd\",\n        cls=str(fill.current)\n    )\n    \n    # Create social media icons\n    twitter_icon = Svg(\n        Path(\n            d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    youtube_icon = Svg(\n        Path(\n            d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    facebook_icon = Svg(\n        Path(\n            d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"24\",\n        height=\"24\",\n        viewBox=\"0 0 24 24\",\n        cls=str(fill.current)\n    )\n    \n    # Two footer - create a container Div to hold both footers\n    two_footer_container = Div(\n        # First footer\n        Footer(\n            Nav(\n                H6(\"Services\", cls=str(footer_title)),\n                A(\"Branding\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Design\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Marketing\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Advertisement\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n            ),\n            Nav(\n                H6(\"Company\", cls=str(footer_title)),\n                A(\"About us\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Contact\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Jobs\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Press kit\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n            ),\n            Nav(\n                H6(\"Legal\", cls=str(footer_title)),\n                A(\"Terms of use\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Privacy policy\", href=\"#\", cls=combine_classes(link, link_styles.hover)),\n                A(\"Cookie policy\", href=\"#\", cls=combine_classes(link, link_styles.hover))\n            ),\n            cls=combine_classes(footer, footer_directions.horizontal.sm, bg_dui.base_200, text_dui.base_content, p._10)\n        ),\n        # Second footer\n        Footer(\n            Aside(\n                logo_svg,\n                P(\n                    \"ACME Industries Ltd.\",\n                    Br(),\n                    \"Providing reliable tech since 1992\"\n                ),\n                cls=combine_classes(grid_flow.col, items.center)\n            ),\n            Nav(\n                Div(\n                    A(twitter_icon, href=\"#\"),\n                    A(youtube_icon, href=\"#\"),\n                    A(facebook_icon, href=\"#\"),\n                    cls=combine_classes(grid_display, grid_flow.col, gap._4)\n                ),\n                cls=combine_classes(place_self.center.md, justify_self.end.md)\n            ),\n            cls=combine_classes(footer, bg_dui.base_200, text_dui.base_content, border_dui.base_300, border.t(), p.x._10, p.y._4)\n        )\n    )\n    \n    # Verify structure\n    assert two_footer_container.tag == \"div\"\n    assert len(two_footer_container.children) == 2\n    \n    # Verify first footer\n    first_footer = two_footer_container.children[0]\n    assert first_footer.tag == \"footer\"\n    assert \"footer\" in first_footer.attrs['class']\n    assert \"sm:footer-horizontal\" in first_footer.attrs['class']\n    assert \"bg-base-200\" in first_footer.attrs['class']\n    assert \"text-base-content\" in first_footer.attrs['class']\n    assert \"p-10\" in first_footer.attrs['class']\n    assert len(first_footer.children) == 3  # 3 nav sections\n    \n    # Verify second footer\n    second_footer = two_footer_container.children[1]\n    assert second_footer.tag == \"footer\"\n    assert \"footer\" in second_footer.attrs['class']\n    assert \"bg-base-200\" in second_footer.attrs['class']\n    assert \"text-base-content\" in second_footer.attrs['class']\n    assert \"border-base-300\" in second_footer.attrs['class']\n    assert \"border-t\" in second_footer.attrs['class']\n    assert \"px-10\" in second_footer.attrs['class']\n    assert \"py-4\" in second_footer.attrs['class']\n    \n    # Verify aside in second footer\n    aside = second_footer.children[0]\n    assert aside.tag == \"aside\"\n    assert \"grid-flow-col\" in aside.attrs['class']\n    assert \"items-center\" in aside.attrs['class']\n    assert aside.children[0].tag == \"svg\"\n    assert aside.children[1].tag == \"p\"\n    \n    # Verify nav in second footer\n    nav = second_footer.children[1]\n    assert nav.tag == \"nav\"\n    assert \"md:place-self-center\" in nav.attrs['class']\n    assert \"md:justify-self-end\" in nav.attrs['class']\n    social_grid = nav.children[0]\n    assert social_grid.tag == \"div\"\n    assert \"grid\" in social_grid.attrs['class']\n    assert \"grid-flow-col\" in social_grid.attrs['class']\n    assert \"gap-4\" in social_grid.attrs['class']\n    \n    return two_footer_container\n\n# Run the tests\ntest_footer_two_stacked_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;footer class=\"footer sm:footer-horizontal bg-base-200 text-base-content p-10\"&gt;\n    &lt;nav&gt;\n      &lt;h6 class=\"footer-title\"&gt;Services&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Branding&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Design&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Marketing&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Advertisement&lt;/a&gt;    &lt;/nav&gt;\n    &lt;nav&gt;\n      &lt;h6 class=\"footer-title\"&gt;Company&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;About us&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Contact&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Jobs&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Press kit&lt;/a&gt;    &lt;/nav&gt;\n    &lt;nav&gt;\n      &lt;h6 class=\"footer-title\"&gt;Legal&lt;/h6&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Terms of use&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Privacy policy&lt;/a&gt;&lt;a href=\"#\" class=\"link link-hover\"&gt;Cookie policy&lt;/a&gt;    &lt;/nav&gt;\n  &lt;/footer&gt;\n  &lt;footer class=\"footer bg-base-200 text-base-content border-base-300 border-t px-10 py-4\"&gt;\n    &lt;aside class=\"grid-flow-col items-center\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" class=\"fill-current\"&gt;&lt;path d=\"M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z\"&gt;&lt;/path&gt;&lt;/svg&gt;      &lt;p&gt;\nACME Industries Ltd.&lt;br&gt;Providing reliable tech since 1992      &lt;/p&gt;\n    &lt;/aside&gt;\n    &lt;nav class=\"md:place-self-center md:justify-self-end\"&gt;\n      &lt;div class=\"grid grid-flow-col gap-4\"&gt;\n&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=\"#\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"24\" width=\"24\" class=\"fill-current\"&gt;&lt;path d=\"M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;      &lt;/div&gt;\n    &lt;/nav&gt;\n  &lt;/footer&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_footer_two_stacked_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "footer"
    ]
  },
  {
    "objectID": "components/layout/drawer.html",
    "href": "components/layout/drawer.html",
    "title": "drawer",
    "section": "",
    "text": "Base Drawer\n\n\nExported source\ndrawer = SingleValueFactory(\"drawer\", \"The wrapper for sidebar and content\") # Base drawer component\ndrawer_toggle = SingleValueFactory(\"drawer-toggle\", \"The hidden checkbox that controls the state of drawer\") # Drawer toggle part\ndrawer_content = SingleValueFactory(\"drawer-content\", \"Content part\") # Drawer content part\ndrawer_side = SingleValueFactory(\"drawer-side\", \"Sidebar part\") # Drawer sidbar part\ndrawer_overlay = SingleValueFactory(\"drawer-overlay\", \"Label that covers the page when drawer is open\") # Drawer overlay part\n\n\n\n\nDrawer Placement\n\nsource\n\n\nDrawerPlacement\n\n DrawerPlacement (value, names=None, module=None, qualname=None,\n                  type=None, start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass DrawerPlacement(str, Enum):\n    END = \"end\"\n\ndrawer_placement = enums_to_simple_factory(drawer, [DrawerPlacement], \"drawer placement (end)\") # drawer placement\n\n\n\n\nDrawer Modifiers\n\nsource\n\n\nDrawerModifier\n\n DrawerModifier (value, names=None, module=None, qualname=None, type=None,\n                 start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass DrawerModifier(str, Enum):\n    OPEN = \"open\"\n\ndrawer_modifiers = enums_to_simple_factory(drawer, [DrawerModifier], \"drawer modifiers (open)\") # drawer modifiers\n\n\n\n\nDrawer Test Examples\n\nsource\n\n\ntest_drawer_basic_examples\n\n test_drawer_basic_examples ()\n\nTest basic drawer utilities.\n\n\nExported source\ndef test_drawer_basic_examples():\n    \"\"\"Test basic drawer utilities.\"\"\"\n    # Basic drawer\n    assert str(drawer) == \"drawer\"\n    assert str(drawer_toggle) == \"drawer-toggle\"\n    assert str(drawer_content) == \"drawer-content\"\n    assert str(drawer_side) == \"drawer-side\"\n    assert str(drawer_overlay) == \"drawer-overlay\"\n    \n    # Test with modifiers\n    assert str(drawer.hover) == \"hover:drawer\"\n    assert str(drawer.md) == \"md:drawer\"\n    assert str(drawer.dark) == \"dark:drawer\"\n\n# Run the tests\ntest_drawer_basic_examples()\n\n\n\nsource\n\n\ntest_drawer_placement_examples\n\n test_drawer_placement_examples ()\n\nTest drawer placement variants.\n\n\nExported source\ndef test_drawer_placement_examples():\n    \"\"\"Test drawer placement variants.\"\"\"\n    assert str(drawer_placement.end) == \"drawer-end\"\n\n# Run the tests\ntest_drawer_placement_examples()\n\n\n\nsource\n\n\ntest_drawer_modifier_examples\n\n test_drawer_modifier_examples ()\n\nTest drawer modifier variants.\n\n\nExported source\ndef test_drawer_modifier_examples():\n    \"\"\"Test drawer modifier variants.\"\"\"\n    assert str(drawer_modifiers.open) == \"drawer-open\"\n\n# Run the tests\ntest_drawer_modifier_examples()\n\n\n\nsource\n\n\ntest_drawer_basic_fasthtml_examples\n\n test_drawer_basic_fasthtml_examples ()\n\nTest basic drawer example from daisyUI v5 documentation.\n\n\nExported source\ndef test_drawer_basic_fasthtml_examples():\n    \"\"\"Test basic drawer example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input, Label, Ul, Li, A\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_tailwind.utilities.sizing import w, min_h\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    \n    # Basic drawer\n    basic_drawer = Div(\n        Input(id=\"my-drawer\", type=\"checkbox\", cls=str(drawer_toggle)),\n        Div(\n            # Page content here\n            Label(\"Open drawer\", _for=\"my-drawer\", cls=combine_classes(btn, btn_colors.primary)),\n            cls=str(drawer_content)\n        ),\n        Div(\n            Label(_for=\"my-drawer\", aria_label=\"close sidebar\", cls=str(drawer_overlay)),\n            Ul(\n                # Sidebar content here\n                Li(A(\"Sidebar Item 1\", href=\"#\")),\n                Li(A(\"Sidebar Item 2\", href=\"#\")),\n                cls=combine_classes(menu, bg_dui.base_200, text_dui.base_content, min_h.full, w._80, p._4)\n            ),\n            cls=str(drawer_side)\n        ),\n        cls=str(drawer)\n    )\n    \n    # Verify structure\n    assert basic_drawer.tag == \"div\"\n    assert basic_drawer.attrs['class'] == \"drawer\"\n    \n    # Verify input checkbox\n    input_element = basic_drawer.children[0]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['id'] == \"my-drawer\"\n    assert input_element.attrs['type'] == \"checkbox\"\n    assert input_element.attrs['class'] == \"drawer-toggle\"\n    \n    # Verify drawer content\n    content_div = basic_drawer.children[1]\n    assert content_div.tag == \"div\"\n    assert content_div.attrs['class'] == \"drawer-content\"\n    \n    # Verify button label\n    button_label = content_div.children[0]\n    assert button_label.tag == \"label\"\n    assert button_label.attrs['for'] == \"my-drawer\"  # FastHTML converts for_ to for-\n    assert \"btn\" in button_label.attrs['class']\n    assert \"btn-primary\" in button_label.attrs['class']\n    assert button_label.children[0] == \"Open drawer\"\n    \n    # Verify drawer side\n    side_div = basic_drawer.children[2]\n    assert side_div.tag == \"div\"\n    assert side_div.attrs['class'] == \"drawer-side\"\n    \n    # Verify overlay label\n    overlay_label = side_div.children[0]\n    assert overlay_label.tag == \"label\"\n    assert overlay_label.attrs['for'] == \"my-drawer\"\n    assert overlay_label.attrs['aria-label'] == \"close sidebar\"\n    assert overlay_label.attrs['class'] == \"drawer-overlay\"\n    \n    # Verify menu\n    menu_ul = side_div.children[1]\n    assert menu_ul.tag == \"ul\"\n    assert \"menu\" in menu_ul.attrs['class']\n    assert \"bg-base-200\" in menu_ul.attrs['class']\n    assert \"text-base-content\" in menu_ul.attrs['class']\n    assert \"min-h-full\" in menu_ul.attrs['class']\n    assert \"w-80\" in menu_ul.attrs['class']\n    assert \"p-4\" in menu_ul.attrs['class']\n    \n    # Verify menu items\n    assert len(menu_ul.children) == 2\n    assert menu_ul.children[0].tag == \"li\"\n    assert menu_ul.children[0].children[0].tag == \"a\"\n    assert menu_ul.children[0].children[0].children[0] == \"Sidebar Item 1\"\n    assert menu_ul.children[1].tag == \"li\"\n    assert menu_ul.children[1].children[0].children[0] == \"Sidebar Item 2\"\n    \n    return basic_drawer\n\n# Run the tests\ntest_drawer_basic_fasthtml_examples()\n\n\n&lt;div class=\"drawer\"&gt;\n  &lt;input type=\"checkbox\" id=\"my-drawer\" class=\"drawer-toggle\" name=\"my-drawer\"&gt;\n  &lt;div class=\"drawer-content\"&gt;\n&lt;label for=\"my-drawer\" class=\"btn btn-primary\"&gt;Open drawer&lt;/label&gt;  &lt;/div&gt;\n  &lt;div class=\"drawer-side\"&gt;\n&lt;label for=\"my-drawer\" aria-label=\"close sidebar\" class=\"drawer-overlay\"&gt;&lt;/label&gt;    &lt;ul class=\"menu bg-base-200 text-base-content min-h-full w-80 p-4\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_drawer_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_drawer_navbar_mobile_fasthtml_examples\n\n test_drawer_navbar_mobile_fasthtml_examples ()\n\nTest navbar menu for desktop + sidebar drawer for mobile from daisyUI v5 documentation.\n\n\nExported source\ndef test_drawer_navbar_mobile_fasthtml_examples():\n    \"\"\"Test navbar menu for desktop + sidebar drawer for mobile from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input, Label, Ul, Li, A\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_modifiers, btn_styles\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_directions\n    from cjm_fasthtml_daisyui.components.navigation.navbar import navbar\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_tailwind.utilities.sizing import w, h, min_h\n    from cjm_fasthtml_tailwind.utilities.spacing import p, m\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, flex_direction, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.svg import stroke\n    \n    # Hamburger menu icon\n    hamburger_icon = Svg(\n        Path(\n            stroke_linecap=\"round\",\n            stroke_linejoin=\"round\",\n            stroke_width=\"2\",\n            d=\"M4 6h16M4 12h16M4 18h16\"\n        ),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        fill=\"none\",\n        viewBox=\"0 0 24 24\",\n        cls=combine_classes(display_tw.inline_block, h._6, w._6, stroke.current)\n    )\n    \n    # Navbar with drawer for mobile\n    navbar_drawer = Div(\n        Input(id=\"my-drawer-3\", type=\"checkbox\", cls=str(drawer_toggle)),\n        Div(\n            # Navbar\n            Div(\n                Div(\n                    Label(\n                        hamburger_icon,\n                        _for=\"my-drawer-3\", \n                        aria_label=\"open sidebar\", \n                        cls=combine_classes(btn, btn_modifiers.square, btn_styles.ghost)\n                    ),\n                    cls=combine_classes(flex.none, display_tw.hidden.lg)\n                ),\n                Div(\"Navbar Title\", cls=combine_classes(m.x._2, flex(1), p.x._2)),\n                Div(\n                    Ul(\n                        # Navbar menu content here\n                        Li(A(\"Navbar Item 1\", href=\"#\")),\n                        Li(A(\"Navbar Item 2\", href=\"#\")),\n                        cls=combine_classes(menu, menu_directions.horizontal)\n                    ),\n                    cls=combine_classes(display_tw.hidden, flex.none, display_tw.block.lg)\n                ),\n                cls=combine_classes(navbar, bg_dui.base_300, w.full)\n            ),\n            # Page content here\n            \"Content\",\n            cls=combine_classes(drawer_content, flex_display, flex.col)\n        ),\n        Div(\n            Label(_for=\"my-drawer-3\", aria_label=\"close sidebar\", cls=str(drawer_overlay)),\n            Ul(\n                # Sidebar content here\n                Li(A(\"Sidebar Item 1\", href=\"#\")),\n                Li(A(\"Sidebar Item 2\", href=\"#\")),\n                cls=combine_classes(menu, bg_dui.base_200, min_h.full, w._80, p._4)\n            ),\n            cls=str(drawer_side)\n        ),\n        cls=str(drawer)\n    )\n    \n    # Verify structure\n    assert navbar_drawer.tag == \"div\"\n    assert navbar_drawer.attrs['class'] == \"drawer\"\n    \n    # Verify input checkbox\n    input_element = navbar_drawer.children[0]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['id'] == \"my-drawer-3\"\n    assert input_element.attrs['type'] == \"checkbox\"\n    assert input_element.attrs['class'] == \"drawer-toggle\"\n    \n    # Verify drawer content\n    content_div = navbar_drawer.children[1]\n    assert content_div.tag == \"div\"\n    assert \"drawer-content\" in content_div.attrs['class']\n    assert \"flex\" in content_div.attrs['class']\n    assert \"flex-col\" in content_div.attrs['class']\n    \n    # Verify navbar\n    navbar_div = content_div.children[0]\n    assert navbar_div.tag == \"div\"\n    assert \"navbar\" in navbar_div.attrs['class']\n    assert \"bg-base-300\" in navbar_div.attrs['class']\n    assert \"w-full\" in navbar_div.attrs['class']\n    \n    # Verify mobile menu button\n    mobile_button_div = navbar_div.children[0]\n    assert \"flex-none\" in mobile_button_div.attrs['class']\n    assert \"lg:hidden\" in mobile_button_div.attrs['class']\n    mobile_label = mobile_button_div.children[0]\n    assert mobile_label.tag == \"label\"\n    assert mobile_label.attrs['for'] == \"my-drawer-3\"\n    assert mobile_label.attrs['aria-label'] == \"open sidebar\"\n    assert \"btn\" in mobile_label.attrs['class']\n    assert \"btn-square\" in mobile_label.attrs['class']\n    assert \"btn-ghost\" in mobile_label.attrs['class']\n    assert mobile_label.children[0].tag == \"svg\"\n    \n    # Verify navbar title\n    title_div = navbar_div.children[1]\n    assert \"mx-2\" in title_div.attrs['class']\n    assert \"flex-1\" in title_div.attrs['class']\n    assert \"px-2\" in title_div.attrs['class']\n    assert title_div.children[0] == \"Navbar Title\"\n    \n    # Verify desktop menu\n    desktop_menu_div = navbar_div.children[2]\n    assert \"hidden\" in desktop_menu_div.attrs['class']\n    assert \"flex-none\" in desktop_menu_div.attrs['class']\n    assert \"lg:block\" in desktop_menu_div.attrs['class']\n    desktop_menu = desktop_menu_div.children[0]\n    assert desktop_menu.tag == \"ul\"\n    assert \"menu\" in desktop_menu.attrs['class']\n    assert \"menu-horizontal\" in desktop_menu.attrs['class']\n    \n    # Verify page content\n    assert content_div.children[1] == \"Content\"\n    \n    # Verify drawer side\n    side_div = navbar_drawer.children[2]\n    assert side_div.tag == \"div\"\n    assert side_div.attrs['class'] == \"drawer-side\"\n    \n    return navbar_drawer\n\n# Run the tests\ntest_drawer_navbar_mobile_fasthtml_examples()\n\n\n&lt;div class=\"drawer\"&gt;\n  &lt;input type=\"checkbox\" id=\"my-drawer-3\" class=\"drawer-toggle\" name=\"my-drawer-3\"&gt;\n  &lt;div class=\"drawer-content flex flex-col\"&gt;\n    &lt;div class=\"navbar bg-base-300 w-full\"&gt;\n      &lt;div class=\"flex-none lg:hidden\"&gt;\n&lt;label for=\"my-drawer-3\" aria-label=\"open sidebar\" class=\"btn btn-square btn-ghost\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" fill=\"none\" class=\"inline-block h-6 w-6 stroke-current\"&gt;&lt;path d=\"M4 6h16M4 12h16M4 18h16\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/label&gt;      &lt;/div&gt;\n      &lt;div class=\"mx-2 flex-1 px-2\"&gt;Navbar Title&lt;/div&gt;\n      &lt;div class=\"hidden flex-none lg:block\"&gt;\n        &lt;ul class=\"menu menu-horizontal\"&gt;\n          &lt;li&gt;\n&lt;a href=\"#\"&gt;Navbar Item 1&lt;/a&gt;          &lt;/li&gt;\n          &lt;li&gt;\n&lt;a href=\"#\"&gt;Navbar Item 2&lt;/a&gt;          &lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\nContent  &lt;/div&gt;\n  &lt;div class=\"drawer-side\"&gt;\n&lt;label for=\"my-drawer-3\" aria-label=\"close sidebar\" class=\"drawer-overlay\"&gt;&lt;/label&gt;    &lt;ul class=\"menu bg-base-200 min-h-full w-80 p-4\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_drawer_navbar_mobile_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_drawer_responsive_fasthtml_examples\n\n test_drawer_responsive_fasthtml_examples ()\n\nTest responsive drawer from daisyUI v5 documentation.\n\n\nExported source\ndef test_drawer_responsive_fasthtml_examples():\n    \"\"\"Test responsive drawer from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input, Label, Ul, Li, A\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_tailwind.utilities.sizing import w, min_h\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, items, justify, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    \n    # Responsive drawer (vertical on small screen, horizontal on large screen)\n    responsive_drawer = Div(\n        Input(id=\"my-drawer-2\", type=\"checkbox\", cls=str(drawer_toggle)),\n        Div(\n            # Page content here\n            Label(\n                \"Open drawer\", \n                _for=\"my-drawer-2\", \n                cls=combine_classes(btn, btn_colors.primary, display_tw.hidden.lg)\n            ),\n            cls=combine_classes(drawer_content, flex_display, flex.col, items.center, justify.center)\n        ),\n        Div(\n            Label(_for=\"my-drawer-2\", aria_label=\"close sidebar\", cls=str(drawer_overlay)),\n            Ul(\n                # Sidebar content here\n                Li(A(\"Sidebar Item 1\", href=\"#\")),\n                Li(A(\"Sidebar Item 2\", href=\"#\")),\n                cls=combine_classes(menu, bg_dui.base_200, text_dui.base_content, min_h.full, w._80, p._4)\n            ),\n            cls=str(drawer_side)\n        ),\n        cls=combine_classes(drawer, drawer_modifiers.open.lg)\n    )\n    \n    # Verify structure\n    assert responsive_drawer.tag == \"div\"\n    assert \"drawer\" in responsive_drawer.attrs['class']\n    assert \"lg:drawer-open\" in responsive_drawer.attrs['class']\n    \n    # Verify input checkbox\n    input_element = responsive_drawer.children[0]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['id'] == \"my-drawer-2\"\n    assert input_element.attrs['type'] == \"checkbox\"\n    assert input_element.attrs['class'] == \"drawer-toggle\"\n    \n    # Verify drawer content\n    content_div = responsive_drawer.children[1]\n    assert content_div.tag == \"div\"\n    assert \"drawer-content\" in content_div.attrs['class']\n    assert \"flex\" in content_div.attrs['class']\n    assert \"flex-col\" in content_div.attrs['class']\n    assert \"items-center\" in content_div.attrs['class']\n    assert \"justify-center\" in content_div.attrs['class']\n    \n    # Verify button label (hidden on lg screens)\n    button_label = content_div.children[0]\n    assert button_label.tag == \"label\"\n    assert button_label.attrs['for'] == \"my-drawer-2\"\n    assert \"btn\" in button_label.attrs['class']\n    assert \"btn-primary\" in button_label.attrs['class']\n    assert \"lg:hidden\" in button_label.attrs['class']\n    assert button_label.children[0] == \"Open drawer\"\n    \n    # Verify drawer side\n    side_div = responsive_drawer.children[2]\n    assert side_div.tag == \"div\"\n    assert side_div.attrs['class'] == \"drawer-side\"\n    \n    # Verify overlay label\n    overlay_label = side_div.children[0]\n    assert overlay_label.tag == \"label\"\n    assert overlay_label.attrs['for'] == \"my-drawer-2\"\n    assert overlay_label.attrs['aria-label'] == \"close sidebar\"\n    assert overlay_label.attrs['class'] == \"drawer-overlay\"\n    \n    # Verify menu\n    menu_ul = side_div.children[1]\n    assert menu_ul.tag == \"ul\"\n    assert \"menu\" in menu_ul.attrs['class']\n    assert \"bg-base-200\" in menu_ul.attrs['class']\n    assert \"text-base-content\" in menu_ul.attrs['class']\n    assert \"min-h-full\" in menu_ul.attrs['class']\n    assert \"w-80\" in menu_ul.attrs['class']\n    assert \"p-4\" in menu_ul.attrs['class']\n    \n    return responsive_drawer\n\n# Run the tests\ntest_drawer_responsive_fasthtml_examples()\n\n\n&lt;div class=\"drawer lg:drawer-open\"&gt;\n  &lt;input type=\"checkbox\" id=\"my-drawer-2\" class=\"drawer-toggle\" name=\"my-drawer-2\"&gt;\n  &lt;div class=\"drawer-content flex flex-col items-center justify-center\"&gt;\n&lt;label for=\"my-drawer-2\" class=\"btn btn-primary lg:hidden\"&gt;Open drawer&lt;/label&gt;  &lt;/div&gt;\n  &lt;div class=\"drawer-side\"&gt;\n&lt;label for=\"my-drawer-2\" aria-label=\"close sidebar\" class=\"drawer-overlay\"&gt;&lt;/label&gt;    &lt;ul class=\"menu bg-base-200 text-base-content min-h-full w-80 p-4\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_drawer_responsive_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_drawer_end_fasthtml_examples\n\n test_drawer_end_fasthtml_examples ()\n\nTest drawer that opens from right side of page from daisyUI v5 documentation.\n\n\nExported source\ndef test_drawer_end_fasthtml_examples():\n    \"\"\"Test drawer that opens from right side of page from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input, Label, Ul, Li, A\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, text_dui\n    from cjm_fasthtml_tailwind.utilities.sizing import w, min_h\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    \n    # Drawer that opens from right side\n    end_drawer = Div(\n        Input(id=\"my-drawer-4\", type=\"checkbox\", cls=str(drawer_toggle)),\n        Div(\n            # Page content here\n            Label(\"Open drawer\", _for=\"my-drawer-4\", cls=combine_classes(btn, btn_colors.primary)),\n            cls=str(drawer_content)\n        ),\n        Div(\n            Label(_for=\"my-drawer-4\", aria_label=\"close sidebar\", cls=str(drawer_overlay)),\n            Ul(\n                # Sidebar content here\n                Li(A(\"Sidebar Item 1\", href=\"#\")),\n                Li(A(\"Sidebar Item 2\", href=\"#\")),\n                cls=combine_classes(menu, bg_dui.base_200, text_dui.base_content, min_h.full, w._80, p._4)\n            ),\n            cls=str(drawer_side)\n        ),\n        cls=combine_classes(drawer, drawer_placement.end)\n    )\n    \n    # Verify structure\n    assert end_drawer.tag == \"div\"\n    assert \"drawer\" in end_drawer.attrs['class']\n    assert \"drawer-end\" in end_drawer.attrs['class']\n    \n    # Verify input checkbox\n    input_element = end_drawer.children[0]\n    assert input_element.tag == \"input\"\n    assert input_element.attrs['id'] == \"my-drawer-4\"\n    assert input_element.attrs['type'] == \"checkbox\"\n    assert input_element.attrs['class'] == \"drawer-toggle\"\n    \n    # Verify drawer content\n    content_div = end_drawer.children[1]\n    assert content_div.tag == \"div\"\n    assert content_div.attrs['class'] == \"drawer-content\"\n    \n    # Verify button label\n    button_label = content_div.children[0]\n    assert button_label.tag == \"label\"\n    assert button_label.attrs['for'] == \"my-drawer-4\"\n    assert \"btn\" in button_label.attrs['class']\n    assert \"btn-primary\" in button_label.attrs['class']\n    assert button_label.children[0] == \"Open drawer\"\n    \n    # Verify drawer side\n    side_div = end_drawer.children[2]\n    assert side_div.tag == \"div\"\n    assert side_div.attrs['class'] == \"drawer-side\"\n    \n    # Verify overlay label\n    overlay_label = side_div.children[0]\n    assert overlay_label.tag == \"label\"\n    assert overlay_label.attrs['for'] == \"my-drawer-4\"\n    assert overlay_label.attrs['aria-label'] == \"close sidebar\"\n    assert overlay_label.attrs['class'] == \"drawer-overlay\"\n    \n    # Verify menu\n    menu_ul = side_div.children[1]\n    assert menu_ul.tag == \"ul\"\n    assert \"menu\" in menu_ul.attrs['class']\n    assert \"bg-base-200\" in menu_ul.attrs['class']\n    assert \"text-base-content\" in menu_ul.attrs['class']\n    assert \"min-h-full\" in menu_ul.attrs['class']\n    assert \"w-80\" in menu_ul.attrs['class']\n    assert \"p-4\" in menu_ul.attrs['class']\n    \n    # Verify menu items\n    assert len(menu_ul.children) == 2\n    assert menu_ul.children[0].tag == \"li\"\n    assert menu_ul.children[0].children[0].tag == \"a\"\n    assert menu_ul.children[0].children[0].children[0] == \"Sidebar Item 1\"\n    assert menu_ul.children[1].tag == \"li\"\n    assert menu_ul.children[1].children[0].children[0] == \"Sidebar Item 2\"\n    \n    return end_drawer\n\n# Run the tests\ntest_drawer_end_fasthtml_examples()\n\n\n&lt;div class=\"drawer drawer-end\"&gt;\n  &lt;input type=\"checkbox\" id=\"my-drawer-4\" class=\"drawer-toggle\" name=\"my-drawer-4\"&gt;\n  &lt;div class=\"drawer-content\"&gt;\n&lt;label for=\"my-drawer-4\" class=\"btn btn-primary\"&gt;Open drawer&lt;/label&gt;  &lt;/div&gt;\n  &lt;div class=\"drawer-side\"&gt;\n&lt;label for=\"my-drawer-4\" aria-label=\"close sidebar\" class=\"drawer-overlay\"&gt;&lt;/label&gt;    &lt;ul class=\"menu bg-base-200 text-base-content min-h-full w-80 p-4\"&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 1&lt;/a&gt;      &lt;/li&gt;\n      &lt;li&gt;\n&lt;a href=\"#\"&gt;Sidebar Item 2&lt;/a&gt;      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_drawer_end_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "drawer"
    ]
  },
  {
    "objectID": "components/layout/mask.html",
    "href": "components/layout/mask.html",
    "title": "mask",
    "section": "",
    "text": "Base Mask\n\n\nExported source\nmask = SingleValueFactory(\"mask\", \"Base mask component that masks the content with shape\") # Base mask component\n\n\n\n\nMask Styles\n\nsource\n\n\nMaskStyle\n\n MaskStyle (value, names=None, module=None, qualname=None, type=None,\n            start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass MaskStyle(str, Enum):\n    SQUIRCLE= \"squircle\"\n    HEART= \"heart\"\n    HEXAGON = \"hexagon\"\n    HEXAGON_2 = \"hexagon-2\"\n    DECAGON = \"decagon\"\n    PENTAGON = \"pentagon\"\n    DIAMOND = \"diamond\"\n    SQUARE = \"square\"\n    CIRCLE = \"circle\"\n    STAR = \"star\"\n    STAR_2 = \"star-2\"\n    TRIANGLE = \"triangle\"\n    TRIANGLE_2 = \"triangle-2\"\n    TRIANGLE_3 = \"triangle-3\"\n    TRIANGLE_4 = \"triangle-4\"\n    \n\nmask_styles = enums_to_simple_factory(mask, [MaskStyle]) # mask style variants\n\n\n\n\nMask Modifiers\n\nsource\n\n\nMaskModifier\n\n MaskModifier (value, names=None, module=None, qualname=None, type=None,\n               start=1, boundary=None)\n\n*str(object=’’) -&gt; str str(bytes_or_buffer[, encoding[, errors]]) -&gt; str\nCreate a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object.__str__() (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to ‘strict’.*\n\n\nExported source\nclass MaskModifier(str, Enum):\n    HALF_1 = \"half-1\"\n    HALF_2 = \"half-2\"\n    \n\nmask_modifiers = enums_to_simple_factory(mask, [MaskModifier]) # mask modifiers\n\n\n\n\nMask Test Examples\n\nsource\n\n\ntest_mask_basic_examples\n\n test_mask_basic_examples ()\n\nTest basic mask utilities.\n\n\nExported source\ndef test_mask_basic_examples():\n    \"\"\"Test basic mask utilities.\"\"\"\n    # Basic mask\n    assert str(mask) == \"mask\"\n    \n    # Test with modifiers\n    assert str(mask.hover) == \"hover:mask\"\n    assert str(mask.md) == \"md:mask\"\n    assert str(mask.dark) == \"dark:mask\"\n\n# Run the tests\ntest_mask_basic_examples()\n\n\n\nsource\n\n\ntest_mask_styles_examples\n\n test_mask_styles_examples ()\n\nTest mask style variants.\n\n\nExported source\ndef test_mask_styles_examples():\n    \"\"\"Test mask style variants.\"\"\"\n    assert str(mask_styles.squircle) == \"mask-squircle\"\n    assert str(mask_styles.heart) == \"mask-heart\"\n    assert str(mask_styles.hexagon) == \"mask-hexagon\"\n    assert str(mask_styles.hexagon_2) == \"mask-hexagon-2\"\n    assert str(mask_styles.decagon) == \"mask-decagon\"\n    assert str(mask_styles.pentagon) == \"mask-pentagon\"\n    assert str(mask_styles.diamond) == \"mask-diamond\"\n    assert str(mask_styles.square) == \"mask-square\"\n    assert str(mask_styles.circle) == \"mask-circle\"\n    assert str(mask_styles.star) == \"mask-star\"\n    assert str(mask_styles.star_2) == \"mask-star-2\"\n    assert str(mask_styles.triangle) == \"mask-triangle\"\n    assert str(mask_styles.triangle_2) == \"mask-triangle-2\"\n    assert str(mask_styles.triangle_3) == \"mask-triangle-3\"\n    assert str(mask_styles.triangle_4) == \"mask-triangle-4\"\n\n# Run the tests\ntest_mask_styles_examples()\n\n\n\nsource\n\n\ntest_mask_modifiers_examples\n\n test_mask_modifiers_examples ()\n\nTest mask modifier utilities.\n\n\nExported source\ndef test_mask_modifiers_examples():\n    \"\"\"Test mask modifier utilities.\"\"\"\n    assert str(mask_modifiers.half_1) == \"mask-half-1\"\n    assert str(mask_modifiers.half_2) == \"mask-half-2\"\n\n# Run the tests\ntest_mask_modifiers_examples()\n\n\n\nsource\n\n\ntest_mask_squircle_heart_hexagon_fasthtml_examples\n\n test_mask_squircle_heart_hexagon_fasthtml_examples ()\n\nTest mask with squircle, heart, and hexagon shapes from daisyUI v5 documentation.\n\n\nExported source\ndef test_mask_squircle_heart_hexagon_fasthtml_examples():\n    \"\"\"Test mask with squircle, heart, and hexagon shapes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Img, Div\n    \n    # Use the same image source as in documentation\n    img_src = \"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\"\n    \n    # Squircle mask\n    squircle_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.squircle)\n    )\n    assert squircle_mask.tag == \"img\"\n    assert squircle_mask.attrs['src'] == img_src\n    assert \"mask\" in squircle_mask.attrs['class']\n    assert \"mask-squircle\" in squircle_mask.attrs['class']\n    \n    # Heart mask\n    heart_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.heart)\n    )\n    assert heart_mask.tag == \"img\"\n    assert heart_mask.attrs['src'] == img_src\n    assert \"mask\" in heart_mask.attrs['class']\n    assert \"mask-heart\" in heart_mask.attrs['class']\n    \n    # Hexagon mask\n    hexagon_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.hexagon)\n    )\n    assert hexagon_mask.tag == \"img\"\n    assert hexagon_mask.attrs['src'] == img_src\n    assert \"mask\" in hexagon_mask.attrs['class']\n    assert \"mask-hexagon\" in hexagon_mask.attrs['class']\n    \n    return Div(squircle_mask, heart_mask, hexagon_mask)\n\n# Run the tests\ntest_mask_squircle_heart_hexagon_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-squircle\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-heart\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-hexagon\"&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mask_squircle_heart_hexagon_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mask_hexagon2_decagon_pentagon_fasthtml_examples\n\n test_mask_hexagon2_decagon_pentagon_fasthtml_examples ()\n\nTest mask with hexagon-2, decagon, and pentagon shapes from daisyUI v5 documentation.\n\n\nExported source\ndef test_mask_hexagon2_decagon_pentagon_fasthtml_examples():\n    \"\"\"Test mask with hexagon-2, decagon, and pentagon shapes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Img, Div\n    \n    # Use the same image source as in documentation\n    img_src = \"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\"\n    \n    # Hexagon-2 mask (horizontal hexagon)\n    hexagon2_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.hexagon_2)\n    )\n    assert hexagon2_mask.tag == \"img\"\n    assert hexagon2_mask.attrs['src'] == img_src\n    assert \"mask\" in hexagon2_mask.attrs['class']\n    assert \"mask-hexagon-2\" in hexagon2_mask.attrs['class']\n    \n    # Decagon mask\n    decagon_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.decagon)\n    )\n    assert decagon_mask.tag == \"img\"\n    assert decagon_mask.attrs['src'] == img_src\n    assert \"mask\" in decagon_mask.attrs['class']\n    assert \"mask-decagon\" in decagon_mask.attrs['class']\n    \n    # Pentagon mask\n    pentagon_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.pentagon)\n    )\n    assert pentagon_mask.tag == \"img\"\n    assert pentagon_mask.attrs['src'] == img_src\n    assert \"mask\" in pentagon_mask.attrs['class']\n    assert \"mask-pentagon\" in pentagon_mask.attrs['class']\n    \n    return Div(hexagon2_mask, decagon_mask, pentagon_mask)\n\n# Run the tests\ntest_mask_hexagon2_decagon_pentagon_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-hexagon-2\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-decagon\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-pentagon\"&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mask_hexagon2_decagon_pentagon_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mask_diamond_square_circle_fasthtml_examples\n\n test_mask_diamond_square_circle_fasthtml_examples ()\n\nTest mask with diamond, square, and circle shapes from daisyUI v5 documentation.\n\n\nExported source\ndef test_mask_diamond_square_circle_fasthtml_examples():\n    \"\"\"Test mask with diamond, square, and circle shapes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Img, Div\n    \n    # Use the same image source as in documentation\n    img_src = \"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\"\n    \n    # Diamond mask\n    diamond_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.diamond)\n    )\n    assert diamond_mask.tag == \"img\"\n    assert diamond_mask.attrs['src'] == img_src\n    assert \"mask\" in diamond_mask.attrs['class']\n    assert \"mask-diamond\" in diamond_mask.attrs['class']\n    \n    # Square mask\n    square_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.square)\n    )\n    assert square_mask.tag == \"img\"\n    assert square_mask.attrs['src'] == img_src\n    assert \"mask\" in square_mask.attrs['class']\n    assert \"mask-square\" in square_mask.attrs['class']\n    \n    # Circle mask\n    circle_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.circle)\n    )\n    assert circle_mask.tag == \"img\"\n    assert circle_mask.attrs['src'] == img_src\n    assert \"mask\" in circle_mask.attrs['class']\n    assert \"mask-circle\" in circle_mask.attrs['class']\n    \n    return Div(diamond_mask, square_mask, circle_mask)\n\n# Run the tests\ntest_mask_diamond_square_circle_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-diamond\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-square\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-circle\"&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mask_diamond_square_circle_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mask_star_variations_fasthtml_examples\n\n test_mask_star_variations_fasthtml_examples ()\n\nTest mask with star and star-2 shapes from daisyUI v5 documentation.\n\n\nExported source\ndef test_mask_star_variations_fasthtml_examples():\n    \"\"\"Test mask with star and star-2 shapes from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Img, Div\n    \n    # Use the same image source as in documentation\n    img_src = \"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\"\n    \n    # Star mask\n    star_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.star)\n    )\n    assert star_mask.tag == \"img\"\n    assert star_mask.attrs['src'] == img_src\n    assert \"mask\" in star_mask.attrs['class']\n    assert \"mask-star\" in star_mask.attrs['class']\n    \n    # Star-2 mask (bold star)\n    star2_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.star_2)\n    )\n    assert star2_mask.tag == \"img\"\n    assert star2_mask.attrs['src'] == img_src\n    assert \"mask\" in star2_mask.attrs['class']\n    assert \"mask-star-2\" in star2_mask.attrs['class']\n    \n    return Div(star_mask, star2_mask)\n\n# Run the tests\ntest_mask_star_variations_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-star\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-star-2\"&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mask_star_variations_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_mask_triangle_variations_fasthtml_examples\n\n test_mask_triangle_variations_fasthtml_examples ()\n\nTest mask with triangle variations from daisyUI v5 documentation.\n\n\nExported source\ndef test_mask_triangle_variations_fasthtml_examples():\n    \"\"\"Test mask with triangle variations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Img, Div\n    \n    # Use the same image source as in documentation\n    img_src = \"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\"\n    \n    # Triangle mask (pointing top)\n    triangle_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.triangle)\n    )\n    assert triangle_mask.tag == \"img\"\n    assert triangle_mask.attrs['src'] == img_src\n    assert \"mask\" in triangle_mask.attrs['class']\n    assert \"mask-triangle\" in triangle_mask.attrs['class']\n    \n    # Triangle-2 mask (pointing down)\n    triangle2_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.triangle_2)\n    )\n    assert triangle2_mask.tag == \"img\"\n    assert triangle2_mask.attrs['src'] == img_src\n    assert \"mask\" in triangle2_mask.attrs['class']\n    assert \"mask-triangle-2\" in triangle2_mask.attrs['class']\n    \n    # Triangle-3 mask (pointing left)\n    triangle3_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.triangle_3)\n    )\n    assert triangle3_mask.tag == \"img\"\n    assert triangle3_mask.attrs['src'] == img_src\n    assert \"mask\" in triangle3_mask.attrs['class']\n    assert \"mask-triangle-3\" in triangle3_mask.attrs['class']\n    \n    # Triangle-4 mask (pointing right)\n    triangle4_mask = Img(\n        src=img_src,\n        cls=combine_classes(mask, mask_styles.triangle_4)\n    )\n    assert triangle4_mask.tag == \"img\"\n    assert triangle4_mask.attrs['src'] == img_src\n    assert \"mask\" in triangle4_mask.attrs['class']\n    assert \"mask-triangle-4\" in triangle4_mask.attrs['class']\n    \n    return Div(triangle_mask, triangle2_mask, triangle3_mask, triangle4_mask)\n\n# Run the tests\ntest_mask_triangle_variations_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-triangle\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-triangle-2\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-triangle-3\"&gt;&lt;img src=\"https://img.daisyui.com/images/stock/photo-1567653418876-5bb0e566e1c2.webp\" class=\"mask mask-triangle-4\"&gt;&lt;/div&gt;\n\n\n\ntest_func = test_mask_triangle_variations_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "mask"
    ]
  },
  {
    "objectID": "components/layout/hero.html",
    "href": "components/layout/hero.html",
    "title": "hero",
    "section": "",
    "text": "Base Hero\n\n\nExported source\nhero = SingleValueFactory(\"hero\", \"Base hero container\") # Base hero component\nhero_content = SingleValueFactory(\"hero-content\", \"Hero content part\") # Hero content part\nhero_overlay = SingleValueFactory(\"hero-overlay\", \"Hero overlay that covers the background image\") # Hero overlay part\n\n\n\n\nHero Test Examples\n\nsource\n\n\ntest_hero_basic_examples\n\n test_hero_basic_examples ()\n\nTest basic hero utilities.\n\n\nExported source\ndef test_hero_basic_examples():\n    \"\"\"Test basic hero utilities.\"\"\"\n    # Basic hero\n    assert str(hero) == \"hero\"\n    assert str(hero_content) == \"hero-content\"\n    assert str(hero_overlay) == \"hero-overlay\"\n    \n    # Test with modifiers\n    assert str(hero.hover) == \"hover:hero\"\n    assert str(hero.md) == \"md:hero\"\n    assert str(hero.dark) == \"dark:hero\"\n\n# Run the tests\ntest_hero_basic_examples()\n\n\n\nsource\n\n\ntest_hero_centered_fasthtml_examples\n\n test_hero_centered_fasthtml_examples ()\n\nTest centered hero example from daisyUI v5 documentation.\n\n\nExported source\ndef test_hero_centered_fasthtml_examples():\n    \"\"\"Test centered hero example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H1, P, Button\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h, max_w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, text_align\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Centered hero\n    centered_hero = Div(\n        Div(\n            Div(\n                H1(\"Hello there\", cls=combine_classes(font_size._5xl, font_weight.bold)),\n                P(\n                    \"Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.\",\n                    cls=str(p.y._6)\n                ),\n                Button(\"Get Started\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=str(max_w.md)\n            ),\n            cls=combine_classes(hero_content, text_align.center)\n        ),\n        cls=combine_classes(hero, bg_dui.base_200, min_h.screen)\n    )\n    \n    # Verify structure\n    assert \"hero\" in centered_hero.attrs['class']\n    assert \"bg-base-200\" in centered_hero.attrs['class']\n    assert \"min-h-screen\" in centered_hero.attrs['class']\n    \n    # Verify hero-content\n    hero_content_div = centered_hero.children[0]\n    assert \"hero-content\" in hero_content_div.attrs['class']\n    assert \"text-center\" in hero_content_div.attrs['class']\n    \n    # Verify inner content container\n    content_container = hero_content_div.children[0]\n    assert \"max-w-md\" in content_container.attrs['class']\n    \n    # Verify H1\n    h1_element = content_container.children[0]\n    assert h1_element.tag == \"h1\"\n    assert \"text-5xl\" in h1_element.attrs['class']\n    assert \"font-bold\" in h1_element.attrs['class']\n    assert h1_element.children[0] == \"Hello there\"\n    \n    # Verify P\n    p_element = content_container.children[1]\n    assert p_element.tag == \"p\"\n    assert \"py-6\" in p_element.attrs['class']\n    assert \"Provident cupiditate voluptatem et in\" in p_element.children[0]\n    \n    # Verify Button\n    button_element = content_container.children[2]\n    assert button_element.tag == \"button\"\n    assert \"btn\" in button_element.attrs['class']\n    assert \"btn-primary\" in button_element.attrs['class']\n    assert button_element.children[0] == \"Get Started\"\n    \n    return Div(centered_hero)\n\n# Run the tests\ntest_hero_centered_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"hero bg-base-200 min-h-screen\"&gt;\n    &lt;div class=\"hero-content text-center\"&gt;\n      &lt;div class=\"max-w-md\"&gt;\n        &lt;h1 class=\"text-5xl font-bold\"&gt;Hello there&lt;/h1&gt;\n        &lt;p class=\"py-6\"&gt;Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.&lt;/p&gt;\n&lt;button class=\"btn btn-primary\"&gt;Get Started&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_hero_centered_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_hero_with_figure_fasthtml_examples\n\n test_hero_with_figure_fasthtml_examples ()\n\nTest hero with figure examples from daisyUI v5 documentation.\n\n\nExported source\ndef test_hero_with_figure_fasthtml_examples():\n    \"\"\"Test hero with figure examples from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H1, P, Button, Img\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h, max_w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Hero with figure\n    hero_with_figure = Div(\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp\",\n                cls=combine_classes(max_w.sm, rounded.lg, shadow._2xl)\n            ),\n            Div(\n                H1(\"Box Office News!\", cls=combine_classes(font_size._5xl, font_weight.bold)),\n                P(\n                    \"Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.\",\n                    cls=str(p.y._6)\n                ),\n                Button(\"Get Started\", cls=combine_classes(btn, btn_colors.primary))\n            ),\n            cls=combine_classes(hero_content, flex.col, flex.row.lg)\n        ),\n        cls=combine_classes(hero, bg_dui.base_200, min_h.screen)\n    )\n    \n    # Verify structure\n    assert \"hero\" in hero_with_figure.attrs['class']\n    assert \"bg-base-200\" in hero_with_figure.attrs['class']\n    assert \"min-h-screen\" in hero_with_figure.attrs['class']\n    \n    # Verify hero-content\n    hero_content_div = hero_with_figure.children[0]\n    assert \"hero-content\" in hero_content_div.attrs['class']\n    assert \"flex-col\" in hero_content_div.attrs['class']\n    assert \"lg:flex-row\" in hero_content_div.attrs['class']\n    \n    # Verify image\n    img_element = hero_content_div.children[0]\n    assert img_element.tag == \"img\"\n    assert \"max-w-sm\" in img_element.attrs['class']\n    assert \"rounded-lg\" in img_element.attrs['class']\n    assert \"shadow-2xl\" in img_element.attrs['class']\n    assert img_element.attrs['src'] == \"https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp\"\n    \n    # Verify content div\n    content_div = hero_content_div.children[1]\n    assert content_div.tag == \"div\"\n    \n    # Verify H1\n    h1_element = content_div.children[0]\n    assert h1_element.tag == \"h1\"\n    assert \"text-5xl\" in h1_element.attrs['class']\n    assert \"font-bold\" in h1_element.attrs['class']\n    assert h1_element.children[0] == \"Box Office News!\"\n    \n    # Verify P\n    p_element = content_div.children[1]\n    assert p_element.tag == \"p\"\n    assert \"py-6\" in p_element.attrs['class']\n    \n    # Verify Button\n    button_element = content_div.children[2]\n    assert button_element.tag == \"button\"\n    assert \"btn\" in button_element.attrs['class']\n    assert \"btn-primary\" in button_element.attrs['class']\n    assert button_element.children[0] == \"Get Started\"\n    \n    # Hero with figure but reverse order\n    hero_with_figure_reverse = Div(\n        Div(\n            Img(\n                src=\"https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp\",\n                cls=combine_classes(max_w.sm, rounded.lg, shadow._2xl)\n            ),\n            Div(\n                H1(\"Box Office News!\", cls=combine_classes(font_size._5xl, font_weight.bold)),\n                P(\n                    \"Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.\",\n                    cls=str(p.y._6)\n                ),\n                Button(\"Get Started\", cls=combine_classes(btn, btn_colors.primary))\n            ),\n            cls=combine_classes(hero_content, flex.col, flex.row_reverse.lg)\n        ),\n        cls=combine_classes(hero, bg_dui.base_200, min_h.screen)\n    )\n    \n    # Verify reverse order structure\n    assert \"hero\" in hero_with_figure_reverse.attrs['class']\n    assert \"bg-base-200\" in hero_with_figure_reverse.attrs['class']\n    assert \"min-h-screen\" in hero_with_figure_reverse.attrs['class']\n    \n    # Verify hero-content with reverse\n    hero_content_reverse = hero_with_figure_reverse.children[0]\n    assert \"hero-content\" in hero_content_reverse.attrs['class']\n    assert \"flex-col\" in hero_content_reverse.attrs['class']\n    assert \"lg:flex-row-reverse\" in hero_content_reverse.attrs['class']\n    \n    return Div(hero_with_figure, hero_with_figure_reverse)\n\n# Run the tests\ntest_hero_with_figure_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"hero bg-base-200 min-h-screen\"&gt;\n    &lt;div class=\"hero-content flex-col lg:flex-row\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp\" class=\"max-w-sm rounded-lg shadow-2xl\"&gt;      &lt;div&gt;\n        &lt;h1 class=\"text-5xl font-bold\"&gt;Box Office News!&lt;/h1&gt;\n        &lt;p class=\"py-6\"&gt;Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.&lt;/p&gt;\n&lt;button class=\"btn btn-primary\"&gt;Get Started&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"hero bg-base-200 min-h-screen\"&gt;\n    &lt;div class=\"hero-content flex-col lg:flex-row-reverse\"&gt;\n&lt;img src=\"https://img.daisyui.com/images/stock/photo-1635805737707-575885ab0820.webp\" class=\"max-w-sm rounded-lg shadow-2xl\"&gt;      &lt;div&gt;\n        &lt;h1 class=\"text-5xl font-bold\"&gt;Box Office News!&lt;/h1&gt;\n        &lt;p class=\"py-6\"&gt;Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.&lt;/p&gt;\n&lt;button class=\"btn btn-primary\"&gt;Get Started&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_hero_with_figure_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_hero_with_form_fasthtml_examples\n\n test_hero_with_form_fasthtml_examples ()\n\nTest hero with form example from daisyUI v5 documentation.\n\n\nExported source\ndef test_hero_with_form_fasthtml_examples():\n    \"\"\"Test hero with form example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H1, P, Button, Input, Label, Fieldset, A\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h, max_w, w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, text_align\n    from cjm_fasthtml_tailwind.utilities.spacing import p, m\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, shrink\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body\n    from cjm_fasthtml_daisyui.components.data_input.text_input import text_input \n    from cjm_fasthtml_daisyui.components.data_input.label import label\n    from cjm_fasthtml_daisyui.components.navigation.link import link, link_styles\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset\n    \n    # Hero with form\n    hero_with_form = Div(\n        Div(\n            Div(\n                H1(\"Login now!\", cls=combine_classes(font_size._5xl, font_weight.bold)),\n                P(\n                    \"Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.\",\n                    cls=str(p.y._6)\n                ),\n                cls=combine_classes(text_align.center, text_align.left.lg)\n            ),\n            Div(\n                Div(\n                    Fieldset(\n                        Label(\"Email\", cls=str(label)),\n                        Input(type=\"email\", placeholder=\"Email\", cls=str(text_input)),\n                        Label(\"Password\", cls=str(label)),\n                        Input(type=\"password\", placeholder=\"Password\", cls=str(text_input)),\n                        Div(\n                            A(\"Forgot password?\", cls=combine_classes(link, link_styles.hover))\n                        ),\n                        Button(\"Login\", cls=combine_classes(btn, btn_colors.neutral, m.t._4)),\n                        cls=str(fieldset)\n                    ),\n                    cls=str(card_body)\n                ),\n                cls=combine_classes(card, bg_dui.base_100, w.full, max_w.sm, shrink._0, shadow._2xl)\n            ),\n            cls=combine_classes(hero_content, flex.col, flex.row_reverse.lg)\n        ),\n        cls=combine_classes(hero, bg_dui.base_200, min_h.screen)\n    )\n    \n    # Verify structure\n    assert \"hero\" in hero_with_form.attrs['class']\n    assert \"bg-base-200\" in hero_with_form.attrs['class']\n    assert \"min-h-screen\" in hero_with_form.attrs['class']\n    \n    # Verify hero-content\n    hero_content_div = hero_with_form.children[0]\n    assert \"hero-content\" in hero_content_div.attrs['class']\n    assert \"flex-col\" in hero_content_div.attrs['class']\n    assert \"lg:flex-row-reverse\" in hero_content_div.attrs['class']\n    \n    # Verify text content div\n    text_div = hero_content_div.children[0]\n    assert text_div.tag == \"div\"\n    assert \"text-center\" in text_div.attrs['class']\n    assert \"lg:text-left\" in text_div.attrs['class']\n    \n    # Verify H1\n    h1_element = text_div.children[0]\n    assert h1_element.tag == \"h1\"\n    assert \"text-5xl\" in h1_element.attrs['class']\n    assert \"font-bold\" in h1_element.attrs['class']\n    assert h1_element.children[0] == \"Login now!\"\n    \n    # Verify P\n    p_element = text_div.children[1]\n    assert p_element.tag == \"p\"\n    assert \"py-6\" in p_element.attrs['class']\n    \n    # Verify card\n    card_div = hero_content_div.children[1]\n    assert \"card\" in card_div.attrs['class']\n    assert \"bg-base-100\" in card_div.attrs['class']\n    assert \"w-full\" in card_div.attrs['class']\n    assert \"max-w-sm\" in card_div.attrs['class']\n    assert \"shrink-0\" in card_div.attrs['class']\n    assert \"shadow-2xl\" in card_div.attrs['class']\n    \n    # Verify card body\n    card_body_div = card_div.children[0]\n    assert \"card-body\" in card_body_div.attrs['class']\n    \n    # Verify fieldset\n    fieldset_element = card_body_div.children[0]\n    assert fieldset_element.tag == \"fieldset\"\n    assert fieldset_element.attrs['class'] == \"fieldset\"\n    \n    # Verify first label and input (Email)\n    assert fieldset_element.children[0].tag == \"label\"\n    assert \"label\" in fieldset_element.children[0].attrs['class']\n    assert fieldset_element.children[0].children[0] == \"Email\"\n    \n    assert fieldset_element.children[1].tag == \"input\"\n    assert fieldset_element.children[1].attrs['type'] == \"email\"\n    assert \"input\" in fieldset_element.children[1].attrs['class']\n    assert fieldset_element.children[1].attrs['placeholder'] == \"Email\"\n    \n    # Verify second label and input (Password)\n    assert fieldset_element.children[2].tag == \"label\"\n    assert \"label\" in fieldset_element.children[2].attrs['class']\n    assert fieldset_element.children[2].children[0] == \"Password\"\n    \n    assert fieldset_element.children[3].tag == \"input\"\n    assert fieldset_element.children[3].attrs['type'] == \"password\"\n    assert \"input\" in fieldset_element.children[3].attrs['class']\n    assert fieldset_element.children[3].attrs['placeholder'] == \"Password\"\n    \n    # Verify forgot password link\n    link_div = fieldset_element.children[4]\n    assert link_div.tag == \"div\"\n    assert link_div.children[0].tag == \"a\"\n    assert \"link\" in link_div.children[0].attrs['class']\n    assert \"link-hover\" in link_div.children[0].attrs['class']\n    assert link_div.children[0].children[0] == \"Forgot password?\"\n    \n    # Verify login button\n    login_button = fieldset_element.children[5]\n    assert login_button.tag == \"button\"\n    assert \"btn\" in login_button.attrs['class']\n    assert \"btn-neutral\" in login_button.attrs['class']\n    assert \"mt-4\" in login_button.attrs['class']\n    assert login_button.children[0] == \"Login\"\n    \n    return Div(hero_with_form)\n\n# Run the tests\ntest_hero_with_form_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"hero bg-base-200 min-h-screen\"&gt;\n    &lt;div class=\"hero-content flex-col lg:flex-row-reverse\"&gt;\n      &lt;div class=\"text-center lg:text-left\"&gt;\n        &lt;h1 class=\"text-5xl font-bold\"&gt;Login now!&lt;/h1&gt;\n        &lt;p class=\"py-6\"&gt;Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;div class=\"card bg-base-100 w-full max-w-sm shrink-0 shadow-2xl\"&gt;\n        &lt;div class=\"card-body\"&gt;\n&lt;fieldset class=\"fieldset\"&gt;&lt;label class=\"label\"&gt;Email&lt;/label&gt;            &lt;input type=\"email\" placeholder=\"Email\" class=\"input\"&gt;\n&lt;label class=\"label\"&gt;Password&lt;/label&gt;            &lt;input type=\"password\" placeholder=\"Password\" class=\"input\"&gt;\n            &lt;div&gt;\n&lt;a href=\"#\" class=\"link link-hover\"&gt;Forgot password?&lt;/a&gt;            &lt;/div&gt;\n&lt;button class=\"btn btn-neutral mt-4\"&gt;Login&lt;/button&gt;&lt;/fieldset&gt;        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_hero_with_form_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_hero_with_overlay_fasthtml_examples\n\n test_hero_with_overlay_fasthtml_examples ()\n\nTest hero with overlay image example from daisyUI v5 documentation.\n\n\nExported source\ndef test_hero_with_overlay_fasthtml_examples():\n    \"\"\"Test hero with overlay image example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, H1, P, Button\n    from cjm_fasthtml_tailwind.utilities.sizing import min_h, max_w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color, text_align\n    from cjm_fasthtml_tailwind.utilities.spacing import m\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors\n    \n    # Hero with overlay image\n    hero_with_overlay = Div(\n        Div(cls=str(hero_overlay)),\n        Div(\n            Div(\n                H1(\"Hello there\", cls=combine_classes(m.b._5, font_size._5xl, font_weight.bold)),\n                P(\n                    \"Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.\",\n                    cls=str(m.b._5)\n                ),\n                Button(\"Get Started\", cls=combine_classes(btn, btn_colors.primary)),\n                cls=str(max_w.md)\n            ),\n            cls=combine_classes(hero_content, text_dui.neutral_content, text_align.center)\n        ),\n        cls=combine_classes(hero, min_h.screen),\n        style=\"background-image: url(https://img.daisyui.com/images/stock/photo-1507358522600-9f71e620c44e.webp);\"\n    )\n    \n    # Verify structure\n    assert \"hero\" in hero_with_overlay.attrs['class']\n    assert \"min-h-screen\" in hero_with_overlay.attrs['class']\n    assert hero_with_overlay.attrs['style'] == \"background-image: url(https://img.daisyui.com/images/stock/photo-1507358522600-9f71e620c44e.webp);\"\n    \n    # Verify hero-overlay\n    hero_overlay_div = hero_with_overlay.children[0]\n    assert \"hero-overlay\" in hero_overlay_div.attrs['class']\n    \n    # Verify hero-content\n    hero_content_div = hero_with_overlay.children[1]\n    assert \"hero-content\" in hero_content_div.attrs['class']\n    assert \"text-neutral-content\" in hero_content_div.attrs['class']\n    assert \"text-center\" in hero_content_div.attrs['class']\n    \n    # Verify inner content container\n    content_container = hero_content_div.children[0]\n    assert \"max-w-md\" in content_container.attrs['class']\n    \n    # Verify H1\n    h1_element = content_container.children[0]\n    assert h1_element.tag == \"h1\"\n    assert \"mb-5\" in h1_element.attrs['class']\n    assert \"text-5xl\" in h1_element.attrs['class']\n    assert \"font-bold\" in h1_element.attrs['class']\n    assert h1_element.children[0] == \"Hello there\"\n    \n    # Verify P\n    p_element = content_container.children[1]\n    assert p_element.tag == \"p\"\n    assert \"mb-5\" in p_element.attrs['class']\n    assert \"Provident cupiditate voluptatem et in\" in p_element.children[0]\n    \n    # Verify Button\n    button_element = content_container.children[2]\n    assert button_element.tag == \"button\"\n    assert \"btn\" in button_element.attrs['class']\n    assert \"btn-primary\" in button_element.attrs['class']\n    assert button_element.children[0] == \"Get Started\"\n    \n    return Div(hero_with_overlay)\n\n# Run the tests\ntest_hero_with_overlay_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"hero min-h-screen\" style=\"background-image: url(https://img.daisyui.com/images/stock/photo-1507358522600-9f71e620c44e.webp);\"&gt;\n    &lt;div class=\"hero-overlay\"&gt;&lt;/div&gt;\n    &lt;div class=\"hero-content text-neutral-content text-center\"&gt;\n      &lt;div class=\"max-w-md\"&gt;\n        &lt;h1 class=\"mb-5 text-5xl font-bold\"&gt;Hello there&lt;/h1&gt;\n        &lt;p class=\"mb-5\"&gt;Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.&lt;/p&gt;\n&lt;button class=\"btn btn-primary\"&gt;Get Started&lt;/button&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_hero_with_overlay_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "layout",
      "hero"
    ]
  },
  {
    "objectID": "components/actions/swap.html",
    "href": "components/actions/swap.html",
    "title": "swap",
    "section": "",
    "text": "Base Swap Components\n\n\nExported source\nswap = SingleValueFactory(\"swap\", \"Swap container component\") # Swap container\nswap_on = SingleValueFactory(\"swap-on\", \"The child element that should be visible when checkbox is checked or when swap is active\") # Swap on state\nswap_off = SingleValueFactory(\"swap-off\", \"The child element that should be visible when checkbox is not checked or when swap is not active\") # Swap off state\nswap_indeterminate = SingleValueFactory(\"swap-indeterminate\", \"The child element that should be visible when checkbox is indeterminate\") # Swap indeterminate state\n\n\n\n\nSwap Styles and State\n\n\nExported source\nswap_styles = SimpleFactory(\n    {\n        \"rotate\": \"swap-rotate\",\n        \"flip\": \"swap-flip\",\n        \"active\": \"swap-active\"\n    },\n    \"Swap animation styles and active state\"\n) # Swap styles\n\n\n\n\nSwap Test Examples\n\nsource\n\n\ntest_swap_basic_examples\n\n test_swap_basic_examples ()\n\nTest basic swap utilities.\n\n\nExported source\ndef test_swap_basic_examples():\n    \"\"\"Test basic swap utilities.\"\"\"\n    assert str(swap) == \"swap\"\n    assert str(swap_on) == \"swap-on\"\n    assert str(swap_off) == \"swap-off\"\n    assert str(swap_indeterminate) == \"swap-indeterminate\"\n    \n    # With modifiers\n    assert str(swap.hover) == \"hover:swap\"\n    assert str(swap_on.md) == \"md:swap-on\"\n\n# Run the tests\ntest_swap_basic_examples()\n\n\n\nsource\n\n\ntest_swap_styles_examples\n\n test_swap_styles_examples ()\n\nTest swap style utilities.\n\n\nExported source\ndef test_swap_styles_examples():\n    \"\"\"Test swap style utilities.\"\"\"\n    assert str(swap_styles.rotate) == \"swap-rotate\"\n    assert str(swap_styles.flip) == \"swap-flip\"\n    assert str(swap_styles.active) == \"swap-active\"\n\n# Run the tests\ntest_swap_styles_examples()\n\n\n\nsource\n\n\ntest_swap_basic_fasthtml_examples\n\n test_swap_basic_fasthtml_examples ()\n\nTest basic swap examples including text and icon swaps.\n\n\nExported source\ndef test_swap_basic_fasthtml_examples():\n    \"\"\"Test basic swap examples including text and icon swaps.\"\"\"\n    from fasthtml.common import Label, Input, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    \n    # Basic text swap\n    text_swap = Label(\n        Input(type=\"checkbox\"),\n        Div(\"ON\", cls=str(swap_on)),\n        Div(\"OFF\", cls=str(swap_off)),\n        cls=str(swap)\n    )\n    assert text_swap.tag == \"label\"\n    assert \"swap\" in text_swap.attrs['class']\n    assert text_swap.children[0].tag == \"input\"\n    assert text_swap.children[0].attrs['type'] == \"checkbox\"\n    assert \"swap-on\" in text_swap.children[1].attrs['class']\n    assert \"swap-off\" in text_swap.children[2].attrs['class']\n    \n    # Swap volume icons\n    volume_on_svg = Svg(\n        Path(\n            d=\"M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z\"\n        ),\n        cls=combine_classes(swap_on, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"48\",\n        height=\"48\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    volume_off_svg = Svg(\n        Path(\n            d=\"M3,9H7L12,4V20L7,15H3V9M16.59,12L14,9.41L15.41,8L18,10.59L20.59,8L22,9.41L19.41,12L22,14.59L20.59,16L18,13.41L15.41,16L14,14.59L16.59,12Z\"\n        ),\n        cls=combine_classes(swap_off, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"48\",\n        height=\"48\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    volume_swap = Label(\n        Input(type=\"checkbox\"),\n        volume_on_svg,\n        volume_off_svg,\n        cls=str(swap)\n    )\n    assert len(volume_swap.children) == 3\n    assert volume_swap.children[0].tag == \"input\"\n    assert volume_swap.children[1].tag == \"svg\"\n    assert volume_swap.children[2].tag == \"svg\"\n    assert \"swap-on\" in volume_swap.children[1].attrs['class']\n    assert \"swap-off\" in volume_swap.children[2].attrs['class']\n    assert \"fill-current\" in volume_swap.children[1].attrs['class']\n    assert \"fill-current\" in volume_swap.children[2].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        text_swap,\n        volume_swap\n    )\n\n# Run the tests\ntest_swap_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"swap\"&gt;    &lt;input type=\"checkbox\"&gt;\n    &lt;div class=\"swap-on\"&gt;ON&lt;/div&gt;\n    &lt;div class=\"swap-off\"&gt;OFF&lt;/div&gt;\n&lt;/label&gt;&lt;label class=\"swap\"&gt;    &lt;input type=\"checkbox\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"48\" width=\"48\" class=\"swap-on fill-current\"&gt;&lt;path d=\"M14,3.23V5.29C16.89,6.15 19,8.83 19,12C19,15.17 16.89,17.84 14,18.7V20.77C18,19.86 21,16.28 21,12C21,7.72 18,4.14 14,3.23M16.5,12C16.5,10.23 15.5,8.71 14,7.97V16C15.5,15.29 16.5,13.76 16.5,12M3,9V15H7L12,20V4L7,9H3Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"48\" width=\"48\" class=\"swap-off fill-current\"&gt;&lt;path d=\"M3,9H7L12,4V20L7,15H3V9M16.59,12L14,9.41L15.41,8L18,10.59L20.59,8L22,9.41L19.41,12L22,14.59L20.59,16L18,13.41L15.41,16L14,14.59L16.59,12Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_swap_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_swap_effects_fasthtml_examples\n\n test_swap_effects_fasthtml_examples ()\n\nTest swap examples with rotate and flip effects.\n\n\nExported source\ndef test_swap_effects_fasthtml_examples():\n    \"\"\"Test swap examples with rotate and flip effects.\"\"\"\n    from fasthtml.common import Label, Input, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    \n    # Create sun icon SVG\n    sun_icon = Svg(\n        Path(\n            d=\"M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z\"\n        ),\n        cls=combine_classes(swap_on, h._10, w._10, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create moon icon SVG\n    moon_icon = Svg(\n        Path(\n            d=\"M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z\"\n        ),\n        cls=combine_classes(swap_off, h._10, w._10, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Swap icons with rotate effect\n    rotate_swap = Label(\n        Input(type=\"checkbox\"),\n        sun_icon,\n        moon_icon,\n        cls=combine_classes(swap, swap_styles.rotate)\n    )\n    assert \"swap\" in rotate_swap.attrs['class']\n    assert \"swap-rotate\" in rotate_swap.attrs['class']\n    assert \"h-10\" in rotate_swap.children[1].attrs['class']\n    assert \"w-10\" in rotate_swap.children[1].attrs['class']\n    assert \"swap-on\" in rotate_swap.children[1].attrs['class']\n    assert \"swap-off\" in rotate_swap.children[2].attrs['class']\n    \n    # Swap icons with flip effect\n    flip_swap = Label(\n        Input(type=\"checkbox\"),\n        Div(\"😈\", cls=str(swap_on)),\n        Div(\"😇\", cls=str(swap_off)),\n        cls=combine_classes(swap, swap_styles.flip, font_size._9xl)\n    )\n    assert \"swap\" in flip_swap.attrs['class']\n    assert \"swap-flip\" in flip_swap.attrs['class']\n    assert \"text-9xl\" in flip_swap.attrs['class']\n    assert flip_swap.children[1].children[0] == \"😈\"\n    assert flip_swap.children[2].children[0] == \"😇\"\n    \n    # Return all elements in a Div\n    return Div(\n        rotate_swap,\n        flip_swap\n    )\n\n# Run the tests\ntest_swap_effects_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"swap swap-rotate\"&gt;    &lt;input type=\"checkbox\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"swap-on h-10 w-10 fill-current\"&gt;&lt;path d=\"M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"swap-off h-10 w-10 fill-current\"&gt;&lt;path d=\"M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/label&gt;&lt;label class=\"swap swap-flip text-9xl\"&gt;    &lt;input type=\"checkbox\"&gt;\n    &lt;div class=\"swap-on\"&gt;😈&lt;/div&gt;\n    &lt;div class=\"swap-off\"&gt;😇&lt;/div&gt;\n&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_swap_effects_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_swap_advanced_fasthtml_examples\n\n test_swap_advanced_fasthtml_examples ()\n\nTest advanced swap examples including hamburger button and class-based activation.\n\n\nExported source\ndef test_swap_advanced_fasthtml_examples():\n    \"\"\"Test advanced swap examples including hamburger button and class-based activation.\"\"\"\n    from fasthtml.common import Label, Input, Div\n    from fasthtml.svg import Svg, Path, Polygon\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_modifiers\n    \n    # Hamburger button\n    hamburger_icon = Svg(\n        Path(d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\"),\n        cls=combine_classes(swap_off, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"32\",\n        height=\"32\",\n        viewBox=\"0 0 512 512\"\n    )\n    \n    close_icon = Svg(\n        Polygon(\n            points=\"400 145.49 366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49\"\n        ),\n        cls=combine_classes(swap_on, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"32\",\n        height=\"32\",\n        viewBox=\"0 0 512 512\"\n    )\n    \n    hamburger_button = Label(\n        Input(type=\"checkbox\"),\n        hamburger_icon,\n        close_icon,\n        cls=combine_classes(btn, btn_modifiers.circle, swap, swap_styles.rotate)\n    )\n    assert \"btn\" in hamburger_button.attrs['class']\n    assert \"btn-circle\" in hamburger_button.attrs['class']\n    assert \"swap\" in hamburger_button.attrs['class']\n    assert \"swap-rotate\" in hamburger_button.attrs['class']\n    assert hamburger_button.children[1].tag == \"svg\"\n    assert hamburger_button.children[2].tag == \"svg\"\n    \n    # Test class-based activation (without checkbox)\n    # Inactive state\n    class_swap_inactive = Label(\n        Div(\"🥵\", cls=str(swap_on)),\n        Div(\"🥶\", cls=str(swap_off)),\n        cls=combine_classes(swap, font_size._6xl)\n    )\n    assert \"swap\" in class_swap_inactive.attrs['class']\n    assert \"text-6xl\" in class_swap_inactive.attrs['class']\n    assert len(class_swap_inactive.children) == 2  # No input element\n    assert class_swap_inactive.children[0].children[0] == \"🥵\"\n    assert class_swap_inactive.children[1].children[0] == \"🥶\"\n    \n    # Active state using class\n    class_swap_active = Label(\n        Div(\"🥳\", cls=str(swap_on)),\n        Div(\"😭\", cls=str(swap_off)),\n        cls=combine_classes(swap, swap_styles.active, font_size._6xl)\n    )\n    assert \"swap\" in class_swap_active.attrs['class']\n    assert \"swap-active\" in class_swap_active.attrs['class']\n    assert \"text-6xl\" in class_swap_active.attrs['class']\n    assert class_swap_active.children[0].children[0] == \"🥳\"\n    assert class_swap_active.children[1].children[0] == \"😭\"\n    \n    # Verify indeterminate state (from factory definition)\n    indeterminate_swap = Label(\n        Input(type=\"checkbox\", indeterminate=True),\n        Div(\"ON\", cls=str(swap_on)),\n        Div(\"OFF\", cls=str(swap_off)),\n        Div(\"INDETERMINATE\", cls=str(swap_indeterminate)),\n        cls=str(swap)\n    )\n    assert len(indeterminate_swap.children) == 4\n    assert \"swap-indeterminate\" in indeterminate_swap.children[3].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        hamburger_button,\n        class_swap_inactive,\n        class_swap_active,\n        indeterminate_swap\n    )\n\n# Run the tests\ntest_swap_advanced_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"btn btn-circle swap swap-rotate\"&gt;    &lt;input type=\"checkbox\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 512 512\" height=\"32\" width=\"32\" class=\"swap-off fill-current\"&gt;&lt;path d=\"M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 512 512\" height=\"32\" width=\"32\" class=\"swap-on fill-current\"&gt;&lt;polygon points=\"400 145.49 366.51 112 256 222.51 145.49 112 112 145.49 222.51 256 112 366.51 145.49 400 256 289.49 366.51 400 400 366.51 289.49 256 400 145.49\"&gt;&lt;/polygon&gt;&lt;/svg&gt;&lt;/label&gt;&lt;label class=\"swap text-6xl\"&gt;    &lt;div class=\"swap-on\"&gt;🥵&lt;/div&gt;\n    &lt;div class=\"swap-off\"&gt;🥶&lt;/div&gt;\n&lt;/label&gt;&lt;label class=\"swap swap-active text-6xl\"&gt;    &lt;div class=\"swap-on\"&gt;🥳&lt;/div&gt;\n    &lt;div class=\"swap-off\"&gt;😭&lt;/div&gt;\n&lt;/label&gt;&lt;label class=\"swap\"&gt;    &lt;input type=\"checkbox\" indeterminate&gt;\n    &lt;div class=\"swap-on\"&gt;ON&lt;/div&gt;\n    &lt;div class=\"swap-off\"&gt;OFF&lt;/div&gt;\n    &lt;div class=\"swap-indeterminate\"&gt;INDETERMINATE&lt;/div&gt;\n&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_swap_advanced_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "actions",
      "swap"
    ]
  },
  {
    "objectID": "components/actions/modal.html",
    "href": "components/actions/modal.html",
    "title": "modal",
    "section": "",
    "text": "Base Modal Components\n\n\nExported source\nmodal = SingleValueFactory(\"modal\", \"Modal container component\") # Modal container\nmodal_box = SingleValueFactory(\"modal-box\", \"The content part of modal\") # Modal content box\nmodal_action = SingleValueFactory(\"modal-action\", \"Actions part of modal (buttons, etc.)\") # Modal actions\nmodal_backdrop = SingleValueFactory(\"modal-backdrop\", \"Label that covers the page when modal is open\") # Modal backdrop\nmodal_toggle = SingleValueFactory(\"modal-toggle\", \"Hidden checkbox that controls the state of modal\") # Modal toggle\n\n\n\n\nModal Placement\n\n\nExported source\nmodal_placement = SimpleFactory(\n    {\n        \"top\": \"modal-top\",\n        \"middle\": \"modal-middle\",\n        \"bottom\": \"modal-bottom\",\n        \"start\": \"modal-start\",\n        \"end\": \"modal-end\"\n    },\n    \"Modal placement options for positioning\"\n) # Modal placement options\n\n\n\n\nModal State\n\n\nExported source\nmodal_open = SingleValueFactory(\"modal-open\", \"Keeps the modal open (you can add this class using JS)\") # Modal open state\n\n\n\n\nModal Test Examples\n\nsource\n\n\ntest_modal_basic_examples\n\n test_modal_basic_examples ()\n\nTest basic modal utilities.\n\n\nExported source\ndef test_modal_basic_examples():\n    \"\"\"Test basic modal utilities.\"\"\"\n    assert str(modal) == \"modal\"\n    assert str(modal_box) == \"modal-box\"\n    assert str(modal_action) == \"modal-action\"\n    assert str(modal_backdrop) == \"modal-backdrop\"\n    assert str(modal_toggle) == \"modal-toggle\"\n    assert str(modal_open) == \"modal-open\"\n\n# Run the tests\ntest_modal_basic_examples()\n\n\n\nsource\n\n\ntest_modal_placement_examples\n\n test_modal_placement_examples ()\n\nTest modal placement options.\n\n\nExported source\ndef test_modal_placement_examples():\n    \"\"\"Test modal placement options.\"\"\"\n    assert str(modal_placement.top) == \"modal-top\"\n    assert str(modal_placement.middle) == \"modal-middle\"\n    assert str(modal_placement.bottom) == \"modal-bottom\"\n    assert str(modal_placement.start) == \"modal-start\"\n    assert str(modal_placement.end) == \"modal-end\"\n\n# Run the tests\ntest_modal_placement_examples()\n\n\n\nsource\n\n\ntest_modal_dialog_fasthtml_examples\n\n test_modal_dialog_fasthtml_examples ()\n\nTest modal examples using HTML dialog element (recommended method).\n\n\nExported source\ndef test_modal_dialog_fasthtml_examples():\n    \"\"\"Test modal examples using HTML dialog element (recommended method).\"\"\"\n    from fasthtml.common import Dialog, Div, Button, H3, P, Form\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.sizing import w, max_w\n    from cjm_fasthtml_tailwind.utilities.layout import position, right, top\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_styles\n    \n    # Basic dialog modal\n    dialog_modal = Dialog(\n        Div(\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"Press ESC key or click the button below to close\", cls=p.y._4),\n            Div(\n                Form(\n                    Button(\"Close\", cls=str(btn)),\n                    method=\"dialog\"\n                ),\n                cls=str(modal_action)\n            ),\n            cls=str(modal_box)\n        ),\n        id=\"my_modal_1\",\n        cls=str(modal)\n    )\n    assert dialog_modal.tag == \"dialog\"\n    assert dialog_modal.attrs['id'] == \"my_modal_1\"\n    assert \"modal\" in dialog_modal.attrs['class']\n    assert \"modal-box\" in dialog_modal.children[0].attrs['class']\n    assert \"modal-action\" in dialog_modal.children[0].children[2].attrs['class']\n    \n    # Dialog modal with backdrop (closes when clicked outside)\n    backdrop_modal = Dialog(\n        Div(\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"Press ESC key or click outside to close\", cls=p.y._4),\n            cls=str(modal_box)\n        ),\n        Form(\n            Button(\"close\"),\n            method=\"dialog\",\n            cls=str(modal_backdrop)\n        ),\n        id=\"my_modal_2\",\n        cls=str(modal)\n    )\n    assert \"modal-backdrop\" in backdrop_modal.children[1].attrs['class']\n    assert backdrop_modal.children[1].tag == \"form\"\n    assert backdrop_modal.children[1].attrs['method'] == \"dialog\"\n    \n    # Dialog modal with close button at corner\n    close_button_modal = Dialog(\n        Div(\n            Form(\n                Button(\n                    \"✕\",\n                    cls=combine_classes(\n                        btn,\n                        btn_sizes.sm,\n                        btn_modifiers.circle,\n                        btn_styles.ghost,\n                        position.absolute,\n                        right._2,\n                        top._2\n                    )\n                ),\n                method=\"dialog\"\n            ),\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"Press ESC key or click on ✕ button to close\", cls=p.y._4),\n            cls=str(modal_box)\n        ),\n        id=\"my_modal_3\",\n        cls=str(modal)\n    )\n    assert \"btn-sm\" in close_button_modal.children[0].children[0].children[0].attrs['class']\n    assert \"btn-circle\" in close_button_modal.children[0].children[0].children[0].attrs['class']\n    assert \"absolute\" in close_button_modal.children[0].children[0].children[0].attrs['class']\n    assert \"right-2\" in close_button_modal.children[0].children[0].children[0].attrs['class']\n    assert \"top-2\" in close_button_modal.children[0].children[0].children[0].attrs['class']\n    \n    # Dialog modal with custom width\n    wide_modal = Dialog(\n        Div(\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"Click the button below to close\", cls=p.y._4),\n            Div(\n                Form(\n                    Button(\"Close\", cls=str(btn)),\n                    method=\"dialog\"\n                ),\n                cls=str(modal_action)\n            ),\n            cls=combine_classes(modal_box, w(\"11/12\"), max_w._5xl)\n        ),\n        id=\"my_modal_4\",\n        cls=str(modal)\n    )\n    assert \"w-11/12\" in wide_modal.children[0].attrs['class']\n    assert \"max-w-5xl\" in wide_modal.children[0].attrs['class']\n    \n    # Responsive modal (bottom on mobile, middle on larger screens)\n    responsive_modal = Dialog(\n        Div(\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"Press ESC key or click the button below to close\", cls=p.y._4),\n            Div(\n                Form(\n                    Button(\"Close\", cls=str(btn)),\n                    method=\"dialog\"\n                ),\n                cls=str(modal_action)\n            ),\n            cls=str(modal_box)\n        ),\n        id=\"my_modal_5\",\n        cls=combine_classes(modal, modal_placement.bottom, modal_placement.middle.sm)\n    )\n    assert \"modal-bottom\" in responsive_modal.attrs['class']\n    assert \"sm:modal-middle\" in responsive_modal.attrs['class']\n    \n    # Test button triggers with onclick\n    trigger_button = Button(\n        \"open modal\",\n        cls=str(btn),\n        onclick=\"my_modal_1.showModal()\"\n    )\n    assert trigger_button.attrs['onclick'] == \"my_modal_1.showModal()\"\n    \n    # Return all elements in a Div\n    return Div(\n        trigger_button,\n        dialog_modal,\n        backdrop_modal,\n        close_button_modal,\n        wide_modal,\n        responsive_modal\n    )\n\n# Run the tests\ntest_modal_dialog_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;button onclick=\"my_modal_1.showModal()\" class=\"btn\"&gt;open modal&lt;/button&gt;&lt;dialog id=\"my_modal_1\" class=\"modal\"&gt;    &lt;div class=\"modal-box\"&gt;\n      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;Press ESC key or click the button below to close&lt;/p&gt;\n      &lt;div class=\"modal-action\"&gt;\n&lt;form enctype=\"multipart/form-data\" method=\"dialog\"&gt;&lt;button class=\"btn\"&gt;Close&lt;/button&gt;&lt;/form&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/dialog&gt;&lt;dialog id=\"my_modal_2\" class=\"modal\"&gt;    &lt;div class=\"modal-box\"&gt;\n      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;Press ESC key or click outside to close&lt;/p&gt;\n    &lt;/div&gt;\n&lt;form enctype=\"multipart/form-data\" method=\"dialog\" class=\"modal-backdrop\"&gt;&lt;button&gt;close&lt;/button&gt;&lt;/form&gt;&lt;/dialog&gt;&lt;dialog id=\"my_modal_3\" class=\"modal\"&gt;    &lt;div class=\"modal-box\"&gt;\n&lt;form enctype=\"multipart/form-data\" method=\"dialog\"&gt;&lt;button class=\"btn btn-sm btn-circle btn-ghost absolute right-2 top-2\"&gt;✕&lt;/button&gt;&lt;/form&gt;      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;Press ESC key or click on ✕ button to close&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/dialog&gt;&lt;dialog id=\"my_modal_4\" class=\"modal\"&gt;    &lt;div class=\"modal-box w-11/12 max-w-5xl\"&gt;\n      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;Click the button below to close&lt;/p&gt;\n      &lt;div class=\"modal-action\"&gt;\n&lt;form enctype=\"multipart/form-data\" method=\"dialog\"&gt;&lt;button class=\"btn\"&gt;Close&lt;/button&gt;&lt;/form&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/dialog&gt;&lt;dialog id=\"my_modal_5\" class=\"modal modal-bottom sm:modal-middle\"&gt;    &lt;div class=\"modal-box\"&gt;\n      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;Press ESC key or click the button below to close&lt;/p&gt;\n      &lt;div class=\"modal-action\"&gt;\n&lt;form enctype=\"multipart/form-data\" method=\"dialog\"&gt;&lt;button class=\"btn\"&gt;Close&lt;/button&gt;&lt;/form&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/dialog&gt;&lt;/div&gt;\n\n\n\ntest_func = test_modal_dialog_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_modal_checkbox_fasthtml_examples\n\n test_modal_checkbox_fasthtml_examples ()\n\nTest modal examples using checkbox method (legacy).\n\n\nExported source\ndef test_modal_checkbox_fasthtml_examples():\n    \"\"\"Test modal examples using checkbox method (legacy).\"\"\"\n    from fasthtml.common import Label, Input, Div, H3, P\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_styles\n    \n    # Basic checkbox modal components\n    checkbox_trigger = Label(\"open modal\", for_=\"my_modal_6\", cls=str(btn))\n    checkbox_input = Input(type=\"checkbox\", id=\"my_modal_6\", cls=str(modal_toggle))\n    checkbox_modal = Div(\n        Div(\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"This modal works with a hidden checkbox!\", cls=p.y._4),\n            Div(\n                Label(\"Close!\", for_=\"my_modal_6\", cls=str(btn)),\n                cls=str(modal_action)\n            ),\n            cls=str(modal_box)\n        ),\n        cls=str(modal),\n        role=\"dialog\"\n    )\n    \n    # Verify checkbox modal structure\n    assert checkbox_trigger.attrs['for-'] == \"my_modal_6\"\n    assert checkbox_trigger.attrs['class'] == \"btn\"\n    assert checkbox_input.attrs['type'] == \"checkbox\"\n    assert checkbox_input.attrs['id'] == \"my_modal_6\"\n    assert \"modal-toggle\" in checkbox_input.attrs['class']\n    assert checkbox_modal.attrs['role'] == \"dialog\"\n    assert \"modal\" in checkbox_modal.attrs['class']\n    \n    # Checkbox modal that closes when clicked outside\n    backdrop_checkbox_trigger = Label(\"open modal\", for_=\"my_modal_7\", cls=str(btn))\n    backdrop_checkbox_input = Input(type=\"checkbox\", id=\"my_modal_7\", cls=str(modal_toggle))\n    backdrop_checkbox_modal = Div(\n        Div(\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"This modal works with a hidden checkbox!\", cls=p.y._4),\n            cls=str(modal_box)\n        ),\n        Label(\"Close\", cls=str(modal_backdrop), for_=\"my_modal_7\"),\n        cls=str(modal),\n        role=\"dialog\"\n    )\n    \n    # Verify backdrop structure\n    assert backdrop_checkbox_modal.children[1].tag == \"label\"\n    assert \"modal-backdrop\" in backdrop_checkbox_modal.children[1].attrs['class']\n    assert backdrop_checkbox_modal.children[1].attrs['for-'] == \"my_modal_7\"\n    \n    # Full checkbox modal example\n    full_checkbox_example = [\n        checkbox_trigger,\n        checkbox_input,\n        checkbox_modal\n    ]\n    assert len(full_checkbox_example) == 3\n    assert full_checkbox_example[0].tag == \"label\"\n    assert full_checkbox_example[1].tag == \"input\"\n    assert full_checkbox_example[2].tag == \"div\"\n    \n    # Return all elements in a Div\n    return Div(\n        checkbox_trigger,\n        checkbox_input,\n        checkbox_modal,\n        backdrop_checkbox_trigger,\n        backdrop_checkbox_input,\n        backdrop_checkbox_modal\n    )\n\n# Run the tests\ntest_modal_checkbox_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label for-=\"my_modal_6\" class=\"btn\"&gt;open modal&lt;/label&gt;  &lt;input type=\"checkbox\" id=\"my_modal_6\" class=\"modal-toggle\" name=\"my_modal_6\"&gt;\n  &lt;div role=\"dialog\" class=\"modal\"&gt;\n    &lt;div class=\"modal-box\"&gt;\n      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;This modal works with a hidden checkbox!&lt;/p&gt;\n      &lt;div class=\"modal-action\"&gt;\n&lt;label for-=\"my_modal_6\" class=\"btn\"&gt;Close!&lt;/label&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;label for-=\"my_modal_7\" class=\"btn\"&gt;open modal&lt;/label&gt;  &lt;input type=\"checkbox\" id=\"my_modal_7\" class=\"modal-toggle\" name=\"my_modal_7\"&gt;\n  &lt;div role=\"dialog\" class=\"modal\"&gt;\n    &lt;div class=\"modal-box\"&gt;\n      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;This modal works with a hidden checkbox!&lt;/p&gt;\n    &lt;/div&gt;\n&lt;label for-=\"my_modal_7\" class=\"modal-backdrop\"&gt;Close&lt;/label&gt;  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_modal_checkbox_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_modal_anchor_fasthtml_examples\n\n test_modal_anchor_fasthtml_examples ()\n\nTest modal examples using anchor links (legacy method).\n\n\nExported source\ndef test_modal_anchor_fasthtml_examples():\n    \"\"\"Test modal examples using anchor links (legacy method).\"\"\"\n    from fasthtml.common import A, Div, H3, P\n    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_styles\n    \n    # Anchor link trigger\n    anchor_trigger = A(\"open modal\", href=\"#my_modal_8\", cls=str(btn))\n    \n    # Anchor modal\n    anchor_modal = Div(\n        Div(\n            H3(\"Hello!\", cls=combine_classes(font_size.lg, font_weight.bold)),\n            P(\"This modal works with anchor links\", cls=p.y._4),\n            Div(\n                A(\"Yay!\", href=\"#\", cls=str(btn)),\n                cls=str(modal_action)\n            ),\n            cls=str(modal_box)\n        ),\n        cls=str(modal),\n        role=\"dialog\",\n        id=\"my_modal_8\"\n    )\n    \n    # Verify anchor modal structure\n    assert anchor_trigger.attrs['href'] == \"#my_modal_8\"\n    assert anchor_trigger.attrs['class'] == \"btn\"\n    assert anchor_modal.attrs['id'] == \"my_modal_8\"\n    assert anchor_modal.attrs['role'] == \"dialog\"\n    assert \"modal\" in anchor_modal.attrs['class']\n    \n    # Verify the close button\n    close_link = anchor_modal.children[0].children[2].children[0]\n    assert close_link.tag == \"a\"\n    assert close_link.attrs['href'] == \"#\"\n    assert \"btn\" in close_link.attrs['class']\n    \n    # Test with :target pseudo-class (conceptual)\n    # Note: The actual :target CSS pseudo-class behavior happens in the browser\n    # when the URL fragment matches the element's ID\n    modal_with_target = Div(\n        anchor_trigger,\n        anchor_modal,\n        cls=\"modal-container\"\n    )\n    assert len(modal_with_target.children) == 2\n    assert modal_with_target.children[0].attrs['href'] == \"#my_modal_8\"\n    assert modal_with_target.children[1].attrs['id'] == \"my_modal_8\"\n    \n    # Return all elements in a Div\n    return Div(\n        anchor_trigger,\n        anchor_modal,\n    )\n\n# Run the tests\ntest_modal_anchor_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;a href=\"#my_modal_8\" class=\"btn\"&gt;open modal&lt;/a&gt;  &lt;div role=\"dialog\" id=\"my_modal_8\" class=\"modal\"&gt;\n    &lt;div class=\"modal-box\"&gt;\n      &lt;h3 class=\"text-lg font-bold\"&gt;Hello!&lt;/h3&gt;\n      &lt;p class=\"py-4\"&gt;This modal works with anchor links&lt;/p&gt;\n      &lt;div class=\"modal-action\"&gt;\n&lt;a href=\"#\" class=\"btn\"&gt;Yay!&lt;/a&gt;      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_modal_anchor_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "actions",
      "modal"
    ]
  },
  {
    "objectID": "components/actions/theme_controller.html",
    "href": "components/actions/theme_controller.html",
    "title": "theme controller",
    "section": "",
    "text": "Theme Controller Component\n\n\nExported source\ntheme_controller = SingleValueFactory(\n    \"theme-controller\", \n    \"For a checkbox or radio input that must change the page theme\"\n) # Theme controller component\n\n\n\n\nTheme Controller Test Examples\n\nsource\n\n\ntest_theme_controller_basic_examples\n\n test_theme_controller_basic_examples ()\n\nTest basic theme controller utility.\n\n\nExported source\ndef test_theme_controller_basic_examples():\n    \"\"\"Test basic theme controller utility.\"\"\"\n    assert str(theme_controller) == \"theme-controller\"\n    \n    # With modifiers\n    assert str(theme_controller.hover) == \"hover:theme-controller\"\n    assert str(theme_controller.dark) == \"dark:theme-controller\"\n\n# Run the tests\ntest_theme_controller_basic_examples()\n\n\n\nsource\n\n\ntest_theme_controller_basic_fasthtml_examples\n\n test_theme_controller_basic_fasthtml_examples ()\n\nTest basic theme controller examples with toggle and checkbox inputs.\n\n\nExported source\ndef test_theme_controller_basic_fasthtml_examples():\n    \"\"\"Test basic theme controller examples with toggle and checkbox inputs.\"\"\"\n    from fasthtml.common import Input, Label, Span, Div\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, items, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.interactivity import cursor\n    from cjm_fasthtml_daisyui.components.data_input.toggle import toggle\n    from cjm_fasthtml_daisyui.components.data_input.checkbox import checkbox\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\n    \n    # Basic toggle theme controller\n    toggle_theme = Input(\n        type=\"checkbox\",\n        value=\"synthwave\",\n        cls=combine_classes(toggle, theme_controller)\n    )\n    assert toggle_theme.attrs['type'] == \"checkbox\"\n    assert toggle_theme.attrs['value'] == \"synthwave\"\n    assert \"toggle\" in toggle_theme.attrs['class']\n    assert \"theme-controller\" in toggle_theme.attrs['class']\n    \n    # Checkbox theme controller\n    checkbox_theme = Input(\n        type=\"checkbox\",\n        value=\"synthwave\",\n        cls=combine_classes(checkbox, theme_controller)\n    )\n    assert \"checkbox\" in checkbox_theme.attrs['class']\n    assert \"theme-controller\" in checkbox_theme.attrs['class']\n    \n    # Toggle with text labels\n    toggle_with_text = Label(\n        Span(\"Current\", cls=\"label-text\"),\n        Input(\n            type=\"checkbox\",\n            value=\"synthwave\",\n            cls=combine_classes(toggle, theme_controller)\n        ),\n        Span(\"Synthwave\", cls=\"label-text\"),\n        cls=combine_classes(flex_display, cursor.pointer, gap._2)\n    )\n    assert toggle_with_text.tag == \"label\"\n    assert \"flex\" in toggle_with_text.attrs['class']\n    assert \"cursor-pointer\" in toggle_with_text.attrs['class']\n    assert \"gap-2\" in toggle_with_text.attrs['class']\n    assert toggle_with_text.children[1].attrs['type'] == \"checkbox\"\n    \n    # Toggle with icons inside (special toggle structure)\n    toggle_with_icons_inside = Label(\n        Input(\n            type=\"checkbox\",\n            value=\"synthwave\",\n            cls=str(theme_controller)\n        ),\n        # SVG icons would be children of the label\n        cls=combine_classes(toggle, text_dui.base_content)\n    )\n    assert \"toggle\" in toggle_with_icons_inside.attrs['class']\n    assert \"text-base-content\" in toggle_with_icons_inside.attrs['class']\n    assert toggle_with_icons_inside.children[0].attrs['value'] == \"synthwave\"\n    \n    # Return all elements in a Div\n    return Div(\n        toggle_theme,\n        checkbox_theme,\n        toggle_with_text,\n        toggle_with_icons_inside\n    )\n\n# Run the tests\ntest_theme_controller_basic_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;input type=\"checkbox\" value=\"synthwave\" class=\"toggle theme-controller\"&gt;\n  &lt;input type=\"checkbox\" value=\"synthwave\" class=\"checkbox theme-controller\"&gt;\n&lt;label class=\"flex cursor-pointer gap-2\"&gt;&lt;span class=\"label-text\"&gt;Current&lt;/span&gt;    &lt;input type=\"checkbox\" value=\"synthwave\" class=\"toggle theme-controller\"&gt;\n&lt;span class=\"label-text\"&gt;Synthwave&lt;/span&gt;&lt;/label&gt;&lt;label class=\"toggle text-base-content\"&gt;    &lt;input type=\"checkbox\" value=\"synthwave\" class=\"theme-controller\"&gt;\n&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_theme_controller_basic_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_theme_controller_swap_fasthtml_examples\n\n test_theme_controller_swap_fasthtml_examples ()\n\nTest theme controller examples using swap component.\n\n\nExported source\ndef test_theme_controller_swap_fasthtml_examples():\n    \"\"\"Test theme controller examples using swap component.\"\"\"\n    from fasthtml.common import Label, Input, Div\n    from fasthtml.svg import Svg, Path\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.svg import fill\n    from cjm_fasthtml_daisyui.components.actions.swap import swap, swap_on, swap_off, swap_styles\n    \n    # Create sun icon SVG\n    sun_icon = Svg(\n        Path(\n            d=\"M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z\"\n        ),\n        cls=combine_classes(swap_off, h._10, w._10, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Create moon icon SVG\n    moon_icon = Svg(\n        Path(\n            d=\"M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z\"\n        ),\n        cls=combine_classes(swap_on, h._10, w._10, fill.current),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 24 24\"\n    )\n    \n    # Theme controller using swap with rotate effect\n    swap_theme = Label(\n        Input(\n            type=\"checkbox\",\n            cls=str(theme_controller),\n            value=\"synthwave\"\n        ),\n        sun_icon,\n        moon_icon,\n        cls=combine_classes(swap, swap_styles.rotate)\n    )\n    assert swap_theme.tag == \"label\"\n    assert \"swap\" in swap_theme.attrs['class']\n    assert \"swap-rotate\" in swap_theme.attrs['class']\n    assert swap_theme.children[0].attrs['class'] == \"theme-controller\"\n    assert swap_theme.children[0].attrs['value'] == \"synthwave\"\n    assert swap_theme.children[1].tag == \"svg\"  # sun icon\n    assert swap_theme.children[2].tag == \"svg\"  # moon icon\n    assert \"swap-off\" in swap_theme.children[1].attrs['class']\n    assert \"swap-on\" in swap_theme.children[2].attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        swap_theme\n    )\n\n# Run the tests\ntest_theme_controller_swap_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"swap swap-rotate\"&gt;    &lt;input type=\"checkbox\" value=\"synthwave\" class=\"theme-controller\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"swap-off h-10 w-10 fill-current\"&gt;&lt;path d=\"M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" class=\"swap-on h-10 w-10 fill-current\"&gt;&lt;path d=\"M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/label&gt;&lt;/div&gt;\n\n\n\ntest_func = test_theme_controller_swap_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_theme_controller_radio_fasthtml_examples\n\n test_theme_controller_radio_fasthtml_examples ()\n\nTest theme controller examples using radio inputs.\n\n\nExported source\ndef test_theme_controller_radio_fasthtml_examples():\n    \"\"\"Test theme controller examples using radio inputs.\"\"\"\n    from fasthtml.common import Input, Label, Fieldset, Div\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, items, flex_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_tailwind.utilities.interactivity import cursor\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_input.radio import radio, radio_sizes\n    from cjm_fasthtml_daisyui.components.data_input.fieldset import fieldset\n    from cjm_fasthtml_daisyui.components.layout.join import join, join_item, join_directions\n    \n    # Radio button theme selector\n    radio_themes = Fieldset(\n        Label(\n            Input(\n                type=\"radio\",\n                name=\"theme-radios\",\n                cls=combine_classes(radio, radio_sizes.sm, theme_controller),\n                value=\"default\"\n            ),\n            \"Default\",\n            cls=combine_classes(flex_display, gap._2, cursor.pointer, items.center)\n        ),\n        Label(\n            Input(\n                type=\"radio\",\n                name=\"theme-radios\",\n                cls=combine_classes(radio, radio_sizes.sm, theme_controller),\n                value=\"retro\"\n            ),\n            \"Retro\",\n            cls=combine_classes(flex_display, gap._2, cursor.pointer, items.center)\n        ),\n        Label(\n            Input(\n                type=\"radio\",\n                name=\"theme-radios\",\n                cls=combine_classes(radio, radio_sizes.sm, theme_controller),\n                value=\"cyberpunk\"\n            ),\n            \"Cyberpunk\",\n            cls=combine_classes(flex_display, gap._2, cursor.pointer, items.center)\n        ),\n        Label(\n            Input(\n                type=\"radio\",\n                name=\"theme-radios\",\n                cls=combine_classes(radio, radio_sizes.sm, theme_controller),\n                value=\"valentine\"\n            ),\n            \"Valentine\",\n            cls=combine_classes(flex_display, gap._2, cursor.pointer, items.center)\n        ),\n        Label(\n            Input(\n                type=\"radio\",\n                name=\"theme-radios\",\n                cls=combine_classes(radio, radio_sizes.sm, theme_controller),\n                value=\"aqua\"\n            ),\n            \"Aqua\",\n            cls=combine_classes(flex_display, gap._2, cursor.pointer, items.center)\n        ),\n        cls=str(fieldset)\n    )\n    \n    # Verify radio button structure\n    assert radio_themes.tag == \"fieldset\"\n    for label in radio_themes.children:\n        assert label.tag == \"label\"\n        radio_input = label.children[0]\n        assert radio_input.tag == \"input\"\n        assert radio_input.attrs['type'] == \"radio\"\n        assert radio_input.attrs['name'] == \"theme-radios\"\n        assert \"radio\" in radio_input.attrs['class']\n        assert \"radio-sm\" in radio_input.attrs['class']\n        assert \"theme-controller\" in radio_input.attrs['class']\n    \n    # Theme controller as button group\n    button_themes = Div(\n        Input(\n            type=\"radio\",\n            name=\"theme-buttons\",\n            cls=combine_classes(btn, theme_controller, join_item),\n            aria_label=\"Default\",\n            value=\"default\"\n        ),\n        Input(\n            type=\"radio\",\n            name=\"theme-buttons\",\n            cls=combine_classes(btn, theme_controller, join_item),\n            aria_label=\"Retro\",\n            value=\"retro\"\n        ),\n        Input(\n            type=\"radio\",\n            name=\"theme-buttons\",\n            cls=combine_classes(btn, theme_controller, join_item),\n            aria_label=\"Cyberpunk\",\n            value=\"cyberpunk\"\n        ),\n        Input(\n            type=\"radio\",\n            name=\"theme-buttons\",\n            cls=combine_classes(btn, theme_controller, join_item),\n            aria_label=\"Valentine\",\n            value=\"valentine\"\n        ),\n        Input(\n            type=\"radio\",\n            name=\"theme-buttons\",\n            cls=combine_classes(btn, theme_controller, join_item),\n            aria_label=\"Aqua\",\n            value=\"aqua\"\n        ),\n        cls=combine_classes(join, join_directions.vertical)\n    )\n    \n    # Verify button group structure\n    assert \"join\" in button_themes.attrs['class']\n    assert \"join-vertical\" in button_themes.attrs['class']\n    for input_btn in button_themes.children:\n        assert input_btn.tag == \"input\"\n        assert input_btn.attrs['type'] == \"radio\"\n        assert input_btn.attrs['name'] == \"theme-buttons\"\n        assert \"btn\" in input_btn.attrs['class']\n        assert \"theme-controller\" in input_btn.attrs['class']\n        assert \"join-item\" in input_btn.attrs['class']\n        assert \"aria-label\" in input_btn.attrs\n    \n    # Return all elements in a Div\n    return Div(\n        radio_themes,\n        button_themes\n    )\n\n# Run the tests\ntest_theme_controller_radio_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;fieldset class=\"fieldset\"&gt;&lt;label class=\"flex gap-2 cursor-pointer items-center\"&gt;      &lt;input type=\"radio\" name=\"theme-radios\" value=\"default\" class=\"radio radio-sm theme-controller\"&gt;\nDefault&lt;/label&gt;&lt;label class=\"flex gap-2 cursor-pointer items-center\"&gt;      &lt;input type=\"radio\" name=\"theme-radios\" value=\"retro\" class=\"radio radio-sm theme-controller\"&gt;\nRetro&lt;/label&gt;&lt;label class=\"flex gap-2 cursor-pointer items-center\"&gt;      &lt;input type=\"radio\" name=\"theme-radios\" value=\"cyberpunk\" class=\"radio radio-sm theme-controller\"&gt;\nCyberpunk&lt;/label&gt;&lt;label class=\"flex gap-2 cursor-pointer items-center\"&gt;      &lt;input type=\"radio\" name=\"theme-radios\" value=\"valentine\" class=\"radio radio-sm theme-controller\"&gt;\nValentine&lt;/label&gt;&lt;label class=\"flex gap-2 cursor-pointer items-center\"&gt;      &lt;input type=\"radio\" name=\"theme-radios\" value=\"aqua\" class=\"radio radio-sm theme-controller\"&gt;\nAqua&lt;/label&gt;&lt;/fieldset&gt;  &lt;div class=\"join join-vertical\"&gt;\n    &lt;input type=\"radio\" name=\"theme-buttons\" aria-label=\"Default\" value=\"default\" class=\"btn theme-controller join-item\"&gt;\n    &lt;input type=\"radio\" name=\"theme-buttons\" aria-label=\"Retro\" value=\"retro\" class=\"btn theme-controller join-item\"&gt;\n    &lt;input type=\"radio\" name=\"theme-buttons\" aria-label=\"Cyberpunk\" value=\"cyberpunk\" class=\"btn theme-controller join-item\"&gt;\n    &lt;input type=\"radio\" name=\"theme-buttons\" aria-label=\"Valentine\" value=\"valentine\" class=\"btn theme-controller join-item\"&gt;\n    &lt;input type=\"radio\" name=\"theme-buttons\" aria-label=\"Aqua\" value=\"aqua\" class=\"btn theme-controller join-item\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_theme_controller_radio_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()\n\n\nsource\n\n\ntest_theme_controller_advanced_fasthtml_examples\n\n test_theme_controller_advanced_fasthtml_examples ()\n\nTest advanced theme controller examples including dropdown and custom styles.\n\n\nExported source\ndef test_theme_controller_advanced_fasthtml_examples():\n    \"\"\"Test advanced theme controller examples including dropdown and custom styles.\"\"\"\n    from fasthtml.common import Input, Label, Div, Ul, Li\n    from fasthtml.svg import Svg, Path, Circle, G\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.svg import fill, stroke, stroke_width\n    from cjm_fasthtml_tailwind.utilities.layout import z, display_tw\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.effects import shadow, opacity\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import justify, col_span, col_start, row_start\n    from cjm_fasthtml_tailwind.utilities.borders import border_color\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg\n    from cjm_fasthtml_tailwind.utilities.interactivity import cursor\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, flex_display\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_modifiers, btn_styles\n    from cjm_fasthtml_daisyui.components.actions.dropdown import dropdown, dropdown_content\n    from cjm_fasthtml_daisyui.components.data_input.toggle import toggle\n    \n    # Toggle with external icons\n    sun_svg = Svg(\n        Circle(cx=\"12\", cy=\"12\", r=\"5\"),\n        Path(d=\"M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4\"),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"20\",\n        height=\"20\",\n        viewBox=\"0 0 24 24\",\n        fill=\"none\",\n        stroke=\"currentColor\",\n        stroke_width=\"2\",\n        stroke_linecap=\"round\",\n        stroke_linejoin=\"round\"\n    )\n    \n    moon_svg = Svg(\n        Path(d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        width=\"20\",\n        height=\"20\",\n        viewBox=\"0 0 24 24\",\n        fill=\"none\",\n        stroke=\"currentColor\",\n        stroke_width=\"2\",\n        stroke_linecap=\"round\",\n        stroke_linejoin=\"round\"\n    )\n    \n    toggle_with_icons = Label(\n        sun_svg,\n        Input(\n            type=\"checkbox\",\n            value=\"synthwave\",\n            cls=combine_classes(toggle, theme_controller)\n        ),\n        moon_svg,\n        cls=combine_classes(flex_display, cursor.pointer, gap._2)\n    )\n    assert len(toggle_with_icons.children) == 3\n    assert toggle_with_icons.children[0].tag == \"svg\"\n    assert toggle_with_icons.children[1].tag == \"input\"\n    assert toggle_with_icons.children[2].tag == \"svg\"\n    \n    # Custom styled toggle (with Tailwind classes)\n    custom_toggle = Input(\n        type=\"checkbox\",\n        value=\"synthwave\",\n        cls=combine_classes(\n            toggle,\n            theme_controller,\n            col_span(2),\n            col_start(1),\n            row_start(1),\n            border_color.sky._400,\n            bg.amber._300,\n            \"[--tglbg:var(--color-sky-500)]\",\n            border_color.blue._800.checked,\n            bg.blue._800.checked,\n            \"checked:[--tglbg:var(--color-blue-900)]\"\n        )\n    )\n    assert \"toggle\" in custom_toggle.attrs['class']\n    assert \"theme-controller\" in custom_toggle.attrs['class']\n    assert \"border-sky-400\" in custom_toggle.attrs['class']\n    assert \"bg-amber-300\" in custom_toggle.attrs['class']\n    \n    # Theme controller dropdown\n    dropdown_icon = Svg(\n        Path(d=\"M1799 349l242 241-1017 1017L7 590l242-241 775 775 775-775z\"),\n        width=\"12px\",\n        height=\"12px\",\n        cls=combine_classes(display_tw.inline_block, h._2, w._2, fill.current, opacity._60),\n        xmlns=\"http://www.w3.org/2000/svg\",\n        viewBox=\"0 0 2048 2048\"\n    )\n    \n    theme_dropdown = Div(\n        Div(\n            \"Theme\",\n            dropdown_icon,\n            tabindex=\"0\",\n            role=\"button\",\n            cls=combine_classes(btn, m._1)\n        ),\n        Ul(\n            Li(\n                Input(\n                    type=\"radio\",\n                    name=\"theme-dropdown\",\n                    cls=combine_classes(\n                        theme_controller,\n                        w.full,\n                        btn,\n                        btn_sizes.sm,\n                        btn_modifiers.block,\n                        btn_styles.ghost,\n                        justify.start\n                    ),\n                    aria_label=\"Default\",\n                    value=\"default\"\n                )\n            ),\n            Li(\n                Input(\n                    type=\"radio\",\n                    name=\"theme-dropdown\",\n                    cls=combine_classes(\n                        theme_controller,\n                        w.full,\n                        btn,\n                        btn_sizes.sm,\n                        btn_modifiers.block,\n                        btn_styles.ghost,\n                        justify.start\n                    ),\n                    aria_label=\"Retro\",\n                    value=\"retro\"\n                )\n            ),\n            tabindex=\"0\",\n            cls=combine_classes(\n                dropdown_content,\n                bg_dui.base_300,\n                border_radius.box,\n                z._1,\n                w._52,\n                p._2,\n                shadow._2xl\n            )\n        ),\n        cls=combine_classes(dropdown)\n    )\n    \n    # Verify dropdown structure\n    assert \"dropdown\" in theme_dropdown.attrs['class']\n    dropdown_trigger = theme_dropdown.children[0]\n    assert \"btn\" in dropdown_trigger.attrs['class']\n    dropdown_menu = theme_dropdown.children[1]\n    assert \"dropdown-content\" in dropdown_menu.attrs['class']\n    assert dropdown_menu.tag == \"ul\"\n    \n    # Verify dropdown items\n    for li in dropdown_menu.children:\n        if hasattr(li, 'children') and len(li.children) &gt; 0:\n            radio = li.children[0]\n            assert radio.tag == \"input\"\n            assert radio.attrs['type'] == \"radio\"\n            assert \"theme-controller\" in radio.attrs['class']\n            assert \"w-full\" in radio.attrs['class']\n            assert \"btn-sm\" in radio.attrs['class']\n            assert \"btn-block\" in radio.attrs['class']\n    \n    # Return all elements in a Div\n    return Div(\n        toggle_with_icons,\n        custom_toggle,\n        theme_dropdown\n    )\n\n# Run the tests\ntest_theme_controller_advanced_fasthtml_examples()\n\n\n&lt;div&gt;\n&lt;label class=\"flex cursor-pointer gap-2\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"20\" width=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;circle r=\"5\" cx=\"12\" cy=\"12\"&gt;&lt;/circle&gt;&lt;path d=\"M12 1v2M12 21v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;input type=\"checkbox\" value=\"synthwave\" class=\"toggle theme-controller\"&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 24 24\" height=\"20\" width=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"&gt;&lt;path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/label&gt;  &lt;input type=\"checkbox\" value=\"synthwave\" class=\"toggle theme-controller col-span-2 col-start-1 row-start-1 border-sky-400 bg-amber-300 [--tglbg:var(--color-sky-500)] checked:border-blue-800 checked:bg-blue-800 checked:[--tglbg:var(--color-blue-900)]\"&gt;\n  &lt;div class=\"dropdown\"&gt;\n    &lt;div tabindex=\"0\" role=\"button\" class=\"btn m-1\"&gt;\nTheme&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewbox=\"0 0 2048 2048\" height=\"12px\" width=\"12px\" class=\"inline-block h-2 w-2 fill-current opacity-60\"&gt;&lt;path d=\"M1799 349l242 241-1017 1017L7 590l242-241 775 775 775-775z\"&gt;&lt;/path&gt;&lt;/svg&gt;    &lt;/div&gt;\n    &lt;ul tabindex=\"0\" class=\"dropdown-content bg-base-300 rounded-box z-1 w-52 p-2 shadow-2xl\"&gt;\n      &lt;li&gt;\n        &lt;input type=\"radio\" name=\"theme-dropdown\" aria-label=\"Default\" value=\"default\" class=\"theme-controller w-full btn btn-sm btn-block btn-ghost justify-start\"&gt;\n      &lt;/li&gt;\n      &lt;li&gt;\n        &lt;input type=\"radio\" name=\"theme-dropdown\" aria-label=\"Retro\" value=\"retro\" class=\"theme-controller w-full btn btn-sm btn-block btn-ghost justify-start\"&gt;\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_theme_controller_advanced_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "components",
      "actions",
      "theme controller"
    ]
  },
  {
    "objectID": "cli/cli_config.html",
    "href": "cli/cli_config.html",
    "title": "DaisyUI CLI Configuration",
    "section": "",
    "text": "Define the configuration specific to the DaisyUI library:\n\nsource\n\n\n\n get_daisyui_config ()\n\nGet configuration for cjm-fasthtml-daisyui library.\nThis configuration defines: - Module discovery paths (components and utilities) - Core utilities specific to DaisyUI - CLI command name - Import paths",
    "crumbs": [
      "cli",
      "DaisyUI CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#daisyui-configuration",
    "href": "cli/cli_config.html#daisyui-configuration",
    "title": "DaisyUI CLI Configuration",
    "section": "",
    "text": "Define the configuration specific to the DaisyUI library:\n\nsource\n\n\n\n get_daisyui_config ()\n\nGet configuration for cjm-fasthtml-daisyui library.\nThis configuration defines: - Module discovery paths (components and utilities) - Core utilities specific to DaisyUI - CLI command name - Import paths",
    "crumbs": [
      "cli",
      "DaisyUI CLI Configuration"
    ]
  },
  {
    "objectID": "cli/cli_config.html#export",
    "href": "cli/cli_config.html#export",
    "title": "DaisyUI CLI Configuration",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "cli",
      "DaisyUI CLI Configuration"
    ]
  },
  {
    "objectID": "utilities/semantic_colors.html",
    "href": "utilities/semantic_colors.html",
    "title": "Semantic Color Utility Classes",
    "section": "",
    "text": "Exported source\n# Background color with semantic colors\nbg_dui = ColoredFactoryDaisyUI(\"bg\", \"Background color utilities for controlling an element's semantic background color\") # The semantic background color factory\n\n# Text color with semantic colors  \ntext_dui = ColoredFactoryDaisyUI(\"text\", \"Text color utilities for controlling an element's semantic text color\") # The semantic text color factory\n\n# Border color with semantic colors\nborder_dui = ColoredFactoryDaisyUI(\"border\", \"Border color utilities for controlling an element's semantic border color\") # The semantic border color factory\n\n# Ring color with semantic colors\nring_dui = ColoredFactoryDaisyUI(\"ring\", \"Ring color utilities for controlling an element's semantic ring color\") # The semantic ring color factory\n\n# Fill color with semantic colors (for SVG)\nfill_dui = ColoredFactoryDaisyUI(\"fill\", \"Fill color utilities for controlling SVG element's semantic fill color\") # The semantic fill color factory\n\n# Stroke color with semantic colors (for SVG)  \nstroke_dui = ColoredFactoryDaisyUI(\"stroke\", \"Stroke color utilities for controlling SVG element's semantic stroke color\") # The semantic stroke color factory\n\n# Caret color with semantic colors\ncaret_dui = ColoredFactoryDaisyUI(\"caret\", \"Caret color utilities for controlling the caret's semantic color\") # The semantic caret color factory\n\n# Accent color with semantic colors\naccent_dui = ColoredFactoryDaisyUI(\"accent\", \"Accent color utilities for controlling form accent semantic color\") # The semantic accent color factory\n\n# Shadow color with semantic colors\nshadow_dui = ColoredFactoryDaisyUI(\"shadow\", \"Shadow color utilities for controlling shadow's semantic color\") # The semantic shadow color factory\n\n# Outline color with semantic colors\noutline_dui = ColoredFactoryDaisyUI(\"outline\", \"Outline color utilities for controlling outline's semantic color\") # The semantic outline color factory\n\n# Text decoration color with semantic colors\ndecoration_dui = ColoredFactoryDaisyUI(\"decoration\", \"Text decoration color utilities for controlling decoration's semantic color\") # The semantic decoration color factory\n\n# Placeholder color with semantic colors\nplaceholder_dui = ColoredFactoryDaisyUI(\"placeholder\", \"Placeholder color utilities for controlling placeholder text's semantic color\") # The semantic placeholder color factory\n\n# Divide color with semantic colors\ndivide_dui = ColoredFactoryDaisyUI(\"divide\", \"Divide color utilities for controlling divider's semantic color\") # The semantic divide color factory\n\n# Ring offset color with semantic colors\nring_offset_dui = ColoredFactoryDaisyUI(\"ring-offset\", \"Ring offset color utilities for controlling ring offset's semantic color\") # The semantic ring offset color factory\nsource",
    "crumbs": [
      "utilities",
      "Semantic Color Utility Classes"
    ]
  },
  {
    "objectID": "utilities/semantic_colors.html#practical-examples",
    "href": "utilities/semantic_colors.html#practical-examples",
    "title": "Semantic Color Utility Classes",
    "section": "Practical Examples",
    "text": "Practical Examples\nTest with FastHTML components to show practical usage:\n\nsource\n\ntest_semantic_color_fasthtml_examples\n\n test_semantic_color_fasthtml_examples ()\n\nTest practical usage patterns with FastHTML components.\n\n\nExported source\ndef test_semantic_color_fasthtml_examples():\n    \"\"\"Test practical usage patterns with FastHTML components.\"\"\"\n    from fasthtml.common import Div, Button, H1, P, Span\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_display.card import card\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.utilities.glass import glass\n    \n    # Create a card with semantic colors and tokenized border radius\n    card = Div(\n        H1(\"Welcome to daisyUI\", cls=str(text_dui.primary_content)),\n        P(\"This card uses semantic colors\", cls=str(text_dui.primary_content)),\n        cls=combine_classes(\n            card,\n            bg_dui.primary,\n            border_dui.accent,\n            border_radius.box,\n            p(6), border(), shadow.lg\n        )\n    )\n    \n    # Verify classes\n    assert \"bg-primary\" in card.attrs['class']\n    assert \"border-accent\" in card.attrs['class']\n    assert \"rounded-box\" in card.attrs['class']\n    assert card.children[0].attrs['class'] == \"text-primary-content\"\n    \n    # Create a button with semantic colors\n    button = Button(\n        \"Click me\",\n        cls=combine_classes(\n            btn,\n            bg_dui.primary,\n            text_dui.primary_content,\n            border_radius.field,\n            p.x(4), p.y(2)\n        )\n    )\n    assert \"bg-primary\" in button.attrs['class']\n    assert \"text-primary-content\" in button.attrs['class']\n    assert \"rounded-field\" in button.attrs['class']\n\n    return Div(\n        card,\n        button\n    )\n\n# Run the test\ntest_semantic_color_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card bg-primary border-accent rounded-box p-6 border shadow-lg\"&gt;\n    &lt;h1 class=\"text-primary-content\"&gt;Welcome to daisyUI&lt;/h1&gt;\n    &lt;p class=\"text-primary-content\"&gt;This card uses semantic colors&lt;/p&gt;\n  &lt;/div&gt;\n&lt;button class=\"btn bg-primary text-primary-content rounded-field px-4 py-2\"&gt;Click me&lt;/button&gt;&lt;/div&gt;\n\n\n\ntest_func = test_semantic_color_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "Semantic Color Utility Classes"
    ]
  },
  {
    "objectID": "utilities/border_radius.html",
    "href": "utilities/border_radius.html",
    "title": "Border Radius Utilities",
    "section": "",
    "text": "source",
    "crumbs": [
      "utilities",
      "Border Radius Utilities"
    ]
  },
  {
    "objectID": "utilities/border_radius.html#practical-examples",
    "href": "utilities/border_radius.html#practical-examples",
    "title": "Border Radius Utilities",
    "section": "Practical Examples",
    "text": "Practical Examples\nTest with FastHTML components to show practical usage:\n\nsource\n\ntest_border_radius_fasthtml_examples\n\n test_border_radius_fasthtml_examples ()\n\nTest practical usage patterns with FastHTML components.\n\n\nExported source\ndef test_border_radius_fasthtml_examples():\n    \"\"\"Test practical usage patterns with FastHTML components.\"\"\"\n    from fasthtml.common import Div, Button, H1, P, Span\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_tailwind.utilities.spacing import p\n    from cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.data_display.card import card\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui, text_dui\n    \n    # Create a card with semantic colors and tokenized border radius\n    card = Div(\n        H1(\"Welcome to daisyUI\", cls=str(text_dui.primary)),\n        P(\"This card uses semantic colors\", cls=str(text_dui.base_content)),\n        cls=combine_classes(\n            card,\n            bg_dui.base_100,\n            border_dui.base_300,\n            border_radius.box,\n            p(6), border(), shadow.lg\n        )\n    )\n    \n    # Verify classes\n    assert \"bg-base-100\" in card.attrs['class']\n    assert \"border-base-300\" in card.attrs['class']\n    assert \"rounded-box\" in card.attrs['class']\n    assert card.children[0].attrs['class'] == \"text-primary\"\n\n    return Div(\n        card\n    )\n\n# Run the test\ntest_border_radius_fasthtml_examples()\n\n\n&lt;div&gt;\n  &lt;div class=\"card bg-base-100 border-base-300 rounded-box p-6 border shadow-lg\"&gt;\n    &lt;h1 class=\"text-primary\"&gt;Welcome to daisyUI&lt;/h1&gt;\n    &lt;p class=\"text-base-content\"&gt;This card uses semantic colors&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n\ntest_func = test_border_radius_fasthtml_examples\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT)\n\n@rt\ndef index():\n    return create_test_page(test_func.__doc__.title().replace('.', ''), test_func())\nserver = start_test_server(app)\ndisplay(HTMX())\nserver.stop()",
    "crumbs": [
      "utilities",
      "Border Radius Utilities"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "cjm-fasthtml-daisyui",
    "section": "",
    "text": "Python-native daisyUI v5 component and utility class builder providing dynamic class generation with full abstraction for FastHTML projects.",
    "crumbs": [
      "cjm-fasthtml-daisyui"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "cjm-fasthtml-daisyui",
    "section": "Install",
    "text": "Install\npip install cjm-fasthtml-daisyui",
    "crumbs": [
      "cjm-fasthtml-daisyui"
    ]
  },
  {
    "objectID": "index.html#project-structure",
    "href": "index.html#project-structure",
    "title": "cjm-fasthtml-daisyui",
    "section": "Project Structure",
    "text": "Project Structure\nnbs/\n├── builders/ (3)\n│   ├── colors.ipynb  # Semantic color system builders for daisyUI components\n│   ├── sizes.ipynb   # Named sizes support for DaisyUI components\n│   └── styles.ipynb  # Named style support for daisyUI components\n├── cli/ (2)\n│   ├── cli_config.ipynb  # Configuration for the DaisyUI CLI tool\n│   └── explorer.ipynb    # CLI tool for exploring cjm-fasthtml-daisyui components and builders\n├── components/ (63)\n│   ├── actions/ (6)\n│   │   ├── button.ipynb            # Buttons allow the user to take actions or make choices.\n│   │   ├── dropdown.ipynb          # Dropdown can open a menu or any other element when the button is clicked.\n│   │   ├── fab.ipynb               # FAB (Floating Action Button) stays in the bottom corner of screen. It includes a focusable and accessible element with button role. Clicking or focusing it shows additional buttons (known as Speed Dial buttons) in a vertical arrangement or a flower shape (quarter circle with up to 4 buttons).\n│   │   ├── modal.ipynb             # Modal is used to show a dialog or a box when you click a button.\n│   │   ├── swap.ipynb              # Swap allows you to toggle the visibility of two elements using a checkbox or a class name.\n│   │   └── theme_controller.ipynb  # If a checked checkbox input or a checked radio input with theme-controller class exists in the page, The page will have the same theme as that input's value.\n│   ├── data_display/ (16)\n│   │   ├── accordion.ipynb      # Accordion is used for showing and hiding content but only one item can stay open at a time.\n│   │   ├── avatar.ipynb         # Avatars are used to show a thumbnail representation of an individual or business in the interface.\n│   │   ├── badge.ipynb          # Badges are used to inform the user of the status of specific data.\n│   │   ├── card.ipynb           # Cards are used to group and display content in a way that is easily readable.\n│   │   ├── carousel.ipynb       # Carousel shows images or content in a scrollable area.\n│   │   ├── chat_bubble.ipynb    # Chat bubbles are used to show one line of conversation and all its data, including the author image, author name, time, etc.\n│   │   ├── collapse.ipynb       # Collapse is used for showing and hiding content.\n│   │   ├── countdown.ipynb      # Countdown gives you a transition effect when you change a number between 0 to 99.\n│   │   ├── diff.ipynb           # Diff component shows a side-by-side comparison of two items.\n│   │   ├── hover_gallery.ipynb  # Hover Gallery is container of images. The first image is visible be default and when we hover it horizontally, other images show up. Hover Gallery is useful for product cards in ecommerce sites, portfoilios or in image galleries. Hover Gallery can include up to 10 images.\n│   │   ├── kbd.ipynb            # Kbd is used to display keyboard shortcuts.\n│   │   ├── list.ipynb           # List is a vertical layout to display information in rows.\n│   │   ├── stat.ipynb           # Stat is used to show numbers and data in a block.\n│   │   ├── status.ipynb         # Status is a really small icon to visually show the current status of an element, like online, offline, error, etc.\n│   │   ├── table.ipynb          # Table can be used to show a list of data in a table format.\n│   │   └── timeline.ipynb       # Timeline component shows a list of events in chronological order.\n│   ├── data_input/ (14)\n│   │   ├── calendar.ipynb    # Calendar includes styles for different calendar libraries.\n│   │   ├── checkbox.ipynb    # Checkboxes are used to select or deselect a value.\n│   │   ├── fieldset.ipynb    # Fieldset is a container for grouping related form elements. It includes fieldset-legend as a title and label as a description.\n│   │   ├── file_input.ipynb  # File Input is a an input field for uploading files.\n│   │   ├── filter.ipynb      # Filter is a group of radio buttons. Choosing one of the options will hide the others and shows a reset button next to the chosen option.\n│   │   ├── label.ipynb       # Label is used to provide a name or title for an input field. Label can be placed before or after the field.\n│   │   ├── radio.ipynb       # Radio buttons allow the user to select one option from a set.\n│   │   ├── range.ipynb       # Range slider is used to select a value by sliding a handle.\n│   │   ├── rating.ipynb      # Rating is a set of radio ratings that allow the user to rate something.\n│   │   ├── select.ipynb      # Select is used to pick a value from a list of options.\n│   │   ├── text_input.ipynb  # Text Input is a simple input field.\n│   │   ├── textarea.ipynb    # Textarea allows users to enter text in multiple lines.\n│   │   ├── toggle.ipynb      # Toggle is a checkbox that is styled to look like a switch button.\n│   │   └── validator.ipynb   # Validator class changes the color of form elements to error or success based on input's validation rules.\n│   ├── feedback/ (7)\n│   │   ├── alert.ipynb            # Alert informs users about important events.\n│   │   ├── loading.ipynb          # Loading shows an animation to indicate that something is loading.\n│   │   ├── progress.ipynb         # Progress bar can be used to show the progress of a task or to show the passing of time.\n│   │   ├── radial_progress.ipynb  # Radial progress can be used to show the progress of a task or to show the passing of time.\n│   │   ├── skeleton.ipynb         # Skeleton is a component that can be used to show a loading state of a component.\n│   │   ├── toast.ipynb            # Toast is a wrapper to stack elements, positioned on the corner of page.\n│   │   └── tooltip.ipynb          # Tooltip can be used to show a message when hovering over an element.\n│   ├── layout/ (8)\n│   │   ├── divider.ipynb    # Divider will be used to separate content vertically or horizontally.\n│   │   ├── drawer.ipynb     # Drawer is a grid layout that can show/hide a sidebar on the left or right side of the page.\n│   │   ├── footer.ipynb     # Footer can contain logo, copyright notice, and links to other pages.\n│   │   ├── hero.ipynb       # Hero is a component for displaying a large box or image with a title and description.\n│   │   ├── indicator.ipynb  # Indicators are used to place an element on the corner of another element.\n│   │   ├── join.ipynb       # Join is a container for grouping multiple items, it can be used to group buttons, inputs, etc. Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items.\n│   │   ├── mask.ipynb       # Mask crops the content of the element to common shapes.\n│   │   └── stack.ipynb      # Stack visually puts elements on top of each other.\n│   ├── mockup/ (4)\n│   │   ├── browser.ipynb  # Browser mockup shows a box that looks like a browser window.\n│   │   ├── code.ipynb     # Code mockup is used to show a block of code in a box that looks like a code editor.\n│   │   ├── phone.ipynb    # Phone mockup shows a mockup of an iPhone.\n│   │   └── window.ipynb\n│   └── navigation/ (8)\n│       ├── breadcrumbs.ipynb  # Breadcrumbs helps users to navigate through the website.\n│       ├── dock.ipynb         # Dock (also know as Bottom navigation or Bottom bar) is a UI element that provides navigation options to the user. Dock sticks to the bottom of the screen.\n│       ├── link.ipynb         # Link adds the missing underline style to links.\n│       ├── menu.ipynb         # Menu is used to display a list of links vertically or horizontally.\n│       ├── navbar.ipynb       # Navbar is used to show a navigation bar on the top of the page..\n│       ├── pagination.ipynb   # Pagination is a group of buttons that allow the user to navigate between a set of related content.\n│       ├── steps.ipynb        # Steps can be used to show a list of steps in a process.\n│       └── tabs.ipynb         # Tabs can be used to show a list of links in a tabbed format.\n├── core/ (3)\n│   ├── resources.ipynb  # CDN resources and headers for daisyUI and Tailwind CSS\n│   ├── testing.ipynb    # Standardized test page creation for Jupyter notebooks with FastHTML\n│   └── themes.ipynb     # Theme management for daisyUI\n└── utilities/ (4)\n    ├── border_radius.ipynb       # daisyUI provides additional tokenized border radius values that can be customized based on the theme:\n    ├── glass.ipynb               # The glass utility creates a glass morphism effect on elements:\n    ├── semantic_colors.ipynb     # daisyUI extends many Tailwind CSS utility classes to support semantic colors. These factories provide access to semantic color utilities with full modifier support:\n    └── semantic_gradients.ipynb  # For Tailwind CSS gradient utilities, daisyUI extends the from, via, and to utilities with semantic color support:\nTotal: 75 notebooks across 5 directories",
    "crumbs": [
      "cjm-fasthtml-daisyui"
    ]
  },
  {
    "objectID": "index.html#module-dependencies",
    "href": "index.html#module-dependencies",
    "title": "cjm-fasthtml-daisyui",
    "section": "Module Dependencies",
    "text": "Module Dependencies\ngraph LR\n    builders_colors[builders.colors&lt;br/&gt;colors]\n    builders_sizes[builders.sizes&lt;br/&gt;sizes]\n    builders_styles[builders.styles&lt;br/&gt;styles]\n    cli_cli_config[cli.cli_config&lt;br/&gt;DaisyUI CLI Configuration]\n    cli_explorer[cli.explorer&lt;br/&gt;DaisyUI Explorer]\n    components_actions_button[components.actions.button&lt;br/&gt;button]\n    components_actions_dropdown[components.actions.dropdown&lt;br/&gt;dropdown]\n    components_actions_fab[components.actions.fab&lt;br/&gt;FAB / Speed Dial]\n    components_actions_modal[components.actions.modal&lt;br/&gt;modal]\n    components_actions_swap[components.actions.swap&lt;br/&gt;swap]\n    components_actions_theme_controller[components.actions.theme_controller&lt;br/&gt;theme controller]\n    components_data_display_accordion[components.data_display.accordion&lt;br/&gt;accordion]\n    components_data_display_avatar[components.data_display.avatar&lt;br/&gt;avatar]\n    components_data_display_badge[components.data_display.badge&lt;br/&gt;badge]\n    components_data_display_card[components.data_display.card&lt;br/&gt;card]\n    components_data_display_carousel[components.data_display.carousel&lt;br/&gt;carousel]\n    components_data_display_chat_bubble[components.data_display.chat_bubble&lt;br/&gt;chat bubble]\n    components_data_display_collapse[components.data_display.collapse&lt;br/&gt;collapse]\n    components_data_display_countdown[components.data_display.countdown&lt;br/&gt;countdown]\n    components_data_display_diff[components.data_display.diff&lt;br/&gt;diff]\n    components_data_display_hover_gallery[components.data_display.hover_gallery&lt;br/&gt;hover gallery]\n    components_data_display_kbd[components.data_display.kbd&lt;br/&gt;kbd]\n    components_data_display_list[components.data_display.list&lt;br/&gt;list]\n    components_data_display_stat[components.data_display.stat&lt;br/&gt;stat]\n    components_data_display_status[components.data_display.status&lt;br/&gt;status]\n    components_data_display_table[components.data_display.table&lt;br/&gt;table]\n    components_data_display_timeline[components.data_display.timeline&lt;br/&gt;timeline]\n    components_data_input_calendar[components.data_input.calendar&lt;br/&gt;calendar]\n    components_data_input_checkbox[components.data_input.checkbox&lt;br/&gt;checkbox]\n    components_data_input_fieldset[components.data_input.fieldset&lt;br/&gt;fieldset]\n    components_data_input_file_input[components.data_input.file_input&lt;br/&gt;file input]\n    components_data_input_filter[components.data_input.filter&lt;br/&gt;filter]\n    components_data_input_label[components.data_input.label&lt;br/&gt;label]\n    components_data_input_radio[components.data_input.radio&lt;br/&gt;radio]\n    components_data_input_range_slider[components.data_input.range_slider&lt;br/&gt;range slider]\n    components_data_input_rating[components.data_input.rating&lt;br/&gt;rating]\n    components_data_input_select[components.data_input.select&lt;br/&gt;select]\n    components_data_input_text_input[components.data_input.text_input&lt;br/&gt;text input]\n    components_data_input_textarea[components.data_input.textarea&lt;br/&gt;textarea]\n    components_data_input_toggle[components.data_input.toggle&lt;br/&gt;toggle]\n    components_data_input_validator[components.data_input.validator&lt;br/&gt;validator]\n    components_feedback_alert[components.feedback.alert&lt;br/&gt;alert]\n    components_feedback_loading[components.feedback.loading&lt;br/&gt;loading]\n    components_feedback_progress[components.feedback.progress&lt;br/&gt;progress]\n    components_feedback_radial_progress[components.feedback.radial_progress&lt;br/&gt;radial progress]\n    components_feedback_skeleton[components.feedback.skeleton&lt;br/&gt;skeleton]\n    components_feedback_toast[components.feedback.toast&lt;br/&gt;toast]\n    components_feedback_tooltip[components.feedback.tooltip&lt;br/&gt;tooltip]\n    components_layout_divider[components.layout.divider&lt;br/&gt;divider]\n    components_layout_drawer[components.layout.drawer&lt;br/&gt;drawer]\n    components_layout_footer[components.layout.footer&lt;br/&gt;footer]\n    components_layout_hero[components.layout.hero&lt;br/&gt;hero]\n    components_layout_indicator[components.layout.indicator&lt;br/&gt;indicator]\n    components_layout_join[components.layout.join&lt;br/&gt;join]\n    components_layout_mask[components.layout.mask&lt;br/&gt;mask]\n    components_layout_stack[components.layout.stack&lt;br/&gt;stack]\n    components_mockup_browser[components.mockup.browser&lt;br/&gt;browser mockup]\n    components_mockup_code[components.mockup.code&lt;br/&gt;code mockup]\n    components_mockup_phone[components.mockup.phone&lt;br/&gt;phone mockup]\n    components_mockup_window[components.mockup.window]\n    components_navigation_breadcrumbs[components.navigation.breadcrumbs&lt;br/&gt;breadcrumbs]\n    components_navigation_dock[components.navigation.dock&lt;br/&gt;dock]\n    components_navigation_link[components.navigation.link&lt;br/&gt;link]\n    components_navigation_menu[components.navigation.menu&lt;br/&gt;menu]\n    components_navigation_navbar[components.navigation.navbar&lt;br/&gt;navbar]\n    components_navigation_pagination[components.navigation.pagination&lt;br/&gt;pagination]\n    components_navigation_steps[components.navigation.steps&lt;br/&gt;steps]\n    components_navigation_tabs[components.navigation.tabs&lt;br/&gt;tabs]\n    core_resources[core.resources&lt;br/&gt;resources]\n    core_testing[core.testing&lt;br/&gt;testing]\n    core_themes[core.themes&lt;br/&gt;themes]\n    utilities_border_radius[utilities.border_radius&lt;br/&gt;Border Radius Utilities]\n    utilities_glass[utilities.glass&lt;br/&gt;Glass Effect Utility]\n    utilities_semantic_colors[utilities.semantic_colors&lt;br/&gt;Semantic Color Utility Classes]\n    utilities_semantic_gradients[utilities.semantic_gradients&lt;br/&gt;Gradient Stop Utilities]\n\n    cli_explorer --&gt; cli_cli_config\n    components_actions_button --&gt; core_themes\n    components_actions_button --&gt; builders_styles\n    components_actions_button --&gt; builders_colors\n    components_actions_button --&gt; core_testing\n    components_actions_button --&gt; builders_sizes\n    components_actions_dropdown --&gt; core_testing\n    components_actions_dropdown --&gt; core_themes\n    components_actions_fab --&gt; core_themes\n    components_actions_fab --&gt; builders_styles\n    components_actions_fab --&gt; builders_colors\n    components_actions_fab --&gt; core_testing\n    components_actions_fab --&gt; builders_sizes\n    components_actions_modal --&gt; core_testing\n    components_actions_modal --&gt; core_themes\n    components_actions_swap --&gt; core_testing\n    components_actions_swap --&gt; core_themes\n    components_actions_theme_controller --&gt; core_testing\n    components_actions_theme_controller --&gt; core_themes\n    components_data_display_accordion --&gt; components_data_display_collapse\n    components_data_display_accordion --&gt; core_themes\n    components_data_display_accordion --&gt; core_testing\n    components_data_display_avatar --&gt; core_themes\n    components_data_display_avatar --&gt; core_testing\n    components_data_display_badge --&gt; core_themes\n    components_data_display_badge --&gt; builders_styles\n    components_data_display_badge --&gt; builders_colors\n    components_data_display_badge --&gt; core_testing\n    components_data_display_badge --&gt; builders_sizes\n    components_data_display_card --&gt; core_themes\n    components_data_display_card --&gt; core_testing\n    components_data_display_card --&gt; builders_styles\n    components_data_display_card --&gt; builders_sizes\n    components_data_display_carousel --&gt; core_themes\n    components_data_display_carousel --&gt; core_testing\n    components_data_display_chat_bubble --&gt; core_themes\n    components_data_display_chat_bubble --&gt; builders_colors\n    components_data_display_chat_bubble --&gt; core_testing\n    components_data_display_collapse --&gt; core_themes\n    components_data_display_collapse --&gt; core_testing\n    components_data_display_countdown --&gt; core_themes\n    components_data_display_countdown --&gt; core_testing\n    components_data_display_diff --&gt; core_themes\n    components_data_display_diff --&gt; core_testing\n    components_data_display_hover_gallery --&gt; core_themes\n    components_data_display_hover_gallery --&gt; core_testing\n    components_data_display_kbd --&gt; core_themes\n    components_data_display_kbd --&gt; core_testing\n    components_data_display_kbd --&gt; builders_sizes\n    components_data_display_list --&gt; core_themes\n    components_data_display_list --&gt; core_testing\n    components_data_display_stat --&gt; core_themes\n    components_data_display_stat --&gt; core_testing\n    components_data_display_status --&gt; core_themes\n    components_data_display_status --&gt; builders_colors\n    components_data_display_status --&gt; core_testing\n    components_data_display_status --&gt; builders_sizes\n    components_data_display_table --&gt; core_themes\n    components_data_display_table --&gt; core_testing\n    components_data_display_table --&gt; builders_sizes\n    components_data_display_timeline --&gt; core_themes\n    components_data_display_timeline --&gt; core_testing\n    components_data_input_calendar --&gt; core_testing\n    components_data_input_calendar --&gt; core_themes\n    components_data_input_checkbox --&gt; core_testing\n    components_data_input_checkbox --&gt; builders_colors\n    components_data_input_checkbox --&gt; core_themes\n    components_data_input_checkbox --&gt; builders_sizes\n    components_data_input_fieldset --&gt; core_testing\n    components_data_input_fieldset --&gt; core_themes\n    components_data_input_file_input --&gt; core_themes\n    components_data_input_file_input --&gt; builders_styles\n    components_data_input_file_input --&gt; builders_colors\n    components_data_input_file_input --&gt; core_testing\n    components_data_input_file_input --&gt; builders_sizes\n    components_data_input_filter --&gt; core_testing\n    components_data_input_filter --&gt; core_themes\n    components_data_input_label --&gt; core_testing\n    components_data_input_label --&gt; core_themes\n    components_data_input_radio --&gt; core_testing\n    components_data_input_radio --&gt; builders_colors\n    components_data_input_radio --&gt; core_themes\n    components_data_input_radio --&gt; builders_sizes\n    components_data_input_range_slider --&gt; core_testing\n    components_data_input_range_slider --&gt; builders_colors\n    components_data_input_range_slider --&gt; core_themes\n    components_data_input_range_slider --&gt; builders_sizes\n    components_data_input_rating --&gt; core_testing\n    components_data_input_rating --&gt; core_themes\n    components_data_input_rating --&gt; builders_sizes\n    components_data_input_select --&gt; core_testing\n    components_data_input_select --&gt; builders_colors\n    components_data_input_select --&gt; core_themes\n    components_data_input_select --&gt; builders_styles\n    components_data_input_select --&gt; builders_sizes\n    components_data_input_text_input --&gt; core_themes\n    components_data_input_text_input --&gt; builders_styles\n    components_data_input_text_input --&gt; builders_colors\n    components_data_input_text_input --&gt; core_testing\n    components_data_input_text_input --&gt; builders_sizes\n    components_data_input_textarea --&gt; core_testing\n    components_data_input_textarea --&gt; builders_colors\n    components_data_input_textarea --&gt; core_themes\n    components_data_input_textarea --&gt; builders_styles\n    components_data_input_textarea --&gt; builders_sizes\n    components_data_input_toggle --&gt; core_testing\n    components_data_input_toggle --&gt; builders_colors\n    components_data_input_toggle --&gt; core_themes\n    components_data_input_toggle --&gt; builders_sizes\n    components_data_input_validator --&gt; core_testing\n    components_data_input_validator --&gt; core_themes\n    components_feedback_alert --&gt; core_testing\n    components_feedback_alert --&gt; builders_styles\n    components_feedback_alert --&gt; core_themes\n    components_feedback_alert --&gt; builders_colors\n    components_feedback_loading --&gt; core_testing\n    components_feedback_loading --&gt; core_themes\n    components_feedback_loading --&gt; builders_sizes\n    components_feedback_progress --&gt; core_testing\n    components_feedback_progress --&gt; builders_colors\n    components_feedback_progress --&gt; core_themes\n    components_feedback_radial_progress --&gt; core_testing\n    components_feedback_radial_progress --&gt; core_themes\n    components_feedback_skeleton --&gt; core_testing\n    components_feedback_skeleton --&gt; core_themes\n    components_feedback_toast --&gt; core_testing\n    components_feedback_toast --&gt; core_themes\n    components_feedback_tooltip --&gt; core_testing\n    components_feedback_tooltip --&gt; builders_colors\n    components_feedback_tooltip --&gt; core_themes\n    components_layout_divider --&gt; core_testing\n    components_layout_divider --&gt; builders_colors\n    components_layout_divider --&gt; core_themes\n    components_layout_drawer --&gt; core_testing\n    components_layout_drawer --&gt; core_themes\n    components_layout_footer --&gt; core_themes\n    components_layout_footer --&gt; core_testing\n    components_layout_hero --&gt; core_testing\n    components_layout_hero --&gt; core_themes\n    components_layout_indicator --&gt; core_testing\n    components_layout_indicator --&gt; core_themes\n    components_layout_join --&gt; core_testing\n    components_layout_join --&gt; core_themes\n    components_layout_mask --&gt; core_testing\n    components_layout_mask --&gt; core_themes\n    components_layout_stack --&gt; core_testing\n    components_layout_stack --&gt; core_themes\n    components_mockup_browser --&gt; core_testing\n    components_mockup_browser --&gt; core_themes\n    components_mockup_code --&gt; core_testing\n    components_mockup_code --&gt; core_themes\n    components_mockup_phone --&gt; core_testing\n    components_mockup_phone --&gt; core_themes\n    components_mockup_window --&gt; core_testing\n    components_mockup_window --&gt; core_themes\n    components_navigation_breadcrumbs --&gt; core_testing\n    components_navigation_breadcrumbs --&gt; core_themes\n    components_navigation_dock --&gt; core_testing\n    components_navigation_dock --&gt; core_themes\n    components_navigation_dock --&gt; builders_sizes\n    components_navigation_link --&gt; core_testing\n    components_navigation_link --&gt; builders_colors\n    components_navigation_link --&gt; core_themes\n    components_navigation_link --&gt; builders_sizes\n    components_navigation_menu --&gt; core_testing\n    components_navigation_menu --&gt; core_themes\n    components_navigation_menu --&gt; builders_sizes\n    components_navigation_navbar --&gt; core_testing\n    components_navigation_navbar --&gt; core_themes\n    components_navigation_pagination --&gt; core_testing\n    components_navigation_pagination --&gt; components_layout_join\n    components_navigation_pagination --&gt; core_themes\n    components_navigation_steps --&gt; core_testing\n    components_navigation_steps --&gt; builders_colors\n    components_navigation_steps --&gt; core_themes\n    components_navigation_tabs --&gt; core_testing\n    components_navigation_tabs --&gt; core_themes\n    components_navigation_tabs --&gt; builders_styles\n    components_navigation_tabs --&gt; builders_sizes\n    core_testing --&gt; components_actions_button\n    core_testing --&gt; core_themes\n    core_testing --&gt; components_feedback_alert\n    core_testing --&gt; core_resources\n    core_testing --&gt; utilities_semantic_gradients\n    core_testing --&gt; components_data_display_card\n    core_testing --&gt; utilities_semantic_colors\n    utilities_border_radius --&gt; builders_colors\n    utilities_border_radius --&gt; core_themes\n    utilities_border_radius --&gt; core_testing\n    utilities_glass --&gt; builders_colors\n    utilities_glass --&gt; core_themes\n    utilities_glass --&gt; core_testing\n    utilities_semantic_colors --&gt; builders_colors\n    utilities_semantic_colors --&gt; core_themes\n    utilities_semantic_colors --&gt; core_testing\n    utilities_semantic_gradients --&gt; builders_colors\n    utilities_semantic_gradients --&gt; core_themes\n    utilities_semantic_gradients --&gt; core_testing\n198 cross-module dependencies detected",
    "crumbs": [
      "cjm-fasthtml-daisyui"
    ]
  },
  {
    "objectID": "index.html#cli-reference",
    "href": "index.html#cli-reference",
    "title": "cjm-fasthtml-daisyui",
    "section": "CLI Reference",
    "text": "CLI Reference\n\ncjm-daisyui-explore Command\nusage: cjm-daisyui-explore [-h]\n                           {modules,factories,factory,examples,example,search,test-code,core-utils,core-util,imports,scan}\n                           ...\n\ncjm_fasthtml_daisyui CLI Explorer\n\nThis tool helps you explore the cjm_fasthtml_daisyui library, which provides:\n- Python-native DaisyUI v5 utility class builders for FastHTML projects\n- Dynamic CSS class generation without hardcoded strings\n- Comprehensive utility factories (btn, btn_behaviors, btn_colors, btn_modifiers, etc.)\n- Helper functions for common patterns\n- Full integration with FastHTML components\n\nPurpose: This CLI tool enables autonomous exploration of the library's API by:\n- Discovering all available utility modules and their documentation\n- Listing factory instances with their built-in documentation\n- Showing usage examples from test functions\n- Providing source code for helper functions\n- Searching across all library components\n- CRITICALLY: Testing code snippets with automatic imports BEFORE implementation\n- Generating recommended import statements\n- Scanning existing code for replaceable CSS patterns\n\nAll information is dynamically extracted from the library itself - nothing is hardcoded.\n\npositional arguments:\n  {modules,factories,factory,examples,example,search,test-code,core-utils,core-util,imports,scan}\n                        Available commands\n    modules             List all utility modules\n    factories           List factories\n    factory             Show detailed info for a specific factory\n    examples            Show usage examples\n    example             Show source code for a specific example\n    search              Search across all library components\n    test-code           ⚠️ CRITICAL: Test code snippets using the library\n                        (ALWAYS use before implementation)\n    core-utils          List core utility functions\n    core-util           Show source code for a core utility\n    imports             Show recommended import statements\n    scan                Scan code for replaceable CSS patterns\n\noptions:\n  -h, --help            show this help message and exit\n\nGetting Started:\n  1. List all modules:     cjm-daisyui-explore modules\n  2. View factories:       cjm-daisyui-explore factories\n  3. Search for patterns:  cjm-daisyui-explore search &lt;query&gt;\n  4. CRITICAL: Test code:  cjm-daisyui-explore test-code \"&lt;code&gt;\"\n  5. Get imports:          cjm-daisyui-explore imports\n  6. Scan existing code:   cjm-daisyui-explore scan &lt;file&gt;\n\nExploration Workflow:\n  - Start with 'modules' to see available utility categories\n  - Use 'factories -m &lt;module&gt;' to explore specific modules\n  - Use 'factory &lt;module&gt; &lt;name&gt;' for detailed factory information\n  - Use 'examples' to see test-based usage patterns\n  - Use 'search' to find specific functionality\n  - CRITICAL: ALWAYS use 'test-code' to validate code BEFORE implementation\n  - Use 'scan' to analyze existing code for migration opportunities\n\nIMPORTANT: Code Validation\n  ⚠️  ALWAYS use 'test-code' to verify generated code before using it\n  ⚠️  This ensures correct syntax, proper imports, and expected output\n  ⚠️  Never skip this step - it prevents errors and saves debugging time\n\nKey Concepts:\n  - Factories: Objects that generate CSS classes (e.g., btn, btn_behaviors, btn_colors, btn_modifiers)\n  - Modules: Categories of utilities (actions.button, actions.dropdown, actions.fab, etc.)\n  - Examples: Test functions demonstrating usage patterns\n  - Helpers: Convenience functions for common patterns\n\nTips for Coding Assistants:\n  - MANDATORY: Use 'test-code' to validate ALL generated code before implementation\n  - Use 'search --include-source' to find usage patterns in code\n  - Use 'imports' to get all necessary import statements\n  - Use 'scan' to identify replaceable hardcoded CSS classes\n  - Factory names are intuitive: btn, btn_behaviors, btn_colors, btn_modifiers\n  - Combine utilities with combine_classes() function\n  - All factories support method chaining and attribute access\n\nExample Usage Flow:\n  cjm-daisyui-explore modules                       # See what's available\n  cjm-daisyui-explore factories -m actions.button   # Explore actions.button utilities\n  cjm-daisyui-explore factory actions.button btn    # Learn about btn factory\n  cjm-daisyui-explore example actions.button basic  # See usage examples\n  cjm-daisyui-explore test-code 'print(str(btn))'   # CRITICAL: Test your understanding\n  cjm-daisyui-explore scan app.py                   # Analyze existing code\n\nTailwind CSS v4 Usage:\n⚠️  Important: Use the cjm_fasthtml_tailwind library for adding Tailwind CSS v4 utility classes.\nYou can learn about the cjm_fasthtml_tailwind library with the cjm-tailwind-explore CLI tool.\n\nFor detailed help on any command, use cjm-daisyui-explore &lt;command&gt; --help.",
    "crumbs": [
      "cjm-fasthtml-daisyui"
    ]
  },
  {
    "objectID": "index.html#module-overview",
    "href": "index.html#module-overview",
    "title": "cjm-fasthtml-daisyui",
    "section": "Module Overview",
    "text": "Module Overview\nDetailed documentation for each module in the project:\n\naccordion (accordion.ipynb)\n\nAccordion is used for showing and hiding content but only one item can stay open at a time.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.accordion import (\n    test_accordion_basic_examples,\n    test_accordion_modifiers_examples,\n    test_accordion_basic_fasthtml_examples,\n    test_accordion_arrow_fasthtml_examples,\n    test_accordion_plus_fasthtml_examples,\n    test_accordion_join_fasthtml_examples\n)\n\n\nFunctions\ndef test_accordion_basic_examples()\n    \"Test basic accordion utilities.\"\ndef test_accordion_modifiers_examples()\n    \"Test accordion modifier utilities.\"\ndef test_accordion_basic_fasthtml_examples()\n    \"Test basic accordion using radio inputs from daisyUI v5 documentation.\"\ndef test_accordion_arrow_fasthtml_examples()\n    \"Test accordion with arrow icon from daisyUI v5 documentation.\"\ndef test_accordion_plus_fasthtml_examples()\n    \"Test accordion with plus/minus icon from daisyUI v5 documentation.\"\ndef test_accordion_join_fasthtml_examples()\n    \"Test accordion with join from daisyUI v5 documentation.\"\n\n\n\nalert (alert.ipynb)\n\nAlert informs users about important events.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.feedback.alert import (\n    alert,\n    alert_styles,\n    alert_colors,\n    alert_directions,\n    test_alert_basic_examples,\n    test_alert_styles_examples,\n    test_alert_colors_examples,\n    test_alert_directions_examples,\n    test_alert_basic_fasthtml_examples,\n    test_alert_colors_fasthtml_examples,\n    test_alert_styles_fasthtml_examples,\n    test_alert_with_buttons_fasthtml_examples,\n    test_alert_with_title_description_fasthtml_examples\n)\n\n\nFunctions\ndef test_alert_basic_examples()\n    \"Test basic alert utilities.\"\ndef test_alert_styles_examples()\n    \"Test alert style variants.\"\ndef test_alert_colors_examples()\n    \"Test alert color variants.\"\ndef test_alert_directions_examples()\n    \"Test alert direction utilities.\"\ndef test_alert_basic_fasthtml_examples()\n    \"Test basic alert example from daisyUI v5 documentation.\"\ndef test_alert_colors_fasthtml_examples()\n    \"Test alert color variations from daisyUI v5 documentation.\"\ndef test_alert_styles_fasthtml_examples()\n    \"Test alert style variations (soft, outline, dash) from daisyUI v5 documentation.\"\ndef test_alert_with_buttons_fasthtml_examples()\n    \"Test alert with buttons and responsive layout from daisyUI v5 documentation.\"\ndef test_alert_with_title_description_fasthtml_examples()\n    \"Test alert with title and description from daisyUI v5 documentation.\"\n\n\nVariables\nalert  # Base alert component\nalert_styles  # Alert style variants\nalert_colors  # Alert color variants\n\n\n\navatar (avatar.ipynb)\n\nAvatars are used to show a thumbnail representation of an individual or business in the interface.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.avatar import (\n    avatar,\n    avatar_group,\n    avatar_modifiers,\n    test_avatar_basic_examples,\n    test_avatar_modifiers_examples,\n    test_avatar_basic_fasthtml_examples,\n    test_avatar_rounded_and_mask_fasthtml_examples,\n    test_avatar_group_fasthtml_examples,\n    test_avatar_ring_and_presence_fasthtml_examples,\n    test_avatar_placeholder_fasthtml_examples\n)\n\n\nFunctions\ndef test_avatar_basic_examples()\n    \"Test basic avatar utilities.\"\ndef test_avatar_modifiers_examples()\n    \"Test avatar modifier utilities.\"\ndef test_avatar_basic_fasthtml_examples()\n    \"Test basic avatar and avatar in custom sizes from daisyUI v5 documentation.\"\ndef test_avatar_rounded_and_mask_fasthtml_examples()\n    \"Test avatar rounded and avatar with mask from daisyUI v5 documentation.\"\ndef test_avatar_group_fasthtml_examples()\n    \"Test avatar group and avatar group with counter from daisyUI v5 documentation.\"\ndef test_avatar_ring_and_presence_fasthtml_examples()\n    \"Test avatar with ring and avatar with presence indicator from daisyUI v5 documentation.\"\ndef test_avatar_placeholder_fasthtml_examples()\n    \"Test avatar placeholder from daisyUI v5 documentation.\"\n\n\nVariables\navatar  # Avatar container\navatar_group  # Avatar group\n\n\n\nbadge (badge.ipynb)\n\nBadges are used to inform the user of the status of specific data.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.badge import (\n    badge,\n    badge_colors,\n    badge_styles,\n    badge_sizes,\n    test_badge_basic_examples,\n    test_badge_colors_examples,\n    test_badge_styles_examples,\n    test_badge_sizes_examples,\n    test_badge_basic_fasthtml_examples,\n    test_badge_colors_fasthtml_examples,\n    test_badge_style_fasthtml_examples,\n    test_badge_icon_fasthtml_examples,\n    test_badge_in_text_fasthtml_examples,\n    test_badge_in_button_fasthtml_examples\n)\n\n\nFunctions\ndef test_badge_basic_examples()\n    \"Test basic badge utilities.\"\ndef test_badge_colors_examples()\n    \"Test badge color variants.\"\ndef test_badge_styles_examples()\n    \"Test badge style variants.\"\ndef test_badge_sizes_examples()\n    \"Test badge size variants.\"\ndef test_badge_basic_fasthtml_examples()\n    \"Test basic badge and badge sizes from daisyUI v5 documentation.\"\ndef test_badge_colors_fasthtml_examples()\n    \"Test badge with colors from daisyUI v5 documentation.\"\ndef test_badge_style_fasthtml_examples()\n    \"Test badge with different styles from daisyUI v5 documentation.\"\ndef test_badge_icon_fasthtml_examples()\n    \"Test badge with icon from daisyUI v5 documentation.\"\ndef test_badge_in_text_fasthtml_examples()\n    \"Test badge in text from daisyUI v5 documentation.\"\ndef test_badge_in_button_fasthtml_examples()\n    \"Test badge in button from daisyUI v5 documentation.\"\n\n\nVariables\nbadge  # Badge container\nbadge_colors  # Badge color variants\nbadge_styles  # Badge style variants\nbadge_sizes  # Badge size variants\n\n\n\nBorder Radius Utilities (border_radius.ipynb)\n\ndaisyUI provides additional tokenized border radius values that can be customized based on the theme:\n\n\nImport\nfrom cjm_fasthtml_daisyui.utilities.border_radius import (\n    BORDER_RADIUS_VALUES,\n    border_radius,\n    test_border_radius_basic_examples,\n    test_border_radius_fasthtml_examples\n)\n\n\nFunctions\ndef test_border_radius_basic_examples()\n    \"Test daisyUI's tokenized border radius utilities.\"\ndef test_border_radius_fasthtml_examples()\n    \"Test practical usage patterns with FastHTML components.\"\n\n\nVariables\nBORDER_RADIUS_VALUES = {3 items}\nborder_radius  # The daisyUI border radius factory\n\n\n\nbreadcrumbs (breadcrumbs.ipynb)\n\nBreadcrumbs helps users to navigate through the website.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.breadcrumbs import (\n    breadcrumbs,\n    test_breadcrumbs_basic_examples,\n    test_breadcrumbs_basic_fasthtml_examples,\n    test_breadcrumbs_with_icons_fasthtml_examples,\n    test_breadcrumbs_with_max_width_fasthtml_examples\n)\n\n\nFunctions\ndef test_breadcrumbs_basic_examples()\n    \"Test breadcrumbs utility.\"\ndef test_breadcrumbs_basic_fasthtml_examples()\n    \"Test basic breadcrumbs example from daisyUI v5 documentation.\"\ndef test_breadcrumbs_with_icons_fasthtml_examples()\n    \"Test breadcrumbs with icons from daisyUI v5 documentation.\"\ndef test_breadcrumbs_with_max_width_fasthtml_examples()\n    \"Test breadcrumbs with max-width from daisyUI v5 documentation.\"\n\n\nVariables\nbreadcrumbs  # Breadcrumbs component\n\n\n\nbrowser mockup (browser.ipynb)\n\nBrowser mockup shows a box that looks like a browser window.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.mockup.browser import (\n    mockup_browser,\n    mockup_browser_toolbar,\n    test_mockup_browser_basic_examples,\n    test_browser_mockup_with_border_fasthtml_examples,\n    test_browser_mockup_with_background_fasthtml_examples\n)\n\n\nFunctions\ndef test_mockup_browser_basic_examples()\n    \"Test basic mockup_browser utilities.\"\ndef test_browser_mockup_with_border_fasthtml_examples()\n    \"Test browser mockup with border from daisyUI v5 documentation.\"\ndef test_browser_mockup_with_background_fasthtml_examples()\n    \"Test browser mockup with background color from daisyUI v5 documentation.\"\n\n\nVariables\nmockup_browser  # Base mockup browser component\nmockup_browser_toolbar  # Base mockup browser toolbar part\n\n\n\nbutton (button.ipynb)\n\nButtons allow the user to take actions or make choices.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.actions.button import (\n    btn,\n    btn_colors,\n    btn_styles,\n    btn_sizes,\n    btn_modifiers,\n    btn_behaviors,\n    LinkStyle,\n    test_button_basic_examples,\n    test_button_colors_examples,\n    test_button_styles_examples,\n    test_button_sizes_examples,\n    test_button_modifiers_examples,\n    test_button_behaviors_examples,\n    test_button_basic_fasthtml_examples,\n    test_button_sizes_fasthtml_examples,\n    test_button_colors_variants_fasthtml_examples,\n    test_button_states_fasthtml_examples,\n    test_button_shapes_fasthtml_examples,\n    test_button_with_content_fasthtml_examples\n)\n\n\nFunctions\ndef test_button_basic_examples()\n    \"Test basic button utilities.\"\ndef test_button_colors_examples()\n    \"Test button color variants.\"\ndef test_button_styles_examples()\n    \"Test button style variants.\"\ndef test_button_sizes_examples()\n    \"Test button size variants.\"\ndef test_button_modifiers_examples()\n    \"Test button modifier utilities.\"\ndef test_button_behaviors_examples()\n    \"Test button behavior states.\"\ndef test_button_basic_fasthtml_examples()\n    \"Test basic button examples from daisyUI v5 documentation.\"\ndef test_button_sizes_fasthtml_examples()\n    \"Test button size variations and responsive buttons.\"\ndef test_button_colors_variants_fasthtml_examples()\n    \"Test button color variants including soft, outline, and dash styles.\"\ndef test_button_states_fasthtml_examples()\n    \"Test button states including active, disabled, ghost, and link.\"\ndef test_button_shapes_fasthtml_examples()\n    \"Test square and circle button shapes with SVG icons.\"\ndef test_button_with_content_fasthtml_examples()\n    \"Test buttons with icons and loading spinners.\"\n\n\nClasses\nclass LinkStyle(str, Enum):\n\n\nVariables\nbtn  # Base button component\nbtn_colors  # Button color variants\nbtn_styles  # Button style variants\nbtn_sizes  # Button size variants\n\n\n\ncalendar (calendar.ipynb)\n\nCalendar includes styles for different calendar libraries.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.calendar import (\n    cally,\n    pika_single,\n    react_day_picker,\n    test_calendar_basic_examples,\n    test_calendar_cally_basic_fasthtml_examples,\n    test_cally_date_picker_fasthtml_examples,\n    test_pikaday_calendar_fasthtml_examples\n)\n\n\nFunctions\ndef test_calendar_basic_examples()\n    \"Test basic calendar utilities.\"\ndef test_calendar_cally_basic_fasthtml_examples()\n    \"Test Cally calendar example from daisyUI v5 documentation.\"\ndef test_cally_date_picker_fasthtml_examples()\n    \"Test Cally date picker example from daisyUI v5 documentation.\"\ndef test_pikaday_calendar_fasthtml_examples()\n    \"Test Pikaday calendar CDN example from daisyUI v5 documentation.\"\n\n\nVariables\ncally  # Base Cally calendar component\npika_single  # Base Pikaday calender component\nreact_day_picker  # Base DayPicker calendar component\n\n\n\ncard (card.ipynb)\n\nCards are used to group and display content in a way that is easily readable.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.card import (\n    card,\n    card_title,\n    card_body,\n    card_actions,\n    card_styles,\n    card_modifiers,\n    card_sizes,\n    test_card_basic_examples,\n    test_card_styles_examples,\n    test_card_modifiers_examples,\n    test_card_sizes_examples,\n    test_card_basic_fasthtml_examples,\n    test_card_pricing_fasthtml_examples,\n    test_card_style_fasthtml_examples,\n    test_card_layout_fasthtml_examples,\n    test_card_special_fasthtml_examples\n)\n\n\nFunctions\ndef test_card_basic_examples()\n    \"Test basic card utilities.\"\ndef test_card_styles_examples()\n    \"Test card style variants.\"\ndef test_card_modifiers_examples()\n    \"Test card modifier utilities.\"\ndef test_card_sizes_examples()\n    \"Test card size variants.\"\ndef test_card_basic_fasthtml_examples()\n    \"Test basic card examples from daisyUI v5 documentation.\"\ndef test_card_pricing_fasthtml_examples()\n    \"Test pricing card example from daisyUI v5 documentation.\"\ndef test_card_style_fasthtml_examples()\n    \"Test card style variations from daisyUI v5 documentation.\"\ndef test_card_layout_fasthtml_examples()\n    \"Test card layout variations from daisyUI v5 documentation.\"\ndef test_card_special_fasthtml_examples()\n    \"Test special card examples from daisyUI v5 documentation.\"\n\n\nVariables\ncard  # Card container\ncard_title  # Card title\ncard_body  # Card body\ncard_actions  # Card actions\ncard_styles  # Card style variants\ncard_sizes  # Card size variants\n\n\n\ncarousel (carousel.ipynb)\n\nCarousel shows images or content in a scrollable area.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.carousel import (\n    carousel,\n    carousel_item,\n    carousel_snap,\n    carousel_direction,\n    test_carousel_basic_examples,\n    test_carousel_modifiers_examples,\n    test_carousel_snap_alignment_fasthtml_examples,\n    test_carousel_layout_fasthtml_variations,\n    test_carousel_navigation_fasthtml_examples\n)\n\n\nFunctions\ndef test_carousel_basic_examples()\n    \"Test basic carousel utilities.\"\ndef test_carousel_modifiers_examples()\n    \"Test carousel modifier utilities.\"\ndef test_carousel_snap_alignment_fasthtml_examples()\n    \"Test carousel snap alignment examples from daisyUI v5 documentation.\"\ndef test_carousel_layout_fasthtml_variations()\n    \"Test carousel layout variations from daisyUI v5 documentation.\"\ndef test_carousel_navigation_fasthtml_examples()\n    \"Test carousel with navigation examples from daisyUI v5 documentation.\"\n\n\nVariables\ncarousel  # Carousel container\ncarousel_item  # Carousel item\n\n\n\nchat bubble (chat_bubble.ipynb)\n\nChat bubbles are used to show one line of conversation and all its data, including the author image, author name, time, etc.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.chat_bubble import (\n    chat,\n    chat_image,\n    chat_header,\n    chat_footer,\n    chat_bubble,\n    chat_placement,\n    chat_bubble_colors,\n    test_chat_basic_examples,\n    test_chat_placement_examples,\n    test_chat_bubble_colors_examples,\n    test_chat_basic_fasthtml_examples,\n    test_chat_with_image_fasthtml_examples,\n    test_chat_with_header_footer_fasthtml_examples,\n    test_chat_colors_fasthtml_examples\n)\n\n\nFunctions\ndef test_chat_basic_examples()\n    \"Test basic chat utilities.\"\ndef test_chat_placement_examples()\n    \"Test chat placement utilities.\"\ndef test_chat_bubble_colors_examples()\n    \"Test chat bubble color variants.\"\ndef test_chat_basic_fasthtml_examples()\n    \"Test basic chat-start and chat-end from daisyUI v5 documentation.\"\ndef test_chat_with_image_fasthtml_examples()\n    \"Test chat with image from daisyUI v5 documentation.\"\ndef test_chat_with_header_footer_fasthtml_examples()\n    \"Test chat with image, header and footer from daisyUI v5 documentation.\"\ndef test_chat_colors_fasthtml_examples()\n    \"Test chat bubble with colors from daisyUI v5 documentation.\"\n\n\nVariables\nchat  # Chat container\nchat_image  # Chat image\nchat_header  # Chat header\nchat_footer  # Chat footer\nchat_bubble  # Chat bubble\nchat_bubble_colors  # Chat bubble color variants\n\n\n\ncheckbox (checkbox.ipynb)\n\nCheckboxes are used to select or deselect a value.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.checkbox import (\n    checkbox,\n    checkbox_colors,\n    checkbox_sizes,\n    test_checkbox_basic_examples,\n    test_checkbox_colors_examples,\n    test_checkbox_sizes_examples,\n    test_checkbox_basic_fasthtml_examples,\n    test_checkbox_with_fieldset_fasthtml_examples,\n    test_checkbox_sizes_fasthtml_examples,\n    test_checkbox_colors_fasthtml_examples,\n    test_checkbox_disabled_fasthtml_examples,\n    test_checkbox_indeterminate_fasthtml_examples,\n    test_checkbox_custom_colors_fasthtml_examples\n)\n\n\nFunctions\ndef test_checkbox_basic_examples()\n    \"Test basic checkbox utilities.\"\ndef test_checkbox_colors_examples()\n    \"Test checkbox color variants.\"\ndef test_checkbox_sizes_examples()\n    \"Test checkbox size variants.\"\ndef test_checkbox_basic_fasthtml_examples()\n    \"Test basic checkbox example from daisyUI v5 documentation.\"\ndef test_checkbox_with_fieldset_fasthtml_examples()\n    \"Test checkbox with fieldset and label from daisyUI v5 documentation.\"\ndef test_checkbox_sizes_fasthtml_examples()\n    \"Test checkbox size variations from daisyUI v5 documentation.\"\ndef test_checkbox_colors_fasthtml_examples()\n    \"Test checkbox color variations from daisyUI v5 documentation.\"\ndef test_checkbox_disabled_fasthtml_examples()\n    \"Test disabled checkbox variations from daisyUI v5 documentation.\"\ndef test_checkbox_indeterminate_fasthtml_examples():\n    \"\"\"Test indeterminate checkbox from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Script, Div\n    \n    # Indeterminate checkbox (requires JavaScript to set the state)\n    # Note: The indeterminate state must be set via JavaScript\n    \"Test indeterminate checkbox from daisyUI v5 documentation.\"\ndef test_checkbox_custom_colors_fasthtml_examples()\n    \"Test checkbox with custom colors from daisyUI v5 documentation.\"\n\n\nVariables\ncheckbox  # Base checkbox component\ncheckbox_colors  # Checkbox color variants\ncheckbox_sizes  # Checkbox size variants\n\n\n\nDaisyUI CLI Configuration (cli_config.ipynb)\n\nConfiguration for the DaisyUI CLI tool\n\n\nImport\nfrom cjm_fasthtml_daisyui.cli.cli_config import (\n    get_daisyui_config\n)\n\n\nFunctions\ndef get_daisyui_config() -&gt; LibraryConfig: # Configuration for cjm-fasthtml-daisyui library\n    \"Get configuration for cjm-fasthtml-daisyui library.\"\n\n\n\ncode mockup (code.ipynb)\n\nCode mockup is used to show a block of code in a box that looks like a code editor.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.mockup.code import (\n    mockup_code,\n    test_mockup_code_basic_examples,\n    test_mockup_code_with_line_prefix_fasthtml_examples,\n    test_mockup_code_multi_line_fasthtml_examples,\n    test_mockup_code_highlighted_line_fasthtml_examples,\n    test_mockup_code_long_line_fasthtml_examples,\n    test_mockup_code_without_prefix_fasthtml_examples,\n    test_mockup_code_with_color_fasthtml_examples\n)\n\n\nFunctions\ndef test_mockup_code_basic_examples()\n    \"Test basic mockup_code utilities.\"\ndef test_mockup_code_with_line_prefix_fasthtml_examples()\n    \"Test mockup code with line prefix from daisyUI v5 documentation.\"\ndef test_mockup_code_multi_line_fasthtml_examples()\n    \"Test multi-line mockup code from daisyUI v5 documentation.\"\ndef test_mockup_code_highlighted_line_fasthtml_examples()\n    \"Test mockup code with highlighted line from daisyUI v5 documentation.\"\ndef test_mockup_code_long_line_fasthtml_examples()\n    \"Test mockup code with long line that will scroll from daisyUI v5 documentation.\"\ndef test_mockup_code_without_prefix_fasthtml_examples()\n    \"Test mockup code without prefix from daisyUI v5 documentation.\"\ndef test_mockup_code_with_color_fasthtml_examples()\n    \"Test mockup code with custom color from daisyUI v5 documentation.\"\n\n\nVariables\nmockup_code  # Base mockup code component\n\n\n\ncollapse (collapse.ipynb)\n\nCollapse is used for showing and hiding content.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.collapse import (\n    collapse,\n    collapse_title,\n    collapse_content,\n    collapse_modifiers,\n    test_collapse_basic_examples,\n    test_collapse_modifiers_examples,\n    test_collapse_basic_fasthtml_examples,\n    test_collapse_style_fasthtml_examples,\n    test_collapse_state_fasthtml_examples,\n    test_collapse_color_fasthtml_examples\n)\n\n\nFunctions\ndef test_collapse_basic_examples()\n    \"Test basic collapse utilities.\"\ndef test_collapse_modifiers_examples()\n    \"Test collapse modifier utilities.\"\ndef test_collapse_basic_fasthtml_examples()\n    \"Test basic collapse examples: focus, checkbox, and details/summary from daisyUI v5 documentation.\"\ndef test_collapse_style_fasthtml_examples()\n    \"Test collapse style examples: without border/background, with arrow icon, with plus/minus icon from daisyUI v5 documentation.\"\ndef test_collapse_state_fasthtml_examples()\n    \"Test collapse state examples: force open and force close from daisyUI v5 documentation.\"\ndef test_collapse_color_fasthtml_examples()\n    \"Test collapse color examples: custom colors for focus and checkbox from daisyUI v5 documentation.\"\n\n\nVariables\ncollapse  # Collapse container\ncollapse_title  # Collapse title\ncollapse_content  # Collapse content\n\n\n\ncolors (colors.ipynb)\n\nSemantic color system builders for daisyUI components\n\n\nImport\nfrom cjm_fasthtml_daisyui.builders.colors import (\n    SemanticColorValue,\n    SemanticColorBrand,\n    SemanticColorStatus,\n    SemanticColorBase,\n    SemanticColorContent,\n    SemanticColor,\n    is_valid_semantic_color,\n    ColoredUtilityDaisyUI,\n    ColoredFactoryDaisyUI,\n    test_colors_semantic_enum_examples,\n    test_colors_validation_examples,\n    test_colors_factory_examples,\n    test_colors_opacity_examples,\n    test_colors_arbitrary_examples,\n    test_colors_multiple_utilities_examples,\n    test_colors_practical_usage_examples,\n    test_colors_modifier_examples,\n    get_all_semantic_colors,\n    get_brand_colors,\n    get_base_colors,\n    get_status_colors\n)\n\n\nFunctions\ndef is_valid_semantic_color(\n    value: str  # The value to check\n) -&gt; bool:  # True if value is a valid daisyUI semantic color\n    \"Check if a value is a valid daisyUI semantic color.\"\ndef test_colors_semantic_enum_examples()\n    \"Test semantic color enum.\"\ndef test_colors_validation_examples()\n    \"Test semantic color validation functions.\"\ndef test_colors_factory_examples()\n    \"Test ColoredFactoryDaisyUI with various semantic color specifications.\"\ndef test_colors_opacity_examples()\n    \"Test opacity modifiers with semantic color utilities.\"\ndef test_colors_arbitrary_examples()\n    \"Test arbitrary color values and custom properties.\"\ndef test_colors_multiple_utilities_examples()\n    \"Test semantic color system with multiple utility types.\"\ndef test_colors_practical_usage_examples()\n    \"Test practical usage patterns with FastHTML components.\"\ndef test_colors_modifier_examples()\n    \"Test semantic color utilities with modifiers for conditional styling.\"\ndef get_all_semantic_colors() -&gt; List[str]\n    \"Get list of all daisyUI semantic color names.\"\ndef get_brand_colors() -&gt; List[str]\n    \"Get list of brand semantic colors.\"\ndef get_base_colors() -&gt; List[str]\n    \"Get list of base semantic colors.\"\ndef get_status_colors() -&gt; List[str]\n    \"Get list of status semantic colors.\"\n\n\nClasses\nclass SemanticColorBrand(str, Enum):\n    \"daisyUI semantic brand color names.\"\nclass SemanticColorStatus(str, Enum):\n    \"daisyUI semantic status color names.\"\nclass SemanticColorBase(str, Enum):\n    \"daisyUI semantic base color names.\"\nclass SemanticColorContent(str, Enum):\n    \"daisyUI semantic content color names.\"\nclass SemanticColor(str, Enum):\n    \"daisyUI semantic color names.\"\nclass ColoredUtilityDaisyUI:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n        color: Optional[SemanticColorValue] = None,  # The semantic color value\n        opacity: Optional[Union[int, str]] = None  # Optional opacity value (0-100 or arbitrary)\n    )\n    \"Utility class with daisyUI semantic color and opacity support.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n            color: Optional[SemanticColorValue] = None,  # The semantic color value\n            opacity: Optional[Union[int, str]] = None  # Optional opacity value (0-100 or arbitrary)\n        )\n        \"Initialize with prefix, optional semantic color, and optional opacity.\"\n    \n    def opacity(\n            self,\n            value: Union[int, str]  # Opacity value (0-100 or arbitrary)\n        ) -&gt; 'ColoredUtilityDaisyUI':  # A new instance with opacity set\n        \"Return a new ColoredUtilityDaisyUI instance with opacity value.\"\nclass ColoredFactoryDaisyUI:\n    def __init__(\n        self,\n        prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n        doc: Optional[str] = None  # Optional documentation string\n    )\n    \"Factory for creating daisyUI semantic color-based utilities.\"\n    \n    def __init__(\n            self,\n            prefix: str,  # The utility prefix (e.g., 'bg', 'text', 'border')\n            doc: Optional[str] = None  # Optional documentation string\n        )\n        \"Initialize factory with prefix and documentation.\"\n    \n    def get_info(\n            self\n        ) -&gt; Dict[str, Any]:  # Dictionary with factory information\n        \"Get detailed information about this semantic color factory.\"\n\n\n\ncountdown (countdown.ipynb)\n\nCountdown gives you a transition effect when you change a number between 0 to 99.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.countdown import (\n    countdown,\n    test_countdown_basic_examples,\n    test_countdown_basic_fasthtml_examples,\n    test_countdown_clock_fasthtml_examples,\n    test_countdown_labels_fasthtml_examples,\n    test_countdown_boxes_fasthtml_examples\n)\n\n\nFunctions\ndef test_countdown_basic_examples()\n    \"Test basic countdown utilities.\"\ndef test_countdown_basic_fasthtml_examples()\n    \"Test basic countdown and large text from daisyUI v5 documentation.\"\ndef test_countdown_clock_fasthtml_examples()\n    \"Test clock countdown and clock countdown with colons from daisyUI v5 documentation.\"\ndef test_countdown_labels_fasthtml_examples()\n    \"Test large text with labels and labels under from daisyUI v5 documentation.\"\ndef test_countdown_boxes_fasthtml_examples()\n    \"Test countdown in boxes from daisyUI v5 documentation.\"\n\n\nVariables\ncountdown  # Countdown wrapper\n\n\n\ndiff (diff.ipynb)\n\nDiff component shows a side-by-side comparison of two items.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.diff import (\n    diff,\n    diff_item_1,\n    diff_item_2,\n    diff_resizer,\n    test_diff_basic_examples,\n    test_diff_basic_fasthtml_examples\n)\n\n\nFunctions\ndef test_diff_basic_examples()\n    \"Test basic diff utilities.\"\ndef test_diff_basic_fasthtml_examples()\n    \"Test basic diff and diff text from daisyUI v5 documentation.\"\n\n\nVariables\ndiff  # Diff container\ndiff_item_1  # First item\ndiff_item_2  # Second item\ndiff_resizer  # Resizer control\n\n\n\ndivider (divider.ipynb)\n\nDivider will be used to separate content vertically or horizontally.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.divider import (\n    divider,\n    divider_colors,\n    divider_directions,\n    divider_placement,\n    DividerDirection,\n    DividerPlacement,\n    test_divider_basic_examples,\n    test_divider_colors_examples,\n    test_divider_directions_examples,\n    test_divider_placement_examples,\n    test_divider_basic_fasthtml_examples,\n    test_divider_horizontal_fasthtml_examples,\n    test_divider_responsive_fasthtml_examples,\n    test_divider_colors_fasthtml_examples,\n    test_divider_positions_fasthtml_examples\n)\n\n\nFunctions\ndef test_divider_basic_examples()\n    \"Test basic divider utilities.\"\ndef test_divider_colors_examples()\n    \"Test divider color variants.\"\ndef test_divider_directions_examples()\n    \"Test divider directions variants.\"\ndef test_divider_placement_examples()\n    \"Test divider placement variants.\"\ndef test_divider_basic_fasthtml_examples()\n    \"Test basic divider and divider with no text from daisyUI v5 documentation.\"\ndef test_divider_horizontal_fasthtml_examples()\n    \"Test horizontal divider from daisyUI v5 documentation.\"\ndef test_divider_responsive_fasthtml_examples()\n    \"Test responsive divider (lg:divider-horizontal) from daisyUI v5 documentation.\"\ndef test_divider_colors_fasthtml_examples()\n    \"Test divider with colors from daisyUI v5 documentation.\"\ndef test_divider_positions_fasthtml_examples()\n    \"Test divider in different positions (vertical and horizontal) from daisyUI v5 documentation.\"\n\n\nClasses\nclass DividerDirection(str, Enum):\nclass DividerPlacement(str, Enum):\n\n\nVariables\ndivider  # Base divider component\ndivider_colors  # divider color variants\ndivider_directions  # divider directions\ndivider_placement  # divider directions\n\n\n\ndock (dock.ipynb)\n\nDock (also know as Bottom navigation or Bottom bar) is a UI element that provides navigation options to the user. Dock sticks to the bottom of the screen.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.dock import (\n    dock,\n    dock_label,\n    dock_modifiers,\n    dock_sizes,\n    test_dock_basic_examples,\n    test_dock_modifiers_examples,\n    test_dock_sizes_examples,\n    test_dock_basic_fasthtml_examples,\n    test_dock_sizes_fasthtml_examples,\n    test_dock_custom_colors_fasthtml_examples\n)\n\n\nFunctions\ndef test_dock_basic_examples()\n    \"Test basic dock utilities.\"\ndef test_dock_modifiers_examples()\n    \"Test dock modifier utilities.\"\ndef test_dock_sizes_examples()\n    \"Test dock size variants.\"\ndef test_dock_basic_fasthtml_examples()\n    \"Test basic dock example from daisyUI v5 documentation.\"\ndef test_dock_sizes_fasthtml_examples()\n    \"Test dock size variations from daisyUI v5 documentation.\"\ndef test_dock_custom_colors_fasthtml_examples()\n    \"Test dock with custom colors from daisyUI v5 documentation.\"\n\n\nVariables\ndock  # Base dock component\ndock_label  # Dock label\ndock_sizes  # Dock size variants\n\n\n\ndrawer (drawer.ipynb)\n\nDrawer is a grid layout that can show/hide a sidebar on the left or right side of the page.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.drawer import (\n    drawer,\n    drawer_toggle,\n    drawer_content,\n    drawer_side,\n    drawer_overlay,\n    drawer_placement,\n    drawer_modifiers,\n    DrawerPlacement,\n    DrawerModifier,\n    test_drawer_basic_examples,\n    test_drawer_placement_examples,\n    test_drawer_modifier_examples,\n    test_drawer_basic_fasthtml_examples,\n    test_drawer_navbar_mobile_fasthtml_examples,\n    test_drawer_responsive_fasthtml_examples,\n    test_drawer_end_fasthtml_examples\n)\n\n\nFunctions\ndef test_drawer_basic_examples()\n    \"Test basic drawer utilities.\"\ndef test_drawer_placement_examples()\n    \"Test drawer placement variants.\"\ndef test_drawer_modifier_examples()\n    \"Test drawer modifier variants.\"\ndef test_drawer_basic_fasthtml_examples()\n    \"Test basic drawer example from daisyUI v5 documentation.\"\ndef test_drawer_navbar_mobile_fasthtml_examples()\n    \"Test navbar menu for desktop + sidebar drawer for mobile from daisyUI v5 documentation.\"\ndef test_drawer_responsive_fasthtml_examples()\n    \"Test responsive drawer from daisyUI v5 documentation.\"\ndef test_drawer_end_fasthtml_examples()\n    \"Test drawer that opens from right side of page from daisyUI v5 documentation.\"\n\n\nClasses\nclass DrawerPlacement(str, Enum):\nclass DrawerModifier(str, Enum):\n\n\nVariables\ndrawer  # Base drawer component\ndrawer_toggle  # Drawer toggle part\ndrawer_content  # Drawer content part\ndrawer_side  # Drawer sidbar part\ndrawer_overlay  # Drawer overlay part\ndrawer_placement  # drawer placement\ndrawer_modifiers  # drawer modifiers\n\n\n\ndropdown (dropdown.ipynb)\n\nDropdown can open a menu or any other element when the button is clicked.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.actions.dropdown import (\n    dropdown,\n    dropdown_content,\n    dropdown_placement,\n    dropdown_modifiers,\n    test_dropdown_basic_examples,\n    test_dropdown_placement_examples,\n    test_dropdown_modifiers_examples,\n    test_dropdown_basic_fasthtml_examples,\n    test_dropdown_placement_fasthtml_examples,\n    test_dropdown_hover_and_state_fasthtml_examples,\n    test_dropdown_content_variations_fasthtml_examples\n)\n\n\nFunctions\ndef test_dropdown_basic_examples()\n    \"Test basic dropdown utilities.\"\ndef test_dropdown_placement_examples()\n    \"Test dropdown placement options.\"\ndef test_dropdown_modifiers_examples()\n    \"Test dropdown modifier utilities.\"\ndef test_dropdown_basic_fasthtml_examples()\n    \"Test basic dropdown implementations including details/summary and popover API.\"\ndef test_dropdown_placement_fasthtml_examples():\n    \"\"\"Test dropdown placement variations for all positions.\"\"\"\n    from fasthtml.common import Div, Ul, Li, A\n    from cjm_fasthtml_tailwind.core.base import combine_classes\n    from cjm_fasthtml_tailwind.utilities.spacing import m, p\n    from cjm_fasthtml_tailwind.utilities.layout import z\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    from cjm_fasthtml_tailwind.utilities.effects import shadow\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.utilities.border_radius import border_radius\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    from cjm_fasthtml_daisyui.components.navigation.menu import menu\n    \n    # Helper function to create dropdown content\n    def create_dropdown_content()\n    \"Test dropdown placement variations for all positions.\"\ndef test_dropdown_hover_and_state_fasthtml_examples()\n    \"Test dropdown hover behavior and force open state.\"\ndef test_dropdown_content_variations_fasthtml_examples()\n    \"Test dropdown with different content types including cards and navbar integration.\"\n\n\nVariables\ndropdown  # Dropdown container\ndropdown_content  # Dropdown content\n\n\n\nDaisyUI Explorer (explorer.ipynb)\n\nCLI tool for exploring cjm-fasthtml-daisyui components and builders\n\n\nImport\nfrom cjm_fasthtml_daisyui.cli.explorer import (\n    initialize_daisyui_cli,\n    setup_argument_parser,\n    main\n)\n\n\nFunctions\ndef initialize_daisyui_cli() -&gt; LibraryConfig: # Configuration for the CLI\n    \"Initialize the CLI with DaisyUI configuration.\"\ndef setup_argument_parser(\n    config: Optional[LibraryConfig] = None  # Optional configuration to use\n) -&gt; argparse.ArgumentParser: # Main argument parser with all subcommands\n    \"Set up the main argument parser with all subcommands.\"\ndef main() -&gt; None: # CLI entry point\n    \"\"\"CLI entry point for exploring cjm-fasthtml-daisyui components.\"\"\"\n    # Initialize with DaisyUI configuration\n    initialize_daisyui_cli();\n    \n    # Set up the argument parser (will use DaisyUI config)\n    parser = setup_argument_parser()\n    \n    # Parse arguments\n    args = parser.parse_args()\n    \n    # If no command specified, show help\n    if args.command is None\n    \"CLI entry point for exploring cjm-fasthtml-daisyui components.\"\n\n\n\nFAB / Speed Dial (fab.ipynb)\n\nFAB (Floating Action Button) stays in the bottom corner of screen. It includes a focusable and accessible element with button role. Clicking or focusing it shows additional buttons (known as Speed Dial buttons) in a vertical arrangement or a flower shape (quarter circle with up to 4 buttons).\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.actions.fab import (\n    fab,\n    fab_close,\n    fab_main_action,\n    fab_modifiers,\n    test_fab_basic_examples,\n    test_fab_modifiers_examples,\n    test_fab_basic_fasthtml_examples,\n    test_fab_with_svgs_fasthtml_examples,\n    test_fab_with_labels_fasthtml_examples,\n    test_fab_rectangle_buttons_fasthtml_examples,\n    test_fab_close_fasthtml_examples,\n    test_fab_main_action_fasthtml_examples,\n    test_fab_single_fasthtml_examples,\n    test_fab_flower_fasthtml_examples,\n    test_fab_flower_with_svgs_fasthtml_examples,\n    test_fab_flower_with_tooltip_fasthtml_examples\n)\n\n\nFunctions\ndef test_fab_basic_examples()\n    \"Test basic FAB utilities.\"\ndef test_fab_modifiers_examples()\n    \"Test button FAB utilities.\"\ndef test_fab_basic_fasthtml_examples()\n    \"Test basic FAB examples from daisyUI v5 documentation.\"\ndef test_fab_with_svgs_fasthtml_examples()\n    \"Test FAB with SVG icons from daisyUI v5 documentation.\"\ndef test_fab_with_labels_fasthtml_examples()\n    \"Test FAB with labels from daisyUI v5 documentation.\"\ndef test_fab_rectangle_buttons_fasthtml_examples()\n    \"Test FAB with rectangle buttons from daisyUI v5 documentation.\"\ndef test_fab_close_fasthtml_examples()\n    \"Test FAB with close button from daisyUI v5 documentation.\"\ndef test_fab_main_action_fasthtml_examples()\n    \"Test FAB with main action button from daisyUI v5 documentation.\"\ndef test_fab_single_fasthtml_examples()\n    \"Test a single FAB from daisyUI v5 documentation.\"\ndef test_fab_flower_fasthtml_examples()\n    \"Test FAB flower modifier from daisyUI v5 documentation.\"\ndef test_fab_flower_with_svgs_fasthtml_examples()\n    \"Test FAB flower modifier with SVG icons from daisyUI v5 documentation.\"\ndef test_fab_flower_with_tooltip_fasthtml_examples()\n    \"Test FAB flower modifier with tooltip from daisyUI v5 documentation.\"\n\n\nVariables\nfab  # Fab container element\nfab_close  # Fab close part\nfab_main_action  # FAB main action part\n\n\n\nfieldset (fieldset.ipynb)\n\nFieldset is a container for grouping related form elements. It includes fieldset-legend as a title and label as a description.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.fieldset import (\n    fieldset,\n    label,\n    fieldset_legend,\n    test_fieldset_basic_examples,\n    test_fieldset_basic_fasthtml_examples,\n    test_fieldset_with_background_fasthtml_examples,\n    test_fieldset_multiple_inputs_fasthtml_examples,\n    test_fieldset_join_items_fasthtml_examples,\n    test_fieldset_login_form_fasthtml_examples\n)\n\n\nFunctions\ndef test_fieldset_basic_examples()\n    \"Test basic fieldset utilities.\"\ndef test_fieldset_basic_fasthtml_examples()\n    \"Test basic fieldset with legend and label from daisyUI v5 documentation.\"\ndef test_fieldset_with_background_fasthtml_examples()\n    \"Test fieldset with background and border from daisyUI v5 documentation.\"\ndef test_fieldset_multiple_inputs_fasthtml_examples()\n    \"Test fieldset with multiple inputs from daisyUI v5 documentation.\"\ndef test_fieldset_join_items_fasthtml_examples()\n    \"Test fieldset with multiple join items from daisyUI v5 documentation.\"\ndef test_fieldset_login_form_fasthtml_examples()\n    \"Test login form with fieldset from daisyUI v5 documentation.\"\n\n\nVariables\nfieldset  # Base fieldset component\nlabel  # Base label component\nfieldset_legend  # fieldset legend part\n\n\n\nfile input (file_input.ipynb)\n\nFile Input is a an input field for uploading files.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.file_input import (\n    file_input,\n    file_input_styles,\n    file_input_colors,\n    file_input_sizes,\n    test_file_input_basic_examples,\n    test_file_input_styles_examples,\n    test_file_input_colors_examples,\n    test_file_input_sizes_examples,\n    test_file_input_basic_fasthtml_examples,\n    test_file_input_with_fieldset_fasthtml_examples,\n    test_file_input_sizes_fasthtml_examples,\n    test_file_input_colors_fasthtml_examples,\n    test_file_input_states_fasthtml_examples\n)\n\n\nFunctions\ndef test_file_input_basic_examples()\n    \"Test basic file_input utilities.\"\ndef test_file_input_styles_examples()\n    \"Test file_input style variants.\"\ndef test_file_input_colors_examples()\n    \"Test file_input color variants.\"\ndef test_file_input_sizes_examples()\n    \"Test file_input size variants.\"\ndef test_file_input_basic_fasthtml_examples()\n    \"Test basic file input and ghost style from daisyUI v5 documentation.\"\ndef test_file_input_with_fieldset_fasthtml_examples()\n    \"Test file input with fieldset and label from daisyUI v5 documentation.\"\ndef test_file_input_sizes_fasthtml_examples()\n    \"Test file input size variations from daisyUI v5 documentation.\"\ndef test_file_input_colors_fasthtml_examples()\n    \"Test file input color variations from daisyUI v5 documentation.\"\ndef test_file_input_states_fasthtml_examples()\n    \"Test disabled file input from daisyUI v5 documentation.\"\n\n\nVariables\nfile_input  # Base file input component\nfile_input_styles  # File input style variants\nfile_input_colors  # File input color variants\nfile_input_sizes  # File input size variants\n\n\n\nfilter (filter.ipynb)\n\nFilter is a group of radio buttons. Choosing one of the options will hide the others and shows a reset button next to the chosen option.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.filter import (\n    filter_dui,\n    filter_dui_reset,\n    test_filter_basic_examples,\n    test_filter_with_form_fasthtml_examples,\n    test_filter_without_form_fasthtml_examples\n)\n\n\nFunctions\ndef test_filter_basic_examples()\n    \"Test basic filter utilities.\"\ndef test_filter_with_form_fasthtml_examples()\n    \"Test filter using HTML form, radio buttons and reset button from daisyUI v5 documentation.\"\ndef test_filter_without_form_fasthtml_examples()\n    \"Test filter without HTML form from daisyUI v5 documentation.\"\n\n\nVariables\nfilter_dui  # Base filter component\nfilter_dui_reset  # Filter reset part\n\n\n\nfooter (footer.ipynb)\n\nFooter can contain logo, copyright notice, and links to other pages.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.footer import (\n    footer,\n    footer_title,\n    footer_placement,\n    footer_directions,\n    FooterPlacement,\n    FooterDirection,\n    test_footer_basic_examples,\n    test_footer_placement_examples,\n    test_footer_directions_examples,\n    test_footer_basic_fasthtml_examples,\n    test_footer_with_logo_fasthtml_examples,\n    test_footer_with_form_fasthtml_examples,\n    test_footer_with_social_icons_fasthtml_examples,\n    test_footer_copyright_fasthtml_examples,\n    test_footer_copyright_with_icons_fasthtml_examples,\n    test_footer_with_links_and_social_fasthtml_examples,\n    test_footer_centered_with_logo_fasthtml_examples,\n    test_footer_with_two_rows_fasthtml_examples,\n    test_footer_centered_with_social_fasthtml_examples,\n    test_footer_two_stacked_fasthtml_examples\n)\n\n\nFunctions\ndef test_footer_basic_examples()\n    \"Test basic footer utilities.\"\ndef test_footer_placement_examples()\n    \"Test footer placement variants.\"\ndef test_footer_directions_examples()\n    \"Test footer directions variants.\"\ndef test_footer_basic_fasthtml_examples()\n    \"Test basic footer with navigation sections from daisyUI v5 documentation.\"\ndef test_footer_with_logo_fasthtml_examples()\n    \"Test footer with logo section from daisyUI v5 documentation.\"\ndef test_footer_with_form_fasthtml_examples()\n    \"Test footer with newsletter form from daisyUI v5 documentation.\"\ndef test_footer_with_social_icons_fasthtml_examples()\n    \"Test footer with social icons from daisyUI v5 documentation.\"\ndef test_footer_copyright_fasthtml_examples()\n    \"Test footer with copyright text from daisyUI v5 documentation.\"\ndef test_footer_copyright_with_icons_fasthtml_examples()\n    \"Test footer with copyright text and social icons from daisyUI v5 documentation.\"\ndef test_footer_with_links_and_social_fasthtml_examples()\n    \"Test footer with links and social icons from daisyUI v5 documentation.\"\ndef test_footer_centered_with_logo_fasthtml_examples()\n    \"Test centered footer with logo and social icons from daisyUI v5 documentation.\"\ndef test_footer_with_two_rows_fasthtml_examples()\n    \"Test footer with 2 rows from daisyUI v5 documentation.\"\ndef test_footer_centered_with_social_fasthtml_examples()\n    \"Test centered footer with social icons from daisyUI v5 documentation.\"\ndef test_footer_two_stacked_fasthtml_examples()\n    \"Test two stacked footers from daisyUI v5 documentation.\"\n\n\nClasses\nclass FooterPlacement(str, Enum):\nclass FooterDirection(str, Enum):\n\n\nVariables\nfooter  # Base footer component\nfooter_title  # footer title part\nfooter_placement  # footer placement\nfooter_directions  # footer directions\n\n\n\nGlass Effect Utility (glass.ipynb)\n\nThe glass utility creates a glass morphism effect on elements:\n\n\nImport\nfrom cjm_fasthtml_daisyui.utilities.glass import (\n    glass,\n    test_glass_basic_examples,\n    test_glass_fasthtml_examples\n)\n\n\nFunctions\ndef test_glass_basic_examples()\n    \"Test glass morphism effect utility.\"\ndef test_glass_fasthtml_examples()\n    \"Test practical usage patterns with FastHTML components.\"\n\n\nVariables\nglass  # Glass morphism effect\n\n\n\nhero (hero.ipynb)\n\nHero is a component for displaying a large box or image with a title and description.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.hero import (\n    hero,\n    hero_content,\n    hero_overlay,\n    test_hero_basic_examples,\n    test_hero_centered_fasthtml_examples,\n    test_hero_with_figure_fasthtml_examples,\n    test_hero_with_form_fasthtml_examples,\n    test_hero_with_overlay_fasthtml_examples\n)\n\n\nFunctions\ndef test_hero_basic_examples()\n    \"Test basic hero utilities.\"\ndef test_hero_centered_fasthtml_examples()\n    \"Test centered hero example from daisyUI v5 documentation.\"\ndef test_hero_with_figure_fasthtml_examples()\n    \"Test hero with figure examples from daisyUI v5 documentation.\"\ndef test_hero_with_form_fasthtml_examples()\n    \"Test hero with form example from daisyUI v5 documentation.\"\ndef test_hero_with_overlay_fasthtml_examples()\n    \"Test hero with overlay image example from daisyUI v5 documentation.\"\n\n\nVariables\nhero  # Base hero component\nhero_content  # Hero content part\nhero_overlay  # Hero overlay part\n\n\n\nhover gallery (hover_gallery.ipynb)\n\nHover Gallery is container of images. The first image is visible be default and when we hover it horizontally, other images show up. Hover Gallery is useful for product cards in ecommerce sites, portfoilios or in image galleries. Hover Gallery can include up to 10 images.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.hover_gallery import (\n    hover_gallery,\n    test_hover_gallery_basic_examples,\n    test_hover_gallery_basic_fasthtml_examples,\n    test_hover_gallery_card_fasthtml_examples\n)\n\n\nFunctions\ndef test_hover_gallery_basic_examples()\n    \"Test basic hover gallery utilities.\"\ndef test_hover_gallery_basic_fasthtml_examples()\n    \"Test basic hover gallery from daisyUI v5 documentation.\"\ndef test_hover_gallery_card_fasthtml_examples()\n    \"Test basic hover gallery in card from daisyUI v5 documentation.\"\n\n\nVariables\nhover_gallery  # Hover gallery container\n\n\n\nindicator (indicator.ipynb)\n\nIndicators are used to place an element on the corner of another element.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.indicator import (\n    indicator,\n    indicator_item,\n    indicator_placement,\n    IndicatorPlacement,\n    test_indicator_basic_examples,\n    test_indicator_placement_examples,\n    test_indicator_basic_fasthtml_examples,\n    test_indicator_for_components_fasthtml_examples,\n    test_indicator_card_fasthtml_examples,\n    test_indicator_image_overlay_fasthtml_examples,\n    test_indicator_positions_fasthtml_examples,\n    test_indicator_multiple_fasthtml_examples,\n    test_indicator_responsive_fasthtml_examples\n)\n\n\nFunctions\ndef test_indicator_basic_examples()\n    \"Test basic indicator utilities.\"\ndef test_indicator_placement_examples()\n    \"Test indicator placement options.\"\ndef test_indicator_basic_fasthtml_examples()\n    \"Test basic indicator examples from daisyUI v5 documentation.\"\ndef test_indicator_for_components_fasthtml_examples()\n    \"Test indicator with various components from daisyUI v5 documentation.\"\ndef test_indicator_card_fasthtml_examples()\n    \"Test button as indicator for card from daisyUI v5 documentation.\"\ndef test_indicator_image_overlay_fasthtml_examples()\n    \"Test indicator in center of image from daisyUI v5 documentation.\"\ndef test_indicator_positions_fasthtml_examples():\n    \"\"\"Test all indicator position combinations from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Span\n    from cjm_fasthtml_tailwind.utilities.sizing import h, w\n    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import place_items, grid_display\n    from cjm_fasthtml_tailwind.utilities.layout import display_tw\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors\n    from cjm_fasthtml_daisyui.components.layout.divider import divider, divider_directions\n    \n    # Helper function to create indicator box\n    def create_indicator_box(*position_classes)\n    \"Test all indicator position combinations from daisyUI v5 documentation.\"\ndef test_indicator_multiple_fasthtml_examples()\n    \"Test multiple indicators from daisyUI v5 documentation.\"\ndef test_indicator_responsive_fasthtml_examples()\n    \"Test responsive indicator from daisyUI v5 documentation.\"\n\n\nClasses\nclass IndicatorPlacement(str, Enum):\n\n\nVariables\nindicator  # Base indicator component\nindicator_item  # Indicator item part\nindicator_placement  # indicator directions\n\n\n\njoin (join.ipynb)\n\nJoin is a container for grouping multiple items, it can be used to group buttons, inputs, etc. Join applies border radius to the first and last item. Join can be used to create a horizontal or vertical list of items.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.join import (\n    join,\n    join_item,\n    join_directions,\n    JoinDirection,\n    test_join_basic_examples,\n    test_join_directions_examples,\n    test_join_basic_fasthtml_examples,\n    test_join_vertical_fasthtml_examples,\n    test_join_responsive_fasthtml_examples,\n    test_join_with_extra_elements_fasthtml_examples,\n    test_join_custom_border_fasthtml_examples,\n    test_join_radio_inputs_fasthtml_examples\n)\n\n\nFunctions\ndef test_join_basic_examples()\n    \"Test basic join utilities.\"\ndef test_join_directions_examples()\n    \"Test join directions variants.\"\ndef test_join_basic_fasthtml_examples():\n    \"\"\"Test basic join example from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Button, Div\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Basic join with buttons\n    basic_join = Div(\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        Button(\"Button\", cls=combine_classes(btn, join_item)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert basic_join.tag == \"div\"\n    assert basic_join.attrs['class'] == \"join\"\n    \n    # Verify all buttons\n    assert len(basic_join.children) == 3\n    for i, button in enumerate(basic_join.children)\n    \"Test basic join example from daisyUI v5 documentation.\"\ndef test_join_vertical_fasthtml_examples()\n    \"Test vertical join example from daisyUI v5 documentation.\"\ndef test_join_responsive_fasthtml_examples()\n    \"Test responsive join example from daisyUI v5 documentation.\"\ndef test_join_with_extra_elements_fasthtml_examples()\n    \"Test join with extra elements from daisyUI v5 documentation.\"\ndef test_join_custom_border_fasthtml_examples()\n    \"Test join with custom border radius from daisyUI v5 documentation.\"\ndef test_join_radio_inputs_fasthtml_examples():\n    \"\"\"Test join with radio inputs styled as buttons from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div, Input\n    from cjm_fasthtml_daisyui.components.actions.button import btn\n    \n    # Join with radio inputs styled as buttons\n    radio_join = Div(\n        Input(type=\"radio\", name=\"options\", aria_label=\"Radio 1\", cls=combine_classes(join_item, btn)),\n        Input(type=\"radio\", name=\"options\", aria_label=\"Radio 2\", cls=combine_classes(join_item, btn)),\n        Input(type=\"radio\", name=\"options\", aria_label=\"Radio 3\", cls=combine_classes(join_item, btn)),\n        cls=str(join)\n    )\n    \n    # Verify structure\n    assert radio_join.tag == \"div\"\n    assert radio_join.attrs['class'] == \"join\"\n    assert len(radio_join.children) == 3\n    \n    # Verify all radio inputs\n    for i, radio in enumerate(radio_join.children, 1)\n    \"Test join with radio inputs styled as buttons from daisyUI v5 documentation.\"\n\n\nClasses\nclass JoinDirection(str, Enum):\n\n\nVariables\njoin  # Base join component\njoin_item  # Join item component\njoin_directions  # join directions\n\n\n\nkbd (kbd.ipynb)\n\nKbd is used to display keyboard shortcuts.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.kbd import (\n    kbd,\n    kbd_sizes,\n    test_kbd_basic_examples,\n    test_kbd_sizes_examples,\n    test_kbd_basic_fasthtml_examples,\n    test_kbd_combination_fasthtml_examples,\n    test_kbd_keyboard_fasthtml_examples\n)\n\n\nFunctions\ndef test_kbd_basic_examples()\n    \"Test basic kbd utilities.\"\ndef test_kbd_sizes_examples()\n    \"Test kbd size variants.\"\ndef test_kbd_basic_fasthtml_examples()\n    \"Test basic kbd and sizes from daisyUI v5 documentation.\"\ndef test_kbd_combination_fasthtml_examples()\n    \"Test key combinations and function keys from daisyUI v5 documentation.\"\ndef test_kbd_keyboard_fasthtml_examples()\n    \"Test full keyboard and arrow keys from daisyUI v5 documentation.\"\n\n\nVariables\nkbd  # Kbd component\nkbd_sizes  # Kbd size variants\n\n\n\nlabel (label.ipynb)\n\nLabel is used to provide a name or title for an input field. Label can be placed before or after the field.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.label import (\n    label,\n    floating_label,\n    test_label_basic_examples,\n    test_label_for_input_fasthtml_examples,\n    test_label_for_select_and_date_fasthtml_examples,\n    test_floating_label_fasthtml_examples,\n    test_floating_label_sizes_fasthtml_examples\n)\n\n\nFunctions\ndef test_label_basic_examples()\n    \"Test basic label utilities.\"\ndef test_label_for_input_fasthtml_examples()\n    \"Test label for input examples from daisyUI v5 documentation.\"\ndef test_label_for_select_and_date_fasthtml_examples()\n    \"Test label for select and date input examples from daisyUI v5 documentation.\"\ndef test_floating_label_fasthtml_examples()\n    \"Test floating label example from daisyUI v5 documentation.\"\ndef test_floating_label_sizes_fasthtml_examples()\n    \"Test floating label with different sizes from daisyUI v5 documentation.\"\n\n\nVariables\nlabel  # Base label component\nfloating_label  # Base floating label component\n\n\n\nlink (link.ipynb)\n\nLink adds the missing underline style to links.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.link import (\n    link,\n    link_styles,\n    link_colors,\n    LinkStyle,\n    test_link_basic_examples,\n    test_link_styles_examples,\n    test_link_colors_examples,\n    test_link_basic_fasthtml_examples,\n    test_link_colors_fasthtml_examples,\n    test_link_hover_fasthtml_examples\n)\n\n\nFunctions\ndef test_link_basic_examples()\n    \"Test basic link utilities.\"\ndef test_link_styles_examples()\n    \"Test link style variants.\"\ndef test_link_colors_examples()\n    \"Test link color variants.\"\ndef test_link_basic_fasthtml_examples()\n    \"Test basic link examples from daisyUI v5 documentation.\"\ndef test_link_colors_fasthtml_examples()\n    \"Test link color variations from daisyUI v5 documentation.\"\ndef test_link_hover_fasthtml_examples()\n    \"Test link hover style from daisyUI v5 documentation.\"\n\n\nClasses\nclass LinkStyle(str, Enum):\n\n\nVariables\nlink  # Link component\nlink_styles  # Link style variants\nlink_colors  # Link color variants\n\n\n\nlist (list.ipynb)\n\nList is a vertical layout to display information in rows.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.list import (\n    list_ui,\n    list_row,\n    list_modifiers,\n    test_list_basic_examples,\n    test_list_modifiers_examples,\n    test_list_basic_fasthtml_examples,\n    test_list_column_grow_fasthtml_examples,\n    test_list_column_wrap_fasthtml_examples\n)\n\n\nFunctions\ndef test_list_basic_examples()\n    \"Test basic list utilities.\"\ndef test_list_modifiers_examples()\n    \"Test list modifier utilities.\"\ndef test_list_basic_fasthtml_examples()\n    \"Test basic list example: second column grows (default behavior) from daisyUI v5 documentation.\"\ndef test_list_column_grow_fasthtml_examples()\n    \"Test list example: third column grows from daisyUI v5 documentation.\"\ndef test_list_column_wrap_fasthtml_examples()\n    \"Test list example: third column wraps to next row from daisyUI v5 documentation.\"\n\n\nVariables\nlist_ui  # List container\nlist_row  # List row\n\n\n\nloading (loading.ipynb)\n\nLoading shows an animation to indicate that something is loading.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.feedback.loading import (\n    loading,\n    loading_styles,\n    loading_sizes,\n    LoadingStyle,\n    test_loading_basic_examples,\n    test_loading_styles_examples,\n    test_loading_sizes_examples,\n    test_loading_spinner_fasthtml_examples,\n    test_loading_dots_fasthtml_examples,\n    test_loading_ring_fasthtml_examples,\n    test_loading_ball_fasthtml_examples,\n    test_loading_bars_fasthtml_examples,\n    test_loading_infinity_fasthtml_examples,\n    test_loading_with_colors_fasthtml_examples\n)\n\n\nFunctions\ndef test_loading_basic_examples()\n    \"Test basic loading utilities.\"\ndef test_loading_styles_examples()\n    \"Test loading style variants.\"\ndef test_loading_sizes_examples()\n    \"Test loading size variants.\"\ndef test_loading_spinner_fasthtml_examples()\n    \"Test loading spinner with all sizes from daisyUI v5 documentation.\"\ndef test_loading_dots_fasthtml_examples()\n    \"Test loading dots with all sizes from daisyUI v5 documentation.\"\ndef test_loading_ring_fasthtml_examples()\n    \"Test loading ring with all sizes from daisyUI v5 documentation.\"\ndef test_loading_ball_fasthtml_examples()\n    \"Test loading ball with all sizes from daisyUI v5 documentation.\"\ndef test_loading_bars_fasthtml_examples()\n    \"Test loading bars with all sizes from daisyUI v5 documentation.\"\ndef test_loading_infinity_fasthtml_examples()\n    \"Test loading infinity with all sizes from daisyUI v5 documentation.\"\ndef test_loading_with_colors_fasthtml_examples()\n    \"Test loading with colors from daisyUI v5 documentation.\"\n\n\nClasses\nclass LoadingStyle(str, Enum):\n\n\nVariables\nloading  # Base loading component\nloading_styles  # Loading styles\nloading_sizes  # Loading size variants\n\n\n\nmask (mask.ipynb)\n\nMask crops the content of the element to common shapes.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.mask import (\n    mask,\n    mask_styles,\n    mask_modifiers,\n    MaskStyle,\n    MaskModifier,\n    test_mask_basic_examples,\n    test_mask_styles_examples,\n    test_mask_modifiers_examples,\n    test_mask_squircle_heart_hexagon_fasthtml_examples,\n    test_mask_hexagon2_decagon_pentagon_fasthtml_examples,\n    test_mask_diamond_square_circle_fasthtml_examples,\n    test_mask_star_variations_fasthtml_examples,\n    test_mask_triangle_variations_fasthtml_examples\n)\n\n\nFunctions\ndef test_mask_basic_examples()\n    \"Test basic mask utilities.\"\ndef test_mask_styles_examples()\n    \"Test mask style variants.\"\ndef test_mask_modifiers_examples()\n    \"Test mask modifier utilities.\"\ndef test_mask_squircle_heart_hexagon_fasthtml_examples()\n    \"Test mask with squircle, heart, and hexagon shapes from daisyUI v5 documentation.\"\ndef test_mask_hexagon2_decagon_pentagon_fasthtml_examples()\n    \"Test mask with hexagon-2, decagon, and pentagon shapes from daisyUI v5 documentation.\"\ndef test_mask_diamond_square_circle_fasthtml_examples()\n    \"Test mask with diamond, square, and circle shapes from daisyUI v5 documentation.\"\ndef test_mask_star_variations_fasthtml_examples()\n    \"Test mask with star and star-2 shapes from daisyUI v5 documentation.\"\ndef test_mask_triangle_variations_fasthtml_examples()\n    \"Test mask with triangle variations from daisyUI v5 documentation.\"\n\n\nClasses\nclass MaskStyle(str, Enum):\nclass MaskModifier(str, Enum):\n\n\nVariables\nmask  # Base mask component\nmask_styles  # mask style variants\nmask_modifiers  # mask modifiers\n\n\n\nmenu (menu.ipynb)\n\nMenu is used to display a list of links vertically or horizontally.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.menu import (\n    menu,\n    menu_title,\n    menu_dropdown,\n    menu_dropdown_toggle,\n    menu_modifiers,\n    menu_sizes,\n    menu_directions,\n    test_menu_basic_examples,\n    test_menu_modifiers_examples,\n    test_menu_sizes_examples,\n    test_menu_directions_examples,\n    test_menu_basic_fasthtml_examples,\n    test_menu_responsive_fasthtml_examples,\n    test_menu_icons_fasthtml_examples,\n    test_menu_sizes_fasthtml_examples,\n    test_menu_with_title_fasthtml_examples,\n    test_menu_submenu_fasthtml_examples,\n    test_menu_states_fasthtml_examples,\n    test_menu_file_tree_fasthtml_examples,\n    test_menu_mega_menu_fasthtml_examples,\n    test_menu_collapsible_responsive_fasthtml_examples\n)\n\n\nFunctions\ndef test_menu_basic_examples()\n    \"Test basic menu utilities.\"\ndef test_menu_modifiers_examples()\n    \"Test menu modifier utilities.\"\ndef test_menu_sizes_examples()\n    \"Test menu size variants.\"\ndef test_menu_directions_examples()\n    \"Test menu direction utilities.\"\ndef test_menu_basic_fasthtml_examples()\n    \"Test basic menu from daisyUI v5 documentation.\"\ndef test_menu_responsive_fasthtml_examples():\n    \"\"\"Test responsive menu and horizontal menu from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Ul, Li, A, Div\n    from cjm_fasthtml_tailwind.utilities.borders import rounded\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\n    \n    # Responsive: vertical on small screen, horizontal on large screen\n    \"Test responsive menu and horizontal menu from daisyUI v5 documentation.\"\ndef test_menu_icons_fasthtml_examples()\n    \"Test menu with icons from daisyUI v5 documentation.\"\ndef test_menu_sizes_fasthtml_examples()\n    \"Test menu sizes from daisyUI v5 documentation.\"\ndef test_menu_with_title_fasthtml_examples()\n    \"Test menu with title from daisyUI v5 documentation.\"\ndef test_menu_submenu_fasthtml_examples()\n    \"Test submenu examples from daisyUI v5 documentation.\"\ndef test_menu_states_fasthtml_examples()\n    \"Test menu states and modifiers from daisyUI v5 documentation.\"\ndef test_menu_file_tree_fasthtml_examples()\n    \"Test file tree menu from daisyUI v5 documentation.\"\ndef test_menu_mega_menu_fasthtml_examples()\n    \"Test mega menu with submenu (responsive) from daisyUI v5 documentation.\"\ndef test_menu_collapsible_responsive_fasthtml_examples()\n    \"Test collapsible with submenu (responsive) from daisyUI v5 documentation.\"\n\n\nVariables\nmenu  # Base menu component\nmenu_title  # Menu title part\nmenu_dropdown  # Menu dropdown part\nmenu_dropdown_toggle  # Menu dropdown toggle part\nmenu_sizes  # Menu size variants\n\n\n\nmodal (modal.ipynb)\n\nModal is used to show a dialog or a box when you click a button.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.actions.modal import (\n    modal,\n    modal_box,\n    modal_action,\n    modal_backdrop,\n    modal_toggle,\n    modal_placement,\n    modal_open,\n    test_modal_basic_examples,\n    test_modal_placement_examples,\n    test_modal_dialog_fasthtml_examples,\n    test_modal_checkbox_fasthtml_examples,\n    test_modal_anchor_fasthtml_examples\n)\n\n\nFunctions\ndef test_modal_basic_examples()\n    \"Test basic modal utilities.\"\ndef test_modal_placement_examples()\n    \"Test modal placement options.\"\ndef test_modal_dialog_fasthtml_examples()\n    \"Test modal examples using HTML dialog element (recommended method).\"\ndef test_modal_checkbox_fasthtml_examples()\n    \"Test modal examples using checkbox method (legacy).\"\ndef test_modal_anchor_fasthtml_examples()\n    \"Test modal examples using anchor links (legacy method).\"\n\n\nVariables\nmodal  # Modal container\nmodal_box  # Modal content box\nmodal_action  # Modal actions\nmodal_backdrop  # Modal backdrop\nmodal_toggle  # Modal toggle\nmodal_open  # Modal open state\n\n\n\nnavbar (navbar.ipynb)\n\nNavbar is used to show a navigation bar on the top of the page..\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.navbar import (\n    navbar,\n    navbar_start,\n    navbar_center,\n    navbar_end,\n    test_navbar_basic_examples,\n    test_navbar_title_only_fasthtml_examples,\n    test_navbar_with_title_and_icon_fasthtml_examples,\n    test_navbar_with_icons_fasthtml_examples,\n    test_navbar_with_menu_fasthtml_examples,\n    test_navbar_with_search_and_dropdown_fasthtml_examples,\n    test_navbar_with_icon_indicator_and_dropdown_fasthtml_examples,\n    test_navbar_with_dropdown_center_logo_fasthtml_examples,\n    test_navbar_responsive_fasthtml_examples,\n    test_navbar_colors_fasthtml_examples\n)\n\n\nFunctions\ndef test_navbar_basic_examples()\n    \"Test basic navbar utilities.\"\ndef test_navbar_title_only_fasthtml_examples()\n    \"Test navbar with title only from daisyUI v5 documentation.\"\ndef test_navbar_with_title_and_icon_fasthtml_examples()\n    \"Test navbar with title and icon from daisyUI v5 documentation.\"\ndef test_navbar_with_icons_fasthtml_examples()\n    \"Test navbar with icon at start and end from daisyUI v5 documentation.\"\ndef test_navbar_with_menu_fasthtml_examples()\n    \"Test navbar with menu and submenu from daisyUI v5 documentation.\"\ndef test_navbar_with_search_and_dropdown_fasthtml_examples()\n    \"Test navbar with search input and dropdown from daisyUI v5 documentation.\"\ndef test_navbar_with_icon_indicator_and_dropdown_fasthtml_examples()\n    \"Test navbar with icon, indicator and dropdown from daisyUI v5 documentation.\"\ndef test_navbar_with_dropdown_center_logo_fasthtml_examples()\n    \"Test navbar with dropdown, center logo and icon from daisyUI v5 documentation.\"\ndef test_navbar_responsive_fasthtml_examples()\n    \"Test responsive navbar from daisyUI v5 documentation.\"\ndef test_navbar_colors_fasthtml_examples()\n    \"Test navbar with colors from daisyUI v5 documentation.\"\n\n\nVariables\nnavbar  # Base navbar component\nnavbar_start  # Navbar start part\nnavbar_center  # Navbar center part\nnavbar_end  # Navbar end part\n\n\n\npagination (pagination.ipynb)\n\nPagination is a group of buttons that allow the user to navigate between a set of related content.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.pagination import (\n    test_pagination_basic_examples,\n    test_pagination_directions_examples,\n    test_pagination_basic_fasthtml_examples,\n    test_pagination_sizes_fasthtml_examples,\n    test_pagination_disabled_fasthtml_examples,\n    test_pagination_extra_small_fasthtml_examples,\n    test_pagination_grid_fasthtml_examples,\n    test_pagination_radio_fasthtml_examples\n)\n\n\nFunctions\ndef test_pagination_basic_examples()\n    \"Test basic pagination utilities.\"\ndef test_pagination_directions_examples()\n    \"Test join directions variants.\"\ndef test_pagination_basic_fasthtml_examples()\n    \"Test pagination with an active button from daisyUI v5 documentation.\"\ndef test_pagination_sizes_fasthtml_examples()\n    \"Test pagination with different button sizes from daisyUI v5 documentation.\"\ndef test_pagination_disabled_fasthtml_examples()\n    \"Test pagination with a disabled button from daisyUI v5 documentation.\"\ndef test_pagination_extra_small_fasthtml_examples()\n    \"Test extra small buttons pagination from daisyUI v5 documentation.\"\ndef test_pagination_grid_fasthtml_examples()\n    \"Test next/prev outline buttons with equal width from daisyUI v5 documentation.\"\ndef test_pagination_radio_fasthtml_examples()\n    \"Test pagination using radio inputs from daisyUI v5 documentation.\"\n\n\n\nphone mockup (phone.ipynb)\n\nPhone mockup shows a mockup of an iPhone.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.mockup.phone import (\n    mockup_phone,\n    mockup_phone_camera,\n    mockup_phone_display,\n    test_mockup_phone_basic_examples,\n    test_phone_mockup_basic_fasthtml_examples,\n    test_phone_mockup_with_color_and_wallpaper_fasthtml_examples\n)\n\n\nFunctions\ndef test_mockup_phone_basic_examples()\n    \"Test basic mockup_phone utilities.\"\ndef test_phone_mockup_basic_fasthtml_examples()\n    \"Test basic iPhone mockup from daisyUI v5 documentation.\"\ndef test_phone_mockup_with_color_and_wallpaper_fasthtml_examples()\n    \"Test phone mockup with color and wallpaper from daisyUI v5 documentation.\"\n\n\nVariables\nmockup_phone  # Base mockup phone component\nmockup_phone_camera  # Mockup phone camera part\nmockup_phone_display  # Mockup phone display part\n\n\n\nprogress (progress.ipynb)\n\nProgress bar can be used to show the progress of a task or to show the passing of time.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.feedback.progress import (\n    progress,\n    progress_colors,\n    test_progress_basic_examples,\n    test_progress_colors_examples,\n    test_progress_basic_fasthtml_examples,\n    test_progress_primary_color_fasthtml_examples,\n    test_progress_all_colors_fasthtml_examples,\n    test_progress_indeterminate_fasthtml_examples\n)\n\n\nFunctions\ndef test_progress_basic_examples()\n    \"Test basic progress utilities.\"\ndef test_progress_colors_examples()\n    \"Test progress color variants.\"\ndef test_progress_basic_fasthtml_examples()\n    \"Test basic progress examples from daisyUI v5 documentation.\"\ndef test_progress_primary_color_fasthtml_examples()\n    \"Test progress with primary color from daisyUI v5 documentation.\"\ndef test_progress_all_colors_fasthtml_examples():\n    \"\"\"Test progress with all semantic colors from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Progress, Div\n    from cjm_fasthtml_tailwind.utilities.sizing import w\n    \n    # Helper function to create progress bars with different values for a given color\n    def create_color_set(color_class, color_name)\n    \"Test progress with all semantic colors from daisyUI v5 documentation.\"\ndef test_progress_indeterminate_fasthtml_examples()\n    \"Test indeterminate progress (without value) from daisyUI v5 documentation.\"\n\n\nVariables\nprogress  # Base progress component\nprogress_colors  # Progress color variants\n\n\n\nradial progress (radial_progress.ipynb)\n\nRadial progress can be used to show the progress of a task or to show the passing of time.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.feedback.radial_progress import (\n    radial_progress,\n    test_radial_progress_basic_examples,\n    test_radial_progress_basic_fasthtml_examples,\n    test_radial_progress_values_fasthtml_examples,\n    test_radial_progress_colors_fasthtml_examples,\n    test_radial_progress_custom_size_fasthtml_examples\n)\n\n\nFunctions\ndef test_radial_progress_basic_examples()\n    \"Test basic button utilities.\"\ndef test_radial_progress_basic_fasthtml_examples()\n    \"Test basic radial progress from daisyUI v5 documentation.\"\ndef test_radial_progress_values_fasthtml_examples()\n    \"Test radial progress with different values from daisyUI v5 documentation.\"\ndef test_radial_progress_colors_fasthtml_examples()\n    \"Test radial progress with custom colors from daisyUI v5 documentation.\"\ndef test_radial_progress_custom_size_fasthtml_examples()\n    \"Test radial progress with custom size and thickness from daisyUI v5 documentation.\"\n\n\nVariables\nradial_progress  # Base radial progress component\n\n\n\nradio (radio.ipynb)\n\nRadio buttons allow the user to select one option from a set.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.radio import (\n    radio,\n    radio_colors,\n    radio_sizes,\n    test_radio_basic_examples,\n    test_radio_colors_examples,\n    test_radio_sizes_examples,\n    test_radio_basic_fasthtml_examples,\n    test_radio_sizes_fasthtml_examples,\n    test_radio_colors_fasthtml_examples,\n    test_radio_disabled_fasthtml_examples,\n    test_radio_custom_colors_fasthtml_examples\n)\n\n\nFunctions\ndef test_radio_basic_examples()\n    \"Test basic radio utilities.\"\ndef test_radio_colors_examples()\n    \"Test radio color variants.\"\ndef test_radio_sizes_examples()\n    \"Test radio size variants.\"\ndef test_radio_basic_fasthtml_examples()\n    \"Test basic radio button examples from daisyUI v5 documentation.\"\ndef test_radio_sizes_fasthtml_examples()\n    \"Test radio button size variations from daisyUI v5 documentation.\"\ndef test_radio_colors_fasthtml_examples()\n    \"Test radio button color variations from daisyUI v5 documentation.\"\ndef test_radio_disabled_fasthtml_examples()\n    \"Test disabled radio button examples from daisyUI v5 documentation.\"\ndef test_radio_custom_colors_fasthtml_examples()\n    \"Test radio buttons with custom colors from daisyUI v5 documentation.\"\n\n\nVariables\nradio  # Base radio component\nradio_colors  # Radio color variants\nradio_sizes  # Radio size variants\n\n\n\nrange slider (range.ipynb)\n\nRange slider is used to select a value by sliding a handle.\n\n\nImport\n# No corresponding Python module found for components.data_input.range\n\n\nFunctions\ndef test_range_basic_examples()\n    \"Test basic range utilities.\"\ndef test_range_colors_examples()\n    \"Test range color variants.\"\ndef test_range_sizes_examples()\n    \"Test range size variants.\"\ndef test_range_basic_fasthtml_examples()\n    \"Test basic range slider from daisyUI v5 documentation.\"\ndef test_range_with_steps_fasthtml_examples()\n    \"Test range with steps and measure from daisyUI v5 documentation.\"\ndef test_range_colors_fasthtml_examples()\n    \"Test range color variations from daisyUI v5 documentation.\"\ndef test_range_sizes_fasthtml_examples()\n    \"Test range size variations from daisyUI v5 documentation.\"\ndef test_range_custom_fasthtml_examples()\n    \"Test range with custom color and no fill from daisyUI v5 documentation.\"\n\n\nVariables\nrange_dui  # Base range component\nrange_colors  # range color variants\nrange_sizes  # range size variants\n\n\n\nrating (rating.ipynb)\n\nRating is a set of radio ratings that allow the user to rate something.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.rating import (\n    rating,\n    rating_modifiers,\n    rating_sizes,\n    RatingModifier,\n    test_rating_basic_examples,\n    test_rating_modifiers_examples,\n    test_rating_sizes_examples,\n    test_rating_basic_fasthtml_examples,\n    test_rating_readonly_fasthtml_examples,\n    test_rating_with_colors_fasthtml_examples,\n    test_rating_sizes_fasthtml_examples,\n    test_rating_with_hidden_fasthtml_examples,\n    test_rating_half_stars_fasthtml_examples\n)\n\n\nFunctions\ndef test_rating_basic_examples()\n    \"Test basic rating utilities.\"\ndef test_rating_modifiers_examples()\n    \"Test rating modifier utilities.\"\ndef test_rating_sizes_examples()\n    \"Test rating size variants.\"\ndef test_rating_basic_fasthtml_examples()\n    \"Test basic rating example from daisyUI v5 documentation.\"\ndef test_rating_readonly_fasthtml_examples()\n    \"Test read-only rating from daisyUI v5 documentation.\"\ndef test_rating_with_colors_fasthtml_examples()\n    \"Test rating with different colors from daisyUI v5 documentation.\"\ndef test_rating_sizes_fasthtml_examples()\n    \"Test rating size variations from daisyUI v5 documentation.\"\ndef test_rating_with_hidden_fasthtml_examples()\n    \"Test rating with hidden clear option from daisyUI v5 documentation.\"\ndef test_rating_half_stars_fasthtml_examples()\n    \"Test rating with half stars from daisyUI v5 documentation.\"\n\n\nClasses\nclass RatingModifier(str, Enum):\n\n\nVariables\nrating  # Base rating component\nrating_modifiers  # rating modifiers\nrating_sizes  # rating size variants\n\n\n\nresources (resources.ipynb)\n\nCDN resources and headers for daisyUI and Tailwind CSS\n\n\nImport\nfrom cjm_fasthtml_daisyui.core.resources import (\n    DAISYUI_CDN,\n    DAISYUI_THEMES_CDN,\n    DAISYUI_COLOR_PROPERTIES,\n    DAISYUI_COLOR_PROPERTIES_EXT,\n    get_daisyui_headers,\n    create_css_link,\n    create_js_script,\n    build_headers\n)\n\n\nFunctions\ndef get_daisyui_headers(\n    include_themes: bool = True  # Include the daisyUI themes CSS file\n) -&gt; List[Union[Link, Script]]:  # List of Link and Script elements for daisyUI and Tailwind CSS\n    \"Get the standard daisyUI and Tailwind CSS CDN headers.\"\ndef create_css_link(\n    href: str,  # URL or path to CSS file\n    media: Optional[str] = None,  # Media query (e.g., \"screen\", \"print\")\n    crossorigin: Optional[Literal[\"anonymous\", \"use-credentials\"]] = None\n) -&gt; Link:  # Link element for CSS stylesheet\n    \"Create a CSS link element with optional attributes.\"\ndef create_js_script(\n    src: str,  # URL or path to JavaScript file\n    async_: bool = False,  # Load script asynchronously\n    defer: bool = False,  # Defer script execution\n    module: bool = False,  # ES6 module\n    crossorigin: Optional[Literal[\"anonymous\", \"use-credentials\"]] = None\n) -&gt; Script:  # Script element for JavaScript file\n    \"Create a JavaScript script element with optional attributes.\"\ndef build_headers(\n    include_themes: bool = True,  # Include daisyUI themes\n    custom_css: Optional[List[Union[str, Link]]] = None,  # Additional CSS files\n    custom_js: Optional[List[Union[str, Script]]] = None,  # Additional JS files\n    custom_theme_css: Optional[str] = None,  # Custom theme CSS as a string\n    custom_theme_paths: Optional[List[Union[str, Path]]] = None  # List of paths to custom theme CSS files\n) -&gt; List[Union[Link, Script, Style]]:  # List of Link, Script, and Style elements for complete app headers\n    \"\"\"\n    Build a complete set of headers for a FastHTML app with daisyUI and Tailwind.\n    \n    The order of headers is:\n    1. daisyUI CSS\n    2. daisyUI themes CSS (if included)\n    3. Custom theme CSS (if provided as string)\n    4. Custom theme CSS files (if provided as Path objects)\n    5. Custom CSS files\n    6. Tailwind CSS JavaScript\n    7. Custom JavaScript files\n    \"\"\"\n\n\nVariables\nDAISYUI_CDN = 'https://cdn.jsdelivr.net/npm/daisyui@5'\nDAISYUI_THEMES_CDN = 'https://cdn.jsdelivr.net/npm/daisyui@5/themes.css'\nDAISYUI_COLOR_PROPERTIES = 'https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties.css'\nDAISYUI_COLOR_PROPERTIES_EXT = 'https://cdn.jsdelivr.net/npm/daisyui@5/colors/properties-extended.css'\n\n\n\nselect (select.ipynb)\n\nSelect is used to pick a value from a list of options.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.select import (\n    select,\n    select_styles,\n    select_colors,\n    select_sizes,\n    test_select_basic_examples,\n    test_select_styles_examples,\n    test_select_colors_examples,\n    test_select_sizes_examples,\n    test_select_basic_fasthtml_examples,\n    test_select_colors_fasthtml_examples,\n    test_select_sizes_fasthtml_examples,\n    test_select_special_fasthtml_examples\n)\n\n\nFunctions\ndef test_select_basic_examples()\n    \"Test basic select utilities.\"\ndef test_select_styles_examples()\n    \"Test select style variants.\"\ndef test_select_colors_examples()\n    \"Test select color variants.\"\ndef test_select_sizes_examples()\n    \"Test select size variants.\"\ndef test_select_basic_fasthtml_examples()\n    \"Test basic select example from daisyUI v5 documentation.\"\ndef test_select_colors_fasthtml_examples()\n    \"Test select with different color variations from daisyUI v5 documentation.\"\ndef test_select_sizes_fasthtml_examples()\n    \"Test select with different sizes from daisyUI v5 documentation.\"\ndef test_select_special_fasthtml_examples()\n    \"Test select with special styles (ghost, fieldset, disabled) from daisyUI v5 documentation.\"\n\n\nVariables\nselect  # Base select component\nselect_styles  # select style variants\nselect_colors  # select color variants\nselect_sizes  # select size variants\n\n\n\nSemantic Color Utility Classes (semantic_colors.ipynb)\n\ndaisyUI extends many Tailwind CSS utility classes to support semantic colors. These factories provide access to semantic color utilities with full modifier support:\n\n\nImport\nfrom cjm_fasthtml_daisyui.utilities.semantic_colors import (\n    bg_dui,\n    text_dui,\n    border_dui,\n    ring_dui,\n    fill_dui,\n    stroke_dui,\n    caret_dui,\n    accent_dui,\n    shadow_dui,\n    outline_dui,\n    decoration_dui,\n    placeholder_dui,\n    divide_dui,\n    ring_offset_dui,\n    test_semantic_colors_basic_examples,\n    test_semantic_colors_opacity_examples,\n    test_semantic_color_fasthtml_examples\n)\n\n\nFunctions\ndef test_semantic_colors_basic_examples()\n    \"Test semantic color utility classes for various CSS properties.\"\ndef test_semantic_colors_opacity_examples()\n    \"Test semantic color utilities with opacity modifiers.\"\ndef test_semantic_color_fasthtml_examples()\n    \"Test practical usage patterns with FastHTML components.\"\n\n\nVariables\nbg_dui  # The semantic background color factory\ntext_dui  # The semantic text color factory\nborder_dui  # The semantic border color factory\nring_dui  # The semantic ring color factory\nfill_dui  # The semantic fill color factory\nstroke_dui  # The semantic stroke color factory\ncaret_dui  # The semantic caret color factory\naccent_dui  # The semantic accent color factory\nshadow_dui  # The semantic shadow color factory\noutline_dui  # The semantic outline color factory\ndecoration_dui  # The semantic decoration color factory\nplaceholder_dui  # The semantic placeholder color factory\ndivide_dui  # The semantic divide color factory\nring_offset_dui  # The semantic ring offset color factory\n\n\n\nGradient Stop Utilities (semantic_gradients.ipynb)\n\nFor Tailwind CSS gradient utilities, daisyUI extends the from, via, and to utilities with semantic color support:\n\n\nImport\nfrom cjm_fasthtml_daisyui.utilities.semantic_gradients import (\n    from_dui,\n    via_dui,\n    to_dui,\n    GradientStopFactoryDaisyUI,\n    test_semantic_gradients_basic_examples,\n    test_semantic_gradients_fasthtml_examples\n)\n\n\nFunctions\ndef test_semantic_gradients_basic_examples()\n    \"Test gradient utilities with semantic colors.\"\ndef test_semantic_gradients_fasthtml_examples()\n    \"Test practical usage patterns with FastHTML components.\"\n\n\nClasses\nclass GradientStopFactoryDaisyUI:\n    def __init__(\n        self,\n        stop_type: str,  # Type of stop (from, via, to)\n        doc: Optional[str] = None  # Documentation\n    )\n    \"Enhanced factory for gradient color stops with semantic color support.\"\n    \n    def __init__(\n            self,\n            stop_type: str,  # Type of stop (from, via, to)\n            doc: Optional[str] = None  # Documentation\n        )\n        \"Initialize gradient stop factory.\"\n\n\nVariables\nfrom_dui  # Semantic gradient from color factory\nvia_dui  # Semantic gradient via color factory\nto_dui  # Semantic gradient to color factory\n\n\n\nsizes (sizes.ipynb)\n\nNamed sizes support for DaisyUI components\n\n\nImport\nfrom cjm_fasthtml_daisyui.builders.sizes import (\n    DaisyUINamedSize\n)\n\n\nClasses\nclass DaisyUINamedSize(str, Enum):\n\n\n\nskeleton (skeleton.ipynb)\n\nSkeleton is a component that can be used to show a loading state of a component.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.feedback.skeleton import (\n    skeleton,\n    test_skeleton_basic_examples,\n    test_skeleton_basic_fasthtml_examples,\n    test_skeleton_circle_with_content_fasthtml_examples,\n    test_skeleton_rectangle_with_content_fasthtml_examples\n)\n\n\nFunctions\ndef test_skeleton_basic_examples()\n    \"Test basic skeleton utilities.\"\ndef test_skeleton_basic_fasthtml_examples()\n    \"Test basic skeleton from daisyUI v5 documentation.\"\ndef test_skeleton_circle_with_content_fasthtml_examples()\n    \"Test skeleton circle with content from daisyUI v5 documentation.\"\ndef test_skeleton_rectangle_with_content_fasthtml_examples()\n    \"Test skeleton rectangle with content from daisyUI v5 documentation.\"\n\n\nVariables\nskeleton  # Base skeleton component\n\n\n\nstack (stack.ipynb)\n\nStack visually puts elements on top of each other.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.layout.stack import (\n    stack,\n    stack_modifiers,\n    StackModifier,\n    test_stack_basic_examples,\n    test_stack_modifiers_examples,\n    test_stack_basic_divs_fasthtml_examples,\n    test_stack_images_fasthtml_examples,\n    test_stack_cards_fasthtml_examples,\n    test_stack_cards_directions_fasthtml_examples,\n    test_stack_cards_shadow_fasthtml_examples,\n    test_stack_notification_cards_fasthtml_examples\n)\n\n\nFunctions\ndef test_stack_basic_examples()\n    \"Test basic stack utilities.\"\ndef test_stack_modifiers_examples()\n    \"Test stack modifier utilities.\"\ndef test_stack_basic_divs_fasthtml_examples()\n    \"Test basic stack with 3 divs from daisyUI v5 documentation.\"\ndef test_stack_images_fasthtml_examples()\n    \"Test stacked images from daisyUI v5 documentation.\"\ndef test_stack_cards_fasthtml_examples()\n    \"Test stacked cards from daisyUI v5 documentation.\"\ndef test_stack_cards_directions_fasthtml_examples():\n    \"\"\"Test stacked cards with different directions from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Div\n    from cjm_fasthtml_tailwind.utilities.sizing import size_util\n    from cjm_fasthtml_tailwind.utilities.borders import border\n    from cjm_fasthtml_tailwind.utilities.typography import text_align\n    from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui, border_dui\n    from cjm_fasthtml_daisyui.components.data_display.card import card, card_body\n    \n    # Helper function to create a card\n    def create_card(letter)\n    \"Test stacked cards with different directions from daisyUI v5 documentation.\"\ndef test_stack_cards_shadow_fasthtml_examples()\n    \"Test stacked cards with shadow from daisyUI v5 documentation.\"\ndef test_stack_notification_cards_fasthtml_examples()\n    \"Test stacked notification cards from daisyUI v5 documentation.\"\n\n\nClasses\nclass StackModifier(str, Enum):\n\n\nVariables\nstack  # Base stack component\nstack_modifiers  # stack modifiers\n\n\n\nstat (stat.ipynb)\n\nStat is used to show numbers and data in a block.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.stat import (\n    stats,\n    stat,\n    stat_title,\n    stat_value,\n    stat_desc,\n    stat_figure,\n    stat_actions,\n    stats_direction,\n    test_stat_basic_examples,\n    test_stat_direction_examples,\n    test_stat_basic_fasthtml_examples,\n    test_stat_with_icons_fasthtml_examples,\n    test_stat_detailed_fasthtml_examples,\n    test_stat_centered_fasthtml_examples,\n    test_stat_vertical_fasthtml_examples,\n    test_stat_with_actions_fasthtml_examples\n)\n\n\nFunctions\ndef test_stat_basic_examples()\n    \"Test basic stat utilities.\"\ndef test_stat_direction_examples()\n    \"Test stat direction modifiers.\"\ndef test_stat_basic_fasthtml_examples()\n    \"Test basic stat examples from daisyUI v5 documentation.\"\ndef test_stat_with_icons_fasthtml_examples()\n    \"Test stat with icons or image examples from daisyUI v5 documentation.\"\ndef test_stat_detailed_fasthtml_examples()\n    \"Test detailed stat examples with different icons from daisyUI v5 documentation.\"\ndef test_stat_centered_fasthtml_examples()\n    \"Test centered stat items examples from daisyUI v5 documentation.\"\ndef test_stat_vertical_fasthtml_examples()\n    \"Test vertical and responsive stat examples from daisyUI v5 documentation.\"\ndef test_stat_with_actions_fasthtml_examples()\n    \"Test stat with custom colors and button actions from daisyUI v5 documentation.\"\n\n\nVariables\nstats  # Stats container\nstat  # Stat block\nstat_title  # Stat title\nstat_value  # Stat value\nstat_desc  # Stat description\nstat_figure  # Stat figure\nstat_actions  # Stat actions\n\n\n\nstatus (status.ipynb)\n\nStatus is a really small icon to visually show the current status of an element, like online, offline, error, etc.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.status import (\n    status,\n    status_colors,\n    status_sizes,\n    test_status_basic_examples,\n    test_status_colors_examples,\n    test_status_sizes_examples,\n    test_status_basic_fasthtml_examples,\n    test_status_sizes_fasthtml_examples,\n    test_status_colors_fasthtml_examples,\n    test_status_animation_fasthtml_examples\n)\n\n\nFunctions\ndef test_status_basic_examples()\n    \"Test basic status utilities.\"\ndef test_status_colors_examples()\n    \"Test status color variants.\"\ndef test_status_sizes_examples()\n    \"Test status size variants.\"\ndef test_status_basic_fasthtml_examples()\n    \"Test basic status from daisyUI v5 documentation.\"\ndef test_status_sizes_fasthtml_examples()\n    \"Test status sizes from daisyUI v5 documentation.\"\ndef test_status_colors_fasthtml_examples()\n    \"Test status with colors from daisyUI v5 documentation.\"\ndef test_status_animation_fasthtml_examples()\n    \"Test status with ping and bounce animations from daisyUI v5 documentation.\"\n\n\nVariables\nstatus  # Status icon\nstatus_colors  # Status color variants\nstatus_sizes  # Status size variants\n\n\n\nsteps (steps.ipynb)\n\nSteps can be used to show a list of steps in a process.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.steps import (\n    steps,\n    step,\n    step_icon,\n    step_colors,\n    steps_directions,\n    test_steps_basic_examples,\n    test_step_colors_examples,\n    test_steps_directions_examples,\n    test_steps_horizontal_fasthtml_examples,\n    test_steps_vertical_fasthtml_examples,\n    test_steps_responsive_fasthtml_examples,\n    test_steps_with_custom_content_fasthtml_examples,\n    test_steps_with_data_content_fasthtml_examples,\n    test_steps_custom_colors_fasthtml_examples,\n    test_steps_with_scrollable_wrapper_fasthtml_examples\n)\n\n\nFunctions\ndef test_steps_basic_examples()\n    \"Test basic steps utilities.\"\ndef test_step_colors_examples()\n    \"Test step color variants.\"\ndef test_steps_directions_examples()\n    \"Test steps direction utilities.\"\ndef test_steps_horizontal_fasthtml_examples()\n    \"Test horizontal steps from daisyUI v5 documentation.\"\ndef test_steps_vertical_fasthtml_examples()\n    \"Test vertical steps from daisyUI v5 documentation.\"\ndef test_steps_responsive_fasthtml_examples()\n    \"Test responsive steps (vertical on small screen, horizontal on large screen) from daisyUI v5 documentation.\"\ndef test_steps_with_custom_content_fasthtml_examples()\n    \"Test steps with custom content in step-icon from daisyUI v5 documentation.\"\ndef test_steps_with_data_content_fasthtml_examples()\n    \"Test steps with data-content attribute from daisyUI v5 documentation.\"\ndef test_steps_custom_colors_fasthtml_examples()\n    \"Test steps with custom colors from daisyUI v5 documentation.\"\ndef test_steps_with_scrollable_wrapper_fasthtml_examples()\n    \"Test steps with scrollable wrapper from daisyUI v5 documentation.\"\n\n\nVariables\nsteps  # Base steps component\nstep  # step part\nstep_icon  # step icon part\nstep_colors  # Step color variants\n\n\n\nstyles (styles.ipynb)\n\nNamed style support for daisyUI components\n\n\nImport\nfrom cjm_fasthtml_daisyui.builders.styles import (\n    OutlineStyle,\n    DashStyle,\n    SoftStyle,\n    GhostStyle,\n    BorderStyle,\n    HoverStyle\n)\n\n\nClasses\nclass OutlineStyle(str, Enum):\n    \"daisyUI style names.\"\nclass DashStyle(str, Enum):\n    \"daisyUI style names.\"\nclass SoftStyle(str, Enum):\n    \"daisyUI style names.\"\nclass GhostStyle(str, Enum):\n    \"daisyUI style names.\"\nclass BorderStyle(str, Enum):\n    \"daisyUI style names.\"\nclass HoverStyle(str, Enum):\n    \"daisyUI style names.\"\n\n\n\nswap (swap.ipynb)\n\nSwap allows you to toggle the visibility of two elements using a checkbox or a class name.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.actions.swap import (\n    swap,\n    swap_on,\n    swap_off,\n    swap_indeterminate,\n    swap_styles,\n    test_swap_basic_examples,\n    test_swap_styles_examples,\n    test_swap_basic_fasthtml_examples,\n    test_swap_effects_fasthtml_examples,\n    test_swap_advanced_fasthtml_examples\n)\n\n\nFunctions\ndef test_swap_basic_examples()\n    \"Test basic swap utilities.\"\ndef test_swap_styles_examples()\n    \"Test swap style utilities.\"\ndef test_swap_basic_fasthtml_examples()\n    \"Test basic swap examples including text and icon swaps.\"\ndef test_swap_effects_fasthtml_examples()\n    \"Test swap examples with rotate and flip effects.\"\ndef test_swap_advanced_fasthtml_examples()\n    \"Test advanced swap examples including hamburger button and class-based activation.\"\n\n\nVariables\nswap  # Swap container\nswap_on  # Swap on state\nswap_off  # Swap off state\nswap_indeterminate  # Swap indeterminate state\n\n\n\ntable (table.ipynb)\n\nTable can be used to show a list of data in a table format.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.table import (\n    table,\n    table_modifiers,\n    table_sizes,\n    test_table_basic_examples,\n    test_table_modifiers_examples,\n    test_table_sizes_examples,\n    test_table_basic_fasthtml_examples,\n    test_table_style_fasthtml_examples,\n    test_table_visual_elements_fasthtml_examples,\n    test_table_sizes_fasthtml_examples,\n    test_table_pinned_fasthtml_examples\n)\n\n\nFunctions\ndef test_table_basic_examples()\n    \"Test basic table utilities.\"\ndef test_table_modifiers_examples()\n    \"Test table modifier utilities.\"\ndef test_table_sizes_examples()\n    \"Test table size variants.\"\ndef test_table_basic_fasthtml_examples()\n    \"Test basic table and table with border and background from daisyUI v5 documentation.\"\ndef test_table_style_fasthtml_examples()\n    \"Test table with active row, hover row, and zebra stripes from daisyUI v5 documentation.\"\ndef test_table_visual_elements_fasthtml_examples()\n    \"Test table with visual elements from daisyUI v5 documentation.\"\ndef test_table_sizes_fasthtml_examples()\n    \"Test table xs size from daisyUI v5 documentation.\"\ndef test_table_pinned_fasthtml_examples()\n    \"Test table with pinned rows and pinned rows+columns from daisyUI v5 documentation.\"\n\n\nVariables\ntable  # Table component\ntable_sizes  # Table size variants\n\n\n\ntabs (tabs.ipynb)\n\nTabs can be used to show a list of links in a tabbed format.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.navigation.tabs import (\n    tabs,\n    tab,\n    tab_content,\n    tabs_styles,\n    tab_modifiers,\n    tabs_placement,\n    tabs_sizes,\n    BoxStyle,\n    LiftStyle,\n    test_tabs_basic_examples,\n    test_tab_modifiers_examples,\n    test_tab_placement_examples,\n    test_tabs_sizes_examples,\n    test_tabs_basic_fasthtml_examples,\n    test_tabs_styles_fasthtml_examples,\n    test_tabs_radio_inputs_fasthtml_examples,\n    test_tabs_sizes_fasthtml_examples,\n    test_tabs_with_content_fasthtml_examples,\n    test_tabs_with_icons_fasthtml_examples,\n    test_tabs_special_fasthtml_examples\n)\n\n\nFunctions\ndef test_tabs_basic_examples()\n    \"Test basic tabs utilities.\"\ndef test_tab_modifiers_examples()\n    \"Test tab modifier utilities.\"\ndef test_tab_placement_examples()\n    \"Test tab modifier utilities.\"\ndef test_tabs_sizes_examples()\n    \"Test tabs size variants.\"\ndef test_tabs_basic_fasthtml_examples()\n    \"Test basic tabs example from daisyUI v5 documentation.\"\ndef test_tabs_styles_fasthtml_examples()\n    \"Test tabs style variations from daisyUI v5 documentation.\"\ndef test_tabs_radio_inputs_fasthtml_examples()\n    \"Test tabs using radio inputs from daisyUI v5 documentation.\"\ndef test_tabs_sizes_fasthtml_examples()\n    \"Test tabs size variations from daisyUI v5 documentation.\"\ndef test_tabs_with_content_fasthtml_examples()\n    \"Test tabs with content panels from daisyUI v5 documentation.\"\ndef test_tabs_with_icons_fasthtml_examples()\n    \"Test tabs with icons and content from daisyUI v5 documentation.\"\ndef test_tabs_special_fasthtml_examples()\n    \"Test special tabs variations from daisyUI v5 documentation.\"\n\n\nClasses\nclass BoxStyle(str, Enum):\nclass LiftStyle(str, Enum):\n\n\nVariables\ntabs  # Base tabs component\ntab  # tab part\ntab_content  # tab content part\ntabs_styles  # Tabs style variants\ntabs_sizes  # Tabs size variants\n\n\n\ntesting (testing.ipynb)\n\nStandardized test page creation for Jupyter notebooks with FastHTML\n\n\nImport\nfrom cjm_fasthtml_daisyui.core.testing import (\n    create_theme_persistence_script,\n    create_theme_selector,\n    create_test_app,\n    create_test_page,\n    start_test_server\n)\n\n\nFunctions\ndef create_theme_persistence_script() -&gt; Script\n    \"\"\"\n    Create a JavaScript script that handles theme persistence using localStorage.\n    This script:\n    1. Loads saved theme on page load\n    2. Listens for theme changes and saves them\n    3. Syncs radio button state with saved theme\n    \"\"\"\ndef create_theme_selector(\n    custom_themes: Optional[List[str]] = None  # Optional list of custom theme names to include\n) -&gt; Div:  # Div containing theme selector dropdown\n    \"Create a daisyUI theme selector dropdown component.\"\ndef create_test_app(\n   theme: Union[DaisyUITheme, str] = DaisyUITheme.LIGHT,  # Default theme\n   custom_css: Optional[List[Union[str, Link]]] = None,  # Additional CSS\n   custom_js: Optional[List[Union[str, Script]]] = None,  # Additional JS\n   custom_theme_css: Optional[str] = None,  # Custom theme CSS as string\n   custom_theme_paths: Optional[List[Union[str, Path]]] = None,  # List of paths to custom theme CSS files\n   custom_theme_names: Optional[List[str]] = None,  # Names of custom themes to include in selector\n   enable_theme_persistence: bool = True,  # Enable localStorage theme persistence\n   debug: bool = True,  # Enable debug mode\n   **kwargs\n) -&gt; tuple: # Tuple containing (app, rt) - FastHTML app instance and route decorator\n    \"Create a standardized test app for Jupyter notebooks with daisyUI and Tailwind.\"\ndef create_test_page(\n    title: str,  # Page title\n    *content,  # Page content elements\n    include_theme_selector: bool = True,  # Include theme selector\n    use_container: bool = True,  # Wrap in container\n    custom_theme_names: Optional[List[str]] = None  # Custom themes for selector\n) -&gt; Div:  # Div containing complete page layout with navbar and content\n    \"Create a standardized test page layout with optional theme selector.\"\ndef start_test_server(\n    app: FastHTML,    # FastHTML app instance created by create_test_app or fast_app\n    port: int = 8000,  # Port\n) -&gt; JupyUvi:  # JupyUvi server instance for Jupyter notebook testing\n    \"\"\"\n    Start a test server and return the JupyUvi instance.\n    \n    Usage:\n        server = start_test_server(app)\n        HTMX()  # Display the app\n        \n        # Later, in another cell:\n        server.stop()\n    \"\"\"\n\n\n\ntext input (text_input.ipynb)\n\nText Input is a simple input field.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.text_input import (\n    text_input,\n    text_input_styles,\n    text_input_colors,\n    text_input_sizes,\n    test_text_input_basic_examples,\n    test_text_input_styles_examples,\n    test_text_input_colors_examples,\n    test_text_input_sizes_examples,\n    test_text_input_basic_fasthtml_examples,\n    test_text_input_with_labels_fasthtml_examples,\n    test_text_input_styles_and_fieldset_fasthtml_examples,\n    test_text_input_colors_fasthtml_examples,\n    test_text_input_sizes_fasthtml_examples,\n    test_text_input_special_types_fasthtml_examples,\n    test_text_input_validators_part1_fasthtml_examples,\n    test_text_input_validators_part2_fasthtml_examples\n)\n\n\nFunctions\ndef test_text_input_basic_examples()\n    \"Test basic text_input utilities.\"\ndef test_text_input_styles_examples()\n    \"Test text_input style variants.\"\ndef test_text_input_colors_examples()\n    \"Test text_input color variants.\"\ndef test_text_input_sizes_examples()\n    \"Test text_input size variants.\"\ndef test_text_input_basic_fasthtml_examples()\n    \"Test basic text input examples from daisyUI v5 documentation.\"\ndef test_text_input_with_labels_fasthtml_examples()\n    \"Test text input with labels from daisyUI v5 documentation.\"\ndef test_text_input_styles_and_fieldset_fasthtml_examples()\n    \"Test text input styles and fieldset from daisyUI v5 documentation.\"\ndef test_text_input_colors_fasthtml_examples()\n    \"Test text input color variants from daisyUI v5 documentation.\"\ndef test_text_input_sizes_fasthtml_examples()\n    \"Test text input size variants from daisyUI v5 documentation.\"\ndef test_text_input_special_types_fasthtml_examples()\n    \"Test special input types from daisyUI v5 documentation.\"\ndef test_text_input_validators_part1_fasthtml_examples()\n    \"Test text input validators part 1: username, search, email from daisyUI v5 documentation.\"\ndef test_text_input_validators_part2_fasthtml_examples()\n    \"Test text input validators part 2: password, number, phone, URL from daisyUI v5 documentation.\"\n\n\nVariables\ntext_input  # Base text_input component\ntext_input_styles  # text_input style variants\ntext_input_colors  # text_input color variants\ntext_input_sizes  # text_input size variants\n\n\n\ntextarea (textarea.ipynb)\n\nTextarea allows users to enter text in multiple lines.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.textarea import (\n    textarea,\n    textarea_styles,\n    textarea_colors,\n    textarea_sizes,\n    test_textarea_basic_examples,\n    test_textarea_styles_examples,\n    test_textarea_colors_examples,\n    test_textarea_sizes_examples,\n    test_textarea_basic_fasthtml_examples,\n    test_textarea_ghost_fasthtml_examples,\n    test_textarea_with_form_control_fasthtml_examples,\n    test_textarea_colors_fasthtml_examples,\n    test_textarea_sizes_fasthtml_examples,\n    test_textarea_disabled_fasthtml_examples\n)\n\n\nFunctions\ndef test_textarea_basic_examples()\n    \"Test basic textarea utilities.\"\ndef test_textarea_styles_examples()\n    \"Test textarea style variants.\"\ndef test_textarea_colors_examples()\n    \"Test textarea color variants.\"\ndef test_textarea_sizes_examples()\n    \"Test textarea size variants.\"\ndef test_textarea_basic_fasthtml_examples()\n    \"Test basic textarea example from daisyUI v5 documentation.\"\ndef test_textarea_ghost_fasthtml_examples()\n    \"Test ghost textarea (no background) from daisyUI v5 documentation.\"\ndef test_textarea_with_form_control_fasthtml_examples()\n    \"Test textarea with form control and labels from daisyUI v5 documentation.\"\ndef test_textarea_colors_fasthtml_examples()\n    \"Test textarea color variations from daisyUI v5 documentation.\"\ndef test_textarea_sizes_fasthtml_examples()\n    \"Test textarea size variations from daisyUI v5 documentation.\"\ndef test_textarea_disabled_fasthtml_examples()\n    \"Test disabled textarea from daisyUI v5 documentation.\"\n\n\nVariables\ntextarea  # Base textarea component\ntextarea_styles  # textarea style variants\ntextarea_colors  # textarea color variants\ntextarea_sizes  # textarea size variants\n\n\n\ntheme controller (theme_controller.ipynb)\n\nIf a checked checkbox input or a checked radio input with theme-controller class exists in the page, The page will have the same theme as that input’s value.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.actions.theme_controller import (\n    theme_controller,\n    test_theme_controller_basic_examples,\n    test_theme_controller_basic_fasthtml_examples,\n    test_theme_controller_swap_fasthtml_examples,\n    test_theme_controller_radio_fasthtml_examples,\n    test_theme_controller_advanced_fasthtml_examples\n)\n\n\nFunctions\ndef test_theme_controller_basic_examples()\n    \"Test basic theme controller utility.\"\ndef test_theme_controller_basic_fasthtml_examples()\n    \"Test basic theme controller examples with toggle and checkbox inputs.\"\ndef test_theme_controller_swap_fasthtml_examples()\n    \"Test theme controller examples using swap component.\"\ndef test_theme_controller_radio_fasthtml_examples()\n    \"Test theme controller examples using radio inputs.\"\ndef test_theme_controller_advanced_fasthtml_examples()\n    \"Test advanced theme controller examples including dropdown and custom styles.\"\n\n\n\nthemes (themes.ipynb)\n\nTheme management for daisyUI\n\n\nImport\nfrom cjm_fasthtml_daisyui.core.themes import (\n    DaisyUITheme,\n    get_theme_value,\n    ThemeColors,\n    ThemeConfig,\n    create_theme_css,\n    save_theme_css,\n    save_theme_json,\n    load_theme_json,\n    load_style_css\n)\n\n\nFunctions\ndef get_theme_value(\n    theme: Union[DaisyUITheme, str],  # The theme to validate (DaisyUITheme enum or string)\n    allow_custom: bool = False  # If True, allows any string value for custom themes\n) -&gt; str:  # The validated theme name as a string\n    \"Get the string value of a theme, supporting both enum and string inputs. This allows flexibility in how themes are specified while maintaining type safety.\"\ndef create_theme_css(\n    theme: ThemeConfig  # Theme configuration with colors, sizes, and effects\n) -&gt; str:  # CSS string with theme variables\n    \"\"\"\n    Generate CSS for a custom daisyUI theme.\n    \n    This creates the CSS variables needed for a custom theme when using the CDN approach.\n    \"\"\"\ndef save_theme_css(\n    theme: ThemeConfig,  # Theme configuration to convert to CSS\n    path: Union[str, Path]  # File path where CSS will be saved\n) -&gt; None:  # None\n    \"Save a theme configuration as a CSS file.\"\ndef save_theme_json(\n    theme: ThemeConfig,  # Theme configuration to save\n    path: Union[str, Path]  # File path where JSON will be saved\n) -&gt; None:  # None\n    \"Save a theme configuration as a JSON file for reuse.\"\ndef load_theme_json(\n    path: Union[str, Path]  # Path to JSON file containing theme configuration\n) -&gt; ThemeConfig:  # Theme configuration dictionary\n    \"Load a theme configuration from a JSON file.\"\ndef load_style_css(\n    path: Union[str, Path]  # Path to CSS file containing theme configuration\n) -&gt; Style:  # FasthHTML Style element\n    \"Load a theme configuration from a CSS file to a FasthHTML Style element.\"\n\n\nClasses\nclass DaisyUITheme(str, Enum):\n    \"All built-in daisyUI themes.\"\nclass ThemeColors(TypedDict):\n    \"Color definitions for a daisyUI theme using OKLCH color space.\"\nclass ThemeConfig(TypedDict):\n    \"Complete configuration for a custom daisyUI theme.\"\n\n\n\ntimeline (timeline.ipynb)\n\nTimeline component shows a list of events in chronological order.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_display.timeline import (\n    timeline,\n    timeline_start,\n    timeline_middle,\n    timeline_end,\n    timeline_modifiers,\n    timeline_direction,\n    test_timeline_basic_examples,\n    test_timeline_modifiers_examples,\n    test_timeline_direction_examples,\n    test_timeline_basic_fasthtml_examples,\n    test_timeline_single_side_fasthtml_examples,\n    test_timeline_alternating_fasthtml_examples,\n    test_timeline_without_icons_fasthtml_examples,\n    test_timeline_vertical_fasthtml_examples,\n    test_timeline_vertical_advanced_fasthtml_examples,\n    test_timeline_responsive_fasthtml_examples,\n    test_timeline_snap_icon_fasthtml_examples\n)\n\n\nFunctions\ndef test_timeline_basic_examples()\n    \"Test basic timeline utilities.\"\ndef test_timeline_modifiers_examples()\n    \"Test timeline modifier utilities.\"\ndef test_timeline_direction_examples()\n    \"Test timeline direction utilities.\"\ndef test_timeline_basic_fasthtml_examples()\n    \"Test timeline with text on both sides and icon from daisyUI v5 documentation.\"\ndef test_timeline_single_side_fasthtml_examples()\n    \"Test timeline with bottom side only and top side only from daisyUI v5 documentation.\"\ndef test_timeline_alternating_fasthtml_examples()\n    \"Test timeline with different sides and colorful lines from daisyUI v5 documentation.\"\ndef test_timeline_without_icons_fasthtml_examples()\n    \"Test timeline without icons from daisyUI v5 documentation.\"\ndef test_timeline_vertical_fasthtml_examples()\n    \"Test vertical timeline variations from daisyUI v5 documentation.\"\ndef test_timeline_vertical_advanced_fasthtml_examples()\n    \"Test vertical timeline with different sides, colorful lines, and without icons from daisyUI v5 documentation.\"\ndef test_timeline_responsive_fasthtml_examples()\n    \"Test responsive timeline (vertical by default, horizontal on large screen) from daisyUI v5 documentation.\"\ndef test_timeline_snap_icon_fasthtml_examples()\n    \"Test timeline with icon snapped to the start from daisyUI v5 documentation.\"\n\n\nVariables\ntimeline  # Timeline container\ntimeline_start  # Timeline start\ntimeline_middle  # Timeline middle\ntimeline_end  # Timeline end\n\n\n\ntoast (toast.ipynb)\n\nToast is a wrapper to stack elements, positioned on the corner of page.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.feedback.toast import (\n    toast,\n    toast_placement,\n    ToastPlacement,\n    test_toast_basic_examples,\n    test_toast_placement_examples,\n    test_toast_basic_fasthtml_examples,\n    test_toast_top_positions_fasthtml_examples,\n    test_toast_middle_positions_fasthtml_examples,\n    test_toast_bottom_positions_fasthtml_examples\n)\n\n\nFunctions\ndef test_toast_basic_examples()\n    \"Test basic toast utilities.\"\ndef test_toast_placement_examples()\n    \"Test toast placement options.\"\ndef test_toast_basic_fasthtml_examples()\n    \"Test basic toast with alert inside from daisyUI v5 documentation.\"\ndef test_toast_top_positions_fasthtml_examples()\n    \"Test toast positioning at top (start, center, end) from daisyUI v5 documentation.\"\ndef test_toast_middle_positions_fasthtml_examples()\n    \"Test toast positioning at middle (start, center, end) from daisyUI v5 documentation.\"\ndef test_toast_bottom_positions_fasthtml_examples()\n    \"Test toast positioning at bottom (start, center, end) from daisyUI v5 documentation.\"\n\n\nClasses\nclass ToastPlacement(str, Enum):\n\n\nVariables\ntoast  # Base toast component\ntoast_placement  # toast placement options\n\n\n\ntoggle (toggle.ipynb)\n\nToggle is a checkbox that is styled to look like a switch button.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.toggle import (\n    toggle,\n    toggle_colors,\n    toggle_sizes,\n    test_toggle_basic_examples,\n    test_toggle_colors_examples,\n    test_toggle_sizes_examples,\n    test_toggle_basic_fasthtml_examples,\n    test_toggle_with_fieldset_fasthtml_examples,\n    test_toggle_sizes_fasthtml_examples,\n    test_toggle_colors_fasthtml_examples,\n    test_toggle_disabled_fasthtml_examples,\n    test_toggle_with_icons_fasthtml_examples,\n    test_toggle_custom_colors_fasthtml_examples,\n    test_toggle_indeterminate_fasthtml_examples\n)\n\n\nFunctions\ndef test_toggle_basic_examples()\n    \"Test basic toggle utilities.\"\ndef test_toggle_colors_examples()\n    \"Test toggle color variants.\"\ndef test_toggle_sizes_examples()\n    \"Test toggle size variants.\"\ndef test_toggle_basic_fasthtml_examples()\n    \"Test basic toggle example from daisyUI v5 documentation.\"\ndef test_toggle_with_fieldset_fasthtml_examples()\n    \"Test toggle with fieldset and label from daisyUI v5 documentation.\"\ndef test_toggle_sizes_fasthtml_examples()\n    \"Test toggle size variations from daisyUI v5 documentation.\"\ndef test_toggle_colors_fasthtml_examples()\n    \"Test toggle color variations from daisyUI v5 documentation.\"\ndef test_toggle_disabled_fasthtml_examples()\n    \"Test disabled toggle states from daisyUI v5 documentation.\"\ndef test_toggle_with_icons_fasthtml_examples()\n    \"Test toggle with icons inside from daisyUI v5 documentation.\"\ndef test_toggle_custom_colors_fasthtml_examples()\n    \"Test toggle with custom colors from daisyUI v5 documentation.\"\ndef test_toggle_indeterminate_fasthtml_examples():\n    \"\"\"Test indeterminate toggle state from daisyUI v5 documentation.\"\"\"\n    from fasthtml.common import Input, Script, Div\n    \n    # Indeterminate toggle\n    # Note: The indeterminate state must be set via JavaScript\n    \"Test indeterminate toggle state from daisyUI v5 documentation.\"\n\n\nVariables\ntoggle  # Base toggle component\ntoggle_colors  # toggle color variants\ntoggle_sizes  # toggle size variants\n\n\n\ntooltip (tooltip.ipynb)\n\nTooltip can be used to show a message when hovering over an element.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.feedback.tooltip import (\n    tooltip,\n    tooltip_content,\n    tooltip_placement,\n    tooltip_modifiers,\n    tooltip_colors,\n    TooltipPlacement,\n    TooltipModifier,\n    test_tooltip_basic_examples,\n    test_tooltip_placement_examples,\n    test_tooltip_modifiers_examples,\n    test_tooltip_colors_examples,\n    test_tooltip_basic_fasthtml_examples,\n    test_tooltip_with_content_fasthtml_examples,\n    test_tooltip_positions_fasthtml_examples,\n    test_tooltip_colors_fasthtml_examples,\n    test_tooltip_responsive_fasthtml_examples\n)\n\n\nFunctions\ndef test_tooltip_basic_examples()\n    \"Test basic tooltip utilities.\"\ndef test_tooltip_placement_examples()\n    \"Test tooltip placement options.\"\ndef test_tooltip_modifiers_examples()\n    \"Test tooltip modifier utilities.\"\ndef test_tooltip_colors_examples()\n    \"Test tooltip color variants.\"\ndef test_tooltip_basic_fasthtml_examples()\n    \"Test basic tooltip examples from daisyUI v5 documentation.\"\ndef test_tooltip_with_content_fasthtml_examples()\n    \"Test tooltip with tooltip-content from daisyUI v5 documentation.\"\ndef test_tooltip_positions_fasthtml_examples()\n    \"Test tooltip position variations from daisyUI v5 documentation.\"\ndef test_tooltip_colors_fasthtml_examples()\n    \"Test tooltip color variations from daisyUI v5 documentation.\"\ndef test_tooltip_responsive_fasthtml_examples()\n    \"Test responsive tooltip from daisyUI v5 documentation.\"\n\n\nClasses\nclass TooltipPlacement(str, Enum):\nclass TooltipModifier(str, Enum):\n\n\nVariables\ntooltip  # Base tooltip component\ntooltip_content  # Base tooltip content part\ntooltip_placement  # tooltip placement options\ntooltip_modifiers  # tooltip modifiers\ntooltip_colors  # Tooltip color variants\n\n\n\nvalidator (validator.ipynb)\n\nValidator class changes the color of form elements to error or success based on input’s validation rules.\n\n\nImport\nfrom cjm_fasthtml_daisyui.components.data_input.validator import (\n    validator,\n    validator_hint,\n    test_validator_basic_examples,\n    test_validator_basic_fasthtml_examples,\n    test_validator_with_hint_fasthtml_examples,\n    test_validator_password_fasthtml_examples,\n    test_validator_username_phone_fasthtml_examples,\n    test_validator_url_date_number_fasthtml_examples,\n    test_validator_checkbox_toggle_select_fasthtml_examples\n)\n\n\nFunctions\ndef test_validator_basic_examples()\n    \"Test basic validator utilities.\"\ndef test_validator_basic_fasthtml_examples()\n    \"Test basic validator example from daisyUI v5 documentation.\"\ndef test_validator_with_hint_fasthtml_examples()\n    \"Test validator with hint from daisyUI v5 documentation.\"\ndef test_validator_password_fasthtml_examples()\n    \"Test password requirement validator from daisyUI v5 documentation.\"\ndef test_validator_username_phone_fasthtml_examples()\n    \"Test username and phone requirement validators from daisyUI v5 documentation.\"\ndef test_validator_url_date_number_fasthtml_examples()\n    \"Test URL, date, and number requirement validators from daisyUI v5 documentation.\"\ndef test_validator_checkbox_toggle_select_fasthtml_examples()\n    \"Test checkbox, toggle, and select requirement validators from daisyUI v5 documentation.\"\n\n\nVariables\nvalidator  # Base validator component\nvalidator_hint  # validator_hint component\n\n\n\ncomponents.mockup.window (window.ipynb)\n\nImport\nfrom cjm_fasthtml_daisyui.components.mockup.window import (\n    mockup_window,\n    test_mockup_window_basic_examples,\n    test_window_mockup_with_border_fasthtml_examples,\n    test_window_mockup_with_background_fasthtml_examples\n)\n\n\nFunctions\ndef test_mockup_window_basic_examples()\n    \"Test basic mockup_window utilities.\"\ndef test_window_mockup_with_border_fasthtml_examples()\n    \"Test window mockup with border from daisyUI v5 documentation.\"\ndef test_window_mockup_with_background_fasthtml_examples()\n    \"Test window mockup with background color from daisyUI v5 documentation.\"\n\n\nVariables\nmockup_window  # Base mockup window component",
    "crumbs": [
      "cjm-fasthtml-daisyui"
    ]
  },
  {
    "objectID": "core/testing.html",
    "href": "core/testing.html",
    "title": "testing",
    "section": "",
    "text": "source",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#theme-selector-component",
    "href": "core/testing.html#theme-selector-component",
    "title": "testing",
    "section": "Theme Selector Component",
    "text": "Theme Selector Component\nA reusable theme selector for testing:\n\nsource\n\ncreate_theme_selector\n\n create_theme_selector (custom_themes:Optional[List[str]]=None)\n\nCreate a daisyUI theme selector dropdown component.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ncustom_themes\nOptional\nNone\nOptional list of custom theme names to include\n\n\nReturns\nfunctools.partial(&lt;function ft_hx at 0x7feee9f00e00&gt;, ‘div’)\n\nDiv containing theme selector dropdown",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#test-app-creation",
    "href": "core/testing.html#test-app-creation",
    "title": "testing",
    "section": "Test App Creation",
    "text": "Test App Creation\nA standardized way to create test apps in Jupyter notebooks:\n\nsource\n\ncreate_test_app\n\n create_test_app (theme:Union[cjm_fasthtml_daisyui.core.themes.DaisyUIThem\n                  e,str]=&lt;DaisyUITheme.LIGHT: 'light'&gt;, custom_css:Optiona\n                  l[List[Union[str,functools.partial(&lt;functionft_hxat0x7fe\n                  ee9f00e00&gt;,'link')]]]=None,\n                  custom_js:Optional[List[Union[str,Script]]]=None,\n                  custom_theme_css:Optional[str]=None, custom_theme_paths:\n                  Optional[List[Union[str,pathlib.Path]]]=None,\n                  custom_theme_names:Optional[List[str]]=None,\n                  enable_theme_persistence:bool=True, debug:bool=True,\n                  **kwargs)\n\nCreate a standardized test app for Jupyter notebooks with daisyUI and Tailwind.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntheme\nUnion\nDaisyUITheme.LIGHT\nDefault theme\n\n\ncustom_css\nOptional\nNone\nAdditional CSS\n\n\ncustom_js\nOptional\nNone\nAdditional JS\n\n\ncustom_theme_css\nOptional\nNone\nCustom theme CSS as string\n\n\ncustom_theme_paths\nOptional\nNone\nList of paths to custom theme CSS files\n\n\ncustom_theme_names\nOptional\nNone\nNames of custom themes to include in selector\n\n\nenable_theme_persistence\nbool\nTrue\nEnable localStorage theme persistence\n\n\ndebug\nbool\nTrue\nEnable debug mode\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\nReturns\ntuple\n\nTuple containing (app, rt) - FastHTML app instance and route decorator",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#test-page-wrapper",
    "href": "core/testing.html#test-page-wrapper",
    "title": "testing",
    "section": "Test Page Wrapper",
    "text": "Test Page Wrapper\nA wrapper for creating consistent test pages:\n\nsource\n\ncreate_test_page\n\n create_test_page (title:str, *content, include_theme_selector:bool=True,\n                   use_container:bool=True,\n                   custom_theme_names:Optional[List[str]]=None)\n\nCreate a standardized test page layout with optional theme selector.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ntitle\nstr\n\nPage title\n\n\ncontent\nVAR_POSITIONAL\n\nPage content elements\n\n\ninclude_theme_selector\nbool\nTrue\nInclude theme selector\n\n\nuse_container\nbool\nTrue\nWrap in container\n\n\ncustom_theme_names\nOptional\nNone\nCustom themes for selector\n\n\nReturns\nfunctools.partial(&lt;function ft_hx at 0x7feee9f00e00&gt;, ‘div’)\n\nDiv containing complete page layout with navbar and content",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#jupyter-notebook-utilities",
    "href": "core/testing.html#jupyter-notebook-utilities",
    "title": "testing",
    "section": "Jupyter Notebook Utilities",
    "text": "Jupyter Notebook Utilities\nHelper functions for working with FastHTML in Jupyter:\n\nsource\n\nstart_test_server\n\n start_test_server (app:fasthtml.core.FastHTML, port:int=8000)\n\n*Start a test server and return the JupyUvi instance.\nUsage: server = start_test_server(app) HTMX() # Display the app\n# Later, in another cell:\nserver.stop()*\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napp\nFastHTML\n\nFastHTML app instance created by create_test_app or fast_app\n\n\nport\nint\n8000\nPort\n\n\nReturns\nJupyUvi\n\nJupyUvi server instance for Jupyter notebook testing",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#loading-custom-themes-from-css-files",
    "href": "core/testing.html#loading-custom-themes-from-css-files",
    "title": "testing",
    "section": "Loading Custom Themes from CSS Files",
    "text": "Loading Custom Themes from CSS Files\nYou can also load custom themes from CSS files using Path objects:\n\n# First, let's create a second custom theme and save it to a CSS file\nfrom cjm_fasthtml_daisyui.core.themes import ThemeConfig, save_theme_css\nfrom nbdev.config import get_config\n\n# Get project directory\ncfg = get_config()\nproject_dir = cfg.config_path\ncss_dir = project_dir / \"css\"\ncss_dir.mkdir(exist_ok=True, parents=True)\n\n# Create a theme\ncustom_theme: ThemeConfig = {\n    \"name\": \"netwatch_cyberpunk\",\n    \"default\": False,\n    \"prefersdark\": True,\n    \"color_scheme\": \"dark\",\n    \"colors\": {\n        \"base_100\": \"oklch(6.72% 0.000 0)\",\n        \"base_200\": \"oklch(12% 0.005 240)\",\n        \"base_300\": \"oklch(8% 0.01 235)\",\n        \"base_content\": \"oklch(79.82% 0.136 184.06)\",\n        \"primary\": \"oklch(61.39% 0.244 12.03)\",\n        \"primary_content\": \"oklch(6.72% 0.000 0)\",\n        \"secondary\": \"oklch(46.40% 0.184 10.98)\",\n        \"secondary_content\": \"oklch(79.82% 0.136 184.06)\",\n        \"accent\": \"oklch(25.77% 0.075 12.95)\",\n        \"accent_content\": \"oklch(79.82% 0.136 184.06)\",\n        \"neutral\": \"oklch(20% 0.01 240)\",\n        \"neutral_content\": \"oklch(79.82% 0.136 184.06)\",\n        \"info\": \"oklch(79.82% 0.136 184.06)\",\n        \"info_content\": \"oklch(6.72% 0.000 0)\",\n        \"success\": \"oklch(62% 0.20 140)\",\n        \"success_content\": \"oklch(6.72% 0.000 0)\",\n        \"warning\": \"oklch(75% 0.25 60)\",\n        \"warning_content\": \"oklch(6.72% 0.000 0)\",\n        \"error\": \"oklch(61.39% 0.244 12.03)\",\n        \"error_content\": \"oklch(6.72% 0.000 0)\"\n    },\n    \"radius_selector\": \"0rem\",\n    \"radius_field\": \"0rem\",\n    \"radius_box\": \"0rem\",\n    \"size_selector\": \"0.125rem\",\n    \"size_field\": \"0.125rem\",\n    \"border\": \"1px\",\n    \"depth\": 0,\n    \"noise\": 0\n}\n\n# Save themes to CSS files\nsave_theme_css(custom_theme, css_dir / f\"{custom_theme['name']}.css\")\n\nprint(f\"Created theme files in: {css_dir}\")\n\nCreated theme files in: /mnt/SN850X_8TB_EXT4/Projects/GitHub/cj-mills/cjm-fasthtml-daisyui/css",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#example-usage",
    "href": "core/testing.html#example-usage",
    "title": "testing",
    "section": "Example Usage",
    "text": "Example Usage\nHere’s how to use the testing utilities in a notebook:\n\nfrom cjm_fasthtml_tailwind.core.base import combine_classes\nfrom cjm_fasthtml_tailwind.utilities.backgrounds import bg\nfrom cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_wrap, gap, flex_display\nfrom cjm_fasthtml_tailwind.utilities.layout import display_tw\nfrom cjm_fasthtml_tailwind.utilities.spacing import m, space, p\nfrom cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\nfrom cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui\nfrom cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors, btn_styles\n\nfrom nbdev.config import get_config\n\n# Get project directory\ncfg = get_config()\nproject_dir = cfg.config_path\ncss_dir = project_dir / \"css\"\ncss_dir.mkdir(exist_ok=True, parents=True)\n\n# Now create an app that loads custom themes from CSS files\ncustom_theme_paths=list(css_dir.glob(\"*.css\"))\n\ncustom_theme_names=[theme.stem for theme in custom_theme_paths]\ncustom_theme_names.sort()\n\n# Create a test app with default settings\napp, rt = create_test_app(theme=DaisyUITheme.LIGHT,\n                          custom_theme_paths=custom_theme_paths,\n                          custom_theme_names=custom_theme_names,  # Add both custom themes to selector\n                         )\n\n# Define a test route\n@rt\ndef index():\n    return create_test_page(\n        \"Component Test Page\",\n        Div(\n            H2(\"Test Components\", cls=combine_classes(font_size._2xl, m.b(4))),\n            P(\"This is a test page for daisyUI components.\", cls=str(text_dui.base_content)),\n            Div(\n                # Button colors\n                Button(\"Neutral\", cls=combine_classes(btn, btn_colors.neutral)),                    \n                Button(\"Primary\", cls=combine_classes(btn, btn_colors.primary)),                    \n                Button(\"Secondary\", cls=combine_classes(btn, btn_colors.secondary)),                    \n                Button(\"Accent\", cls=combine_classes(btn, btn_colors.accent)),                    \n                Button(\"Info\", cls=combine_classes(btn, btn_colors.info)),                    \n                Button(\"Success\", cls=combine_classes(btn, btn_colors.success)),                    \n                Button(\"Warning\", cls=combine_classes(btn, btn_colors.warning)), \n                Button(\"Error\", cls=combine_classes(btn, btn_colors.error)),\n                # Soft buttons\n                Button(\"Default\", cls=combine_classes(btn, btn_styles.soft)),                    \n                Button(\"Primary\", cls=combine_classes(btn, btn_styles.soft, btn_colors.primary)),                        \n                # Outline buttons\n                Button(\"Default\", cls=combine_classes(btn, btn_styles.outline)),                    \n                Button(\"Primary\", cls=combine_classes(btn, btn_styles.outline, btn_colors.primary)),                        \n                # Dash buttons\n                Button(\"Default\", cls=combine_classes(btn, btn_styles.dash)),                    \n                Button(\"Primary\", cls=combine_classes(btn, btn_styles.dash, btn_colors.primary)),                        \n                cls=combine_classes(flex_display, gap(2), flex_wrap.wrap)\n            )\n        ), \n        use_container=True,\n        custom_theme_names=custom_theme_names\n    )\n\n\n# Start the server\nserver = start_test_server(app)\nHTMX()\n\n\n\n\n\n \n\n\n\n# Stop the server when done\nserver.stop()",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#custom-javascript-support",
    "href": "core/testing.html#custom-javascript-support",
    "title": "testing",
    "section": "Custom JavaScript Support",
    "text": "Custom JavaScript Support\nYou can include custom JavaScript files and inline scripts in your test app:\n\n# Create a test app with custom JavaScript\n\nfrom cjm_fasthtml_tailwind.core.base import combine_classes\nfrom cjm_fasthtml_tailwind.utilities.backgrounds import bg_linear\nfrom cjm_fasthtml_tailwind.utilities.layout import display_tw\nfrom cjm_fasthtml_tailwind.utilities.effects import shadow\nfrom cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex, justify, items, flex_display\nfrom cjm_fasthtml_tailwind.utilities.sizing import container\nfrom cjm_fasthtml_tailwind.utilities.spacing import m, p\nfrom cjm_fasthtml_tailwind.utilities.typography import font_size, font_weight, font_family, text_color\nfrom cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui\nfrom cjm_fasthtml_daisyui.utilities.semantic_gradients import from_dui, to_dui\nfrom cjm_fasthtml_daisyui.components.data_display.card import card, card_title\nfrom cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors, btn_sizes\nfrom cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors\n\n\nfrom cjm_fasthtml_daisyui.core.resources import create_js_script\n\n# Create inline custom JavaScript that adds interactivity\ncustom_js_inline = Script(\"\"\"\n// Custom JavaScript to add click counter functionality\ndocument.addEventListener('DOMContentLoaded', function() {\n    let clickCount = 0;\n    const counterElement = document.getElementById('click-counter');\n    const resetButton = document.getElementById('reset-counter');\n    \n    // Add click listener to all buttons with 'count-click' class\n    document.querySelectorAll('.count-click').forEach(button =&gt; {\n        button.addEventListener('click', function() {\n            clickCount++;\n            if (counterElement) {\n                counterElement.textContent = clickCount;\n                \n                // Add visual feedback\n                counterElement.classList.add('text-primary', 'font-bold');\n                setTimeout(() =&gt; {\n                    counterElement.classList.remove('text-primary');\n                }, 300);\n            }\n        });\n    });\n    \n    // Reset counter functionality\n    if (resetButton) {\n        resetButton.addEventListener('click', function() {\n            clickCount = 0;\n            if (counterElement) {\n                counterElement.textContent = clickCount;\n            }\n        });\n    }\n    \n    // Log to console to verify script is loaded\n    console.log('Custom JavaScript loaded successfully!');\n});\n\"\"\")\n\n# Create a custom external JavaScript reference (example using a CDN library)\n# In this case, we'll use confetti for visual effects\nconfetti_js = create_js_script(\n    src=\"https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js\",\n    defer=True\n)\n\n# Create app with custom JavaScript\napp, rt = create_test_app(\n    theme=DaisyUITheme.CUPCAKE,\n    custom_js=[confetti_js, custom_js_inline],\n)\n\n# Create a test page that uses the custom JavaScript\n@rt\ndef index():\n    return create_test_page(\n        \"Custom JavaScript Test\",\n        Div(\n            # Info card\n            Div(\n                H2(\"JavaScript Integration\", cls=str(card_title)),\n                P(\"This example demonstrates custom JavaScript support in test apps.\"),\n                P(\"Click the buttons below to see the click counter in action!\"),\n                Div(\n                    \"Total clicks: \",\n                    Span(\"0\", id=\"click-counter\", cls=combine_classes(font_size._2xl, font_weight.bold)),\n                    cls=combine_classes(font_size.lg, m.t(4))\n                ),\n                cls=combine_classes(card, bg_dui.base_200, shadow.xl, p(6), m.b(4))\n            ),\n            \n            # Interactive buttons\n            Div(\n                H3(\"Click Counter Demo\", cls=combine_classes(font_size.xl, font_weight.bold, m.b(4))),\n                Div(\n                    Button(\"Click Me!\", cls=combine_classes(btn, btn_colors.primary, \"count-click\")),\n                    Button(\"Me Too!\", cls=combine_classes(btn, btn_colors.secondary, \"count-click\")),\n                    Button(\"And Me!\", cls=combine_classes(btn, btn_colors.accent, \"count-click\")),\n                    Button(\"Reset Counter\", id=\"reset-counter\", cls=combine_classes(btn, btn_colors.neutral)),\n                    cls=combine_classes(space.x(2))\n                ),\n                cls=combine_classes(m.b(6))\n            ),\n            \n            # Confetti button\n            Div(\n                H3(\"Visual Effects Demo\", cls=combine_classes(font_size.xl, font_weight.bold, m.b(4))),\n                P(\"Using an external JavaScript library (canvas-confetti):\"),\n                Button(\n                    \"🎉 Celebrate!\",\n                    cls=combine_classes(btn, btn_sizes.lg, btn_colors.primary),\n                    onclick=\"confetti({particleCount: 100, spread: 70, origin: { y: 0.6 }})\"\n                ),\n                cls=combine_classes(m.b(6))\n            ),\n            \n            # Console message\n            Div(\n                P(\"💡 Open your browser's developer console to see the custom JavaScript log message.\"),\n                cls=combine_classes(alert, alert_colors.info, m.t(4))\n            )\n        )\n    )\n\n# Start the server\nserver = start_test_server(app, port=8000)\nHTMX()\n\n\n\n\n\n \n\n\n\n# Stop the server when done\nserver.stop()",
    "crumbs": [
      "core",
      "testing"
    ]
  },
  {
    "objectID": "core/testing.html#export",
    "href": "core/testing.html#export",
    "title": "testing",
    "section": "Export",
    "text": "Export",
    "crumbs": [
      "core",
      "testing"
    ]
  }
]